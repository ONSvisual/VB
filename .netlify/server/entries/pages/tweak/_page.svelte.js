import { c as create_ssr_component, a as subscribe, b as add_attribute, h as add_styles, f as each, d as set_store_value, e as escape } from "../../../chunks/ssr.js";
import { liveQuery } from "dexie";
import { d as db } from "../../../chunks/db.js";
/* empty css                                                        */
import { n as now } from "../../../chunks/currentChoices.js";
const css$1 = {
  code: `@import '../global.css';.left.svelte-h9jftl{height:calc(100vh - 100px) !important;width:50vw;position:absolute;margin-top:80px;left:0
 	}.right.svelte-h9jftl{margin-top:80px;position:absolute;top:0;right:0;height:calc(100vh - 100px) !important;overflow-y:scroll;overflow-x:hidden}.chartBox.svelte-h9jftl{background-color:white}input[type='number'].svelte-h9jftl{width:50px;margin-right:30px}.full.svelte-h9jftl{width:95%;padding:5px}select.svelte-h9jftl{-webkit-appearance:none;-moz-appearance:none;appearance:none;font-family:inherit;font-size:inherit;-webkit-padding:0.4em 0;padding:0.4em;margin:0 0 0.5em 0;box-sizing:border-box;border:2px solid #5a5a5a;border-radius:2px;font-weight:bolder;max-width:99%;background:transparent;background-image:url("data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='8 4 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l10 10 10-10z'/><path d='M0 0h24v24H0z' fill='none'/></svg>");background-repeat:no-repeat;background-position-x:100%;background-position-y:5px}h3.svelte-h9jftl{margin-bottom:5px;margin-top:10px}h4.svelte-h9jftl{margin-bottom:5px;margin-top:10px;color:#999797}hr.svelte-h9jftl{width:90%;text-align:left;margin-left:5%;height:5px;background:rgb(252, 237, 249);border:none}label.svelte-h9jftl{margin-left:15px}.left, .right{padding:20px}.highlighted{outline:solid}`,
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- chartList.svelte -->\\n<script>\\n\\timport { liveQuery } from \\"dexie\\";\\n\\timport { db } from \\"../db\\";\\n\\timport FigureAdder from \\"../FigureAdder.svelte\\";\\n\\timport {onMount} from \\"svelte\\"\\n\\timport {now} from \\"../currentChoices\\"\\n\\timport { HSplitPane } from 'svelte-split-pane'\\n\\tlet config, script, chartCss, chosenName, currentProject, figureName, loaded=0\\n\\t  \\n\\tasync function setupDB(projectName, figureName, chartName, chartScripts) {\\n\\t\\ttry {\\n\\t\\t\\tconst id = await db.Projects.add({\\n\\t\\t\\t  projectName: projectName,\\n\\t\\t\\t  figures: []\\n\\t\\t  });\\n\\t\\t  status = \`\${projectName} successfully created in DB\`;\\n\\t\\t  // Reset form:\\n\\t\\t  // projectName=\\"\\";\\n\\t\\t  // figureName=\\"\\";\\n\\t\\t  // chartName = \\"\\";\\n\\t\\t  // chartScripts = \\"\\";\\n\\t\\t} catch (error) {\\n\\t\\t  status = \`Failed to add \${figureName}: \${error}\`;\\n\\t\\t}\\n\\t\\tconsole.log(\\"setupDB\\",status)\\n\\t  }\\n  \\n\\t  async function addFigureToProject(projectName, figureName, chartName, chartScripts) {\\n\\t\\ttry {\\n\\t\\t\\tconst id = await db.Projects.where('projectName').equals(projectName).modify(x =>\\n\\t\\t   x.figures.push({figureName:figureName, chartName:chartName, chartScripts:chartScripts}) );\\n\\t\\t\\tstatus = \`\${chartName} successfully added to \${projectName} as \${figureName}\`;\\n\\t\\t  // Reset form:\\n\\t\\t  // projectName=\\"\\";\\n\\t\\t  // figureName=\\"\\";\\n\\t\\t  // chartName = \\"\\";\\n\\t\\t  // chartScripts = \\"\\";\\n\\t\\t} catch (error) {\\n\\t\\t  status = \`Failed to add \${figureName}: \${error}\`;\\n\\t\\t}\\n\\t\\tconsole.log(\\"addFigureToProject\\",status)\\n\\t  }\\n  \\n\\t\\n  \\n\\t// $: theScript = \`<style type=\\"text/css\\" id=\\"injectedStyle\\"> \${chartCss} <\\\\/style>\`; \\n  \\n\\t$: charts = liveQuery(async () => {\\n\\t  const charts = await db.Templates.toArray();\\n\\t  return charts;\\n\\t});\\n  \\n\\t$: projects = liveQuery(async () => {\\n\\t  const projects = await db.Projects.toArray();\\n\\t  return projects;\\n\\t});\\n  \\n  \\n\\t//$: currentProject = (sessionStorage && sessionStorage.project) ? JSON.parse(sessionStorage.project) : {}\\n  \\n\\tlet loadProject=(pr)=>{\\n\\t  console.log (\\"pr\\", pr)\\n  \\n\\t  if (pr && pr.figures) $now.currentChart = pr.figures[0]\\n\\t  if ($now.currentChart) populate(\\n\\t\\t$now.currentChart.chartName,\\n\\t\\t$now.currentChart.chartScripts.config,\\n\\t\\t$now.currentChart.chartScripts.script,\\n\\t\\t$now.currentChart.chartScripts.data,\\n\\t\\t$now.currentChart.chartScripts.css,\\n\\t\\t$now.currentChart.chartScripts.comparison\\n\\t  );\\n\\t  loaded=1\\n\\t}\\n  \\n   //$: loadProject($now.currentProject)\\n  \\n\\tfunction populate(\\n\\t  chartName,\\n\\t  conf,\\n\\t  scr,\\n\\t  data,\\n\\t  css,\\n\\t  comparison,\\n\\t  graphic_data,\\n\\t  size,\\n\\t  namesUnique,\\n\\t  load,\\n\\t  categoriesUnique,\\n\\t  groups,\\n\\t  legendItem,\\n\\t  svg,\\n\\t  calculatedChartWidth,\\n\\t  i,\\n\\t  xDomain,\\n\\t  divs,\\n\\t  svgs,\\n\\t  fullwidth,\\n\\t  chart_width,\\n\\t  yAxis,\\n\\t  uniqueOptions,\\n\\t  dateformat,\\n\\t  dateparse,\\n\\t  sliderDomain,\\n\\t  sliderSimple,\\n\\t  t,\\n\\t  keys,\\n\\t  grouped_data,\\n\\t  var_group,\\n\\t  var_group2,\\n\\t  var_group3,\\n\\t  columnNames,\\n\\t  numbers,\\n\\t  dataPivoted,\\n\\t  breaks,\\n\\t  colour,\\n\\t  key,\\n\\t  legendx,\\n\\t  popTotal,\\n\\t  graphic_data_new,\\n\\t  maxPercentage,\\n\\t  height,\\n\\t  xLeft,\\n\\t  xRight,\\n\\t  y,\\n\\t  widths,\\n\\t  dataForLegend,\\n\\t  titleDivs,\\n\\t  formatNo,\\n\\t  x,\\n\\t  groupedData,\\n\\t  xcategories,\\n\\t  plots,\\n\\t  chart,\\n\\t  headers,\\n\\t  rows,\\n\\t  splitBar,\\n\\t  splitBarInner,\\n\\t  finalrow\\n\\t) {\\n\\t  if ( document.querySelector(\\"#accessibleSummary\\")){\\n\\t\\tdocument.querySelector(\\"#accessibleSummary\\").innerHTML = \\"\\";\\n\\t\\tdocument.querySelector(\\"#select\\").innerHTML = \\"\\";\\n\\t\\tdocument.querySelector(\\"#legend\\").innerHTML = \\"\\";\\n\\t\\tdocument.querySelector(\\"#graphic\\").innerHTML = \\"\\";\\n\\t\\tdocument.querySelector(\\"#source\\").innerHTML = \\"\\";\\n  \\n\\t  let csvString = data;\\n\\t  sessionStorage.data = csvString\\n\\t\\t.replace(/(?:\\\\r\\\\n|\\\\r|\\\\n)/g, \\"\\\\\\\\n\\")\\n\\t\\t.slice(0, -2);\\n  \\n\\t  sessionStorage.config = conf; //.replace(\\"data.csv\\",encodeURIComponent(csvString))\\n\\t  config = eval(sessionStorage.config);\\n\\t  //console.log(JSON.stringify(config));\\n  \\n\\t  sessionStorage.script =\\n\\t\\tscr.replace(\\n\\t\\t  \\"d3.csv(config.essential.graphic_data_url\\",\\n\\t\\t  \\"load = (config) => Promise.resolve(d3.csvParse(\`\\" +\\n\\t\\t\\tsessionStorage.data +\\n\\t\\t\\t\\"\`)\\"\\n\\t\\t) +\\n\\t\\t\\" load(\\" +\\n\\t\\tJSON.stringify(config) +\\n\\t\\t\\")\\";\\n\\t  //console.log(\\"script\\", sessionStorage.script);\\n\\t  script = eval(sessionStorage.script);\\n\\t  chartCss = css;\\n\\t  return config;\\n\\t}\\n\\t}\\n  \\n\\tif($now.currentProject) $now.currentChart=$now.currentProject.figures[0]\\n  \\n\\t$: $now.currentChart &&\\n\\t  populate(\\n\\t\\t$now.currentChart.chartName,\\n\\t\\t$now.currentChart.chartScripts.config,\\n\\t\\t$now.currentChart.chartScripts.script,\\n\\t\\t$now.currentChart.chartScripts.data,\\n\\t\\t$now.currentChart.chartScripts.css,\\n\\t\\t$now.currentChart.chartScripts.comparison\\n\\t  );\\n\\t\\n\\t  onMount(()=>loadProject($now.currentProject))\\n\\n\\tlet saveChart = () => 1;\\n\\t//$: console.log(\\"chosenName\\", chosenName);\\n  <\/script>\\n  \\n  <svelte:head>\\n\\t{#if $now.currentChart}\\n\\t{@html \`<style type=\\"text/css\\" id=\\"injectedStyle\\"> \${$now.currentChart.chartScripts.css} <\\\\/style>\`}\\n\\t{/if}\\n  </svelte:head>\\n  {#if 1}\\n\\n\\n\\n    <div class=\\"left\\">\\n      <!--This is what D3 renders-->\\n<div class=\\"chartBox\\">\\n\\t<h5 id=\\"accessibleSummary\\" class=\\"visuallyhidden\\">.</h5>\\n\\t<div id=\\"select\\"></div>\\n\\t<div aria-hidden=\\"true\\" id=\\"legend\\"></div>\\n\\t<div id=\\"graphic\\" aria-hidden=\\"true\\"></div>\\n\\t<h5 id=\\"source\\">.</h5>\\n  </div>\\n  <!--End of what D3 renders-->\\n    </div>\\n\\n    <div class=\\"right\\">\\n      <b color=\\"#0f8243\\">\\n        <a\\n          href=\\"https://docs.google.com/spreadsheets/d/1qlDgJIJCdumMRwLmI1_KF4yAKwtDoHmToYKEwZMq_zU/edit?usp=sharing\\"\\n          rel=\\"noreferrer\\"\\n          target=\\"_blank\\">\\n          Please use this link to share feedback (opens in a new tab)\\n        </a>\\n      </b>\\n\\n{#if $now.currentChart}\\n  {#if $now.currentChart.config.essential}\\n  <a\\n\\thref={$now.currentChart.config.essential.graphic_data_url}\\n\\ttarget=\\"_blank\\"\\n\\trel=\\"noreferrer\\"\\n\\tdownload=\\"data.csv\\">\\n\\t<h3 style:color=\\"slategrey\\">data source</h3>\\n  </a>\\n  <input\\n\\ttype=\\"url\\"\\n\\tclass=\\"full\\"\\n\\ton:change={(e) => {\\n\\t  $now.currentChart.config.essential.graphic_data_url = e.target.value\\n\\t  config = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t  \\n\\t}}\\n\\tvalue={$now.currentChart.config.essential.graphic_data_url} />\\n \\n{/if}\\n\\n{#each Object.keys($now.currentChart.config) as main, i}\\n  {#if main != 'elements' && main !== 'chart_build'}\\n\\t<h1 style:color=\\"#666\\">config: {main}</h1>\\n\\t{#each Object.keys($now.currentChart.config[main]) as sub, ii}\\n\\t  {#if sub !== 'graphic_data_url'}\\n\\t\\t{#if main == 'css'}\\n\\t\\t  <h3\\n\\t\\t\\tstyle:color=\\"slategrey\\"\\n\\t\\t\\ton:mouseover={document\\n\\t\\t\\t  .querySelectorAll(sub)\\n\\t\\t\\t  .forEach((element) => {\\n\\t\\t\\t\\telement.classList.add('highlighted')\\n\\t\\t\\t  })}\\n\\t\\t\\ton:mouseout={document\\n\\t\\t\\t  .querySelectorAll(sub)\\n\\t\\t\\t  .forEach((element) => {\\n\\t\\t\\t\\telement.classList.remove('highlighted')\\n\\t\\t\\t  })}>\\n\\t\\t\\t{sub}\\n\\t\\t  </h3>\\n\\t\\t{:else}\\n\\t\\t  <h3 style:color=\\"slategrey\\">{sub}</h3>\\n\\t\\t{/if}\\n\\n\\t\\t{#if $now.currentChart.config.chart_build}\\n\\t\\t  {#if $now.currentChart.config.chart_build[sub] == 'number'}\\n\\t\\t\\t<input\\n\\t\\t\\t  type=\\"number\\"\\n\\t\\t\\t  bind:value={$now.currentChart.config[main][sub]}\\n\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t$now.currentChart.config[main][sub] = e.target.value\\n\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t\\n\\t\\t\\t  }} />\\n\\t\\t  {:else if $now.currentChart.config.chart_build[sub] == 'radio'}\\n\\t\\t\\t<div>\\n\\t\\t\\t  {#each $now.currentChart.config.chart_build[sub + '_options'] as option}\\n\\t\\t\\t\\t<label for={option}>{option}</label>\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t  type=\\"radio\\"\\n\\t\\t\\t\\t  name={$now.currentChart.config.chart_build[sub]}\\n\\t\\t\\t\\t  id={option}\\n\\t\\t\\t\\t  bind:value={option}\\n\\t\\t\\t\\t  checked={option == $now.currentChart.config[main][sub]}\\n\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t$now.currentChart.config[main][sub] = e.target.value\\n\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t  }} />\\n\\t\\t\\t  {/each}\\n\\t\\t\\t</div>\\n\\t\\t  {:else if $now.currentChart.config.chart_build[sub] == 'colour'}\\n\\t\\t\\t<div>\\n\\n\\t\\t\\t  {#each $now.currentChart.config.chart_build[sub + '_options'] as option, i}\\n\\t\\t\\t\\t<label for={option}>{option}:</label>\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t  type=\\"color\\"\\n\\t\\t\\t\\t  name={$now.currentChart.config.chart_build[sub][i]}\\n\\t\\t\\t\\t  id={option}\\n\\t\\t\\t\\t  bind:value={option}\\n\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][i] = e.target.value\\n\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t  }} />\\n\\t\\t\\t  {/each}\\n\\t\\t\\t</div>\\n\\t\\t  {:else if $now.currentChart.config.chart_build[sub] == 'textarea'}\\n\\t\\t\\t<textarea\\n\\t\\t\\t  class=\\"full\\"\\n\\t\\t\\t  type=\\"text\\"\\n\\t\\t\\t  name={$now.currentChart.config.chart_build[sub]}\\n\\t\\t\\t  id={$now.currentChart.config.chart_build[sub]}\\n\\t\\t\\t  bind:value={$now.currentChart.config[main][sub]}\\n\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t$now.currentChart.config[main][sub] = e.target.value\\n\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t\\n\\t\\t\\t  }} />\\n\\t\\t  {:else if $now.currentChart.config.chart_build[sub] == 'dThreeFormat'}\\n\\t\\t\\t<select\\n\\t\\t\\t  class=\\"full\\"\\n\\t\\t\\t  bind:value={$now.currentChart.config[main][sub]}\\n\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t$now.currentChart.config[main][sub] = e.target.value\\n\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t\\n\\t\\t\\t  }}>\\n\\t\\t\\t  {#each d3Format as option, i}\\n\\t\\t\\t\\t<option value={option[1]}>\\n\\t\\t\\t\\t  {option[0]} ({option[1]})\\n\\t\\t\\t\\t</option>\\n\\t\\t\\t  {/each}\\n\\t\\t\\t</select>\\n\\t\\t  {:else if typeof $now.currentChart.config[main][sub] == 'object'}\\n\\t\\t\\t{#each Object.keys($now.currentChart.config[main][sub]) as subsub}\\n\\t\\t\\t  {#if typeof $now.currentChart.config[main][sub][subsub] == 'object'}\\n\\t\\t\\t\\t<h4>Object {subsub}</h4>\\n\\t\\t\\t\\t<div>\\n\\t\\t\\t\\t  {#each Object.keys($now.currentChart.config[main][sub][subsub]) as subsubsub}\\n\\t\\t\\t\\t\\t<label for={'field_' + subsubsub} class=\\"label\\">\\n\\t\\t\\t\\t\\t  {subsubsub}:\\n\\t\\t\\t\\t\\t</label>\\n\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t  type=\\"number\\"\\n\\t\\t\\t\\t\\t  class=\\"full\\"\\n\\t\\t\\t\\t\\t  id=\\"field_{subsubsub}\\"\\n\\t\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub][subsubsub] = e.target.value\\n\\t\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub][subsubsub]} />\\n\\t\\t\\t\\t  {/each}\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t  {:else if main==\\"css\\"}\\n\\t\\t\\t\\t<label for={'field_' + subsub} class=\\"label\\">\\n\\t\\t\\t\\t  {subsub}:\\n\\t\\t\\t\\t</label>\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t  type=\\"text\\"\\n\\t\\t\\t\\t  class=\\"full\\"\\n\\t\\t\\t\\t  id=\\"field_css_{sub}_{subsub}\\"\\n\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub] = e.target.value\\n\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t\\t//NEED TO ADD NEW CSS * ** *** ****\\n\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub]} />\\n\\t\\t\\t  {/if}\\n\\t\\t\\t{/each}\\n\\t\\t  {:else}\\n\\t\\t\\t<textarea\\n\\t\\t\\t  class=\\"full\\"\\n\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t$now.currentChart.config[main][sub] = e.target.value\\n\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t\\n\\t\\t\\t  }}\\n\\t\\t\\t  value={$now.currentChart.config[main][sub]} />\\n\\t\\t  {/if}\\n\\t\\t{:else if typeof $now.currentChart.config[main][sub] == 'object'}\\n\\t\\t  {#each Object.keys($now.currentChart.config[main][sub]) as subsub}\\n\\t\\t\\t{#if typeof $now.currentChart.config[main][sub][subsub] == 'object'}\\n\\t\\t\\t  <h4>{subsub}</h4>\\n\\t\\t\\t  <div>\\n\\t\\t\\t\\t{#each Object.keys($now.currentChart.config[main][sub][subsub]) as subsubsub}\\n\\t\\t\\t\\t  {#if typeof $now.currentChart.config[main][sub][subsub][subsubsub] == 'string' && $now.currentChart.config[main][sub][subsub][subsubsub][0] == '#'}\\n\\t\\t\\t\\t\\t<label for=\\"colour_{subsubsub}\\">{subsubsub}:</label>\\n\\n\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t  type=\\"color\\"\\n\\t\\t\\t\\t\\t  id=\\"colour_{subsubsub}\\"\\n\\t\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub][subsubsub] = e.target.value\\n\\t\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\n\\t\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub][subsubsub]} />\\n\\t\\t\\t\\t  {:else if typeof $now.currentChart.config[main][sub][subsub][subsubsub] == 'string'}\\n\\t\\t\\t\\t\\t<label for=\\"text_{subsubsub}\\">{subsubsub}:</label>\\n\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t  type=\\"number\\"\\n\\t\\t\\t\\t\\t  id=\\"text_{subsubsub}\\"\\n\\t\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub][subsubsub] = e.target.value\\n\\t\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\n\\t\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub][subsubsub]} />\\n\\t\\t\\t\\t  {:else if !isNaN($now.currentChart.config[main][sub][subsub][subsubsub])}\\n\\t\\t\\t\\t\\t<label for=\\"number_{subsubsub}\\">{subsubsub}:</label>\\n\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t  type=\\"number\\"\\n\\t\\t\\t\\t\\t  id=\\"number_{subsubsub}\\"\\n\\t\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub][subsubsub] = e.target.value\\n\\t\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub][subsubsub]} />\\n\\t\\t\\t\\t  {:else}\\n\\t\\t\\t\\t\\t<label for={'field_' + subsubsub} class=\\"label\\">\\n\\t\\t\\t\\t\\t  {subsub}:\\n\\t\\t\\t\\t\\t</label>\\n\\t\\t\\t\\t\\t<input\\n\\t\\t\\t\\t\\t  type=\\"number\\"\\n\\t\\t\\t\\t\\t  id=\\"field_{subsubsub}\\"\\n\\t\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub][subsubsub] = e.target.value\\n\\t\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub][subsubsub]} />\\n\\t\\t\\t\\t  {/if}\\n\\t\\t\\t\\t{/each}\\n\\t\\t\\t  </div>\\n\\t\\t\\t{:else}\\n\\t\\t\\t  <label for={'input_' + subsub} class=\\"label\\">\\n\\t\\t\\t\\t{subsub}:\\n\\t\\t\\t  </label>\\n\\t\\t\\t  {#if typeof $now.currentChart.config[main][sub][subsub] == 'string' && $now.currentChart.config[main][sub][subsub][0] == '#'}\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t  type=\\"color\\"\\n\\t\\t\\t\\t  id=\\"input_{subsub}\\"\\n\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub] = e.target.value\\n\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\n\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub]} />\\n\\t\\t\\t  {:else if typeof $now.currentChart.config[main][sub][subsub] == 'string'}\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t  type=\\"text\\"\\n\\t\\t\\t\\t  id=\\"input_{subsub}\\"\\n\\t\\t\\t\\t  class=\\"full\\"\\n\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub] = e.target.value\\n\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\n\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub]} />\\n\\t\\t\\t  {:else if !isNaN($now.currentChart.config[main][sub][subsub])}\\n\\t\\t\\t\\t<input\\n\\t\\t\\t\\t  type=\\"number\\"\\n\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub] = e.target.value\\n\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub]} />\\n\\t\\t\\t  {:else}\\n\\t\\t\\t\\t<textarea\\n\\t\\t\\t\\t  class=\\"full\\"\\n\\t\\t\\t\\t  on:change={(e) => {\\n\\t\\t\\t\\t\\t$now.currentChart.config[main][sub][subsub] = e.target.value\\n\\t\\t\\t\\t\\tconfig = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t\\t  }}\\n\\t\\t\\t\\t  value={$now.currentChart.config[main][sub][subsub]} />\\n\\t\\t\\t  {/if}\\n\\t\\t\\t{/if}\\n\\t\\t  {/each}\\n\\t\\t{:else}\\n\\t\\t  <textarea\\n\\t\\t\\tclass=\\"full\\"\\n\\t\\t\\ton:change={(e) => {\\n\\t\\t\\t  $now.currentChart.config[main][sub] = e.target.value\\n\\t\\t\\t  config = ($now.currentChart.config)\\n\\t  $now.currentChart.chartScripts.config = \\"config = \\" + JSON.stringify(config)\\nconsole.log(\\"config\\",config)\\n\\t\\t\\t}}\\n\\t\\t\\tvalue={$now.currentChart.config[main][sub]} />\\n\\t\\t{/if}\\n\\t  {/if}\\n\\t  <hr />\\n\\t{/each}\\n  {/if}\\n{/each}\\n{/if}\\n\\t\\t</div>\\n\\n{/if}\\n<div class=\\"highlighted\\" style=\\"width:0; height:0;\\" />\\n  \\n  <style>\\n\\t@import '../global.css'; \\n\\t.left{\\n    height: calc(100vh - 100px) !important;\\n\\twidth:50vw;\\n\\tposition: absolute;\\n\\tmargin-top: 80px;\\n\\tleft:0\\n \\t}\\n\\n\\t.right{\\n\\tmargin-top: 80px;\\n\\tposition: absolute;\\n    top: 0;\\n    right: 0;\\n    height: calc(100vh - 100px) !important;\\n    overflow-y: scroll;\\n    overflow-x: hidden;\\n\\t}\\n\\t\\n\\n\\tth{\\n\\t  text-align: left;\\n\\t}\\n\\ttd,th{padding:0px 5px 0px 10px}\\n\\ttable{border:1px solid grey}\\n\\t.outer{\\n\\t  margin: 0px auto;\\n\\t  max-width: 100vw;\\n\\t}\\n  .controls{\\n\\t/* background-color:red */\\n  }\\n  .chartBox{\\n\\tbackground-color: white;\\n  }\\n\\n  .controlTable{\\n\\tpadding: 5px;\\n  }\\n  input[type='number'] {\\n    width: 50px;\\n    margin-right: 30px;\\n  }\\n  .full {\\n    width: 95%;\\n    padding: 5px;\\n  }\\n\\n\\n\\n  .tablewrapper {\\n    height: 150px;\\n    overflow: scroll;\\n    border: 1px solid black;\\n  }\\n\\n  thead tr {\\n    background-color: #206095;\\n    color: #ffffff;\\n    text-align: middle;\\n  }\\n  th,\\n  td {\\n    padding: 5px;\\n  }\\n\\n  tbody tr {\\n    border-bottom: 1px solid #dddddd;\\n  }\\n\\n  tbody tr:nth-of-type(even) {\\n    background-color: #f3f3f3;\\n  }\\n\\n  tbody tr:last-of-type {\\n    border-bottom: 2px solid #206095;\\n  }\\n\\n  select {\\n    -webkit-appearance: none;\\n    -moz-appearance: none;\\n    appearance: none;\\n    font-family: inherit;\\n    font-size: inherit;\\n    -webkit-padding: 0.4em 0;\\n    padding: 0.4em;\\n    margin: 0 0 0.5em 0;\\n    box-sizing: border-box;\\n    border: 2px solid #5a5a5a;\\n    border-radius: 2px;\\n    font-weight: bolder;\\n    max-width: 99%;\\n    background: transparent;\\n    background-image: url(\\"data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='8 4 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l10 10 10-10z'/><path d='M0 0h24v24H0z' fill='none'/></svg>\\");\\n    background-repeat: no-repeat;\\n    background-position-x: 100%;\\n    background-position-y: 5px;\\n  }\\n  h3 {\\n    margin-bottom: 5px;\\n    margin-top: 10px;\\n  }\\n  h4 {\\n    margin-bottom: 5px;\\n    margin-top: 10px;\\n    color: #999797;\\n  }\\n  hr {\\n    width: 90%;\\n    text-align: left;\\n    margin-left: 5%;\\n    height: 5px;\\n    background: rgb(252, 237, 249);\\n    border: none;\\n  }\\n  label {\\n    margin-left: 15px;\\n  }\\n  .css {\\n    width: 100%;\\n    height: 300px;\\n  }\\n  :global(.left, .right) {\\n    padding: 20px;\\n  }\\n  :global(.highlighted) {\\n    outline: solid;\\n  }\\n  </style>\\n  "],"names":[],"mappings":"AA0hBC,QAAQ,eAAe,CACvB,mBAAK,CACF,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CACzC,MAAM,IAAI,CACV,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAC;AACP,EAAE,CAED,oBAAM,CACN,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,QAAQ,CACf,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CACtC,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,MACf,CAeC,uBAAS,CACV,gBAAgB,CAAE,KACjB,CAKA,KAAK,CAAC,IAAI,CAAC,QAAQ,eAAE,CACnB,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,IAChB,CACA,mBAAM,CACJ,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,GACX,CAgCA,oBAAO,CACL,kBAAkB,CAAE,IAAI,CACxB,eAAe,CAAE,IAAI,CACrB,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,OAAO,CACpB,SAAS,CAAE,OAAO,CAClB,eAAe,CAAE,KAAK,CAAC,CAAC,CACxB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CACnB,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,WAAW,CACvB,gBAAgB,CAAE,wMAAwM,CAC1N,iBAAiB,CAAE,SAAS,CAC5B,qBAAqB,CAAE,IAAI,CAC3B,qBAAqB,CAAE,GACzB,CACA,gBAAG,CACD,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IACd,CACA,gBAAG,CACD,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,OACT,CACA,gBAAG,CACD,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,EAAE,CACf,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC9B,MAAM,CAAE,IACV,CACA,mBAAM,CACJ,WAAW,CAAE,IACf,CAKQ,aAAe,CACrB,OAAO,CAAE,IACX,CACQ,YAAc,CACpB,OAAO,CAAE,KACX"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $now, $$unsubscribe_now;
  $$unsubscribe_now = subscribe(now, (value) => $now = value);
  let config;
  function populate(chartName, conf, scr, data, css, comparison, graphic_data, size, namesUnique, load, categoriesUnique, groups, legendItem, svg, calculatedChartWidth, i, xDomain, divs, svgs, fullwidth, chart_width, yAxis, uniqueOptions, dateformat, dateparse, sliderDomain, sliderSimple, t, keys, grouped_data, var_group, var_group2, var_group3, columnNames, numbers, dataPivoted, breaks, colour, key, legendx, popTotal, graphic_data_new, maxPercentage, height, xLeft, xRight, y, widths, dataForLegend, titleDivs, formatNo, x, groupedData, xcategories, plots, chart, headers, rows, splitBar, splitBarInner, finalrow) {
    if (document.querySelector("#accessibleSummary")) {
      document.querySelector("#accessibleSummary").innerHTML = "";
      document.querySelector("#select").innerHTML = "";
      document.querySelector("#legend").innerHTML = "";
      document.querySelector("#graphic").innerHTML = "";
      document.querySelector("#source").innerHTML = "";
      let csvString = data;
      sessionStorage.data = csvString.replace(/(?:\r\n|\r|\n)/g, "\\n").slice(0, -2);
      sessionStorage.config = conf;
      config = eval(sessionStorage.config);
      sessionStorage.script = scr.replace("d3.csv(config.essential.graphic_data_url", "load = (config) => Promise.resolve(d3.csvParse(`" + sessionStorage.data + "`)") + " load(" + JSON.stringify(config) + ")";
      eval(sessionStorage.script);
      return config;
    }
  }
  if ($now.currentProject)
    set_store_value(now, $now.currentChart = $now.currentProject.figures[0], $now);
  $$result.css.add(css$1);
  liveQuery(async () => {
    const charts = await db.Templates.toArray();
    return charts;
  });
  liveQuery(async () => {
    const projects = await db.Projects.toArray();
    return projects;
  });
  $now.currentChart && populate($now.currentChart.chartName, $now.currentChart.chartScripts.config, $now.currentChart.chartScripts.script, $now.currentChart.chartScripts.data, $now.currentChart.chartScripts.css, $now.currentChart.chartScripts.comparison);
  $$unsubscribe_now();
  return `  ${$$result.head += `<!-- HEAD_svelte-1opve51_START -->${$now.currentChart ? `<!-- HTML_TAG_START -->${`<style type="text/css" id="injectedStyle"> ${$now.currentChart.chartScripts.css} </style>`}<!-- HTML_TAG_END -->` : ``}<!-- HEAD_svelte-1opve51_END -->`, ""} ${`<div class="left svelte-h9jftl" data-svelte-h="svelte-nxfjwp"> <div class="chartBox svelte-h9jftl"><h5 id="accessibleSummary" class="visuallyhidden">.</h5> <div id="select"></div> <div aria-hidden="true" id="legend"></div> <div id="graphic" aria-hidden="true"></div> <h5 id="source">.</h5></div> </div> <div class="right svelte-h9jftl"><b color="#0f8243" data-svelte-h="svelte-v367sh"><a href="https://docs.google.com/spreadsheets/d/1qlDgJIJCdumMRwLmI1_KF4yAKwtDoHmToYKEwZMq_zU/edit?usp=sharing" rel="noreferrer" target="_blank">Please use this link to share feedback (opens in a new tab)</a></b> ${$now.currentChart ? `${$now.currentChart.config.essential ? `<a${add_attribute("href", $now.currentChart.config.essential.graphic_data_url, 0)} target="_blank" rel="noreferrer" download="data.csv"><h3 class="svelte-h9jftl"${add_styles({ "color": `slategrey` })} data-svelte-h="svelte-1qkjk44">data source</h3></a> <input type="url" class="full svelte-h9jftl"${add_attribute("value", $now.currentChart.config.essential.graphic_data_url, 0)}>` : ``} ${each(Object.keys($now.currentChart.config), (main, i2) => {
    return `${main != "elements" && main !== "chart_build" ? `<h1${add_styles({ "color": `#666` })}>config: ${escape(main)}</h1> ${each(Object.keys($now.currentChart.config[main]), (sub, ii) => {
      return `${sub !== "graphic_data_url" ? `${main == "css" ? `<h3 class="svelte-h9jftl"${add_styles({ "color": `slategrey` })}>${escape(sub)} </h3>` : `<h3 class="svelte-h9jftl"${add_styles({ "color": `slategrey` })}>${escape(sub)}</h3>`} ${$now.currentChart.config.chart_build ? `${$now.currentChart.config.chart_build[sub] == "number" ? `<input type="number" class="svelte-h9jftl"${add_attribute("value", $now.currentChart.config[main][sub], 0)}>` : `${$now.currentChart.config.chart_build[sub] == "radio" ? `<div>${each($now.currentChart.config.chart_build[sub + "_options"], (option) => {
        return `<label${add_attribute("for", option, 0)} class="svelte-h9jftl">${escape(option)}</label> <input type="radio"${add_attribute("name", $now.currentChart.config.chart_build[sub], 0)}${add_attribute("id", option, 0)} ${option == $now.currentChart.config[main][sub] ? "checked" : ""}${add_attribute("value", option, 0)}>`;
      })} </div>` : `${$now.currentChart.config.chart_build[sub] == "colour" ? `<div>${each($now.currentChart.config.chart_build[sub + "_options"], (option, i3) => {
        return `<label${add_attribute("for", option, 0)} class="svelte-h9jftl">${escape(option)}:</label> <input type="color"${add_attribute("name", $now.currentChart.config.chart_build[sub][i3], 0)}${add_attribute("id", option, 0)}${add_attribute("value", option, 0)}>`;
      })} </div>` : `${$now.currentChart.config.chart_build[sub] == "textarea" ? `<textarea class="full svelte-h9jftl" type="text"${add_attribute("name", $now.currentChart.config.chart_build[sub], 0)}${add_attribute("id", $now.currentChart.config.chart_build[sub], 0)}>${escape($now.currentChart.config[main][sub] || "")}</textarea>` : `${$now.currentChart.config.chart_build[sub] == "dThreeFormat" ? `<select class="full svelte-h9jftl">${each(d3Format, (option, i3) => {
        return `<option${add_attribute("value", option[1], 0)}>${escape(option[0])} (${escape(option[1])})
				</option>`;
      })}</select>` : `${typeof $now.currentChart.config[main][sub] == "object" ? `${each(Object.keys($now.currentChart.config[main][sub]), (subsub) => {
        return `${typeof $now.currentChart.config[main][sub][subsub] == "object" ? `<h4 class="svelte-h9jftl">Object ${escape(subsub)}</h4> <div>${each(Object.keys($now.currentChart.config[main][sub][subsub]), (subsubsub) => {
          return `<label${add_attribute("for", "field_" + subsubsub, 0)} class="label svelte-h9jftl">${escape(subsubsub)}:</label> <input type="number" class="full svelte-h9jftl" id="${"field_" + escape(subsubsub, true)}"${add_attribute("value", $now.currentChart.config[main][sub][subsub][subsubsub], 0)}>`;
        })} </div>` : `${main == "css" ? `<label${add_attribute("for", "field_" + subsub, 0)} class="label svelte-h9jftl">${escape(subsub)}:</label> <input type="text" class="full svelte-h9jftl" id="${"field_css_" + escape(sub, true) + "_" + escape(subsub, true)}"${add_attribute("value", $now.currentChart.config[main][sub][subsub], 0)}>` : ``}`}`;
      })}` : `<textarea class="full svelte-h9jftl">${escape($now.currentChart.config[main][sub], false)}</textarea>`}`}`}`}`}`}` : `${typeof $now.currentChart.config[main][sub] == "object" ? `${each(Object.keys($now.currentChart.config[main][sub]), (subsub) => {
        return `${typeof $now.currentChart.config[main][sub][subsub] == "object" ? `<h4 class="svelte-h9jftl">${escape(subsub)}</h4> <div>${each(Object.keys($now.currentChart.config[main][sub][subsub]), (subsubsub) => {
          return `${typeof $now.currentChart.config[main][sub][subsub][subsubsub] == "string" && $now.currentChart.config[main][sub][subsub][subsubsub][0] == "#" ? `<label for="${"colour_" + escape(subsubsub, true)}" class="svelte-h9jftl">${escape(subsubsub)}:</label> <input type="color" id="${"colour_" + escape(subsubsub, true)}"${add_attribute("value", $now.currentChart.config[main][sub][subsub][subsubsub], 0)}>` : `${typeof $now.currentChart.config[main][sub][subsub][subsubsub] == "string" ? `<label for="${"text_" + escape(subsubsub, true)}" class="svelte-h9jftl">${escape(subsubsub)}:</label> <input type="number" id="${"text_" + escape(subsubsub, true)}"${add_attribute("value", $now.currentChart.config[main][sub][subsub][subsubsub], 0)} class="svelte-h9jftl">` : `${!isNaN($now.currentChart.config[main][sub][subsub][subsubsub]) ? `<label for="${"number_" + escape(subsubsub, true)}" class="svelte-h9jftl">${escape(subsubsub)}:</label> <input type="number" id="${"number_" + escape(subsubsub, true)}"${add_attribute("value", $now.currentChart.config[main][sub][subsub][subsubsub], 0)} class="svelte-h9jftl">` : `<label${add_attribute("for", "field_" + subsubsub, 0)} class="label svelte-h9jftl">${escape(subsub)}:</label> <input type="number" id="${"field_" + escape(subsubsub, true)}"${add_attribute("value", $now.currentChart.config[main][sub][subsub][subsubsub], 0)} class="svelte-h9jftl">`}`}`}`;
        })} </div>` : `<label${add_attribute("for", "input_" + subsub, 0)} class="label svelte-h9jftl">${escape(subsub)}:</label> ${typeof $now.currentChart.config[main][sub][subsub] == "string" && $now.currentChart.config[main][sub][subsub][0] == "#" ? `<input type="color" id="${"input_" + escape(subsub, true)}"${add_attribute("value", $now.currentChart.config[main][sub][subsub], 0)}>` : `${typeof $now.currentChart.config[main][sub][subsub] == "string" ? `<input type="text" id="${"input_" + escape(subsub, true)}" class="full svelte-h9jftl"${add_attribute("value", $now.currentChart.config[main][sub][subsub], 0)}>` : `${!isNaN($now.currentChart.config[main][sub][subsub]) ? `<input type="number"${add_attribute("value", $now.currentChart.config[main][sub][subsub], 0)} class="svelte-h9jftl">` : `<textarea class="full svelte-h9jftl">${escape($now.currentChart.config[main][sub][subsub], false)}</textarea>`}`}`}`}`;
      })}` : `<textarea class="full svelte-h9jftl">${escape($now.currentChart.config[main][sub], false)}</textarea>`}`}` : ``} <hr class="svelte-h9jftl">`;
    })}` : ``}`;
  })}` : ``}</div>`} <div class="highlighted" style="width:0; height:0;"></div>`;
});
export {
  Page as default
};
