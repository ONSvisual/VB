import { c as create_ssr_component, a as subscribe, e as escape, f as each, b as add_attribute, v as validate_component, d as set_store_value, n as noop } from "../../../chunks/ssr.js";
import { liveQuery } from "dexie";
import { d as db } from "../../../chunks/db.js";
/* empty css                                                        */
import { n as now } from "../../../chunks/currentChoices.js";
import { tsvFormat, csvParse } from "d3-dsv";
const css = {
  code: ".tablewrapper.svelte-1q4rw3h.svelte-1q4rw3h{height:150px;overflow:scroll\r\n	}thead.svelte-1q4rw3h tr.svelte-1q4rw3h{background-color:#206095;color:#ffffff;text-align:left}th.svelte-1q4rw3h.svelte-1q4rw3h,td.svelte-1q4rw3h.svelte-1q4rw3h{padding:5px}tbody.svelte-1q4rw3h tr.svelte-1q4rw3h{border-bottom:1px solid #dddddd}tbody.svelte-1q4rw3h tr.svelte-1q4rw3h:nth-of-type(even){background-color:#f3f3f3}tbody.svelte-1q4rw3h tr.svelte-1q4rw3h:last-of-type{border-bottom:2px solid #206095}.edited.svelte-1q4rw3h.svelte-1q4rw3h{visibility:hidden}",
  map: `{"version":3,"file":"Tidy.svelte","sources":["Tidy.svelte"],"sourcesContent":["<script>\\r\\n\\timport {tsvParse, csvParse, tsvFormat,csvFormat} from 'd3-dsv';\\r\\n\\texport let csv = '';\\r\\n    import {now} from \\"../currentChoices\\"\\r\\n    let unedited=true;\\r\\n    import { db } from \\"../db\\";\\r\\n    let status\\r\\n\\r\\n    async function updateDB(e) {\\r\\n        console.log(\\"now\\",$now)\\r\\n      try {\\r\\n          const id = await db.Projects\\r\\n          .where('projectName')\\r\\n          .equals($now.currentProject.projectName)\\r\\n          .modify(x => x.figures\\r\\n                .find(e=>e.figureName=$now.currentChart.figureName)\\r\\n                .chartScripts.data=$now.currentChart.chartScripts.data\\r\\n            );\\r\\n\\r\\n          status = \`\${$now.currentChart.figureName} data sucessfully saved\`;\\r\\n\\r\\n      } catch (error) {\\r\\n        status = \`Failed to update \${$now.currentChart.figureName}: \${error}\`;\\r\\n      }\\r\\n      console.log(\\"data update:\\",status)\\r\\n    }\\r\\n\\r\\n    $: console.log(\\"csv\\",csv)\\r\\n\\tlet data = [];\\r\\n\\tlet columns=[];\\r\\n\\tlet tidy=[];\\r\\n\\tlet name = 'column';\\r\\n\\tlet tidycolumns=[];\\r\\n\\tlet href ='';\\r\\n\\t\\r\\n\\t\\r\\n\\tfunction readCSV(csv){\\r\\n        data=csvParse(csv)\\r\\n\\t\\tcolumns = data.columns\\r\\n\\t}\\r\\n\\r\\n    function readDSV(csv){\\r\\n        data=tsvParse(csv)\\r\\n\\t\\tcolumns = data.columns\\r\\n        $now.currentChart.chartScripts.data=csvFormat(tsvParse(csv))\\r\\n        unedited=false\\r\\n\\t}\\r\\n\\r\\n\\r\\n    $: readCSV(csv) //tsvFormat(csvParse(csv))\\r\\n<\/script>\\r\\n\\r\\n\\r\\n<h2>\\r\\nPaste your data from Excel\\r\\n</h2>\\r\\n<button class:edited={unedited} on:click={updateDB}>Save this data</button>\\r\\n<textarea style=\\"width:95%\\" on:input=\\"{e => readDSV(e.target.value)}\\" rows=20  id=\\"csvdata\\">{tsvFormat(csvParse(csv))}</textarea>\\r\\n\\r\\n<p>\\r\\n\\tHere's your table\\r\\n</p>\\r\\n\\r\\n<div class=\\"tablewrapper\\">\\r\\n\\t<table>\\r\\n\\t\\t<thead>\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t{#each columns as d}\\r\\n\\t\\t\\t<th>{d}</th>\\r\\n\\t\\t\\t{/each}\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t</thead>\\r\\n\\t\\t<tbody>\\r\\n\\t\\t\\t{#each data as d}\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t{#each Object.keys(d) as e}\\r\\n\\t\\t\\t\\t<td>{d[e]}</td>\\r\\n\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t\\t{/each}\\r\\n\\t\\t</tbody>\\r\\n\\t</table>\\r\\n</div>\\r\\n<!-- \\r\\n<h2>\\r\\n\\tStep 2: Choose your columns to merge\\r\\n</h2>\\r\\n\\r\\n<label for=\\"columnname\\">\\r\\n\\tChoose a new columns name (optional)\\r\\n</label>\\r\\n<input id=\\"columnname\\" on:input={e=>tidydata(data)} bind:value={name} type=\\"text\\">\\r\\n\\r\\n<p>\\r\\n\\tChoose which columns to combine\\r\\n</p>\\r\\n\\r\\n\\t{#each columns as d}\\r\\n\\t<div class=\\"item\\">\\r\\n\\t\\t<input name=\\"checkboxes\\" type=\\"checkbox\\" on:input={e=>tidydata(data)} id={d} value={d}><label for={d}>{d}</label>\\r\\n\\t</div>\\r\\n\\t\\r\\n\\t{/each}\\r\\n\\r\\n<h2>\\r\\n\\tStep 3. Check your tidy data\\r\\n</h2>\\r\\n<p>\\r\\n\\tHere's your tidy data\\r\\n</p>\\r\\n\\r\\n<div class=\\"tablewrapper\\">\\r\\n\\t<table>\\r\\n\\t\\t<thead>\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t{#each tidycolumns as d}\\r\\n\\t\\t\\t<th>{d}</th>\\r\\n\\t\\t\\t{/each}\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t</thead>\\r\\n\\t\\t<tbody>\\r\\n\\t\\t\\t{#each tidy as d}\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t{#each Object.keys(d) as e}\\r\\n\\t\\t\\t\\t<td>{d[e]}</td>\\r\\n\\t\\t\\t\\t{/each}\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t\\t{/each}\\r\\n\\t\\t</tbody>\\r\\n\\t</table>\\r\\n</div>\\r\\n\\r\\n<h2>\\r\\n\\tStep 4. Download your data\\r\\n</h2>\\r\\n<p>\\r\\n\\tHappy with your new data? Let's download it\\r\\n</p>\\r\\n<button>\\r\\n\\t<a href={href} download='data.csv'>Download as .csv</a>\\r\\n</button> -->\\r\\n\\r\\n<style>\\r\\n\\t.tablewrapper{\\r\\n\\t\\theight:150px;\\r\\n\\t\\toverflow:scroll\\r\\n\\t}\\r\\n\\t\\r\\n\\tthead tr {\\r\\n    background-color: #206095;\\r\\n    color: #ffffff;\\r\\n    text-align: left;\\r\\n}\\r\\n\\tth, td {\\r\\n    padding: 5px;\\r\\n\\t}\\r\\n\\t\\r\\n\\ttbody tr {\\r\\n\\t\\t\\tborder-bottom: 1px solid #dddddd;\\r\\n\\t}\\r\\n\\r\\n\\ttbody tr:nth-of-type(even) {\\r\\n\\t\\t\\tbackground-color: #f3f3f3;\\r\\n\\t}\\r\\n\\r\\n\\ttbody tr:last-of-type {\\r\\n\\t\\t\\tborder-bottom: 2px solid #206095;\\r\\n\\t}\\r\\n\\t.item{\\r\\n\\t\\tdisplay:block;\\r\\n\\t}\\r\\n\\t\\r\\n\\t.item *{\\r\\n\\t\\tdisplay:inline;\\r\\n\\t\\tpadding: 5px;\\r\\n\\t}\\r\\n\\t.edited{\\r\\n        visibility: hidden;\\r\\n    }\\r\\n\\t\\r\\n</style>"],"names":[],"mappings":"AA+IC,2CAAa,CACZ,OAAO,KAAK,CACZ,SAAS,MAAM;AACjB,CAAC,CAEA,oBAAK,CAAC,iBAAG,CACN,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,IAChB,CACC,gCAAE,CAAE,gCAAG,CACJ,OAAO,CAAE,GACZ,CAEA,oBAAK,CAAC,iBAAG,CACP,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAC3B,CAEA,oBAAK,CAAC,iBAAE,aAAa,IAAI,CAAE,CACzB,gBAAgB,CAAE,OACpB,CAEA,oBAAK,CAAC,iBAAE,aAAc,CACpB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAC3B,CASA,qCAAO,CACA,UAAU,CAAE,MAChB"}`
};
const Tidy = create_ssr_component(($$result2, $$props2, $$bindings2, slots2) => {
  let $$unsubscribe_now2;
  $$unsubscribe_now2 = subscribe(now, (value) => value);
  let { csv = "" } = $$props2;
  let data2 = [];
  let columns = [];
  function readCSV(csv2) {
    data2 = csvParse(csv2);
    columns = data2.columns;
  }
  if ($$props2.csv === void 0 && $$bindings2.csv && csv !== void 0)
    $$bindings2.csv(csv);
  $$result2.css.add(css);
  {
    console.log("csv", csv);
  }
  {
    readCSV(csv);
  }
  $$unsubscribe_now2();
  return `<h2 data-svelte-h="svelte-1j97lh1">Paste your data from Excel</h2> <button class="${["svelte-1q4rw3h", "edited"].join(" ").trim()}" data-svelte-h="svelte-zdiy8a">Save this data</button> <textarea style="width:95%" rows="20" id="csvdata">${escape(tsvFormat(csvParse(csv)), false)}</textarea> <p data-svelte-h="svelte-1gh5s7m">Here&#39;s your table</p> <div class="tablewrapper svelte-1q4rw3h"><table><thead class="svelte-1q4rw3h"><tr class="svelte-1q4rw3h">${each(columns, (d) => {
    return `<th class="svelte-1q4rw3h">${escape(d)}</th>`;
  })}</tr></thead> <tbody class="svelte-1q4rw3h">${each(data2, (d) => {
    return `<tr class="svelte-1q4rw3h">${each(Object.keys(d), (e) => {
      return `<td class="svelte-1q4rw3h">${escape(d[e])}</td>`;
    })} </tr>`;
  })}</tbody></table></div> `;
});
const css$1 = {
  code: "@import '../global.css';th.svelte-145xcyh{text-align:left}td.svelte-145xcyh,th.svelte-145xcyh{padding:0px 5px 0px 10px}table.svelte-145xcyh{border:1px solid grey}.outer.svelte-145xcyh{margin:0px auto;max-width:100vw}.chartBox.svelte-145xcyh{background-color:white;width:calc(50% - 5px);position:absolute;left:calc(50% + 5px);bottom:0;height:50%}.dataBox.svelte-145xcyh{background-color:white;width:50%;height:50%;position:absolute;left:5px;bottom:0\n  }.controlTable.svelte-145xcyh{padding:5px}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<!-- chartList.svelte -->\\n<script>\\n\\n\\timport { liveQuery } from \\"dexie\\";\\n\\timport { db } from \\"../db\\";\\n\\timport FigureAdder from \\"../FigureAdder.svelte\\";\\n\\timport {onMount} from \\"svelte\\"\\n\\timport {now} from \\"../currentChoices\\"\\n  \\timport Tidy from \\"./Tidy.svelte\\"\\n\\n\\tlet config, script, chartCss, chosenName, currentProject, figureName, loaded=0\\n\\t  \\n\\tasync function setupDB(projectName, figureName, chartName, chartScripts) {\\n\\t\\ttry {\\n\\t\\t\\tconst id = await db.Projects.add({\\n\\t\\t\\t  projectName: projectName,\\n\\t\\t\\t  figures: []\\n\\t\\t  });\\n\\t\\t  status = `${projectName} successfully created in DB`;\\n\\t\\t  // Reset form:\\n\\t\\t  // projectName=\\"\\";\\n\\t\\t  // figureName=\\"\\";\\n\\t\\t  // chartName = \\"\\";\\n\\t\\t  // chartScripts = \\"\\";\\n\\t\\t} catch (error) {\\n\\t\\t  status = `Failed to add ${figureName}: ${error}`;\\n\\t\\t}\\n\\t\\tconsole.log(\\"setupDB\\",status)\\n\\t  }\\n  \\n\\t  async function addFigureToProject(projectName, figureName, chartName, chartScripts) {\\n\\t\\ttry {\\n\\t\\t\\tconst id = await db.Projects.where(\'projectName\').equals(projectName).modify(x =>\\n\\t\\t   x.figures.push({figureName:figureName, chartName:chartName, chartScripts:chartScripts}) );\\n\\t\\t\\tstatus = `${chartName} successfully added to ${projectName} as ${figureName}`;\\n\\t\\t  // Reset form:\\n\\t\\t  // projectName=\\"\\";\\n\\t\\t  // figureName=\\"\\";\\n\\t\\t  // chartName = \\"\\";\\n\\t\\t  // chartScripts = \\"\\";\\n\\t\\t} catch (error) {\\n\\t\\t  status = `Failed to add ${figureName}: ${error}`;\\n\\t\\t}\\n\\t\\tconsole.log(\\"addFigureToProject\\",status)\\n\\t  }\\n  \\n\\t\\n  \\n\\t// $: theScript = `<style type=\\"text/css\\" id=\\"injectedStyle\\"> ${chartCss} <\\\\/style>`; \\n  \\n\\t$: charts = liveQuery(async () => {\\n\\t  const charts = await db.Templates.toArray();\\n\\t  return charts;\\n\\t});\\n  \\n\\t$: projects = liveQuery(async () => {\\n\\t  const projects = await db.Projects.toArray();\\n\\t  return projects;\\n\\t});\\n  \\n  \\n\\t//$: currentProject = (sessionStorage && sessionStorage.project) ? JSON.parse(sessionStorage.project) : {}\\n  \\n\\tlet loadProject=(pr)=>{\\n\\t  console.log (\\"pr\\", pr)\\n  \\n\\t  if (pr && pr.figures) $now.currentChart = pr.figures[0]\\n\\t  if ($now.currentChart) populate(\\n\\t\\t$now.currentChart.chartName,\\n      $now.currentChart.chartScripts.config_js,\\n      $now.currentChart.chartScripts.script_js,\\n      $now.currentChart.chartScripts.data_csv,\\n      $now.currentChart.chartScripts.chart_css,\\n      $now.currentChart.chartScripts.comparison_csv\\n\\t  );\\n\\t  loaded=1\\n\\t}\\n  \\n   //$: loadProject($now.currentProject)\\n  \\n\\tfunction populate(\\n\\t  chartName,\\n\\t  conf,\\n\\t  scr,\\n\\t  data,\\n\\t  css,\\n\\t  comparison,\\n\\t  graphic_data,\\n\\t  size,\\n\\t  namesUnique,\\n\\t  load,\\n\\t  categoriesUnique,\\n\\t  groups,\\n\\t  legendItem,\\n\\t  svg,\\n\\t  calculatedChartWidth,\\n\\t  i,\\n\\t  xDomain,\\n\\t  divs,\\n\\t  svgs,\\n\\t  fullwidth,\\n\\t  chart_width,\\n\\t  yAxis,\\n\\t  uniqueOptions,\\n\\t  dateformat,\\n\\t  dateparse,\\n\\t  sliderDomain,\\n\\t  sliderSimple,\\n\\t  t,\\n\\t  keys,\\n\\t  grouped_data,\\n\\t  var_group,\\n\\t  var_group2,\\n\\t  var_group3,\\n\\t  columnNames,\\n\\t  numbers,\\n\\t  dataPivoted,\\n\\t  breaks,\\n\\t  colour,\\n\\t  key,\\n\\t  legendx,\\n\\t  popTotal,\\n\\t  graphic_data_new,\\n\\t  maxPercentage,\\n\\t  height,\\n\\t  xLeft,\\n\\t  xRight,\\n\\t  y,\\n\\t  widths,\\n\\t  dataForLegend,\\n\\t  titleDivs,\\n\\t  formatNo,\\n\\t  x,\\n\\t  groupedData,\\n\\t  xcategories,\\n\\t  plots,\\n\\t  chart,\\n\\t  headers,\\n\\t  rows,\\n\\t  splitBar,\\n\\t  splitBarInner,\\n\\t  finalrow\\n\\t) {\\n\\t  if ( document.querySelector(\\"#accessibleSummary\\")){\\n\\t\\tdocument.querySelector(\\"#accessibleSummary\\").innerHTML = \\"\\";\\n\\t\\tdocument.querySelector(\\"#select\\").innerHTML = \\"\\";\\n\\t\\tdocument.querySelector(\\"#legend\\").innerHTML = \\"\\";\\n\\t\\tdocument.querySelector(\\"#graphic\\").innerHTML = \\"\\";\\n\\t\\tdocument.querySelector(\\"#source\\").innerHTML = \\"\\";\\n  \\n\\t  let csvString = data;\\n\\t  sessionStorage.data = csvString\\n\\t\\t.replace(/(?:\\\\r\\\\n|\\\\r|\\\\n)/g, \\"\\\\\\\\n\\")\\n\\t\\t.slice(0, -2);\\n  \\n\\t  sessionStorage.config = conf; //.replace(\\"data.csv\\",encodeURIComponent(csvString))\\n\\t  config = eval(sessionStorage.config);\\n\\t  //console.log(JSON.stringify(config));\\n  \\n\\t  sessionStorage.script =\\n\\t\\tscr.replace(\\n\\t\\t  \\"d3.csv(config.essential.graphic_data_url\\",\\n\\t\\t  \\"load = (config) => Promise.resolve(d3.csvParse(`\\" +\\n\\t\\t\\tsessionStorage.data +\\n\\t\\t\\t\\"`)\\"\\n\\t\\t) +\\n\\t\\t\\" load(\\" +\\n\\t\\tJSON.stringify(config) +\\n\\t\\t\\")\\";\\n\\t  //console.log(\\"script\\", sessionStorage.script);\\n\\t  script = eval(sessionStorage.script);\\n\\t  chartCss = css;\\n\\t  return config;\\n\\t}\\n\\t}\\n  \\n\\tif($now.currentProject) $now.currentChart=$now.currentProject.figures[0]\\n  \\n\\t$: $now.currentChart &&\\n\\t  populate(\\n\\t\\t$now.currentChart.chartName,\\n      $now.currentChart.chartScripts.config_js,\\n      $now.currentChart.chartScripts.script_js,\\n      $now.currentChart.chartScripts.data_csv,\\n      $now.currentChart.chartScripts.chart_css,\\n      $now.currentChart.chartScripts.comparison_csv\\n\\t  );\\n\\t\\n\\t  onMount(()=>loadProject($now.currentProject))\\n\\n\\tlet saveChart = () => 1;\\n\\t//$: console.log(\\"chosenName\\", chosenName);\\n  <\/script>\\n  \\n  <svelte:head>\\n\\t{#if $now.currentChart}\\n\\t{@html `<style type=\\"text/css\\" id=\\"injectedStyle\\"> ${$now.currentChart.chartScripts.chart_css} <\\\\/style>`}\\n\\t{/if}\\n  </svelte:head>\\n  \\n  <div class=\\"outer\\">\\n\\t<div class=\\"controls\\">\\n  {#if $now.currentProject}\\n  <!-- <label for=\\"projects\\">Select a project:  \\n\\t<select name=\\"projects\\" bind:value={currentProject}>\\n\\t  {#each Object.values($projects) as project}\\n\\t\\t<option value={project}>{project.projectName}</option>\\n\\t  {/each}\\n\\t</select></label><br><br> -->\\n  \\n\\t<label for=\\"addRemove\\">Add or remove figures from {$now.currentProject.projectName}</label>\\n\\t  <table name=\\"addRemove\\" class=\\"controlTable\\">{#if $now.currentProject && $charts}\\n\\t\\t<tr><th ><b>Figure name</b></th><th>Chart type</th><th style=\\"color:red\\"></th></tr>\\n\\t\\t{#each $now.currentProject.figures as figure}\\n\\t\\t  <tr><td><button  on:click={()=>$now.currentChart=figure}>{figure.figureName}</button></td><td>{figure.chartName}</td><td><button style=\\"color:red\\">X</button></td></tr>\\n\\t\\t{/each}{/if}\\n  \\n\\t\\t{#if $now.currentChart}\\n\\t\\t<tr></tr>\\n\\t\\t<hr>\\n\\t\\t<tr><td>Add a figure:</td><td></td><td></td></tr>\\n\\t\\t<tr>\\n\\t\\t  <td>\\n\\t\\t\\t<input type=\\"text\\" placeholder=\\"Figure name\\" bind:value={figureName}/>\\n\\t\\t  </td>\\n\\t\\t  <td>\\n\\t\\t\\t{#if $charts}\\n\\t\\t\\t<select name=\\"chart\\" bind:value={$now.currentChart}>\\n\\t\\t\\t  {#each $charts as chart}\\n\\t\\t\\t\\t<option value={chart}>{chart.chartName}</option>\\n\\t\\t\\t  {/each}</select\\n\\t\\t\\t>\\n\\t\\t\\t{/if}\\n\\t\\t   </td>\\n\\t\\t  <td>\\n\\t\\t\\t<button on:click={()=>{setupDB($now.currentProject.projectName, figureName, $now.currentChart.chartName, $now.currentChart.chartScripts);addFigureToProject($now.currentProject.projectName, figureName, $now.currentChart.chartName, $now.currentChart.chartScripts)}}>Save</button>\\n\\t\\t  </td>\\n\\t\\t</tr>\\n  \\n  {/if}\\n  \\n\\t  </table>\\n\\t{/if}\\n  </div>\\n  <br>\\n  {#if $charts}\\n  <select name=\\"chart\\" bind:value={$now.currentChart} style=\\"display:none\\">\\n\\t  {#each $charts as chart}\\n\\t\\t<option value={chart}>{chart.chartName}</option>\\n\\t  {/each}</select\\n\\t>\\n  {/if}\\n  \\n  <!-- {#if config}{JSON.stringify(config)}{/if} -->\\n  <!--This is what D3 renders-->\\n  <div class=\\"chartBox\\">\\n\\tOutput:\\n\\t<h5 id=\\"accessibleSummary\\" class=\\"visuallyhidden\\">.</h5>\\n\\t<div id=\\"select\\"></div>\\n\\t<div aria-hidden=\\"true\\" id=\\"legend\\"></div>\\n\\t<div id=\\"graphic\\" aria-hidden=\\"true\\"></div>\\n\\t<h5 id=\\"source\\">.</h5>\\n  </div></div>\\n  <!--End of what D3 renders-->\\n  \\n  <div class=\\"dataBox\\">\\n{#if $now.currentChart}\\n\\t<Tidy csv={$now.currentChart.chartScripts.data_csv}/>\\n{/if}\\n</div>\\n  \\n  <style>\\n\\t@import \'../global.css\'; \\n\\tth{\\n\\t  text-align: left;\\n\\t}\\n\\ttd,th{padding:0px 5px 0px 10px}\\n\\ttable{border:1px solid grey}\\n\\t.outer{\\n\\t  margin: 0px auto;\\n\\t  max-width: 100vw;\\n\\t}\\n  .controls{\\n\\t/* background-color:red */\\n  }\\n  .chartBox{\\n\\tbackground-color: white;\\n\\twidth:calc(50% - 5px);\\n\\tposition:absolute;\\n\\tleft:calc(50% + 5px);\\n\\tbottom:0;\\n\\theight:50%;\\n  }\\n  .dataBox{\\n\\tbackground-color: white;\\n\\twidth:50%;\\n\\theight:50%;\\n\\tposition:absolute;\\n\\tleft:5px;\\n\\tbottom:0\\n  }\\n  .controlTable{\\n\\tpadding: 5px;\\n  }\\n  </style>\\n  "],"names":[],"mappings":"AAgRC,QAAQ,eAAe,CACvB,iBAAE,CACA,UAAU,CAAE,IACd,CACA,iBAAE,CAAC,iBAAE,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAC9B,oBAAK,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAC3B,qBAAM,CACJ,MAAM,CAAE,GAAG,CAAC,IAAI,CAChB,SAAS,CAAE,KACb,CAIC,wBAAS,CACV,gBAAgB,CAAE,KAAK,CACvB,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CACrB,SAAS,QAAQ,CACjB,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CACpB,OAAO,CAAC,CACR,OAAO,GACN,CACA,uBAAQ,CACT,gBAAgB,CAAE,KAAK,CACvB,MAAM,GAAG,CACT,OAAO,GAAG,CACV,SAAS,QAAQ,CACjB,KAAK,GAAG,CACR,OAAO,CAAC;AACT,EAAE,CACA,4BAAa,CACd,OAAO,CAAE,GACR"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let charts;
  let $now, $$unsubscribe_now;
  let $charts, $$unsubscribe_charts = noop, $$subscribe_charts = () => ($$unsubscribe_charts(), $$unsubscribe_charts = subscribe(charts, ($$value) => $charts = $$value), charts);
  $$unsubscribe_now = subscribe(now, (value) => $now = value);
  let config, figureName;
  function populate(chartName, conf, scr, data, css, comparison, graphic_data, size, namesUnique, load, categoriesUnique, groups, legendItem, svg, calculatedChartWidth, i, xDomain, divs, svgs, fullwidth, chart_width, yAxis, uniqueOptions, dateformat, dateparse, sliderDomain, sliderSimple, t, keys, grouped_data, var_group, var_group2, var_group3, columnNames, numbers, dataPivoted, breaks, colour, key, legendx, popTotal, graphic_data_new, maxPercentage, height, xLeft, xRight, y, widths, dataForLegend, titleDivs, formatNo, x, groupedData, xcategories, plots, chart, headers, rows, splitBar, splitBarInner, finalrow) {
    if (document.querySelector("#accessibleSummary")) {
      document.querySelector("#accessibleSummary").innerHTML = "";
      document.querySelector("#select").innerHTML = "";
      document.querySelector("#legend").innerHTML = "";
      document.querySelector("#graphic").innerHTML = "";
      document.querySelector("#source").innerHTML = "";
      let csvString = data;
      sessionStorage.data = csvString.replace(/(?:\r\n|\r|\n)/g, "\\n").slice(0, -2);
      sessionStorage.config = conf;
      config = eval(sessionStorage.config);
      sessionStorage.script = scr.replace("d3.csv(config.essential.graphic_data_url", "load = (config) => Promise.resolve(d3.csvParse(`" + sessionStorage.data + "`)") + " load(" + JSON.stringify(config) + ")";
      eval(sessionStorage.script);
      return config;
    }
  }
  if ($now.currentProject)
    set_store_value(now, $now.currentChart = $now.currentProject.figures[0], $now);
  $$result.css.add(css$1);
  $$subscribe_charts(charts = liveQuery(async () => {
    const charts2 = await db.Templates.toArray();
    return charts2;
  }));
  liveQuery(async () => {
    const projects = await db.Projects.toArray();
    return projects;
  });
  $now.currentChart && populate($now.currentChart.chartName, $now.currentChart.chartScripts.config_js, $now.currentChart.chartScripts.script_js, $now.currentChart.chartScripts.data_csv, $now.currentChart.chartScripts.chart_css, $now.currentChart.chartScripts.comparison_csv);
  $$unsubscribe_now();
  $$unsubscribe_charts();
  return `  ${$$result.head += `<!-- HEAD_svelte-meh48s_START -->${$now.currentChart ? `<!-- HTML_TAG_START -->${`<style type="text/css" id="injectedStyle"> ${$now.currentChart.chartScripts.chart_css} </style>`}<!-- HTML_TAG_END -->` : ``}<!-- HEAD_svelte-meh48s_END -->`, ""} <div class="outer svelte-145xcyh"><div class="controls svelte-145xcyh">${$now.currentProject ? ` <label for="addRemove">Add or remove figures from ${escape($now.currentProject.projectName)}</label> <table name="addRemove" class="controlTable svelte-145xcyh">${$now.currentProject && $charts ? ` <tr data-svelte-h="svelte-170nntb"><th class="svelte-145xcyh"><b>Figure name</b></th><th class="svelte-145xcyh">Chart type</th><th style="color:red" class="svelte-145xcyh"></th></tr> ${each($now.currentProject.figures, (figure) => {
    return `<tr><td class="svelte-145xcyh"><button>${escape(figure.figureName)}</button></td><td class="svelte-145xcyh">${escape(figure.chartName)}</td><td class="svelte-145xcyh" data-svelte-h="svelte-dmvkpj"><button style="color:red">X</button></td></tr> `;
  })}` : ``} ${$now.currentChart ? `<tr></tr> <hr> <tr data-svelte-h="svelte-ritpm9"><td class="svelte-145xcyh">Add a figure:</td><td class="svelte-145xcyh"></td><td class="svelte-145xcyh"></td></tr> <tr><td class="svelte-145xcyh"><input type="text" placeholder="Figure name"${add_attribute("value", figureName, 0)}></td> <td class="svelte-145xcyh">${$charts ? `<select name="chart">${each($charts, (chart2) => {
    return `<option${add_attribute("value", chart2, 0)}>${escape(chart2.chartName)}</option> `;
  })}</select>` : ``}</td> <td class="svelte-145xcyh"><button data-svelte-h="svelte-j7tx06">Save</button></td></tr>` : ``}</table>` : ``}</div> <br> ${$charts ? `<select name="chart" style="display:none">${each($charts, (chart2) => {
    return `<option${add_attribute("value", chart2, 0)}>${escape(chart2.chartName)}</option> `;
  })}</select>` : ``}   <div class="chartBox svelte-145xcyh" data-svelte-h="svelte-fex1kc">Output:
	<h5 id="accessibleSummary" class="visuallyhidden">.</h5> <div id="select"></div> <div aria-hidden="true" id="legend"></div> <div id="graphic" aria-hidden="true"></div> <h5 id="source">.</h5></div></div>  <div class="dataBox svelte-145xcyh">${$now.currentChart ? `${validate_component(Tidy, "Tidy").$$render(
    $$result,
    {
      csv: $now.currentChart.chartScripts.data_csv
    },
    {},
    {}
  )}` : ``} </div>`;
});
export {
  Page as default
};
