export default {
    "Templates": {
        "area-stacked": {
            "chart_css": "",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//Accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\t// Define the dimensions and margin, width and height of the chart.\n\tlet margin = config.optional.margin[size];\n\tlet width = parseInt(graphic.style('width')) - margin.left - margin.right;\n\tlet height = 400 - margin.top - margin.bottom;\n\n\t// Get categories from the keys used in the stack generator\n\tconst categories = Object.keys(graphic_data[0]).filter((k) => k !== 'date');\n\n\tconst colorScale = d3\n\t\t.scaleOrdinal()\n\t\t.domain(categories)\n\t\t.range(config.essential.colour_palette);\n\n\t// Set up the legend\n\tconst legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(d3.zip(categories, colorScale.range()))\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\t// Create an SVG element\n\tconst svg = graphic\n\t\t.append('svg')\n\t\t.attr('width', width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\n\n\t// Define the x and y scales\n\tconst x = d3\n\t\t.scaleTime()\n\t\t.domain(d3.extent(graphic_data, (d) => d.date))\n\t\t.range([0, width]);\n\n\t// This function generates an array of approximately count + 1 uniformly-spaced, rounded values in the range of the given start and end dates (or numbers).\n\tlet tickValues = x.ticks(config.optional.xAxisTicks[size]);\n\n\t// Add the first and last dates to the ticks array, and use a Set to remove any duplicates\n\t// tickValues = Array.from(new Set([graphic_data[0].date, ...tickValues, graphic_data[graphic_data.length - 1].date]));\n\n\tif (config.optional.addFirstDate == true) {\n\t\ttickValues.push(graphic_data[0].date)\n\t\tconsole.log(\"First date added\")\n\t}\n\n\tif (config.optional.addFinalDate == true) {\n\t\ttickValues.push(graphic_data[graphic_data.length - 1].date)\n\t\tconsole.log(\"Last date added\")\n\t}\n\n\tconst y = d3\n\t\t.scaleLinear()\n\t\t.domain([0, 1]) // Assuming the y-axis represents the percentage from 0 to 1\n\t\t.range([height, 0]);\n\n\t// Define the stack generator\n\tconst stack = d3\n\t\t.stack()\n\t\t.keys(categories) // Use the category names as keys\n\t\t.order(d3[config.essential.stackOrder]) // Use the stack order defined in the config later\n\t\t.offset(d3[config.essential.stackOffset]); // Convert to percentage values\n\n\t// Generate the stacked data\n\tconst stackedData = stack(graphic_data);\n\n\t// console.log(\"stackedData:\", stackedData);\n\n\t// Define the area generator\n\tconst area = d3\n\t\t.area()\n\t\t.x((d) => x(d.data.date))\n\t\t.y0((d) => y(d[0]))\n\t\t.y1((d) => y(d[1]));\n\n\t// Create the areas\n\tsvg\n\t\t.selectAll('path')\n\t\t.data(stackedData)\n\t\t.enter()\n\t\t.append('path')\n\t\t.attr('fill', (d) => {\n\t\t\t// Assign colors to each category\n\t\t\tconst category = d.key;\n\t\t\treturn colorScale(category);\n\t\t})\n\t\t.attr('d', area);\n\n\t// Add the x-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', `translate(0, ${height})`)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(x)\n\t\t\t\t.tickFormat(d3.timeFormat(config.essential.xAxisTickFormat[size]))\n\t\t\t\t.tickValues(tickValues)\n\t\t);\n\n\t// Add the y-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis numeric')\n\t\t.call(d3.axisLeft(y).tickFormat(d3.format('.0%')));\n\n\t// This does the x-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', `translate(0, ${height})`)\n\t\t.append('text')\n\t\t.attr('x', width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t// This does the y-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,0)')\n\t\t.append('text')\n\t\t.attr('x', -(margin.left - 5))\n\t\t.attr('y', -15)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nd3.csv(config.essential.graphic_data_url).then((rawData) => {\n\tgraphic_data = rawData.map((d) => {\n\t\treturn {\n\t\t\tdate: d3.timeParse(config.essential.dateFormat)(d.date),\n\t\t\t...Object.entries(d)\n\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t.map(([key, value]) => [key, +value])\n\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t};\n\t});\n\n\t// console.log('Final data structure:',graphic_data);\n\n\t// Use pym to create an iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\n\t\t\t\"#206095\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%y\",\n\t\t\t\"md\": \"%Y\",\n\t\t\t\"lg\": \"%Y\"\n\t\t},\n\t\t\"dateFormat\": \"%Y\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"stackOffset\": \"stackOffsetExpand\",\n\t\t// options include\n\t\t// stackOffsetNone means the baseline is set at zero\n\t\t// stackOffsetExpand to do 100% charts\n\t\t// stackOffsetDiverging for data with positive and negative values\n\t\t\"stackOrder\": \"stackOrderNone\"\n\t\t// other options include\n\t\t// stackOrderNone means the order is taken from the datafile\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\n\t\t// stackOrderReverse reverse the order as set from the data file\n\t},\n\t\"optional\": {\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [1, 1]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 50\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 50,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 50\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 50,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 50\n\t\t\t}\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 7,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\": 8\n\t\t},\n\t\t\"addFirstDate\": false,\n\t\t\"addFinalDate\": false,\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "data_csv": "date,category one,category two has a really long name and takes a lot of space,category three,category four,category five,category six\n1997,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000\n1998,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000\n1999,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000\n2000,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000\n2001,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000\n2002,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000\n2003,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000\n2004,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000\n2005,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000\n2006,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000\n2007,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000\n2008,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000\n2009,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000\n2010,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000\n2011,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000\n2012,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000\n2013,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000\n2014,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000\n2015,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000\n2016,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000\n2017,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000",
            "comparison_csv": null
        },
        "area-stacked-sm": {
            "script_js": "let pymChild = null;\nlet graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\n\n//Remove fallback\nd3.select('#graphic').select('img').remove();\n\nfunction drawGraphic(seriesName, graphic_data, chartIndex) {\n\n\t//population accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\t//Was trying to be a little fancy but will need to workshop this.\n\t// var size = window.innerWidth > config.optional.mobileBreakpoint ? \"lg\" : \"sm\";\n\n\tfunction calculateChartWidth(size) {\n\t\tconst chartEvery = config.optional.chart_every[size];\n\t\tconst aspectRatio = config.optional.aspectRatio[size];\n\t\tconst chartMargin = config.optional.margin[size];\n\n\t\tif (config.optional.dropYAxis) {\n\t\t\t// Chart width calculation allowing for 10px left margin between the charts\n\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 20)) / chartEvery) - chartMargin.right;\n\t\t\treturn chartWidth;\n\t\t} else {\n\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n\t\t\treturn chartWidth;\n\t\t}\n\t}\n\n\t// size thresholds as defined in the config.js file\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tlet size;\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\n\t// Calculate chart width here\n\tcalculatedChartWidth = calculateChartWidth(size);\n\n\tconst chartsPerRow = config.optional.chart_every[size];\n\tconst chartPosition = chartIndex % chartsPerRow;\n\n\t// console.log(chartIndex);\n\n\t// Set dimensions\n\tlet margin = { ...config.optional.margin[size] };\n\n\t// If the chart is not in the first position in the row, reduce the left margin\n\tif (config.optional.dropYAxis) {\n\t\tif (chartPosition !== 0) {\n\t\t\tmargin.left = 20;\n\t\t}\n\t}\n\n\t// Get categories from the keys used in the stack generator\n\tconst categories = Object.keys(graphic_data[0]).filter((k) => k !== 'date' && k !== 'series');\n\n\tconst colorScale = d3\n\t\t.scaleOrdinal()\n\t\t.domain(categories)\n\t\t.range(config.essential.colour_palette);\n\n\t//Getting the list of colours used in this visualisation\n\tlet colours = [...config.essential.colour_palette].slice(0, categories.length)\n\n\t// Set up the legend\n\tconst legenditem = legend\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip([...categories].reverse(), colours.reverse())\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\tif (size !== 'sm') {\n\t\td3.select('#legend')\n\t\t\t.style('grid-template-columns', `repeat(${config.optional.legendColumns}, 1fr)`)\n\t}\n\n\t//End of legend code\n\n\tlet width = calculatedChartWidth;\n\tlet height =\n\t\twidth * (config.optional.aspectRatio[size][1] / config.optional.aspectRatio[size][0]) - margin.top - margin.bottom;\n\n\t// Define the x and y scales\n\tconst xAxis = d3\n\t\t.scaleTime()\n\t\t.domain(d3.extent(graphic_data, (d) => d.date))\n\t\t.range([0, width]);\n\n\tconst yAxis = d3\n\t\t.scaleLinear()\n\t\t.domain([0, d3.max(graphic_data, (d) => d3.sum(categories, (c) => d[c]))])\n\t\t.range([height, 0]);\n\n\t// Define the stack generator\n\tconst stack = d3.stack()\n\t\t.keys(categories)\n\t\t.order(d3[config.essential.stackOrder]) // Use the stack order defined in the config\n\t\t.offset(d3[config.essential.stackOffset]); // Convert to percentage values\n\n\t// Create an SVG for this chart\n\tlet svg = graphic\n\t\t.append('svg')\n\t\t.attr('width', width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('backgroud-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n\t// Add the areas\n\tsvg\n\t\t.selectAll('.area')\n\t\t.data(stack(graphic_data))\n\t\t.enter()\n\t\t.append('path')\n\t\t.attr('class', 'area')\n\t\t.attr(\n\t\t\t'd',\n\t\t\td3\n\t\t\t\t.area()\n\t\t\t\t.x((d) => xAxis(d.data.date))\n\t\t\t\t.y0((d) => yAxis(d[0]))\n\t\t\t\t.y1((d) => yAxis(d[1]))\n\t\t)\n\t\t.attr('fill', (d) => colorScale(d.key));\n\n\t// Add the x-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'axis numeric')\n\t\t.attr('transform', `translate(0, ${height})`)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xAxis)\n\t\t\t\t.tickValues(graphic_data\n\t\t\t\t\t.map(function (d) {\n\t\t\t\t\t\treturn d.date.getTime()\n\t\t\t\t\t}) //just get dates as seconds past unix epoch\n\t\t\t\t\t.filter(function (d, i, arr) {\n\t\t\t\t\t\treturn arr.indexOf(d) == i\n\t\t\t\t\t}) //find unique\n\t\t\t\t\t.map(function (d) {\n\t\t\t\t\t\treturn new Date(d)\n\t\t\t\t\t}) //map back to dates\n\t\t\t\t\t.sort(function (a, b) {\n\t\t\t\t\t\treturn a - b\n\t\t\t\t\t})\n\t\t\t\t\t.filter(function (d, i) {\n\t\t\t\t\t\treturn i % config.optional.xAxisTicksEvery[size] === 0 && i <= graphic_data.length - config.optional.xAxisTicksEvery[size] || i == graphic_data.length - 1 //Rob's fussy comment about labelling the last date\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t.tickFormat(d3.timeFormat(config.essential.xAxisTickFormat[size]))\n\t\t);\n\n\n\t//Add the y-axis to the leftmost chart, or all charts if dropYAxis in the config is false\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis numeric')\n\t\t.call(d3.axisLeft(yAxis)\n\t\t\t.tickSize(calculateTickSize())\n\t\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? d3.format(config.essential.yAxisFormat)(d) :\n\t\t\t\tchartPosition == 0 ? d3.format(config.essential.yAxisFormat)(d) : \"\"));\n\n\tfunction calculateTickSize() {\n\t\tif (config.optional.dropYAxis) {\n\t\t\tif (chartPosition == 0) {\n\t\t\t\treturn 5\n\t\t\t} else {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t} else {\n\t\t\treturn 5\n\t\t}\n\t}\n\n\t// todo: This needs to be moved to the gobal style css\n\t// Add a title to each of the charts \n\tsvg\n\t\t.append('text')\n\t\t.attr('x', 0)\n\t\t.attr('y', -margin.top / 2)\n\t\t.attr('text-anchor', 'start')\n\t\t.style('font-size', '16px')\n\t\t.attr('class', 'title')\n\t\t.text(seriesName);\n\n\t// This does the x-axis label\n\tif (chartIndex % chartsPerRow === chartsPerRow - 1) {\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', `translate(0, ${height})`)\n\t\t\t.append('text')\n\t\t\t.attr('x', width)\n\t\t\t.attr('y', 35)\n\t\t\t.attr('class', 'axis--label')\n\t\t\t.text(config.essential.xAxisLabel)\n\t\t\t.attr('text-anchor', 'end');\n\t}\n\n\t// This does the y-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,0)')\n\t\t.append('text')\n\t\t.attr('x', -(margin.left - 5))\n\t\t.attr('y', -10)\n\t\t.attr('class', 'axis--label')\n\t\t.text(() => chartPosition == 0 ? config.essential.yAxisLabel : \"\")\n\t\t.attr('text-anchor', 'start');\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t// Send the height to the parent frame\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\n\nfunction renderCallback() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t// Load the data\n\td3.csv(config.essential.graphic_data_url)\n\t\t.then((data) => {\n\t\t\t// console.log(\"Original data:\", data);\n\n\t\t\t// Group the data by the 'series' column\n\t\t\tconst groupedData = d3.groups(data, (d) => d.series);\n\t\t\t// console.log(\"Grouped data:\", groupedData);\n\n\t\t\t// console.table(groupedData);\n\t\t\t// Remove previous SVGs\n\t\t\t//\tgraphic.selectAll('svg').remove();\n\n\t\t\tgroupedData.forEach((group, i) => {\n\t\t\t\tconst seriesName = group[0];\n\t\t\t\tlet graphic_data = group[1];\n\t\t\t\tgraphic_data.columns = data.columns;\n\n\t\t\t\t// Further process the graphic_data\n\t\t\t\tconst categories = Object.keys(graphic_data[0]).filter(\n\t\t\t\t\t(k) => k !== 'date' && k !== 'series'\n\t\t\t\t);\n\t\t\t\tgraphic_data.forEach((d) => {\n\t\t\t\t\td.date = d3.timeParse(config.essential.dateFormat)(d.date);\n\t\t\t\t\tfor (let category of categories) {\n\t\t\t\t\t\td[category] = +d[category];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tdrawGraphic(seriesName, graphic_data, i);\n\t\t\t})\n\t\t})\n};\n\n// use pym to create iframed charts dependent on specified variables\n\npymChild = new pym.Child({\n\trenderCallback: renderCallback,\n});\n\n",
            "chart_css": ".title {\n    font-weight: 600;\n    fill: #414042;\n  }\n\n  #legend{\n    display: grid;\n    align-items: center;\n    padding-bottom: 20px;\n  }",
            "data_csv": "date,category one,category two has a really long name and takes a lot of space,category three,category four,category five,category six,series\n1997,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series1\n1998,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series1\n1999,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series1\n2000,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series1\n2001,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series1\n2002,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series1\n2003,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series1\n2004,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series1\n2005,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series1\n2006,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series1\n2007,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series1\n2008,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series1\n2009,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series1\n2010,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series1\n2011,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series1\n2012,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series1\n2013,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series1\n2014,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series1\n2015,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series1\n2016,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series1\n2017,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series1\n1997,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series2\n1998,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series2\n1999,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series2\n2000,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series2\n2001,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series2\n2002,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series2\n2003,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series2\n2004,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series2\n2005,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series2\n2006,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series2\n2007,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series2\n2008,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series2\n2009,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series2\n2010,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series2\n2011,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series2\n2012,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series2\n2013,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series2\n2014,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series2\n2015,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series2\n2016,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series2\n2017,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series2\n1997,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series3\n1998,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series3\n1999,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series3\n2000,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series3\n2001,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series3\n2002,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series3\n2003,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series3\n2004,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series3\n2005,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series3\n2006,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series3\n2007,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series3\n2008,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series3\n2009,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series3\n2010,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series3\n2011,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series3\n2012,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series3\n2013,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series3\n2014,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series3\n2015,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series3\n2016,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series3\n2017,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series3\n1997,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series4\n1998,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series4\n1999,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series4\n2000,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series4\n2001,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series4\n2002,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series4\n2003,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series4\n2004,0.150000,0.150000,0.150000,0.150000,0.150000,0.250000,series4\n2005,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series4\n2006,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series4\n2007,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series4\n2008,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series4\n2009,0.140000,0.140000,0.140000,0.140000,0.140000,0.300000,series4\n2010,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series4\n2011,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series4\n2012,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series4\n2013,0.130000,0.130000,0.130000,0.130000,0.130000,0.350000,series4\n2014,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series4\n2015,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series4\n2016,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series4\n2017,0.120000,0.120000,0.120000,0.120000,0.120000,0.400000,series4",
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\n\t\t\t\"#206095\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%y\",\n\t\t\t\"md\": \"%Y\",\n\t\t\t\"lg\": \"%Y\"\n\t\t},\n\t\t\"yAxisFormat\": \".0%\",\n\t\t\"dateFormat\": \"%Y\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"stackOffset\": \"stackOffsetExpand\",\n\t\t// options include\n\t\t// stackOffsetNone means the baseline is set at zero\n\t\t// stackOffsetExpand to do 100% charts\n\t\t// stackOffsetDiverging for data with positive and negative values\n\t\t\"stackOrder\": \"stackOrderNone\"\n\t\t// other options include\n\t\t// stackOrderNone means the order is taken from the datafile\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\n\t\t// stackOrderReverse reverse the order as set from the data file\n\t},\n\t\"optional\": {\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 1,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [1, 1]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 50\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 50\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 50\n\t\t\t}\n\t\t},\n\t\t\"xAxisTicksEvery\": {\n\t\t\t\"sm\": 7,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\": 4\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600,\n\t\t\"legendColumns\": 4,\n\t\t\"dropYAxis\": true\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#206095\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"dataLabels\": {\n\t\t\t\"show\": true,\n\t\t\t\"numberFormat\": \".0%\"\n\t\t},\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisLabel\": \"x axis label\"\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 30,\n\t\t\t\"md\": 30,\n\t\t\t\"lg\": 30\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\n\t\t10 * (graphic_data.length - 1) +\n\t\t12;\n\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\tconst y = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.2)\n\t\t.paddingInner(((graphic_data.length - 1) * 10) / (graphic_data.length * 30))\n\t\t.range([0, height])\n\t\t.round(true);\n\n\t//use the data to find unique entries in the name column\n\ty.domain([...new Set(graphic_data.map((d) => d.name))]);\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.tickFormat(d3.format(config.essential.dataLabels.numberFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tif (config.essential.xDomain == 'auto') {\n\t\tif (d3.min(graphic_data.map(({ value }) => Number(value))) >= 0) {\n\t\t\tx.domain([\n\t\t\t\t0,\n\t\t\t\td3.max(graphic_data.map(({ value }) => Number(value)))]); //modified so it converts string to number\n\t\t} else {\n\t\t\tx.domain(d3.extent(graphic_data.map(({ value }) => Number(value))))\n\t\t}\n\t} else {\n\t\tx.domain(config.essential.xDomain);\n\t}\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.selectAll('rect')\n\t\t.data(graphic_data)\n\t\t.join('rect')\n\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\n\t\t.attr('y', (d) => y(d.name))\n\t\t.attr('width', (d) => Math.abs(x(d.value) - x(0)))\n\t\t.attr('height', y.bandwidth())\n\t\t.attr('fill', config.essential.colour_palette);\n\n\tlet labelPositionFactor = 7;\n\n\tif (config.essential.dataLabels.show == true) {\n\t\tsvg\n\t\t\t.selectAll('text.dataLabels')\n\t\t\t.data(graphic_data)\n\t\t\t.join('text')\n\t\t\t.attr('class', 'dataLabels')\n\t\t\t.attr('x', (d) => d.value > 0 ? x(d.value) :\n\t\t\t\tMath.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\n\t\t\t.attr('dx', (d) => d.value > 0 ?\n\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\n\t\t\t\t3)\n\t\t\t.attr('y', (d) => y(d.name) + y.bandwidth()/2)\n\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t.attr('text-anchor', (d) => d.value > 0 ?\n\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\n\t\t\t\t\"start\"\n\t\t\t)\n\t\t\t.attr('fill', (d) =>\n\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\n\t\t\t)\n\t\t\t.text((d) =>\n\t\t\t\td3.format(config.essential.dataLabels.numberFormat)(d.value)\n\t\t\t);\n\t} //end if for datalabels\n\n\t// This does the x-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.append('text')\n\t\t.attr('x', chart_width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n",
            "data_csv": "name,value\nOther services,0.987848719\nManufacturing,0.983661406\nConstruction,0.681288045\nArts,-0.0481757214\nAdministrative,0.209665614\nWholesale trade,0.176396639\nAdministrative and supportive service activities,0.047910167\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-clustered": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"legendLabels\": [\"Category 1 goes here\", \"Category 2 goes here\"],\n\t\t\"colour_palette\": [\"#206095\", \"#27a0cc\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"dataLabels\": {\n\t\t\t\"show\": true,\n\t\t\t\"numberFormat\": \".0%\"\n\t\t},\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisLabel\": \"x axis label\"\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 28,\n\t\t\t\"md\": 28,\n\t\t\t\"lg\": 28\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tnamesUnique = [...new Set(graphic_data.map((d) => d.name))];\n\tcategoriesUnique = [...new Set(graphic_data.map((d) => d.category))];\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\n\t\t14 * (namesUnique.length - 1) +\n\t\t(config.optional.seriesHeight[size] * categoriesUnique.length + 14) * 0.2;\n\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\tconst y = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.1)\n\t\t.paddingInner(((namesUnique.length - 1) * 14) / (graphic_data.length * 28))\n\t\t.range([0, height])\n\t\t.round(true);\n\n\t//use the data to find unique entries in the name column\n\ty.domain(namesUnique);\n\n\tconst y2 = d3\n\t\t.scaleBand()\n\t\t.range([0, y.bandwidth()])\n\t\t.padding(0)\n\t\t.domain(categoriesUnique);\n\n\tconst colour = d3\n\t\t.scaleOrdinal()\n\t\t.range(config.essential.colour_palette)\n\t\t.domain(categoriesUnique);\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.tickFormat(d3.format(config.essential.dataLabels.numberFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t// Set up the legend\n\tlet legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(config.essential.legendLabels, config.essential.colour_palette)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t\tif (config.essential.xDomain == 'auto') {\n\t\t\tif (d3.min(graphic_data.map(({ value }) => Number(value))) >= 0) {\n\t\t\t\tx.domain([\n\t\t\t\t\t0,\n\t\t\t\t\td3.max(graphic_data.map(({ value }) => Number(value)))]); //modified so it converts string to number\n\t\t\t} else {\n\t\t\t\tx.domain(d3.extent(graphic_data.map(({ value }) => Number(value))))\n\t\t\t}\n\t\t} else {\n\t\t\tx.domain(config.essential.xDomain);\n\t\t}\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.selectAll('rect')\n\t\t.data(graphic_data)\n\t\t.join('rect')\n\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\n\t\t.attr('y', (d) => y(d.name) + y2(d.category))\n\t\t.attr('width', (d) => Math.abs(x(d.value) - x(0)))\n\t\t.attr('height', y2.bandwidth())\n\t\t.attr('fill', (d) => colour(d.category));\n\n\t\tlet labelPositionFactor = 7;\n\n\tif (config.essential.dataLabels.show == true) {\n\t\tsvg\n\t\t\t.selectAll('text.dataLabels')\n\t\t\t.data(graphic_data)\n\t\t\t.join('text')\n\t\t\t.attr('class', 'dataLabels')\n\t\t\t.attr('x', (d) => d.value > 0 ? x(d.value) :\n\t\t\t\tMath.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\n\t\t\t.attr('dx', (d) => d.value > 0 ?\n\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\n\t\t\t\t3)\n\t\t\t.attr('y', (d) => y(d.name) + y2(d.category) + y2.bandwidth()/2)\n\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t.attr('text-anchor', (d) => d.value > 0 ?\n\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\n\t\t\t\t\"start\"\n\t\t\t)\n\t\t\t.attr('fill', (d) =>\n\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\n\t\t\t)\n\t\t\t.text((d) =>\n\t\t\t\td3.format(config.essential.dataLabels.numberFormat)(d.value)\n\t\t\t);\n\t} //end if for datalabels\n\n\t// This does the x-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.append('text')\n\t\t.attr('x', chart_width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//create link to source\n\td3.select('#source').text('Source – ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "data_csv": "name,category,value\nOther services,category 2,0.987848719\nManufacturing,category 2,0.983661406\nConstruction,category 2,0.681288045\nOther services,category 1,0.500002051\nArts,category 2,0.481757214\nManufacturing,category 1,0.246937971\nAdministrative,category 2,0.209665614\nWholesale trade,category 2,0.176396639\nWholesale trade,category 1,-0.167060372\nConstruction,category 1,0.064017735\nAdministrative and supportive service activities,category 1,0.047910167\nArts,category 1,0.018920435",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-clustered-sm": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\", \"#003C57\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"The chart canvas is hidden from screen readers. The main message is summarised by the chart title and the data behind the chart is available to download below.\",\n\t\t\"dataLabels\": {\n\t\t\t\"show\": true,\n\t\t\t\"numberFormat\": \".0%\"\n\t\t},\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisLabel\": \"x axis label\"\n\t},\n\t\"optional\": {\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 1,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 2],\n\t\t\t\"md\": [1, 2],\n\t\t\t\"lg\": [1, 2]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 200\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 200\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 200\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 60,\n\t\t\t\"md\": 60,\n\t\t\t\"lg\": 60\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 2,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 4\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600,\n\t\t\"dropYAxis\": true\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet legendCategories = [...new Set(graphic_data.map((d) => d.category))]\n\n\t//Set up the legend\n\tlegendItem = legend\n\t\t.selectAll('div')\n\t\t.data(legendCategories)\n\t\t.join('div')\n\t\t.attr('class', 'legend--item')\n\n\tlegendItem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', (d, i) => config.essential.colour_palette[i])\n\n\tlegendItem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.text(d => d)\n\n\t// Nest the graphic_data by the 'series' column\n\tlet nested_data = d3.group(graphic_data, (d) => d.series);\n\n\t//Generate a list of categories based on the order in the first chart that we can use to order the subsequent charts\n\tlet namesArray = [...new Set([...nested_data][0][1].map(d => d.name))];\n\t// console.log(namesArray)\n\n\t// Create a container div for each small multiple\n\tlet chartContainers = graphic\n\t\t.selectAll('.chart-container')\n\t\t.data(Array.from(nested_data))\n\t\t.join('div')\n\t\t.attr('class', 'chart-container');\n\n\tfunction drawChart(container, data, chartIndex) {\n\n\t\t// console.log(chartIndex);\n\n\t\t//Sort the data so that the bars in each chart are in the same order\n\t\tdata.sort((a, b) => namesArray.indexOf(a.name) - namesArray.indexOf(b.name))\n\t\t\n\t\t// Log the data being used for each small multiple\n\t\t// console.log('Data for this small multiple:', data);\n\n\t\tfunction calculateChartWidth(size) {\n\t\t\tconst chartEvery = config.optional.chart_every[size];\n\t\t\tconst chartMargin = config.optional.margin[size];\n\n\t\t\tif (config.optional.dropYAxis) {\n\t\t\t\t// Chart width calculation allowing for 10px left margin between the charts\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\n\t\t\t\treturn chartWidth;\n\t\t\t} else {\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n\t\t\t\treturn chartWidth;\n\t\t\t}\n\t\t}\n\n\n\t\t// Calculate the height based on the data\n\t\tlet height = config.optional.seriesHeight[size] * namesArray.length +\n\t\t\t10 * (namesArray.length - 1) +\n\t\t\t12;\n\n\n\t\tlet chartsPerRow = config.optional.chart_every[size];\n\t\tlet chartPosition = chartIndex % chartsPerRow;\n\n\t\tlet margin = { ...config.optional.margin[size] };\n\n\t\t// If the chart is not in the first position in the row, reduce the left margin\n\t\tif (config.optional.dropYAxis) {\n\t\t\tif (chartPosition !== 0) {\n\t\t\t\tmargin.left = 10;\n\t\t\t}\n\t\t}\n\n\t\tlet chart_width = calculateChartWidth(size)\n\n\t\t//set up scales\n\t\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\t\tconst y = d3\n\t\t\t.scaleBand()\n\t\t\t.paddingOuter(0.1)\n\t\t\t.paddingInner(0.2)\n\t\t\t.range([0, height])\n\t\t\t.round(true);\n\n\t\t//use the data to find unique entries in the name column\n\t\ty.domain([...new Set(data.map((d) => d.name))]);\n\n\n\t\tconst y2 = d3\n\t\t\t.scaleBand()\n\t\t\t.paddingOuter(0)\n\t\t\t.paddingInner(0)\n\t\t\t.range([0, y.bandwidth()])\n\t\t\t.round(true);\n\n\t\t//use the data to find unique entries in the category column\n\t\ty2.domain(legendCategories);\n\t\t// console.log(y2.domain())\n\n\t\t//set up yAxis generator\n\n\t\tlet yAxis = d3.axisLeft(y)\n\t\t\t.tickSize(0)\n\t\t\t.tickPadding(10)\n\t\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? (d) :\n\t\t\t\tchartPosition == 0 ? (d) : \"\");\n\n\t\t//set up xAxis generator\n\t\tlet xAxis = d3\n\t\t\t.axisBottom(x)\n\t\t\t.tickSize(-height)\n\t\t\t.tickFormat(d3.format(config.essential.dataLabels.numberFormat))\n\t\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t\t//create svg for chart\n\t\tsvg = container\n\t\t\t.append('svg')\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t\t.attr('class', 'chart')\n\t\t\t.style('background-color', '#fff')\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t\tif (config.essential.xDomain == 'auto') {\n\t\t\tx.domain([\n\t\t\t\tMath.min(0, d3.min(graphic_data.map(({ value }) => Number(value)))),\n\t\t\t\t//x domain is the maximum out of the value and the reference value\n\t\t\t\tMath.max(0, d3.max(graphic_data.map(({ value }) => Number(value))))\n\t\t\t])\n\t\t} else {\n\t\t\tx.domain(config.essential.xDomain);\n\t\t}\n\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.call(xAxis)\n\t\t\t.selectAll('line')\n\t\t\t.each(function (d) {\n\t\t\t\tif (d == 0) {\n\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t}\n\t\t\t});\n\n\t\t// if (chartPosition == 0) {\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis')\n\t\t\t.call(yAxis)\n\t\t\t.selectAll('text')\n\t\t\t.call(wrap, margin.left - 10);\n\t\t// }\n\n\n\t\tsvg\n\t\t\t.selectAll('rect')\n\t\t\t.data(data)\n\t\t\t.join('rect')\n\t\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\n\t\t\t.attr('y', (d) => y(d.name) + y2(d.category))\n\t\t\t.attr('width', (d) => Math.abs(x(d.value) - x(0)))\n\t\t\t.attr('height', y2.bandwidth())\n\t\t\t.attr('fill', (d) => config.essential.colour_palette[legendCategories.indexOf(d.category)]);\n\n\n\t\tlet labelPositionFactor = 7;\n\n\t\tif (config.essential.dataLabels.show == true && legendCategories.length <= 2) {\n\t\t\tsvg\n\t\t\t\t.selectAll('text.dataLabels')\n\t\t\t\t.data(data)\n\t\t\t\t.join('text')\n\t\t\t\t.attr('class', 'dataLabels')\n\t\t\t\t.attr('x', (d) => d.value > 0 ? x(d.value) :\n\t\t\t\t\tMath.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\n\t\t\t\t.attr('dx', (d) => d.value > 0 ?\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\n\t\t\t\t\t3)\n\t\t\t\t.attr('y', (d) => y(d.name) + y2(d.category) + y2.bandwidth() / 2)\n\t\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t\t.attr('text-anchor', (d) => d.value > 0 ?\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\n\t\t\t\t\t\"start\"\n\t\t\t\t)\n\t\t\t\t.attr('fill', (d) =>\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\n\t\t\t\t)\n\t\t\t\t.text((d) =>\n\t\t\t\t\td3.format(config.essential.dataLabels.numberFormat)(d.value)\n\t\t\t\t);\n\t\t} //end if for datalabels\n\n\t\t// This does the chart title label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('dy', -15)\n\t\t\t.attr('class', 'title')\n\t\t\t.text(d => d[0])\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.call(wrap, chart_width);\n\n\t\t// This does the x-axis label\n\t\tif (chartIndex % chartsPerRow === chartsPerRow - 1 || chartIndex === [...nested_data].length - 1) {\n\t\t\tsvg\n\t\t\t\t.append('g')\n\t\t\t\t.attr('transform', `translate(0, ${height})`)\n\t\t\t\t.append('text')\n\t\t\t\t.attr('x', chart_width)\n\t\t\t\t.attr('y', 35)\n\t\t\t\t.attr('class', 'axis--label')\n\t\t\t\t.text(config.essential.xAxisLabel)\n\t\t\t\t.attr('text-anchor', 'end');\n\t\t}\n\t}\n\n\t// Draw the charts for each small multiple\n\tchartContainers.each(function ([key, value], i) {\n\t\tdrawChart(d3.select(this), value, i);\n\t});\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\n.chart-container {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.chart-container:last-child {\n  margin-right: 0;\n}\n\n.title {\n  font-weight: 600;\n  fill: #414042;\n}\n",
            "data_csv": "name,series,category,value\nOther services,series1,value,0.987848719\nOther services,series1,ref,0.713166822\nManufacturing,series1,value,0.983661406\nManufacturing,series1,ref,0.482401697\nConstruction,series1,value,0.681288045\nConstruction,series1,ref,0.495087081\nArts,series1,value,0.481757214\nArts,series1,ref,0.310957379\nAdministrative,series1,value,0.209665614\nAdministrative,series1,ref,0.223459104\nWholesale trade,series1,value,0.176396639\nWholesale trade,series1,ref,0.787709541\nAdministrative and supportive service activities,series1,value,0.047910167\nAdministrative and supportive service activities,series1,ref,0.873262589\nOther services,series2,value,0.987848719\nOther services,series2,ref,0.102020442\nManufacturing,series2,value,0.983661406\nManufacturing,series2,ref,0.497197175\nConstruction,series2,value,0.681288045\nConstruction,series2,ref,0.450160625\nArts,series2,value,0.481757214\nArts,series2,ref,0.546506975\nAdministrative,series2,value,0.209665614\nAdministrative,series2,ref,0.604779339\nWholesale trade,series2,value,0.176396639\nWholesale trade,series2,ref,0.511551674\nAdministrative and supportive service activities,series2,value,0.047910167\nAdministrative and supportive service activities,series2,ref,0.503160932\nOther services,series3,value,0.987848719\nOther services,series3,ref,0.426386631\nManufacturing,series3,value,0.983661406\nManufacturing,series3,ref,0.656803629\nAdministrative,series3,value,0.209665614\nAdministrative,series3,ref,-0.138300364\nWholesale trade,series3,value,-0.017639664\nWholesale trade,series3,ref,0.545809768\nAdministrative and supportive service activities,series3,value,0.047910167\nAdministrative and supportive service activities,series3,ref,0.127290739\nConstruction,series3,value,0.681288045\nConstruction,series3,ref,0.488025492\nArts,series3,value,0.481757214\nArts,series3,ref,0.029835392\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-grouped": {
            "config_js": "config={\n  \"essential\": {\n    \"graphic_data_url\": \"data.csv\",\n    \"legendLabels\": {\"min\":\"2015-2019\", \"max\":\"2020\"},\n    //the keys match the column names\n    \"colour_palette\": \"#206095\",\n    \"sourceText\": \"Office for National Statistics\",\n    \"accessibleSummary\":\"This chart has been hidden from screen readers. The main message of the chart is summarised in the chart title.\",\n    \"dataLabels\":{\n      \"show\":true,\n      \"numberFormat\":\".0%\"\n    },\n    \"xAxisFormat\":\".0%\",\n    \"xAxisLabel\":\"x-axis label\",\n    \"xDomain\":\"auto\"\n    // either auto or a custom domain as an array e.g [0,100]\n  },\n  \"optional\": {\n    \"margin\": {\n      \"sm\": {\n        \"top\": 5,\n        \"right\": 20,\n        \"bottom\": 20,\n        \"left\": 120\n      },\n      \"md\": {\n        \"top\": 5,\n        \"right\": 20,\n        \"bottom\": 20,\n        \"left\": 120\n      },\n      \"lg\": {\n        \"top\": 5,\n        \"right\": 20,\n        \"bottom\": 40,\n        \"left\": 160\n      }\n    },\n    \"seriesHeight\":{\n      \"sm\":40,\n      \"md\":40,\n      \"lg\":40\n    },\n    \"xAxisTicks\":{\n      \"sm\":3,\n      \"md\":8,\n      \"lg\":10\n    },\n    \"mobileBreakpoint\": 510,\n    \"mediumBreakpoint\": 600\n  }\n};\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\np.groupLabels{\n  padding-top:15px;\n  font-weight: 600;\n}\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\n  // clear out existing graphics\n  graphic.selectAll(\"*\").remove();\n\n\n  //population accessible summmary\n  d3.select('#accessibleSummary').html(config.essential.accessibleSummary)\n\n  let threshold_md = config.optional.mediumBreakpoint;\n  let threshold_sm = config.optional.mobileBreakpoint;\n\n  //set variables for chart dimensions dependent on width of #graphic\n  if (parseInt(graphic.style(\"width\")) < threshold_sm) {\n    size = \"sm\"\n  } else if (parseInt(graphic.style(\"width\")) < threshold_md) {\n    size = \"md\"\n  } else {\n    size = \"lg\"\n  }\n\n  let margin = config.optional.margin[size]\n  let chart_width = parseInt(graphic.style(\"width\")) - margin.left - margin.right;\n\n  groups = d3.groups(graphic_data, (d) => d.group)\n\n  if (config.essential.xDomain == \"auto\") {\n    let min = 0\n    let max = 0\n    for (i = 2; i < graphic_data.columns.length; i++) {\n      min = d3.min([min, d3.min(graphic_data, (d) => +d[graphic_data.columns[i]])])\n      max = d3.max([max, d3.max(graphic_data, (d) => +d[graphic_data.columns[i]])])\n    }\n    xDomain = [min, max]\n  } else {\n    xDomain = config.essential.xDomain\n  }\n\n  //set up scales\n  const x = d3.scaleLinear()\n    .range([0, chart_width])\n    .domain(xDomain);\n\n  const colour = d3.scaleOrdinal()\n    .range(config.essential.colour_palette)\n    .domain(Object.keys(config.essential.legendLabels))\n\n  // create the y scale in groups\n  groups.map(function (d) {\n    //height\n    d[2] = config.optional.seriesHeight[size] * d[1].length\n\n    // y scale\n    d[3] = d3.scaleBand()\n      .paddingOuter(0.2)\n      .paddingInner((graphic_data.length-1)*10/(graphic_data.length*30))\n      .range([0, d[2]])\n      .domain(d[1].map(d => d.name));\n    //y axis generator\n    d[4] = d3.axisLeft(d[3])\n      .tickSize(0)\n      .tickPadding(10);\n  });\n\n  //set up xAxis generator\n  let xAxis = d3.axisBottom(x)\n    .ticks(config.optional.xAxisTicks[size])\n    .tickFormat(d3.format(config.essential.xAxisFormat));\n\n  divs = graphic.selectAll('div.categoryLabels')\n    .data(groups)\n    .join('div')\n\n\n  divs.append('p').attr('class', 'groupLabels').html((d) => d[0])\n\n  svgs = divs.append('svg')\n    .attr('class', 'chart')\n    .attr('height', (d) => d[2] + margin.top + margin.bottom)\n    .attr('width', chart_width + margin.left + margin.right)\n\n  charts = svgs.append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n  charts.each(function (d) {\n    d3.select(this)\n      .append('g')\n      .attr('class', 'y axis')\n      .call(d[4])\n      .selectAll('text')\n      .call(wrap, margin.left - 10)\n\n    d3.select(this)\n      .append('g')\n      .attr('transform', (d) => 'translate(0,' + d[2] + ')')\n      .attr('class', 'x axis')\n      .each(function () {\n        d3.select(this).call(xAxis.tickSize(-d[2]))\n          .selectAll('line').each(function (e) {\n            if (e == 0) {\n              d3.select(this)\n                .attr('class', 'zero-line')\n            };\n          })\n      })\n\n  })\n\n \n\n    charts.selectAll('rect')\n    .data((d) => d[1])\n    .join('rect')\n\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\n    .attr('y', d => groups.filter(f => f[0] == d.group)[0][3](d.name))\n\t\t.attr('width', (d) => Math.abs(x(d.value) - x(0)))\n    .attr('height', (d) => groups.filter(f => f[0] == d.group)[0][3].bandwidth())\n    .attr('fill', config.essential.colour_palette);\n\n\t\tlet labelPositionFactor = 7;\n\n  if(config.essential.dataLabels.show==true){\n    charts.selectAll('text.value')\n    .data((d) => d[1])\n    .join('text')\n    .attr('class', 'dataLabels')\n    .attr('x', (d) => d.value > 0 ? x(d.value) :\n    Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\n  .attr('dx', (d) => d.value > 0 ?\n    (Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\n    3)\n    .attr('y', (d) => groups.filter(f => f[0] == d.group)[0][3](d.name)+groups.filter(f => f[0] == d.group)[0][3].bandwidth()/2)\n    .attr('dominant-baseline', 'middle')\n    .attr('text-anchor', (d) => d.value > 0 ?\n    (Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\n    \"start\"\n  )\n  .attr('fill', (d) =>\n    (Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\n  )\n      .text((d) => d3.format(config.essential.dataLabels.numberFormat)(d.value))\n    }//end if for datalabels\n\n\n\n  // This does the x-axis label\n  charts.each(function (d, i) {\n    \n    if (i == groups.length - 1) {\n      d3.select(this)\n        .append('text')\n        .attr('x', chart_width)\n        .attr('y', (d) => d[2] + 35)\n        .attr('class', 'axis--label')\n        .text(config.essential.xAxisLabel)\n        .attr('text-anchor', 'end')\n    \n    }\n    })\n\n\n\n\n  //create link to source\n  d3.select(\"#source\")\n    .text(\"Source: \" + config.essential.sourceText)\n\n  //use pym to calculate chart dimensions\n  if (pymChild) {\n    pymChild.sendHeight();\n  }\n}\n\nfunction wrap(text, width) {\n  text.each(function () {\n    let text = d3.select(this),\n      words = text.text().split(/\\s+/).reverse(),\n      word,\n      line = [],\n      lineNumber = 0,\n      lineHeight = 1.1, // ems\n      // y = text.attr(\"y\"),\n      x = text.attr(\"x\"),\n      dy = parseFloat(text.attr(\"dy\")),\n      tspan = text.text(null).append(\"tspan\").attr('x', x);\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").attr('x', x).attr(\"dy\", lineHeight + \"em\").text(word);\n      }\n    }\n    let breaks = text.selectAll(\"tspan\").size();\n    text.attr(\"y\", function () {\n      return -6 * (breaks - 1);\n    });\n  });\n\n}\n\nd3.csv(config.essential.graphic_data_url)\n  .then(data => {\n    //load chart data\n    graphic_data = data\n\n    //use pym to create iframed chart dependent on specified variables\n    pymChild = new pym.Child({\n      renderCallback: drawGraphic\n    });\n  });\n",
            "data_csv": "name,group,value\r\nDetached,Property type,0.7399\r\nSemi-detached,Property type,0.6325\r\nTerraced,Property type,0.4722\r\nFlats and maisonettes,Property type,0.6556\r\nOwner-occupied,Tenure,0.5577\r\nPrivate rent,Tenure,0.449\r\nSocial rent,Tenure,0.7512\r\n1929 and before,Property age,-0.08005\r\n1930 to 1982,Property age,0.6168\r\n1983 to 2011,Property age,0.9673\r\n2012 and after,Property age,0.9969\r\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-grouped-clustered": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"legendLabels\": [\"Category 1 goes here\", \"Category 2 goes here\"],\n\t\t\"colour_palette\": [\"#206095\",\"#27A0CC\",\"#871A5B\",\"#A8BD3A\",\"#F66068\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"dataLabels\": {\n\t\t\t\"show\": true,\n\t\t\t\"numberFormat\": \".0%\"\n\t\t},\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisLabel\": \"x axis label\"\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 70,\n\t\t\t\"md\": 70,\n\t\t\t\"lg\": 70\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tnamesUnique = [...new Set(graphic_data.map((d) => d.name))];\n\tcategoriesUnique = [...new Set(graphic_data.map((d) => d.category))];\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\n\t\t14 * (namesUnique.length - 1) +\n\t\t(config.optional.seriesHeight[size] * categoriesUnique.length + 14) * 0.2;\n\n\t//grouping the data\n\tgroups = d3.groups(graphic_data, (d) => d.group)\n\n\t// create the y scale in groups\n\tgroups.map(function (d) {\n\t\t//height\n\t\td[2] = config.optional.seriesHeight[size] * [...new Set(d[1].map((d) => d.name))].length //height determined based on number of unique names on y axis\n\t\t// y scale\n\t\td[3] = d3.scaleBand()\n\t\t\t.paddingOuter(0.1)\n\t\t\t.paddingInner(([...new Set(d[1].map((d) => d.name))].length - 1) * 14 / (d[1].length * 28))\n\t\t\t.range([0, d[2]])\n\t\t\t.domain(d[1].map(d => d.name));\n\n\t\t//y axis generator\n\t\td[4] = d3.axisLeft(d[3])\n\t\t\t.tickSize(0)\n\t\t\t.tickPadding(10);\n\t\t//y2\n\t\td[5] = d3.scaleBand()\n\t\t\t.range([0, d[3].bandwidth()])\n\t\t\t.padding(0)\n\t\t\t.domain(categoriesUnique)\n\t});\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\tif (config.essential.xDomain == 'auto') {\n\t\tif (d3.min(graphic_data.map(({ value }) => Number(value))) >= 0) {\n\t\t\tx.domain([\n\t\t\t\t0,\n\t\t\t\td3.max(graphic_data.map(({ value }) => Number(value)))]); //modified so it converts string to number\n\t\t} else {\n\t\t\tx.domain(d3.extent(graphic_data.map(({ value }) => Number(value))))\n\t\t}\n\t} else {\n\t\tx.domain(config.essential.xDomain);\n\t}\n\n\tconst colour = d3\n\t\t.scaleOrdinal()\n\t\t.range(config.essential.colour_palette)\n\t\t.domain(categoriesUnique);\n\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.tickFormat(d3.format(config.essential.dataLabels.numberFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\tdivs = graphic.selectAll('div.categoryLabels')\n\t\t.data(groups)\n\t\t.join('div')\n\n\tdivs.append('p').attr('class', 'groupLabels').html((d) => d[0])\n\n\tsvgs = divs.append('svg')\n\t\t.attr('class', (d) => 'chart chart' + groups.indexOf(d))\n\t\t.attr('height', (d) => d[2] + margin.top + margin.bottom)\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\n\tcharts = svgs.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n\tcharts.each(function (d, i) {\n\n\t\td3.select(this)\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis')\n\t\t\t.call(d[4])\n\t\t\t.selectAll('text')\n\t\t\t.call(wrap, margin.left - 10)\n\n\t\td3.select(this)\n\t\t\t.append('g')\n\t\t\t.attr('transform', (d) => 'translate(0,' + d[2] + ')')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.each(function () {\n\t\t\t\td3.select(this).call(xAxis.tickSize(-d[2]))\n\t\t\t\t\t.selectAll('line').each(function (e) {\n\t\t\t\t\t\tif (e == 0) {\n\t\t\t\t\t\t\td3.select(this)\n\t\t\t\t\t\t\t\t.attr('class', 'zero-line')\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t})\n\n\t\t// charts.selectAll('rect')\n\t\td3.select(this).selectAll('rect')\n\t\t\t.data((d) => d[1])\n\t\t\t.join('rect')\n\t\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\n\t\t\t.attr('y', (d) => groups[i][3](d.name) + groups[i][5](d.category))\n\t\t\t.attr('width', (d) => Math.abs(x(d.value) - x(0)))\n\t\t\t.attr('height', (d) => groups[i][5].bandwidth())\n\t\t\t.attr(\"fill\", (d) => colour(d.category));\n\n\t\tlet labelPositionFactor = 7;\n\n\t\t//adding data labels to the bars - only if two categories or fewer\n\t\tif (config.essential.dataLabels.show == true && categoriesUnique.length <= 2) {\n\t\t\td3.select(this)\n\t\t\t\t.selectAll('text.dataLabels')\n\t\t\t\t.data((d) => d[1])\n\t\t\t\t.join('text')\n\t\t\t\t.attr('class', 'dataLabels')\n\t\t\t\t.attr('x', (d) => d.value > 0 ? x(d.value) :\n\t\t\t\t\tMath.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\n\t\t\t\t.attr('dx', (d) => d.value > 0 ?\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\n\t\t\t\t\t3)\n\t\t\t\t.attr('y', (d) => groups[i][3](d.name) + groups[i][5](d.category) + groups[i][5].bandwidth()/2)\n\t\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t\t.attr('text-anchor', (d) => d.value > 0 ?\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\n\t\t\t\t\t\"start\"\n\t\t\t\t)\n\t\t\t\t.attr('fill', (d) =>\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\n\t\t\t\t)\n\t\t\t\t.text((d) =>\n\t\t\t\t\td3.format(config.essential.dataLabels.numberFormat)(d.value)\n\t\t\t\t);\n\t\t} //end if for datalabels\n\n\n\t\t// This does the x-axis label - here only added to the last group\n\t\tif (i == (groups.length - 1)) {\n\t\t\td3.select(this)\n\t\t\t\t.append('g')\n\t\t\t\t.attr('transform', 'translate(' + 0 + ',' + (d[2] + margin.top) + ')')\n\t\t\t\t.append('text')\n\t\t\t\t.attr('x', chart_width)\n\t\t\t\t.attr('y', 0)\n\t\t\t\t.attr('dy', 25)\n\t\t\t\t.attr('class', 'axis--label')\n\t\t\t\t.text(config.essential.xAxisLabel)\n\t\t\t\t.attr('text-anchor', 'end')\n\t\t\t\t.call(wrap, (chart_width + margin.left));\n\t\t}\n\n\t})\n\n\n\t// Set up the legend\n\tlet legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(config.essential.legendLabels, config.essential.colour_palette)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\np.groupLabels{\n  padding-top:15px;\n  font-weight: 600;\n}\n",
            "data_csv": "name,category,value,group\r\nOther services,category 2,0.987848719,Group name 1\r\nManufacturing,category 2,0.983661406,Group name 1\r\nConstruction,category 2,0.681288045,Group name 1\r\nOther services,category 1,0.500002051,Group name 1\r\nArts,category 2,0.481757214,Group name 1\r\nManufacturing,category 1,0.246937971,Group name 1\r\nAdministrative,category 2,0.209665614,Group name 1\r\nWholesale trade,category 2,0.176396639,Group name 1\r\nWholesale trade,category 1,0.167060372,Group name 1\r\nConstruction,category 1,0.064017735,Group name 1\r\nAdministrative and supportive service activities,category 1,0.047910167,Group name 1\r\nArts,category 1,0.018920435,Group name 1\r\nOther services,category 2,-0.049392436,Group name 2\r\nManufacturing,category 2,0.491830703,Group name 2\r\nConstruction,category 2,0.340644023,Group name 2\r\nOther services,category 1,0.250001026,Group name 2\r\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-sm": {
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\n.chart-container {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.chart-container:last-child {\n  margin-right: 0;\n}\n\n.title {\n  font-weight: 600;\n  fill: #414042;\n}\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\t// Clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\n\t// Nest the graphic_data by the 'series' column\n\tlet nested_data = d3.group(graphic_data, (d) => d.series);\n\n\t//Generate a list of categories based on the order in the first chart that we can use to order the subsequent charts\n\tlet namesArray = [...nested_data][0][1].map(d => d.name);\n\n\t// Create a container div for each small multiple\n\tlet chartContainers = graphic\n\t\t.selectAll('.chart-container')\n\t\t.data(Array.from(nested_data))\n\t\t.join('div')\n\t\t.attr('class', 'chart-container');\n\n\tfunction drawChart(container, data, chartIndex) {\n\t\t// Log the data being used for each small multiple\n\t\t// console.log('Data for this small multiple:', data);\n\t\t// console.log(chartIndex);\n\n\t\t//Sort the data so that the bars in each chart are in the same order\n\t\tdata.sort((a, b) => namesArray.indexOf(a.name) - namesArray.indexOf(b.name))\n\n\t\tfunction calculateChartWidth(size) {\n\t\t\tconst chartEvery = config.optional.chart_every[size];\n\t\t\tconst chartMargin = config.optional.margin[size];\n\n\t\t\tif (config.optional.dropYAxis) {\n\t\t\t\t// Chart width calculation allowing for 10px left margin between the charts\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\n\t\t\t\treturn chartWidth;\n\t\t\t} else {\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n\t\t\t\treturn chartWidth;\n\t\t\t}\n\t\t}\n\n\n\t\t// Calculate the height based on the data\n\t\tlet height = config.optional.seriesHeight[size] * data.length +\n\t\t\t10 * (data.length - 1) +\n\t\t\t12;\n\n\n\t\tlet chartsPerRow = config.optional.chart_every[size];\n\t\tlet chartPosition = chartIndex % chartsPerRow;\n\n\t\tlet margin = { ...config.optional.margin[size] };\n\n\t\t// If the chart is not in the first position in the row, reduce the left margin\n\t\tif (config.optional.dropYAxis) {\n\t\t\tif (chartPosition !== 0) {\n\t\t\t\tmargin.left = 10;\n\t\t\t}\n\t\t}\n\n\t\tlet chart_width = calculateChartWidth(size)\n\n\t\t//set up scales\n\t\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\t\tconst y = d3\n\t\t\t.scaleBand()\n\t\t\t.paddingOuter(0.2)\n\t\t\t.paddingInner(((data.length - 1) * 10) / (data.length * 30))\n\t\t\t.range([0, height])\n\t\t\t.round(true);\n\n\t\t//use the data to find unique entries in the name column\n\t\ty.domain([...new Set(data.map((d) => d.name))]);\n\n\t\t//set up yAxis generator - if dropYAxis is true only adding labels to the leftmost chart\n\n\t\tlet yAxis = d3.axisLeft(y)\n\t\t\t.tickSize(0)\n\t\t\t.tickPadding(10)\n\t\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? (d) :\n\t\t\t\tchartPosition == 0 ? (d) : \"\");\n\n\t\t//set up xAxis generator\n\t\tlet xAxis = d3\n\t\t\t.axisBottom(x)\n\t\t\t.tickSize(-height)\n\t\t\t.tickFormat(d3.format(config.essential.dataLabels.numberFormat))\n\t\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t\t//create svg for chart\n\t\tsvg = container\n\t\t\t.append('svg')\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t\t.attr('class', 'chart')\n\t\t\t.style('background-color', '#fff')\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t\tif (config.essential.xDomain == 'auto') {\n\t\t\tif (d3.min(graphic_data.map(({ value }) => Number(value))) >= 0) {\n\t\t\t\tx.domain([\n\t\t\t\t\t0,\n\t\t\t\t\td3.max(graphic_data.map(({ value }) => Number(value)))]); //modified so it converts string to number\n\t\t\t} else {\n\t\t\t\tx.domain(d3.extent(graphic_data.map(({ value }) => Number(value))))\n\t\t\t}\n\t\t} else {\n\t\t\tx.domain(config.essential.xDomain);\n\t\t}\n\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.call(xAxis)\n\t\t\t.selectAll('line')\n\t\t\t.each(function (d) {\n\t\t\t\tif (d == 0) {\n\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t}\n\t\t\t});\n\n\t\t// if (chartPosition == 0) {\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis')\n\t\t\t.call(yAxis)\n\t\t\t.selectAll('text')\n\t\t\t.call(wrap, margin.left - 10);\n\t\t// }\n\n\n\t\tsvg\n\t\t\t.selectAll('rect')\n\t\t\t.data(data)\n\t\t\t.join('rect')\n\t\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\n\t\t\t.attr('y', (d) => y(d.name))\n\t\t\t.attr('width', (d) => Math.abs(x(d.value) - x(0)))\n\t\t\t.attr('height', y.bandwidth())\n\t\t\t.attr('fill', config.essential.colour_palette);\n\n\t\t\tlet labelPositionFactor = 7;\n\n\t\tif (config.essential.dataLabels.show == true) {\n\t\t\tsvg\n\t\t\t\t.selectAll('text.dataLabels')\n\t\t\t\t.data(data)\n\t\t\t\t.join('text')\n\t\t\t\t.attr('class', 'dataLabels')\n\t\t\t\t.attr('x', (d) => d.value > 0 ? x(d.value) :\n\t\t\t\t\tMath.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\n\t\t\t\t.attr('dx', (d) => d.value > 0 ?\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\n\t\t\t\t\t3)\n\t\t\t\t.attr('y', (d) => y(d.name) + y.bandwidth()/2)\n\t\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t\t.attr('text-anchor', (d) => d.value > 0 ?\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\n\t\t\t\t\t\"start\"\n\t\t\t\t)\n\t\t\t\t.attr('fill', (d) =>\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\n\t\t\t\t)\n\t\t\t\t.text((d) =>\n\t\t\t\t\td3.format(config.essential.dataLabels.numberFormat)(d.value)\n\t\t\t\t);\n\t\t} //end if for datalabels\n\n\t\t// This does the chart title label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('dy', -15)\n\t\t\t.attr('class', 'title')\n\t\t\t.text(d => d[0])\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.call(wrap, chart_width);\n\n\t\t// This does the x-axis label\n\t\tif (chartIndex % chartsPerRow === chartsPerRow - 1 || chartIndex === [...nested_data].length - 1) {\n\t\t\tsvg\n\t\t\t\t.append('g')\n\t\t\t\t.attr('transform', `translate(0, ${height})`)\n\t\t\t\t.append('text')\n\t\t\t\t.attr('x', chart_width)\n\t\t\t\t.attr('y', 35)\n\t\t\t\t.attr('class', 'axis--label')\n\t\t\t\t.text(config.essential.xAxisLabel)\n\t\t\t\t.attr('text-anchor', 'end');\n\t\t}\n\t}\n\n\t// Draw the charts for each small multiple\n\tchartContainers.each(function ([key, value], i) {\n\t\tdrawChart(d3.select(this), value, i);\n\t});\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "data_csv": "name,value,series\nOther services,0.987848719,series1\nManufacturing,0.983661406,series1\nConstruction,0.681288045,series1\nArts,0.481757214,series1\nAdministrative,0.209665614,series1\nWholesale trade,0.176396639,series1\nAdministrative and supportive service activities,0.047910167,series1\nArts,0.481757214,series2\nAdministrative,0.209665614,series2\nWholesale trade,0.176396639,series2\nAdministrative and supportive service activities,0.047910167,series2\nOther services,-0.01987848719,series2\nManufacturing,0.983661406,series2\nConstruction,0.681288045,series2",
            "comparison_csv": null,
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#206095\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"dataLabels\": {\n\t\t\t\"show\": 1,\n\t\t\t\"numberFormat\": \".0%\"\n\t\t},\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisLabel\": \"x axis label\"\n\t},\n\t\"optional\": {\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 1,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 2],\n\t\t\t\"md\": [1, 2],\n\t\t\t\"lg\": [1, 2]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 200\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 200\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 200\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 30,\n\t\t\t\"md\": 30,\n\t\t\t\"lg\": 30\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 2,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 4\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600,\n\t\t\"dropYAxis\": true\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n"
        },
        "bar-chart-horizontal-sm-colour": {
            "config_js": "config = {\n  essential: {\n    graphic_data_url: \"data.csv\", \n    colour_palette: [\"#206095\", \"#27A0CC\",\"#871A5B\", \"#A8BD3A\",\"#F66068\"],\n    sourceText: \"Office for National Statistics\",\n    accessibleSummary: \"The chart canvas is hidden from screen readers. The main message is summarised by the chart title and the data behind the chart is available to download below.\",\n    xDomain: [0, 80],\n    // either \"auto\" or an array for the x domain e.g. [0,100]\n    xAxisTickFormat: \".0f\",\n    xAxisLabel: \"Percentage (%)\",\n    stackOffset: \"stackOffsetNone\",\n    // options include\n    // stackOffsetNone means the baseline is set at zero\n    // stackOffsetExpand to do 100% charts\n    // stackOffsetDivergine for data with positive and negative values\n    stackOrder: \"stackOrderNone\",\n    // other options include\n    // stackOrderNone means the order is taken from the datafile\n    // stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\n    // stackOrderAscending the smallest series (according to the sum of values) is at the bottom\n    // stackOrderDescending the largest series (according to the sum of values) is at the bottom\n    // stackOrderReverse reverse the order as set from the data file\n  },\n  optional: {\n    chart_every: {\n      sm: 1,\n      md: 2,\n      lg: 2, // This indicates you want 2 charts side by side\n    },\n    aspectRatio: {\n      sm: [3, 4],\n      md: [3, 4],\n      lg: [3, 4], //lg: [1.4, 2], can be used to make a 2x wide grid\n    },\n    margin: {\n      sm: {\n        top: 60,\n        right: 20,\n        bottom: 50,\n        left: 160,\n      },\n      md: {\n        top: 60,\n        right: 20,\n        bottom: 50,\n        left: 160,\n      },\n      lg: {\n        top: 60,\n        right: 20,\n        bottom: 50,\n        left: 160,\n      },\n    },\n    seriesHeight: {\n      sm: 30,\n      md: 30,\n      lg: 30,\n    },\n    xAxisTicks: {\n      sm: 3,\n      md: 3,\n      lg: 3,\n    },\n    mobileBreakpoint: 510,\n    mediumBreakpoint: 1920,\n  },\n  elements: { select: 0, nav: 0, legend: 1, titles: 0 },\n};\n",
            "script_js": "let pymChild = null;\r\nlet graphic = d3.select(\"#graphic\");\r\n\r\n//Remove previous SVGs\r\nd3.select(\"#graphic\").select(\"img\").remove();\r\n\r\nfunction drawGraphic(seriesName, graphic_data, chartIndex) {\r\n  d3.select(\"#accessibleSummary\").html(config.essential.accessibleSummary);\r\n\r\n  function calculateChartWidth(size) {\r\n    const chartEvery = config.optional.chart_every[size];\r\n    const aspectRatio = config.optional.aspectRatio[size];\r\n    const chartMargin = config.optional.margin[size];\r\n\r\n    const containerWidth = parseInt(graphic.style(\"width\"));\r\n    const chartsPerRow = chartEvery;\r\n    // const chartWidth =\r\n    //   ((containerWidth - chartMargin.left - chartMargin.right) / chartsPerRow) *\r\n    //   (aspectRatio[0] / aspectRatio[1]);\r\n\r\n    // Chart width calculation allowing for 10px left margin between the charts\r\n    const chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\r\n\r\n    return chartWidth;\r\n  }\r\n\r\n  // size thresholds as defined in the config.js file\r\n\r\n  let threshold_md = config.optional.mediumBreakpoint;\r\n  let threshold_sm = config.optional.mobileBreakpoint;\r\n\r\n  //set variables for chart dimensions dependent on width of #graphic\r\n  let size;\r\n  if (parseInt(graphic.style(\"width\")) < threshold_sm) {\r\n    size = \"sm\";\r\n  } else if (parseInt(graphic.style(\"width\")) < threshold_md) {\r\n    size = \"md\";\r\n  } else {\r\n    size = \"lg\";\r\n  }\r\n\r\n  const chartsPerRow = config.optional.chart_every[size];\r\n  const chartPosition = chartIndex % chartsPerRow;\r\n  const colorsArray = [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#746CB1\", \"#A8BD3A\"];\r\n\r\n  // Set dimensions\r\n  let margin = { ...config.optional.margin[size] };\r\n\r\n  let height =\r\n    config.optional.seriesHeight[size] * graphic_data.length +\r\n    10 * (graphic_data.length - 1) +\r\n    12;\r\n\r\n\r\n  // If the chart is not in the first position in the row, reduce the left margin\r\n  if (chartPosition !== 0) {\r\n    margin.left = 10;\r\n  }\r\n\r\n  let chart_width = calculateChartWidth(size); // Calculate the initial chart width\r\n\r\n  // Calculate the total available width for two charts in a row\r\n  const containerWidth = parseInt(graphic.style(\"width\"));\r\n  const availableWidth = containerWidth - margin.left - margin.right;\r\n\r\n  // Calculate the chart width for two charts in a row, accounting for spacing\r\n  const chartWidthPerRow = availableWidth / chartsPerRow;\r\n\r\n  // Adjust the chart width based on the available space and desired grid layout\r\n  chart_width = Math.min(chartWidthPerRow, chart_width);\r\n  chart_width *= 1;\r\n\r\n  // Calculate the row index and column index based on chart position\r\n  const rowIndex = Math.floor(chartIndex / chartsPerRow);\r\n  const colIndex = chartIndex % chartsPerRow;\r\n\r\n  // Calculate the translation for positioning the chart in the grid\r\n  const translateX = colIndex * (chartWidthPerRow + 10);\r\n  const translateY = rowIndex * (height + margin.top + margin.bottom);\r\n\r\n\r\n  // Define scales\r\n  const x = d3.scaleLinear().range([0, chart_width]);\r\n\r\n  const y = d3\r\n    .scaleBand()\r\n    .paddingOuter(0.2)\r\n    .paddingInner(((graphic_data.length - 1) * 10) / (graphic_data.length * 30))\r\n    .range([0, height])\r\n    .round(true);\r\n\r\n  // Define axes\r\n  let xAxis = d3\r\n    .axisBottom(x)\r\n    .tickSize(-height)\r\n    .tickFormat(d3.format(config.essential.xAxisTickFormat))\r\n    .ticks(config.optional.xAxisTicks[size]);\r\n\r\n  let yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\r\n\r\n  // Define stack layout\r\n  let stack = d3\r\n    .stack()\r\n    .offset(d3[config.essential.stackOffset])\r\n    .order(d3[config.essential.stackOrder])\r\n    .keys(graphic_data.columns.slice(1, -1));\r\n\r\n  const series = stack(graphic_data);\r\n\r\n  // trying a different version because d3.nice() is causing issues.\r\n  if (config.essential.xDomain === \"auto\") {\r\n    x.domain([0, d3.max(series, (d) => d3.max(d, (d) => d[1]))]);\r\n  } else {\r\n    x.domain([0, config.essential.xDomain[1]]);\r\n  }\r\n\r\n  y.domain(graphic_data.map((d) => d.name));\r\n\r\n  // Create SVG\r\n  let svg = d3\r\n    .select(\"#graphic\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", chart_width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n    .attr(\"class\", \"chart\")\r\n    .style(\"background-color\", \"#fff\")\r\n    .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n\r\n  // Add axes\r\n  svg\r\n    .append(\"g\")\r\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n    .attr(\"class\", \"x axis\")\r\n    .call(xAxis)\r\n    .selectAll(\"line\")\r\n    .each(function (d) {\r\n      if (d == 0) {\r\n        d3.select(this).attr(\"class\", \"zero-line\");\r\n      }\r\n    });\r\n\r\n\r\n  // This will append the y axis to every chart\r\n  svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis).remove();\r\n\r\n  //trying to wrap text\r\n\r\n  if (chartIndex % chartsPerRow === 0) {\r\n    svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"y axis\")\r\n      .call(yAxis)\r\n      .selectAll(\".tick text\")\r\n      .call(wrap, margin.left - 10, graphic_data);\r\n  } else {\r\n    svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis.tickValues([]));\r\n  }\r\n\r\n  // Add a bold text label to the top left corner of the chart SVG\r\n  svg\r\n    .append(\"text\")\r\n    .attr(\"class\", \"axis-label\")\r\n    .attr(\"x\", 0)\r\n    .attr(\"y\", 0)\r\n    .attr(\"transform\", \"translate(0,-30)\") //this changes the height of the group label, increase if it's long\r\n    .text(seriesName)\r\n    .style(\"font-weight\", \"bold\")\r\n    .style(\"font-size\", \"16px\")\r\n    //.style(\"fill\", \"#707071\")\r\n    .style(\"fill\", colorsArray[chartIndex % colorsArray.length])\r\n    .call(wrap, 150, graphic_data);\r\n\r\n\r\n  // Draw chart\r\n  svg\r\n    .selectAll(\"g.chart-group\")\r\n    .data(series)\r\n    .enter()\r\n    .append(\"g\")\r\n    .attr(\"class\", \"chart-group\")\r\n    .selectAll(\"rect\")\r\n    .data((d) => d)\r\n    .join(\"rect\")\r\n    .attr(\"x\", (d) => x(d.data.name))\r\n    .attr(\"y\", (d, i) => y(graphic_data[i].name))\r\n    .attr(\"width\", (d) => Math.abs(x(d[0]) - x(d[1])))\r\n    .attr(\"height\", y.bandwidth())\r\n    .style(\"fill\", colorsArray[chartIndex % colorsArray.length]);\r\n\r\n  console.log(colorsArray)\r\n\r\n  // This does the x-axis label\r\n  if (chartIndex % chartsPerRow === chartsPerRow - 1) {\r\n    svg\r\n      .append('g')\r\n      .attr('transform', `translate(0, ${height})`)\r\n      .append('text')\r\n      .attr('x', chart_width)\r\n      .attr('y', 35)\r\n      .attr('class', 'axis--label')\r\n      .text(config.essential.xAxisLabel)\r\n      .attr('text-anchor', 'end');\r\n  }\r\n\r\n  //create link to source\r\n  d3.select(\"#source\").text(\"Source: \" + config.essential.sourceText);\r\n\r\n  //use pym to calculate chart dimensions\r\n  if (pymChild) {\r\n    pymChild.sendHeight(height + margin.top + margin.bottom);\r\n  }\r\n}\r\n\r\nfunction wrap(text, width, graphic_data) {\r\n  text.each(function (d, i) {\r\n    let text = d3.select(this),\r\n      words = text.text().split(/\\s+/).reverse(),\r\n      word,\r\n      line = [],\r\n      lineNumber = 0,\r\n      lineHeight = 1.1, // ems\r\n      x = text.attr(\"x\"),\r\n      dy = parseFloat(text.attr(\"dy\")),\r\n      tspan = text.text(null).append(\"tspan\").attr(\"x\", x);\r\n    while ((word = words.pop())) {\r\n      line.push(word);\r\n      tspan.text(line.join(\" \"));\r\n      if (tspan.node().getComputedTextLength() > width) {\r\n        line.pop();\r\n        tspan.text(line.join(\" \"));\r\n        line = [word];\r\n        tspan = text\r\n          .append(\"tspan\")\r\n          .attr(\"x\", x)\r\n          .attr(\"dy\", lineHeight + \"em\")\r\n          .text(word);\r\n      }\r\n    }\r\n    let breaks = text.selectAll(\"tspan\").size();\r\n    text.attr(\"y\", function () {\r\n      return -6 * (breaks - 1);\r\n    });\r\n\r\n    // Check if the corresponding data row has no data, and if so, make the y-axis label bold\r\n    const rowData = graphic_data[i];\r\n    const hasNoData = Object.values(rowData)\r\n      .slice(1, -1)\r\n      .every((value) => value === \"\");\r\n    if (hasNoData) {\r\n      text.style(\"font-weight\", \"bold\");\r\n    }\r\n  });\r\n}\r\n\r\nfunction renderCallback() {\r\n  // Load the data\r\n  d3.csv(config.essential.graphic_data_url)\r\n    .then((data) => {\r\n      // console.log(\"Original data:\", data);\r\n\r\n      // Group the data by the 'series' column\r\n      const groupedData = d3.groups(data, (d) => d.series);\r\n      // console.log(\"Grouped data:\", groupedData);\r\n\r\n      //Generate a list of categories based on the order in the first chart that we can use to order the subsequent charts\r\n      let namesArray = [...groupedData][0][1].map(d => d.name);\r\n\r\n      // Remove previous SVGs\r\n      graphic.selectAll(\"svg\").remove();\r\n\r\n      groupedData.forEach((group, i) => {\r\n        const seriesName = group[0];\r\n        const graphic_data = group[1];\r\n\r\n        //Sort the data so that the bars in each chart are in the same order\r\n        graphic_data.sort((a, b) => namesArray.indexOf(a.name) - namesArray.indexOf(b.name))\r\n\r\n        graphic_data.columns = data.columns;\r\n\r\n        drawGraphic(seriesName, graphic_data, i);\r\n      });\r\n    })\r\n    .catch((error) => console.error(error));\r\n}\r\n\r\n//use pym to create iframed chart dependent on specified variables\r\npymChild = new pym.Child({\r\n  renderCallback: renderCallback,\r\n});\r\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n/* \n#graphic svg {\n  border: 1px solid red;\n} */",
            "data_csv": "name,value,series\r\nDetached,20,Group 1\r\nSemi-detached,40,Group 1\r\nTerraced,60,Group 1\r\n\"Flat, maisonette or apartment\",80,Group 1\r\nDetached,20,Group 2\r\nSemi-detached,40,Group 2\r\nTerraced,60,Group 2\r\n\"Flat, maisonette or apartment\",80,Group 2\r\nDetached,20,Group 3\r\nSemi-detached,40,Group 3\r\nTerraced,60,Group 3\r\n\"Flat, maisonette or apartment\",80,Group 3\r\nTerraced,30,Group 4\r\n\"Flat, maisonette or apartment\",40,Group 4\r\nDetached,10,Group 4\r\nSemi-detached,20,Group 4\r\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-stacked": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\"],\n\t\t\"drawLegend\": true, // set to false to remove the legend (still working on this)\n\t\t\"someOtherVariable\": \"someOtherValue\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisTickFormat\": \".0f\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"stackOffset\": \"stackOffsetNone\",\n\t\t// options include\n\t\t// stackOffsetNone means the baseline is set at zero\n\t\t// stackOffsetExpand to do 100% charts\n\t\t// stackOffsetDiverging for data with positive and negative values\n\t\t\"stackOrder\": \"stackOrderNone\"\n\t\t// other options include\n\t\t// stackOrderNone means the order is taken from the datafile\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\n\t\t// stackOrderReverse reverse the order as set from the data file\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 30,\n\t\t\t\"md\": 30,\n\t\t\t\"lg\": 30\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//Accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\n\t\t10 * (graphic_data.length - 1) +\n\t\t12;\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\tconst y = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.2)\n\t\t.paddingInner(((graphic_data.length - 1) * 10) / (graphic_data.length * 30))\n\t\t.range([0, height])\n\t\t.round(true);\n\n\tconst colour = d3\n\t\t.scaleOrdinal()\n\t\t.domain(graphic_data.columns.slice(1))\n\t\t.range(config.essential.colour_palette);\n\n\t//use the data to find unique entries in the name column\n\ty.domain([...new Set(graphic_data.map((d) => d.name))]);\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n\tconst stack = d3\n\t\t.stack()\n\t\t.keys(graphic_data.columns.slice(1))\n\t\t.offset(d3[config.essential.stackOffset])\n\t\t.order(d3[config.essential.stackOrder]);\n\n\tconst series = stack(graphic_data);\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.tickFormat(d3.format(config.essential.xAxisTickFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tif (config.essential.xDomain == 'auto') {\n\t\tx.domain(d3.extent(series.flat(2))); //flatten the arrays and then get the extent\n\t} else {\n\t\tx.domain(config.essential.xDomain);\n\t}\n\n\t// Set up the legend\n\tlet legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(graphic_data.columns.slice(1), config.essential.colour_palette)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('g')\n\t\t.data(series)\n\t\t.join('g')\n\t\t.attr('fill', (d, i) => config.essential.colour_palette[i])\n\t\t.selectAll('rect')\n\t\t.data((d) => d)\n\t\t.join('rect')\n\t\t.attr('x', (d) => Math.min(x(d[0]), x(d[1])))\n\t\t.attr('y', (d) => y(d.data.name))\n\t\t.attr('width', (d) => Math.abs(x(d[0]) - x(d[1])))\n\t\t.attr('height', y.bandwidth());\n\n\t// This does the x-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.append('text')\n\t\t.attr('x', chart_width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n",
            "data_csv": "name,Category 1,Category 2,Category 3,Category 4 with a long name,Category 5\nAdmin,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268\nArts,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155\nRetail,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462\nManufacturing,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495\nConstruction,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893\nHealth and social work,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361\nTransportation and storage,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727\nAccommodation and food,24.56805884,89.47462279,49.36685439,50.05168647,65.708543\nOther,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682\nAll businesses,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-stacked-clustered": {
            "config_js": "config={\r\n    \"essential\": {\r\n      \"graphic_data_url\": \"data.csv\",\r\n      \"colour_palette\": [\"#206095\",\"#27A0CC\",\"#871A5B\",\"#A8BD3A\",\"#F66068\"],\r\n      \"sourceText\": \"Office for National Statistics\",\r\n      \"accessibleSummary\":\"Bar chart showing that...\",\r\n      \"xDomain\":\"auto\",\r\n      // either \"auto\" or an array for the x domain e.g. [0,100]\r\n      \"xAxisTickFormat\":\".0%\",\r\n      \"xAxisLabel\":\"x axis label\",\r\n      \"stackOffset\":\"stackOffsetNone\",\r\n      // options include\r\n      // stackOffsetNone means the baseline is set at zero\r\n      // stackOffsetExpand to do 100% charts\r\n      // stackOffsetDiverging for data with positive and negative values\r\n      \"stackOrder\":\"stackOrderNone\"\r\n      // other options include\r\n      // stackOrderNone means the order is taken from the datafile\r\n      // stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\r\n      // stackOrderAscending the smallest series (according to the sum of values) is at the bottom\r\n      // stackOrderDescending the largest series (according to the sum of values) is at the bottom\r\n      // stackOrderReverse reverse the order as set from the data file\r\n    },\r\n    \"optional\": {\r\n      \"margin\": {\r\n        \"sm\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        },\r\n        \"md\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        },\r\n        \"lg\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        }\r\n      },\r\n      \"seriesHeight\":{\r\n        \"sm\":30,\r\n        \"md\":30,\r\n        \"lg\":50\r\n      },\r\n      \"xAxisTicks\":{\r\n        \"sm\":3,\r\n        \"md\":4,\r\n        \"lg\":5\r\n      },\r\n      \"mobileBreakpoint\": 510,\r\n      \"mediumBreakpoint\": 600\r\n    },\r\n    \"elements\":{\"select\":0, \"nav\":0, \"legend\":1, \"titles\":0}\r\n  };",
            "chart_css": ".dataLabels{\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n  }\r\n\r\n  p.groupLabels{\r\n    padding-top:5px;\r\n    margin-top: 5px;\r\n    margin-bottom:0em;\r\n    font-weight: 600;\r\n  }",
            "script_js": "let graphic = d3.select('#graphic');\r\nlet legend = d3.select('#legend');\r\nlet pymChild = null;\r\n\r\nfunction drawGraphic() {\r\n\t// clear out existing graphics\r\n\tgraphic.selectAll('*').remove();\r\n\tlegend.selectAll('*').remove();\r\n\r\n\t//population accessible summmary\r\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\r\n\r\n\tlet threshold_md = config.optional.mediumBreakpoint;\r\n\tlet threshold_sm = config.optional.mobileBreakpoint;\r\n\r\n\t//set variables for chart dimensions dependent on width of #graphic\r\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\r\n\t\tsize = 'sm';\r\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\r\n\t\tsize = 'md';\r\n\t} else {\r\n\t\tsize = 'lg';\r\n\t}\r\n\r\n\tlet margin = config.optional.margin[size];\r\n\tmargin.centre = config.optional.margin.centre;\r\n\tfullwidth = parseInt(graphic.style('width'));\r\n\tchart_width = parseInt(graphic.style('width')) - margin.left - margin.right;\r\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\r\n\tlet height =\r\n\t\tconfig.optional.seriesHeight[size] * (graphic_data.length / 2) +\r\n\t\t10 * (graphic_data.length / 2 - 1) +\r\n\t\t12;\r\n\r\n\t// groups = d3.groups(graphic_data, (d) => d.group)\r\n\r\n\tconst stack = d3\r\n\t\t.stack()\r\n\t\t.keys(graphic_data.columns.slice(2)) //Just the columns with data values\r\n\t\t.offset(d3[config.essential.stackOffset])\r\n\t\t.order(d3[config.essential.stackOrder]);\r\n\r\n\tcategoriesUnique = [...new Set(graphic_data.map((d) => d.sex))];\r\n\r\n\r\n\t//y scale\r\n\tconst y = d3\r\n\t\t.scaleBand()\r\n\t\t.paddingOuter(0.2)\r\n\t\t.paddingInner(0.2)\r\n\t\t.range([0, height])\r\n\t\t.round(true);\r\n\r\n\t//use the data to find unique entries in the name column\r\n\ty.domain([...new Set(graphic_data.map((d) => d.name))]);\r\n\r\n\tconst y2 = d3\r\n\t\t.scaleBand()\r\n\t\t.range([0, y.bandwidth()])\r\n\t\t.padding(0.1)\r\n\t\t.domain(categoriesUnique);\r\n\r\n\t//y axis generator\r\n\tyAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\r\n\r\n\t//set up x scale\r\n\tconst x = d3\r\n\t\t.scaleLinear()\r\n\t\t.range([0, chart_width])\r\n\t\t.domain(config.essential.xDomain);\r\n\r\n\tconst seriesAll = stack(graphic_data);\r\n\r\n\tif (config.essential.xDomain == 'auto') {\r\n\t\tx.domain(d3.extent(seriesAll.flat(2))); //flatten the arrays and then get the extent\r\n\t} else {\r\n\t\tx.domain(config.essential.xDomain);\r\n\t}\r\n\r\n\tlet xAxis = d3\r\n\t\t.axisBottom(x)\r\n\t\t.tickSize(-height)\r\n\t\t.tickFormat(d3.format(config.essential.xAxisTickFormat))\r\n\t\t// .tickFormat(d => d  + \"%\")\r\n\t\t.ticks(config.optional.xAxisTicks[size]);\r\n\r\n\t//create svg for chart\r\n\tsvg = d3\r\n\t\t.select('#graphic')\r\n\t\t.append('svg')\r\n\t\t.attr('width', fullwidth)\r\n\t\t.attr('height', height + margin.top + margin.bottom)\r\n\t\t.attr('class', 'chart')\r\n\t\t.style('background-color', '#fff')\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(0,' + height + ')')\r\n\t\t.attr('class', 'x axis')\r\n\t\t.call(xAxis)\r\n\t\t.selectAll('line')\r\n\t\t.each(function (d) {\r\n\t\t\tif (d == 0) {\r\n\t\t\t\td3.select(this).attr('class', 'zero-line');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(' + 0 + ',' + 0 + ')')\r\n\t\t.attr('class', 'y axis')\r\n\t\t.call(yAxis)\r\n\t\t.selectAll('text')\r\n\t\t.call(wrap, margin.left - 10)\r\n\t\t.attr('text-anchor', 'end');\r\n\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.selectAll('g')\r\n\t\t.data(seriesAll)\r\n\t\t.join('g')\r\n\t\t.attr('fill', (d, i) => config.essential.colour_palette[i])\r\n\t\t.selectAll('rect')\r\n\t\t.data((d) => d)\r\n\t\t.join('rect')\r\n\t\t.attr('x', (d) => x(d[0]))\r\n\t\t.attr('y', (d) => y(d.data.name) + y2(d.data.sex))\r\n\t\t.attr('width', (d) => x(d[1]) - x(d[0]))\r\n\t\t.attr('height', y2.bandwidth());\r\n\r\n\t// This does the x-axis label\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(' + 0 + ',' + height + ')')\r\n\t\t.append('text')\r\n\t\t.attr('x', chart_width)\r\n\t\t.attr('y', 0)\r\n\t\t.attr('dy', 40)\r\n\t\t.attr('class', 'axis--label')\r\n\t\t.text(config.essential.xAxisLabel)\r\n\t\t.attr('text-anchor', 'end')\r\n\t\t.call(wrap, chart_width);\r\n\r\nconsole.log(seriesAll)\r\n\r\n\t// This does the Females label\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(0,0)')\r\n\t\t.append('text')\r\n\t\t.attr('x', 5)\r\n\t\t.attr(\r\n\t\t\t'y',\r\n\t\t\t// y.paddingOuter() * (1/(1-y.paddingInner()))*y.bandwidth() +\r\n\t\t\t// y2.paddingOuter() * (1/(1-y2.paddingInner()))*y2.bandwidth()\r\n\t\t\ty(seriesAll[0][0].data.name) + y2(seriesAll[0][0].data.sex)\r\n\t\t)\r\n\t\t.attr('dy', y2.bandwidth() / 2)\r\n\t\t.attr('dominant-baseline', 'middle')\r\n\t\t.attr('class', 'axis--label')\r\n\t\t.text('Females')\r\n\t\t.attr('text-anchor', 'start')\r\n\t\t.style('font-weight', 600)\r\n\t\t.style('font-size', '14px')\r\n\t\t.style('fill', '#fff');\r\n\r\n\t// This does the Males label\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(0,0)')\r\n\t\t.append('text')\r\n\t\t.attr('x', 5)\r\n\t\t.attr(\r\n\t\t\t'y',\r\n\t\t\ty(seriesAll[0][1].data.name) + y2(seriesAll[0][1].data.sex)\r\n\t\t\t// y.paddingOuter() * (1/(1-y.paddingInner()))*y.bandwidth() +\r\n\t\t\t// y2.paddingOuter() * (1/(1-y2.paddingInner()))*y2.bandwidth() +\r\n\t\t\t// \ty2.bandwidth() +\r\n\t\t\t// \ty2.paddingInner() * (1/(1-y2.paddingInner()))*y2.bandwidth() \r\n\t\t)\r\n\t\t.attr('dy', y2.bandwidth() / 2)\r\n\t\t.attr('dominant-baseline', 'middle')\r\n\t\t.attr('class', 'axis--label')\r\n\t\t.text('Males')\r\n\t\t.attr('text-anchor', 'start')\r\n\t\t.style('font-weight', 600)\r\n\t\t.style('font-size', '14px')\r\n\t\t.style('fill', '#fff');\r\n\r\n\t// Set up the legend\r\n\tlet legenditem = d3\r\n\t\t.select('#legend')\r\n\t\t.selectAll('div.legend--item')\r\n\t\t.data(\r\n\t\t\td3.zip(graphic_data.columns.slice(2), config.essential.colour_palette)\r\n\t\t)\r\n\t\t.enter()\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--item');\r\n\r\n\tlegenditem\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--icon--circle')\r\n\t\t.style('background-color', (d) => d[1]);\r\n\r\n\tlegenditem\r\n\t\t.append('div')\r\n\t\t.append('p')\r\n\t\t.attr('class', 'legend--text')\r\n\t\t.html((d) => d[0]);\r\n\r\n\t//create link to source\r\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\r\n\r\n\t//use pym to calculate chart dimensions\r\n\tif (pymChild) {\r\n\t\tpymChild.sendHeight();\r\n\t}\r\n}\r\n\r\nfunction wrap(text, width) {\r\n\ttext.each(function () {\r\n\t\tlet text = d3.select(this),\r\n\t\t\twords = text.text().split(/\\s+/).reverse(),\r\n\t\t\tword,\r\n\t\t\tline = [],\r\n\t\t\tlineNumber = 0,\r\n\t\t\tlineHeight = 1.1, // ems\r\n\t\t\t// y = text.attr(\"y\"),\r\n\t\t\tx = text.attr('x'),\r\n\t\t\tdy = parseFloat(text.attr('dy')),\r\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\r\n\t\twhile ((word = words.pop())) {\r\n\t\t\tline.push(word);\r\n\t\t\ttspan.text(line.join(' '));\r\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\r\n\t\t\t\tline.pop();\r\n\t\t\t\ttspan.text(line.join(' '));\r\n\t\t\t\tline = [word];\r\n\t\t\t\ttspan = text\r\n\t\t\t\t\t.append('tspan')\r\n\t\t\t\t\t.attr('x', x)\r\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\r\n\t\t\t\t\t.text(word);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet breaks = text.selectAll('tspan').size();\r\n\t\ttext.attr('y', function () {\r\n\t\t\treturn -6 * (breaks - 1);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nd3.csv(config.essential.graphic_data_url).then((data) => {\r\n\t//load chart data\r\n\tgraphic_data = data;\r\n\r\n\t//use pym to create iframed chart dependent on specified variables\r\n\tpymChild = new pym.Child({\r\n\t\trenderCallback: drawGraphic\r\n\t});\r\n});\r\n",
            "data_csv": "name,sex,Category 1,Category 2,Category 3\r\nGypsy or Irish Traveller,Female,0.215,0.129,0.01\r\nGypsy or Irish Traveller,Male,0.19,0.128,0.02\r\n\"English, Welsh, Scottish, Northern Irish or British\",Female,0.083,0.119,0.03\r\n\"English, Welsh, Scottish, Northern Irish or British\",Male,0.074,0.102,0.04\r\nIrish,Female,0.083,0.104,0.05\r\nIrish,Male,0.075,0.094,0.06\r\nRoma,Female,0.079,0.063,0.07\r\nRoma,Male,0.06,0.058,0.08\r\nOther White,Female,0.053,0.076,0.09\r\nOther White,Male,0.044,0.063,0.1\r\nBangladeshi,Female,0.127,0.103,0.11\r\nBangladeshi,Male,0.095,0.091,0.12\r\nPakistani,Female,0.124,0.088,0.13\r\nPakistani,Male,0.084,0.076,0.14\r\nIndian,Female,0.067,0.072,0.15\r\nIndian,Male,0.05,0.061,0.16\r\nOther Asian,Female,0.053,0.071,0.17\r\nOther Asian,Male,0.052,0.067,0.18\r\nChinese,Female,0.029,0.06,0.19\r\nChinese,Male,0.028,0.053,0.2\r\nWhite and Black Caribbean,Female,0.112,0.124,0.21\r\nWhite and Black Caribbean,Male,0.102,0.107,0.22\r\nOther Mixed or Multiple ethnic groups,Female,0.09,0.119,0.23\r\nOther Mixed or Multiple ethnic groups,Male,0.079,0.099,0.24\r\nWhite and Black African,Female,0.089,0.109,0.25\r\nWhite and Black African,Male,0.077,0.09,0.26\r\nWhite and Asian,Female,0.077,0.11,0.27\r\nWhite and Asian,Male,0.065,0.095,0.28\r\nCaribbean,Female,0.096,0.107,0.29\r\nCaribbean,Male,0.082,0.09,0.3\r\nOther Black,Female,0.093,0.095,0.31\r\nOther Black,Male,0.086,0.082,0.32\r\nAfrican,Female,0.067,0.07,0.33\r\nAfrican,Male,0.052,0.053,0.34\r\nArab,Female,0.117,0.092,0.35\r\nArab,Male,0.087,0.083,0.36\r\nAny other ethnic group,Female,0.085,0.081,0.37\r\nAny other ethnic group,Male,0.068,0.073,0.38\r\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-stacked-clustered-grouped": {
            "config_js": "config={\r\n    \"essential\": {\r\n      \"graphic_data_url\": \"data.csv\",\r\n      \"colour_palette\": [\"#206095\",\"#27A0CC\",\"#871A5B\",\"#A8BD3A\",\"#F66068\"],\r\n      \"sourceText\": \"Office for National Statistics\",\r\n      \"accessibleSummary\":\"Bar chart showing that...\",\r\n      \"xDomain\":\"auto\",\r\n      // either \"auto\" or an array for the x domain e.g. [0,100]\r\n      \"xAxisTickFormat\":\".0%\",\r\n      \"xAxisLabel\":\"x axis label\",\r\n      \"stackOffset\":\"stackOffsetNone\",\r\n      // options include\r\n      // stackOffsetNone means the baseline is set at zero\r\n      // stackOffsetExpand to do 100% charts\r\n      // stackOffsetDiverging for data with positive and negative values\r\n      \"stackOrder\":\"stackOrderNone\"\r\n      // other options include\r\n      // stackOrderNone means the order is taken from the datafile\r\n      // stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\r\n      // stackOrderAscending the smallest series (according to the sum of values) is at the bottom\r\n      // stackOrderDescending the largest series (according to the sum of values) is at the bottom\r\n      // stackOrderReverse reverse the order as set from the data file\r\n    },\r\n    \"optional\": {\r\n      \"margin\": {\r\n        \"sm\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        },\r\n        \"md\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        },\r\n        \"lg\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        }\r\n      },\r\n      \"seriesHeight\":{\r\n        \"sm\":20,\r\n        \"md\":20,\r\n        \"lg\":30\r\n      },\r\n      \"xAxisTicks\":{\r\n        \"sm\":3,\r\n        \"md\":4,\r\n        \"lg\":5\r\n      },\r\n      \"mobileBreakpoint\": 510,\r\n      \"mediumBreakpoint\": 600\r\n    },\r\n    \"elements\":{\"select\":0, \"nav\":0, \"legend\":1, \"titles\":0}\r\n  };",
            "script_js": "let graphic = d3.select('#graphic');\r\nlet legend = d3.select('#legend');\r\nlet pymChild = null;\r\n\r\nfunction drawGraphic() {\r\n\t// clear out existing graphics\r\n\tgraphic.selectAll('*').remove();\r\n\tlegend.selectAll('*').remove();\r\n\r\n\t//population accessible summmary\r\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\r\n\r\n\tlet threshold_md = config.optional.mediumBreakpoint;\r\n\tlet threshold_sm = config.optional.mobileBreakpoint;\r\n\r\n\t//set variables for chart dimensions dependent on width of #graphic\r\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\r\n\t\tsize = 'sm';\r\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\r\n\t\tsize = 'md';\r\n\t} else {\r\n\t\tsize = 'lg';\r\n\t}\r\n\r\n\tlet margin = config.optional.margin[size];\r\n\tmargin.centre = config.optional.margin.centre;\r\n\tfullwidth = parseInt(graphic.style('width'));\r\n\tchart_width = parseInt(graphic.style('width')) - margin.left - margin.right;\r\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\r\n\tlet height =\r\n\t\tconfig.optional.seriesHeight[size] * (graphic_data.length / 2) +\r\n\t\t10 * (graphic_data.length / 2 - 1) +\r\n\t\t12;\r\n\r\n\tgroups = d3.groups(graphic_data, (d) => d.group);\r\n\r\n\tconst stack = d3\r\n\t\t.stack()\r\n\t\t.keys(graphic_data.columns.slice(3)) //Just the columns with data values\r\n\t\t.offset(d3[config.essential.stackOffset])\r\n\t\t.order(d3[config.essential.stackOrder]);\r\n\r\n\tcategoriesUnique = [...new Set(graphic_data.map((d) => d.sex))];\r\n\r\n\r\n\t// create the y scale in groups\r\n\tgroups.map(function (d) {\r\n\t\t//height\r\n\t\td[2] = config.optional.seriesHeight[size] * d[1].length;\r\n\t\t// y scale\r\n\t\td[3] = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.paddingOuter(0.1)\r\n\t\t\t.paddingInner(0.1)\r\n\t\t\t.range([0, d[2]])\r\n\t\t\t.domain(d[1].map((d) => d.name));\r\n\t\t//y axis generator\r\n\t\td[4] = d3.axisLeft(d[3]).tickSize(0).tickPadding(10);\r\n\t\t//stack\r\n\t\td[5] = stack(d[1]);\r\n\t\t//y2\r\n\t\td[6] = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.range([0, d[3].bandwidth()])\r\n\t\t\t.padding(0.1)\r\n\t\t\t.domain(categoriesUnique);\r\n\t});\r\n\r\n\t//set up x scale\r\n\tconst x = d3\r\n\t\t.scaleLinear()\r\n\t\t.range([0, chart_width])\r\n\t\t.domain(config.essential.xDomain);\r\n\r\n\tconst seriesAll = stack(graphic_data);\r\n\r\n\tif (config.essential.xDomain == 'auto') {\r\n\t\tx.domain(d3.extent(seriesAll.flat(2))); //flatten the arrays and then get the extent\r\n\t} else {\r\n\t\tx.domain(config.essential.xDomain);\r\n\t}\r\n\r\n\tlet xAxis = d3\r\n\t\t.axisBottom(x)\r\n\t\t.tickSize(-height)\r\n\t\t.tickFormat(d3.format(config.essential.xAxisTickFormat))\r\n\t\t// .tickFormat(d => d  + \"%\")\r\n\t\t.ticks(config.optional.xAxisTicks[size]);\r\n\r\n\tdivs = graphic.selectAll('div.categoryLabels').data(groups).join('div');\r\n\r\n\tdivs\r\n\t\t.append('p')\r\n\t\t.attr('class', 'groupLabels')\r\n\t\t.html((d) => d[0]);\r\n\r\n\tsvgs = divs\r\n\t\t.append('svg')\r\n\t\t.attr('class', (d) => 'chart chart' + groups.indexOf(d))\r\n\t\t.attr('height', (d) => d[2] + margin.top + margin.bottom)\r\n\t\t.attr('width', chart_width + margin.left + margin.right);\r\n\r\n\tcharts = svgs\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n\tcharts.each(function (d, i) {\r\n\t\td3.select(this)\r\n\t\t\t.append('g')\r\n\t\t\t.attr('class', 'y axis')\r\n\t\t\t.call(d[4])\r\n\t\t\t.selectAll('text')\r\n\t\t\t.call(wrap, margin.left - 10);\r\n\r\n\t\td3.select(this)\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', (d) => 'translate(0,' + d[2] + ')')\r\n\t\t\t.attr('class', 'x axis')\r\n\t\t\t.each(function () {\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.call(xAxis.tickSize(-d[2]))\r\n\t\t\t\t\t.selectAll('line')\r\n\t\t\t\t\t.each(function (e) {\r\n\t\t\t\t\t\tif (e == 0) {\r\n\t\t\t\t\t\t\td3.select(this).attr('class', 'zero-line');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\tfor (let j = 0; j < groups.length; j++) {\r\n\t\t\tif (i == j) {\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.append('g')\r\n\t\t\t\t\t.attr('class', 'bars')\r\n\t\t\t\t\t.selectAll('g')\r\n\t\t\t\t\t.data((d) => d[5])\r\n\t\t\t\t\t.join('g')\r\n\t\t\t\t\t.attr('fill', (d, k) => config.essential.colour_palette[k])\r\n\t\t\t\t\t.selectAll('rect')\r\n\t\t\t\t\t.data((d) => d)\r\n\t\t\t\t\t.join('rect')\r\n\t\t\t\t\t.attr('x', (d) => x(d[0]))\r\n\t\t\t\t\t.attr(\r\n\t\t\t\t\t\t'y',\r\n\t\t\t\t\t\t(d) => groups[i][3](d.data.name) + groups[i][6](d.data.sex)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.attr('width', (d) => x(d[1]) - x(d[0]))\r\n\t\t\t\t\t.attr('height', groups[i][6].bandwidth());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// This does the x-axis label - here only added to the last group\r\n\t\tif (i == groups.length - 1) {\r\n\t\t\td3.select(this)\r\n\t\t\t\t.append('g')\r\n\t\t\t\t.attr('transform', 'translate(' + 0 + ',' + (d[2] + margin.top) + ')')\r\n\t\t\t\t.append('text')\r\n\t\t\t\t.attr('x', chart_width)\r\n\t\t\t\t.attr('y', 0)\r\n\t\t\t\t.attr('dy', 25)\r\n\t\t\t\t.attr('class', 'axis--label')\r\n\t\t\t\t.text(config.essential.xAxisLabel)\r\n\t\t\t\t.attr('text-anchor', 'end')\r\n\t\t\t\t.call(wrap, chart_width + margin.left);\r\n\t\t}\r\n\r\n\t\t// This does the Females label\r\n\t\td3.select(this)\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(0,0)')\r\n\t\t\t.append('text')\r\n\t\t\t.attr('x', 5)\r\n\t\t\t.attr(\r\n\t\t\t\t'y',\r\n\t\t\t\tgroups[i][3].paddingOuter() * (1/(1-groups[i][3].paddingInner()))*groups[i][3].bandwidth() +\r\n\t\t\t\tgroups[i][6].paddingOuter() * (1/(1-groups[i][6].paddingInner()))*groups[i][6].bandwidth()\r\n\t\t\t)\r\n\t\t\t.attr('dy', groups[i][6].bandwidth() / 2)\r\n\t\t\t.attr('dominant-baseline', 'middle')\r\n\t\t\t.attr('class', 'axis--label')\r\n\t\t\t.text('Females')\r\n\t\t\t.attr('text-anchor', 'start')\r\n\t\t\t.style('font-weight', 600)\r\n\t\t\t.style('font-size', '14px')\r\n\t\t\t.style('fill', '#fff');\r\n\r\n\t\t// This does the Males label\r\n\t\td3.select(this)\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(0,0')\r\n\t\t\t.append('text')\r\n\t\t\t.attr('x', 5)\r\n\t\t\t.attr(\r\n\t\t\t\t'y',\r\n\t\t\t\tgroups[i][3].paddingOuter() * (1/(1-groups[i][3].paddingInner()))*groups[i][3].bandwidth() +\r\n\t\t\t\tgroups[i][6].paddingOuter() * (1/(1-groups[i][6].paddingInner()))*groups[i][6].bandwidth() +\r\n\t\t\t\tgroups[i][6].bandwidth() +\r\n\t\t\t\tgroups[i][6].paddingInner() * (1/(1-groups[i][6].paddingInner()))*groups[i][6].bandwidth()\r\n\t\t\t)\r\n\t\t\t.attr('dy', groups[i][6].bandwidth() / 2)\r\n\t\t\t.attr('dominant-baseline', 'middle')\r\n\t\t\t.attr('class', 'axis--label')\r\n\t\t\t.text('Males')\r\n\t\t\t.attr('text-anchor', 'start')\r\n\t\t\t.style('font-weight', 600)\r\n\t\t\t.style('font-size', '14px')\r\n\t\t\t.style('fill', '#fff');\r\n\t});\r\n\r\n\t// Set up the legend\r\n\tlet legenditem = d3\r\n\t\t.select('#legend')\r\n\t\t.selectAll('div.legend--item')\r\n\t\t.data(\r\n\t\t\td3.zip(graphic_data.columns.slice(3), config.essential.colour_palette)\r\n\t\t)\r\n\t\t.enter()\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--item');\r\n\r\n\tlegenditem\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--icon--circle')\r\n\t\t.style('background-color', (d) => d[1]);\r\n\r\n\tlegenditem\r\n\t\t.append('div')\r\n\t\t.append('p')\r\n\t\t.attr('class', 'legend--text')\r\n\t\t.html((d) => d[0]);\r\n\r\n\t//create link to source\r\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\r\n\r\n\t//use pym to calculate chart dimensions\r\n\tif (pymChild) {\r\n\t\tpymChild.sendHeight();\r\n\t}\r\n}\r\n\r\nfunction wrap(text, width) {\r\n\ttext.each(function () {\r\n\t\tlet text = d3.select(this),\r\n\t\t\twords = text.text().split(/\\s+/).reverse(),\r\n\t\t\tword,\r\n\t\t\tline = [],\r\n\t\t\tlineNumber = 0,\r\n\t\t\tlineHeight = 1.1, // ems\r\n\t\t\t// y = text.attr(\"y\"),\r\n\t\t\tx = text.attr('x'),\r\n\t\t\tdy = parseFloat(text.attr('dy')),\r\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\r\n\t\twhile ((word = words.pop())) {\r\n\t\t\tline.push(word);\r\n\t\t\ttspan.text(line.join(' '));\r\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\r\n\t\t\t\tline.pop();\r\n\t\t\t\ttspan.text(line.join(' '));\r\n\t\t\t\tline = [word];\r\n\t\t\t\ttspan = text\r\n\t\t\t\t\t.append('tspan')\r\n\t\t\t\t\t.attr('x', x)\r\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\r\n\t\t\t\t\t.text(word);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet breaks = text.selectAll('tspan').size();\r\n\t\ttext.attr('y', function () {\r\n\t\t\treturn -6 * (breaks - 1);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nd3.csv(config.essential.graphic_data_url).then((data) => {\r\n\t//load chart data\r\n\tgraphic_data = data;\r\n\r\n\t//use pym to create iframed chart dependent on specified variables\r\n\tpymChild = new pym.Child({\r\n\t\trenderCallback: drawGraphic\r\n\t});\r\n});\r\n",
            "chart_css": ".dataLabels{\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n  }\r\n\r\n  p.groupLabels{\r\n    padding-top:5px;\r\n    margin-top: 5px;\r\n    margin-bottom:0em;\r\n    font-weight: 600;\r\n  }",
            "data_csv": "name,sex,group,Category 1,Category 2,Category 3\r\nGypsy or Irish Traveller,Female,White,0.215,0.129,0.01\r\nGypsy or Irish Traveller,Male,White,0.19,0.128,0.02\r\n\"English, Welsh, Scottish, Northern Irish or British\",Female,White,0.083,0.119,0.03\r\n\"English, Welsh, Scottish, Northern Irish or British\",Male,White,0.074,0.102,0.04\r\nIrish,Female,White,0.083,0.104,0.05\r\nIrish,Male,White,0.075,0.094,0.06\r\nRoma,Female,White,0.079,0.063,0.07\r\nRoma,Male,White,0.06,0.058,0.08\r\nOther White,Female,White,0.053,0.076,0.09\r\nOther White,Male,White,0.044,0.063,0.1\r\nBangladeshi,Female,\"Asian, Asian British or Asian Welsh\",0.127,0.103,0.11\r\nBangladeshi,Male,\"Asian, Asian British or Asian Welsh\",0.095,0.091,0.12\r\nPakistani,Female,\"Asian, Asian British or Asian Welsh\",0.124,0.088,0.13\r\nPakistani,Male,\"Asian, Asian British or Asian Welsh\",0.084,0.076,0.14\r\nIndian,Female,\"Asian, Asian British or Asian Welsh\",0.067,0.072,0.15\r\nIndian,Male,\"Asian, Asian British or Asian Welsh\",0.05,0.061,0.16\r\nOther Asian,Female,\"Asian, Asian British or Asian Welsh\",0.053,0.071,0.17\r\nOther Asian,Male,\"Asian, Asian British or Asian Welsh\",0.052,0.067,0.18\r\nChinese,Female,\"Asian, Asian British or Asian Welsh\",0.029,0.06,0.19\r\nChinese,Male,\"Asian, Asian British or Asian Welsh\",0.028,0.053,0.2\r\nWhite and Black Caribbean,Female,Mixed or Multiple ethnic groups,0.112,0.124,0.21\r\nWhite and Black Caribbean,Male,Mixed or Multiple ethnic groups,0.102,0.107,0.22\r\nOther Mixed or Multiple ethnic groups,Female,Mixed or Multiple ethnic groups,0.09,0.119,0.23\r\nOther Mixed or Multiple ethnic groups,Male,Mixed or Multiple ethnic groups,0.079,0.099,0.24\r\nWhite and Black African,Female,Mixed or Multiple ethnic groups,0.089,0.109,0.25\r\nWhite and Black African,Male,Mixed or Multiple ethnic groups,0.077,0.09,0.26\r\nWhite and Asian,Female,Mixed or Multiple ethnic groups,0.077,0.11,0.27\r\nWhite and Asian,Male,Mixed or Multiple ethnic groups,0.065,0.095,0.28\r\nCaribbean,Female,\"Black, Black British, Black Welsh, Caribbean or African\",0.096,0.107,0.29\r\nCaribbean,Male,\"Black, Black British, Black Welsh, Caribbean or African\",0.082,0.09,0.3\r\nOther Black,Female,\"Black, Black British, Black Welsh, Caribbean or African\",0.093,0.095,0.31\r\nOther Black,Male,\"Black, Black British, Black Welsh, Caribbean or African\",0.086,0.082,0.32\r\nAfrican,Female,\"Black, Black British, Black Welsh, Caribbean or African\",0.067,0.07,0.33\r\nAfrican,Male,\"Black, Black British, Black Welsh, Caribbean or African\",0.052,0.053,0.34\r\nArab,Female,Other ethnic group,0.117,0.092,0.35\r\nArab,Male,Other ethnic group,0.087,0.083,0.36\r\nAny other ethnic group,Female,Other ethnic group,0.085,0.081,0.37\r\nAny other ethnic group,Male,Other ethnic group,0.068,0.073,0.38\r\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-stacked-grouped": {
            "config_js": "config={\r\n    \"essential\": {\r\n      \"graphic_data_url\": \"data.csv\",\r\n      \"colour_palette\": [\"#206095\",\"#27A0CC\",\"#871A5B\",\"#A8BD3A\",\"#F66068\"],\r\n      \"sourceText\": \"Office for National Statistics\",\r\n      \"accessibleSummary\":\"Bar chart showing that...\",\r\n      \"xDomain\":\"auto\",\r\n      // either \"auto\" or an array for the x domain e.g. [0,100]\r\n      \"xAxisTickFormat\":\".0%\",\r\n      \"xAxisLabel\":\"x axis label\",\r\n      \"stackOffset\":\"stackOffsetNone\",\r\n      // options include\r\n      // stackOffsetNone means the baseline is set at zero\r\n      // stackOffsetExpand to do 100% charts\r\n      // stackOffsetDiverging for data with positive and negative values\r\n      \"stackOrder\":\"stackOrderNone\"\r\n      // other options include\r\n      // stackOrderNone means the order is taken from the datafile\r\n      // stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\r\n      // stackOrderAscending the smallest series (according to the sum of values) is at the bottom\r\n      // stackOrderDescending the largest series (according to the sum of values) is at the bottom\r\n      // stackOrderReverse reverse the order as set from the data file\r\n    },\r\n    \"optional\": {\r\n      \"margin\": {\r\n        \"sm\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        },\r\n        \"md\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        },\r\n        \"lg\": {\r\n          \"top\": 10,\r\n          \"right\": 20,\r\n          \"bottom\": 40,\r\n          \"left\": 170\r\n        }\r\n      },\r\n      \"seriesHeight\":{\r\n        \"sm\":40,\r\n        \"md\":40,\r\n        \"lg\":40\r\n      },\r\n      \"xAxisTicks\":{\r\n        \"sm\":3,\r\n        \"md\":4,\r\n        \"lg\":5\r\n      },\r\n      \"mobileBreakpoint\": 510,\r\n      \"mediumBreakpoint\": 600\r\n    },\r\n    \"elements\":{\"select\":0, \"nav\":0, \"legend\":1, \"titles\":0}\r\n  };",
            "script_js": "let graphic = d3.select('#graphic');\r\nlet legend = d3.select('#legend');\r\nlet pymChild = null;\r\n\r\nfunction drawGraphic() {\r\n\t// clear out existing graphics\r\n\tgraphic.selectAll('*').remove();\r\n\tlegend.selectAll('*').remove();\r\n\r\n\t//population accessible summmary\r\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\r\n\r\n\tlet threshold_md = config.optional.mediumBreakpoint;\r\n\tlet threshold_sm = config.optional.mobileBreakpoint;\r\n\r\n\t//set variables for chart dimensions dependent on width of #graphic\r\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\r\n\t\tsize = 'sm';\r\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\r\n\t\tsize = 'md';\r\n\t} else {\r\n\t\tsize = 'lg';\r\n\t}\r\n\r\n\tlet margin = config.optional.margin[size];\r\n\tmargin.centre = config.optional.margin.centre;\r\n\tfullwidth = parseInt(graphic.style('width'));\r\n\tchart_width = parseInt(graphic.style('width')) - margin.left - margin.right;\r\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\r\n\tlet height =\r\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\r\n\t\t10 * (graphic_data.length - 1) +\r\n\t\t12;\r\n\r\n\tgroups = d3.groups(graphic_data, (d) => d.group);\r\n\r\n\tconst stack = d3\r\n\t\t.stack()\r\n\t\t.keys(graphic_data.columns.slice(2)) //Just the columns with data values\r\n\t\t.offset(d3[config.essential.stackOffset])\r\n\t\t.order(d3[config.essential.stackOrder]);\r\n\r\n\t// create the y scale in groups\r\n\tgroups.map(function (d) {\r\n\t\t//height\r\n\t\td[2] = config.optional.seriesHeight[size] * d[1].length;\r\n\t\t// y scale\r\n\t\td[3] = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.paddingOuter(0.2)\r\n\t\t\t.paddingInner(0.25)\r\n\t\t\t.range([0, d[2]])\r\n\t\t\t.domain(d[1].map((d) => d.name));\r\n\t\t//y axis generator\r\n\t\td[4] = d3.axisLeft(d[3]).tickSize(0).tickPadding(10);\r\n\t\t//stack\r\n\t\td[5] = stack(d[1]);\r\n\t});\r\n\r\n\t//set up x scale\r\n\tconst x = d3\r\n\t\t.scaleLinear()\r\n\t\t.range([0, chart_width])\r\n\t\t.domain(config.essential.xDomain);\r\n\r\n\tconst seriesAll = stack(graphic_data);\r\n\r\n\tif (config.essential.xDomain == 'auto') {\r\n\t\tx.domain(d3.extent(seriesAll.flat(2))); //flatten the arrays and then get the extent\r\n\t} else {\r\n\t\tx.domain(config.essential.xDomain);\r\n\t}\r\n\r\n\tlet xAxis = d3\r\n\t\t.axisBottom(x)\r\n\t\t.tickSize(-height)\r\n\t\t.tickFormat(d3.format(config.essential.xAxisTickFormat))\r\n\t\t// .tickFormat(d => d  + \"%\")\r\n\t\t.ticks(config.optional.xAxisTicks[size]);\r\n\r\n\tdivs = graphic.selectAll('div.categoryLabels').data(groups).join('div');\r\n\r\n\tdivs\r\n\t\t.append('p')\r\n\t\t.attr('class', 'groupLabels')\r\n\t\t.html((d) => d[0]);\r\n\r\n\tsvgs = divs\r\n\t\t.append('svg')\r\n\t\t.attr('class', (d) => 'chart chart' + groups.indexOf(d))\r\n\t\t.attr('height', (d) => d[2] + margin.top + margin.bottom)\r\n\t\t.attr('width', chart_width + margin.left + margin.right);\r\n\r\n\tcharts = svgs\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n\tcharts.each(function (d, i) {\r\n\t\td3.select(this)\r\n\t\t\t.append('g')\r\n\t\t\t.attr('class', 'y axis')\r\n\t\t\t.call(d[4])\r\n\t\t\t.selectAll('text')\r\n\t\t\t.call(wrap, margin.left - 10);\r\n\r\n\t\td3.select(this)\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', (d) => 'translate(0,' + d[2] + ')')\r\n\t\t\t.attr('class', 'x axis')\r\n\t\t\t.each(function () {\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.call(xAxis.tickSize(-d[2]))\r\n\t\t\t\t\t.selectAll('line')\r\n\t\t\t\t\t.each(function (e) {\r\n\t\t\t\t\t\tif (e == 0) {\r\n\t\t\t\t\t\t\td3.select(this).attr('class', 'zero-line');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\tfor (let j = 0; j < groups.length; j++) {\r\n\t\t\tif (i == j) {\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.append('g')\r\n\t\t\t\t\t.attr('class', 'bars')\r\n\t\t\t\t\t.selectAll('g')\r\n\t\t\t\t\t.data((d) => d[5])\r\n\t\t\t\t\t.join('g')\r\n\t\t\t\t\t.attr('fill', (d, k) => config.essential.colour_palette[k])\r\n\t\t\t\t\t.selectAll('rect')\r\n\t\t\t\t\t.data((d) => d)\r\n\t\t\t\t\t.join('rect')\r\n\t\t\t\t\t.attr('x', (d) => x(d[0]))\r\n\t\t\t\t\t.attr('y', (d) => groups[i][3](d.data.name))\r\n\t\t\t\t\t.attr('width', (d) => x(d[1]) - x(d[0]))\r\n\t\t\t\t\t.attr('height', groups[i][3].bandwidth());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// This does the x-axis label - here only added to the last group\r\n\t\tif (i == groups.length - 1) {\r\n\t\t\td3.select(this)\r\n\t\t\t\t.append('g')\r\n\t\t\t\t.attr('transform', 'translate(' + 0 + ',' + (d[2] + margin.top) + ')')\r\n\t\t\t\t.append('text')\r\n\t\t\t\t.attr('x', chart_width)\r\n\t\t\t\t.attr('y', 0)\r\n\t\t\t\t.attr('dy', 25)\r\n\t\t\t\t.attr('class', 'axis--label')\r\n\t\t\t\t.text(config.essential.xAxisLabel)\r\n\t\t\t\t.attr('text-anchor', 'end')\r\n\t\t\t\t.call(wrap, chart_width + margin.left);\r\n\t\t}\r\n\t});\r\n\r\n\t// Set up the legend\r\n\tlet legenditem = d3\r\n\t\t.select('#legend')\r\n\t\t.selectAll('div.legend--item')\r\n\t\t.data(\r\n\t\t\td3.zip(graphic_data.columns.slice(2), config.essential.colour_palette)\r\n\t\t)\r\n\t\t.enter()\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--item');\r\n\r\n\tlegenditem\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--icon--circle')\r\n\t\t.style('background-color', (d) => d[1]);\r\n\r\n\tlegenditem\r\n\t\t.append('div')\r\n\t\t.append('p')\r\n\t\t.attr('class', 'legend--text')\r\n\t\t.html((d) => d[0]);\r\n\r\n\t//create link to source\r\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\r\n\r\n\t//use pym to calculate chart dimensions\r\n\tif (pymChild) {\r\n\t\tpymChild.sendHeight();\r\n\t}\r\n}\r\n\r\nfunction wrap(text, width) {\r\n\ttext.each(function () {\r\n\t\tlet text = d3.select(this),\r\n\t\t\twords = text.text().split(/\\s+/).reverse(),\r\n\t\t\tword,\r\n\t\t\tline = [],\r\n\t\t\tlineNumber = 0,\r\n\t\t\tlineHeight = 1.1, // ems\r\n\t\t\t// y = text.attr(\"y\"),\r\n\t\t\tx = text.attr('x'),\r\n\t\t\tdy = parseFloat(text.attr('dy')),\r\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\r\n\t\twhile ((word = words.pop())) {\r\n\t\t\tline.push(word);\r\n\t\t\ttspan.text(line.join(' '));\r\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\r\n\t\t\t\tline.pop();\r\n\t\t\t\ttspan.text(line.join(' '));\r\n\t\t\t\tline = [word];\r\n\t\t\t\ttspan = text\r\n\t\t\t\t\t.append('tspan')\r\n\t\t\t\t\t.attr('x', x)\r\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\r\n\t\t\t\t\t.text(word);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet breaks = text.selectAll('tspan').size();\r\n\t\ttext.attr('y', function () {\r\n\t\t\treturn -6 * (breaks - 1);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nd3.csv(config.essential.graphic_data_url).then((data) => {\r\n\t//load chart data\r\n\tgraphic_data = data;\r\n\r\n\t//use pym to create iframed chart dependent on specified variables\r\n\tpymChild = new pym.Child({\r\n\t\trenderCallback: drawGraphic\r\n\t});\r\n});\r\n",
            "chart_css": ".dataLabels{\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n  }\r\n\r\n  p.groupLabels{\r\n    padding-top:5px;\r\n    margin-top: 5px;\r\n    margin-bottom:0em;\r\n    font-weight: 600;\r\n  }",
            "data_csv": "name,group,Category 1,Category 2,Category 3\r\nGypsy or Irish Traveller,White,0.19,0.128,0.02\r\n\"English, Welsh, Scottish, Northern Irish or British\",White,0.074,0.102,0.04\r\nIrish,White,0.075,0.094,0.06\r\nRoma,White,0.06,0.058,0.08\r\nOther White,White,0.044,0.063,0.1\r\nBangladeshi,\"Asian, Asian British or Asian Welsh\",0.095,0.091,0.12\r\nPakistani,\"Asian, Asian British or Asian Welsh\",0.084,0.076,0.14\r\nIndian,\"Asian, Asian British or Asian Welsh\",0.05,0.061,0.16\r\nOther Asian,\"Asian, Asian British or Asian Welsh\",0.052,0.067,0.18\r\nChinese,\"Asian, Asian British or Asian Welsh\",0.028,0.053,0.2\r\nWhite and Black Caribbean,Mixed or Multiple ethnic groups,0.102,0.107,0.22\r\nOther Mixed or Multiple ethnic groups,Mixed or Multiple ethnic groups,0.079,0.099,0.24\r\nWhite and Black African,Mixed or Multiple ethnic groups,0.077,0.09,0.26\r\nWhite and Asian,Mixed or Multiple ethnic groups,0.065,0.095,0.28\r\nCaribbean,\"Black, Black British, Black Welsh, Caribbean or African\",0.082,0.09,0.3\r\nOther Black,\"Black, Black British, Black Welsh, Caribbean or African\",0.086,0.082,0.32\r\nAfrican,\"Black, Black British, Black Welsh, Caribbean or African\",0.052,0.053,0.34\r\nArab,Other ethnic group,0.087,0.083,0.36\r\nAny other ethnic group,Other ethnic group,0.068,0.073,0.38\r\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-stacked-sm": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisTickFormat\": \".0f\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"stackOffset\": \"stackOffsetDiverging\",\n\t\t// options include\n\t\t// stackOffsetNone means the baseline is set at zero\n\t\t// stackOffsetExpand to do 100% charts\n\t\t// stackOffsetDiverging for data with positive and negative values\n\t\t\"stackOrder\": \"stackOrderNone\"\n\t\t// other options include\n\t\t// stackOrderNone means the order is taken from the datafile\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\n\t\t// stackOrderReverse reverse the order as set from the data file\n\t},\n\t\"optional\": {\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 1,\n\t\t\t\"lg\": 2 // This indicates you want 2 charts side by side\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [1.6, 2] //lg: [1.6, 2], can be used to make a 2x wide grid\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 150\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 20\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 160\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 30,\n\t\t\t\"md\": 30,\n\t\t\t\"lg\": 30\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 2,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 5\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600,\n\t\t\"dropYAxis\": true\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "script_js": "let pymChild = null;\nlet graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\n\n//Remove previous SVGs\nd3.select('#graphic').select('img').remove();\n\nfunction drawGraphic(seriesName, graphic_data, chartIndex, numberOfSeries, fullData) {\n\n\t//population accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\t//Was trying to be a little fancy but will need to workshop this.\n\t// let size = window.innerWidth > config.optional.mobileBreakpoint ? \"lg\" : \"sm\";\n\n\tfunction calculateChartWidth(size) {\n\t\tconst chartEvery = config.optional.chart_every[size];\n\t\tconst aspectRatio = config.optional.aspectRatio[size];\n\t\tconst chartMargin = config.optional.margin[size];\n\n\t\tif (config.optional.dropYAxis) {\n\t\t\t// Chart width calculation allowing for 10px left margin between the charts\n\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\n\t\t\treturn chartWidth;\n\t\t} else {\n\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n\t\t\treturn chartWidth;\n\t\t}\n\t}\n\n\t// size thresholds as defined in the config.js file\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tlet size;\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tconst chartsPerRow = config.optional.chart_every[size];\n\tconst chartPosition = chartIndex % chartsPerRow;\n\n\t// Set dimensions\n\tlet margin = { ...config.optional.margin[size] };\n\n\t// If the chart is not in the first position in the row, reduce the left margin\n\tif (config.optional.dropYAxis) {\n\t\tif (chartPosition !== 0) {\n\t\t\tmargin.left = 10;\n\t\t}\n\t}\n\n\n\n\tlet chart_width = calculateChartWidth(size);\n\n\t//console.log(`The value of chart_width is ${chart_width}.`);\n\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\n\t\t10 * (graphic_data.length - 1) +\n\t\t12;\n\n\t// Define scales\n\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\t// This is a different version\n\t// const y = d3.scaleBand().rangeRound([0, height]).padding(0.1);\n\n\tconst y = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.2)\n\t\t.paddingInner(((graphic_data.length - 1) * 10) / (graphic_data.length * 30))\n\t\t.range([0, height])\n\t\t.round(true);\n\n\t// Define axes\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.tickFormat(d3.format(config.essential.xAxisTickFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\tlet yAxis = d3.axisLeft(y)\n\t\t.tickSize(0)\n\t\t.tickPadding(10)\n\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? (d) :\n\t\t\tchartPosition == 0 ? (d) : \"\");\n\n\t// Define stack layout\n\tlet stack = d3\n\t\t.stack()\n\t\t.offset(d3[config.essential.stackOffset])\n\t\t.order(d3[config.essential.stackOrder])\n\t\t.keys(graphic_data.columns.slice(1, -1));\n\n\t// Process data ! This needs review\n\n\tconst series = stack(graphic_data);\n\n\t// console.table(series);\n\n\tif (config.essential.xDomain === 'auto') {\n\t\tx.domain([Math.min(0, d3.min(stack(fullData), (d) => d3.min(d, (d) => d[1]))), d3.max(stack(fullData), (d) => d3.max(d, (d) => d[1]))]); //removed.nice()\n\t} else {\n\t\tx.domain(config.essential.xDomain);\n\t}\n\t\n\ty.domain(graphic_data.map((d) => d.name));\n\n\t// Set up the legend\n\tlet legenditem = legend\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(graphic_data.columns.slice(1), config.essential.colour_palette)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\t//End of legend code\n\n\t// console.log('Chart width:', chart_width);\n\t// console.log('Height:', height);\n\t// console.log('X domain:', x.domain());\n\t// console.log('Y domain:', y.domain());\n\n\t// Create SVG\n\tlet svg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t// Add axis labels  if you want them\n\t// svg\n\t//   .append(\"text\")\n\t//   .attr(\"class\", \"axis--label\")\n\t//   .attr(\n\t//     \"transform\",\n\t//     \"translate(\" + -margin.left / 2 + \",\" + height / 2 + \") rotate(-90)\"\n\t//   )\n\t//   .text(seriesName);\n\n\t// Add axes\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t// console.log(`The value of margin.left - (your value) is ${margin.left - 30}.`);\n\n\t// if (chartIndex % chartsPerRow === 0) {\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('.tick text')\n\t\t.call(wrap, margin.left - 10, graphic_data);\n\t// } else {\n\t// \tsvg.append('g').attr('class', 'y axis').call(yAxis.tickValues([]));\n\t// }\n\n\t// Add a bold text label to the top left corner of the chart SVG\n\tsvg\n\t\t.append('text')\n\t\t.attr('class', 'title')\n\t\t.attr('x', 0)\n\t\t.attr('y', -margin.top / 2)\n\t\t.text(seriesName);\n\n\t// Draw chart\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('g')\n\t\t.data(series)\n\t\t.enter()\n\t\t.append('g')\n\t\t.style('fill', (_, i) => config.essential.colour_palette[i])\n\t\t.selectAll('rect')\n\t\t.data((d) => d)\n\t\t.join('rect')\n\t\t.attr('x', (d) => x(d[0]))\n\t\t.attr('y', (d, i) => y(graphic_data[i].name))\n\t\t.attr('width', (d) => x(d[1]) - x(d[0]))\n\t\t.attr('height', y.bandwidth());\n\n\t// This does the x-axis label\n\tif (chartIndex % chartsPerRow === chartsPerRow - 1 || chartIndex === numberOfSeries - 1) {\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', `translate(0, ${height})`)\n\t\t\t.append('text')\n\t\t\t.attr('x', chart_width)\n\t\t\t.attr('y', 35)\n\t\t\t.attr('class', 'axis--label')\n\t\t\t.text(config.essential.xAxisLabel)\n\t\t\t.attr('text-anchor', 'end');\n\t}\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\n// You have 2 wrap text options. The first does add any text styling to data with gaps. \n\n\n// function wrap(text, width) {\n//   text.each(function () {\n//     let text = d3.select(this),\n//       words = text.text().split(/\\s+/).reverse(),\n//       word,\n//       line = [],\n//       lineNumber = 0,\n//       lineHeight = 1.1, // ems\n//       // y = text.attr(\"y\"),\n//       x = text.attr(\"x\"),\n//       dy = parseFloat(text.attr(\"dy\")),\n//       tspan = text.text(null).append(\"tspan\").attr(\"x\", x);\n//     while ((word = words.pop())) {\n//       line.push(word);\n//       tspan.text(line.join(\" \"));\n//       if (tspan.node().getComputedTextLength() > width) {\n//         line.pop();\n//         tspan.text(line.join(\" \"));\n//         line = [word];\n//         tspan = text\n//           .append(\"tspan\")\n//           .attr(\"x\", x)\n//           .attr(\"dy\", lineHeight + \"em\")\n//           .text(word);\n//       }\n//     }\n//     let breaks = text.selectAll(\"tspan\").size();\n//     text.attr(\"y\", function () {\n//       return -6 * (breaks - 1);\n//     });\n//   });\n// }\n\n\nfunction wrap(text, width, graphic_data) {\n\ttext.each(function (d, i) {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\n\t\t// Check if the corresponding data row has no data, and if so, make the y-axis label bold\n\t\tconst rowData = graphic_data[i];\n\t\tconst hasNoData = Object.values(rowData)\n\t\t\t.slice(1, -1)\n\t\t\t.every((value) => value === '');\n\t\tif (hasNoData) {\n\t\t\ttext.style('font-weight', 'bold');\n\t\t}\n\t});\n}\n\n// Load the data\nd3.csv(config.essential.graphic_data_url)\n\t.then((data) => {\n\t\t// console.log('Original data:', data);\n\n\t\t// clear out existing graphics\n\t\tgraphic.selectAll('*').remove();\n\t\tlegend.selectAll('*').remove();\n\n\t\tconst fullData = data;\n\t\t// Group the data by the 'series' column\n\t\tconst groupedData = d3.groups(fullData, (d) => d.series);\n\t\t// console.log('Grouped data:', groupedData[0][1]);\n\n\t\t//Generate a list of categories based on the order in the first chart that we can use to order the subsequent charts\n\t\tlet namesArray = [...groupedData][0][1].map(d => d.name);\n\n\t\t// // Remove previous SVGs\n\t\t// graphic.selectAll('svg').remove();\n\n\t\tgroupedData.forEach((group, i) => {\n\t\t\tconst seriesName = group[0];\n\t\t\tconst graphic_data = group[1];\n\n\t\t\t//Sort the data so that the bars in each chart are in the same order\n\t\t\tgraphic_data.sort((a, b) => namesArray.indexOf(a.name) - namesArray.indexOf(b.name))\n\n\t\t\tgraphic_data.columns = data.columns;\n\n\t\t\tpymChild = new pym.Child({ renderCallback: drawGraphic(seriesName, graphic_data, i, groupedData.length, fullData) });\n\t\t});\n\t})\n\t.catch((error) => console.error(error));\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\n.title {\n  font-weight: 600;\n  fill: #414042;\n}",
            "data_csv": "name,Category 1,Category 2,Category 3,Category 4 with a long name,Category 5,series\nAdmin,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268,series1\nArts,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155,series1\nRetail,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462,series1\nServices,,,,,,series1\nManufacturing,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495,series1\nConstruction,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893,series1\nHealth and social work,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361,series1\nServices2,,,,,,series1\nTransportation and storage,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727,series1\nAccommodation and food,24.56805884,89.47462279,49.36685439,50.05168647,65.708543,series1\nOther,-27.48215082,-14.64375439,66.97898751,58.11839376,9.358939682,series1\nAll businesses,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289,series1\nAdmin,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268,series2\nArts,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155,series2\nRetail,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462,series2\nManufacturing,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495,series2\nConstruction,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893,series2\nHealth and social work,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361,series2\nTransportation and storage,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727,series2\nAccommodation and food,24.56805884,89.47462279,49.36685439,50.05168647,65.708543,series2\nOther,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682,series2\nAll businesses,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289,series2\nAdmin,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268,series3\nArts,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155,series3\nRetail,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462,series3\nManufacturing,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495,series3\nConstruction,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893,series3\nHealth and social work,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361,series3\nTransportation and storage,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727,series3\nAccommodation and food,24.56805884,89.47462279,49.36685439,50.05168647,65.708543,series3\nOther,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682,series3\nAll businesses,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289,series3\nAdmin,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268,series4\nArts,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155,series4\nRetail,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462,series4\nTransportation and storage,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727,series4\nAccommodation and food,24.56805884,89.47462279,49.36685439,50.05168647,65.708543,series4\nOther,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682,series4\nAll businesses,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289,series4\nManufacturing,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495,series4\nConstruction,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893,series4\nHealth and social work,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361,series4",
            "comparison_csv": null
        },
        "bar-chart-horizontal-stacked-with-tooltip": {
            "config_js": "config = {\r\n\t\"essential\": {\r\n\t\t\"graphic_data_url\": \"data.csv\",\r\n\t\t\"colour_palette\": [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\"],\r\n\t\t\"drawLegend\": true, // set to false to remove the legend (still working on this)\r\n\t\t\"someOtherVariable\": \"someOtherValue\",\r\n\t\t\"sourceText\": \"Office for National Statistics\",\r\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\r\n\t\t\r\n\t\t\"xDomain\": \"auto\",\r\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\r\n\t\t\"tooltipFormat\": \".0f\",\r\n\t\t\"xAxisTickFormat\": \".0f\",\r\n\t\t\"xAxisLabel\": \"x axis label\",\r\n\t\t\"stackOffset\": \"stackOffsetNone\",\r\n\t\t// options include\r\n\t\t// stackOffsetNone means the baseline is set at zero\r\n\t\t// stackOffsetExpand to do 100% charts\r\n\t\t// stackOffsetDiverging for data with positive and negative values\r\n\t\t\"stackOrder\": \"stackOrderNone\"\r\n\t\t// other options include\r\n\t\t// stackOrderNone means the order is taken from the datafile\r\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\r\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\r\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\r\n\t\t// stackOrderReverse reverse the order as set from the data file\r\n\t},\r\n\t\"optional\": {\r\n\t\t\"margin\": {\r\n\t\t\t\"sm\": {\r\n\t\t\t\t\"top\": 15,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 120\r\n\t\t\t},\r\n\t\t\t\"md\": {\r\n\t\t\t\t\"top\": 15,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 120\r\n\t\t\t},\r\n\t\t\t\"lg\": {\r\n\t\t\t\t\"top\": 15,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 120\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"seriesHeight\": {\r\n\t\t\t\"sm\": 30,\r\n\t\t\t\"md\": 30,\r\n\t\t\t\"lg\": 30\r\n\t\t},\r\n\t\t\"xAxisTicks\": {\r\n\t\t\t\"sm\": 4,\r\n\t\t\t\"md\": 8,\r\n\t\t\t\"lg\": 10\r\n\t\t},\r\n\t\t\"mobileBreakpoint\": 510,\r\n\t\t\"mediumBreakpoint\": 600\r\n\t},\r\n};\r\n",
            "script_js": "let graphic = d3.select('#graphic');\r\nlet legend = d3.select('#legend');\r\nlet pymChild = null;\r\n\r\nfunction drawGraphic() {\r\n\t// clear out existing graphics\r\n\tgraphic.selectAll('*').remove();\r\n\tlegend.selectAll('*').remove();\r\n\r\n\t//Accessible summary\r\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\r\n\r\n\tlet threshold_md = config.optional.mediumBreakpoint;\r\n\tlet threshold_sm = config.optional.mobileBreakpoint;\r\n\r\n\t//set variables for chart dimensions dependent on width of #graphic\r\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\r\n\t\tsize = 'sm';\r\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\r\n\t\tsize = 'md';\r\n\t} else {\r\n\t\tsize = 'lg';\r\n\t}\r\n\r\n\tlet margin = config.optional.margin[size];\r\n\tlet chart_width =\r\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\r\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\r\n\tlet height =\r\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\r\n\t\t10 * (graphic_data.length - 1) +\r\n\t\t12;\r\n\r\n\t//set up scales\r\n\tconst x = d3.scaleLinear().range([0, chart_width]);\r\n\r\n\tconst y = d3\r\n\t\t.scaleBand()\r\n\t\t.paddingOuter(0.2)\r\n\t\t.paddingInner(((graphic_data.length - 1) * 10) / (graphic_data.length * 30))\r\n\t\t.range([0, height])\r\n\t\t.round(true);\r\n\r\n\tconst colour = d3\r\n\t\t.scaleOrdinal()\r\n\t\t.domain(graphic_data.columns.slice(1))\r\n\t\t.range(config.essential.colour_palette);\r\n\r\n\t//use the data to find unique entries in the name column\r\n\ty.domain([...new Set(graphic_data.map((d) => d.name))]);\r\n\r\n\t//set up yAxis generator\r\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\r\n\r\n\tconst stack = d3\r\n\t\t.stack()\r\n\t\t.keys(graphic_data.columns.slice(1))\r\n\t\t.offset(d3[config.essential.stackOffset])\r\n\t\t.order(d3[config.essential.stackOrder]);\r\n\r\n\tconst series = stack(graphic_data);\r\n\r\n\t//set up xAxis generator\r\n\tlet xAxis = d3\r\n\t\t.axisBottom(x)\r\n\t\t.tickSize(-height)\r\n\t\t.tickFormat(d3.format(config.essential.xAxisTickFormat))\r\n\t\t.ticks(config.optional.xAxisTicks[size]);\r\n\r\n\t//create svg for chart\r\n\tsvg = d3\r\n\t\t.select('#graphic')\r\n\t\t.append('svg')\r\n\t\t.attr('width', chart_width + margin.left + margin.right)\r\n\t\t.attr('height', height + margin.top + margin.bottom)\r\n\t\t.attr('class', 'chart')\r\n\t\t.style('background-color', '#fff')\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n\tif (config.essential.xDomain == 'auto') {\r\n\t\tx.domain(d3.extent(series.flat(2))); //flatten the arrays and then get the extent\r\n\t} else {\r\n\t\tx.domain(config.essential.xDomain);\r\n\t}\r\n\r\n\t// Set up the legend\r\n\tlet legenditem = d3\r\n\t\t.select('#legend')\r\n\t\t.selectAll('div.legend--item')\r\n\t\t.data(\r\n\t\t\td3.zip(graphic_data.columns.slice(1), config.essential.colour_palette)\r\n\t\t)\r\n\t\t.enter()\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--item');\r\n\r\n\tlegenditem\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--icon--circle')\r\n\t\t.style('background-color', function (d) {\r\n\t\t\treturn d[1];\r\n\t\t});\r\n\r\n\tlegenditem\r\n\t\t.append('div')\r\n\t\t.append('p')\r\n\t\t.attr('class', 'legend--text')\r\n\t\t.html(function (d) {\r\n\t\t\treturn d[0];\r\n\t\t});\r\n\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(0,' + height + ')')\r\n\t\t.attr('class', 'x axis')\r\n\t\t.call(xAxis)\r\n\t\t.selectAll('line')\r\n\t\t.each(function (d) {\r\n\t\t\tif (d == 0) {\r\n\t\t\t\td3.select(this).attr('class', 'zero-line');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('class', 'y axis')\r\n\t\t.call(yAxis)\r\n\t\t.selectAll('text')\r\n\t\t.call(wrap, margin.left - 10);\r\n\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.selectAll('g')\r\n\t\t.data(series)\r\n\t\t.join('g')\r\n\t\t.attr('fill', (d, i) => config.essential.colour_palette[i])\r\n\t\t.selectAll('rect')\r\n\t\t.data((d) => d)\r\n\t\t.join('rect')\r\n\t\t.attr(\"class\", \"stackRects\")\r\n\t\t.attr('x', (d) => Math.min(x(d[0]), x(d[1])))\r\n\t\t.attr('y', (d) => y(d.data.name))\r\n\t\t.attr('width', (d) => Math.abs(x(d[0]) - x(d[1])))\r\n\t\t.attr('height', y.bandwidth())\r\n\t\t.on(\"mousemove\", function (d, i) {\r\n\t\t\tlet xValue = parseFloat(d3.select(this).attr(\"x\")) + d3.select(this).attr(\"width\") / 2\r\n\t\t\tlet yValue = parseFloat(d3.select(this).attr(\"y\")) + d3.select(this).attr(\"height\") / 2\r\n\r\n\t\t\tsvg.selectAll(\".stackRects\")\r\n\t\t\t\t.attr(\"opacity\", 0.2)\r\n\r\n\t\t\td3.select(this).attr(\"opacity\", 1)\r\n\r\n\t\t\tsvg.select(\".tooltipGroup\")\r\n\t\t\t\t.attr(\"transform\", \"translate(\" + xValue + \",\" + yValue + \")\")\r\n\r\n\t\t\tsvg.select(\".tooltipGroup\")\r\n\t\t\t\t.select(\"text\")\r\n\t\t\t\t.text(d3.format(config.essential.tooltipFormat)((i[1] - i[0])))\r\n\t\t})\r\n\t\t.on(\"mouseleave\", function (d, i) {\r\n\r\n\t\t\tsvg.selectAll(\".stackRects\")\r\n\t\t\t\t.attr(\"opacity\", 1)\r\n\r\n\t\t\tsvg.select(\".tooltipGroup\")\r\n\t\t\t\t.attr(\"transform\", \"scale(0)\")\r\n\r\n\t\t})\r\n\r\n\tlet tooltipGroup = svg.append(\"g\")\r\n\t\t.attr(\"class\", \"tooltipGroup\")\r\n\t\t.attr(\"transform\", \"scale(0)\")\r\n\r\n\ttooltipGroup.append(\"rect\")\r\n\t\t.attr(\"x\", -32)\r\n\t\t.attr(\"width\", 64)\r\n\t\t.attr(\"y\", -12)\r\n\t\t.attr(\"height\", 24)\r\n\t\t.attr(\"stroke\", \"none\")\r\n\t\t.attr(\"fill\", \"white\")\r\n\t\t.attr(\"opacity\", 0.9)\r\n\t\t.attr(\"pointer-events\", \"none\")\r\n\t\t.attr(\"rx\", \"4px\")\r\n\r\n\ttooltipGroup.append(\"text\")\r\n\t\t.attr(\"x\", 0)\r\n\t\t.attr(\"y\", 5)\r\n\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t.text(\"32.5%\")\r\n\t\t.attr(\"stroke\", \"#414042\")\r\n\t\t.attr(\"stroke-width\", \"0.5px\")\r\n\t\t.attr(\"fill\", \"#414042\")\r\n\t\t.attr(\"font-size\", \"14px\")\r\n\t\t.attr(\"pointer-events\", \"none\")\r\n\r\n\t// This does the x-axis label\r\n\tsvg\r\n\t\t.append('g')\r\n\t\t.attr('transform', 'translate(0,' + height + ')')\r\n\t\t.append('text')\r\n\t\t.attr('x', chart_width)\r\n\t\t.attr('y', 35)\r\n\t\t.attr('class', 'axis--label')\r\n\t\t.text(config.essential.xAxisLabel)\r\n\t\t.attr('text-anchor', 'end');\r\n\r\n\t//create link to source\r\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\r\n\r\n\t//use pym to calculate chart dimensions\r\n\tif (pymChild) {\r\n\t\tpymChild.sendHeight();\r\n\t}\r\n}\r\n\r\nfunction wrap(text, width) {\r\n\ttext.each(function () {\r\n\t\tlet text = d3.select(this),\r\n\t\t\twords = text.text().split(/\\s+/).reverse(),\r\n\t\t\tword,\r\n\t\t\tline = [],\r\n\t\t\tlineNumber = 0,\r\n\t\t\tlineHeight = 1.1, // ems\r\n\t\t\t// y = text.attr(\"y\"),\r\n\t\t\tx = text.attr('x'),\r\n\t\t\tdy = parseFloat(text.attr('dy')),\r\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\r\n\t\twhile ((word = words.pop())) {\r\n\t\t\tline.push(word);\r\n\t\t\ttspan.text(line.join(' '));\r\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\r\n\t\t\t\tline.pop();\r\n\t\t\t\ttspan.text(line.join(' '));\r\n\t\t\t\tline = [word];\r\n\t\t\t\ttspan = text\r\n\t\t\t\t\t.append('tspan')\r\n\t\t\t\t\t.attr('x', x)\r\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\r\n\t\t\t\t\t.text(word);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet breaks = text.selectAll('tspan').size();\r\n\t\ttext.attr('y', function () {\r\n\t\t\treturn -6 * (breaks - 1);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nd3.csv(config.essential.graphic_data_url).then((data) => {\r\n\t//load chart data\r\n\tgraphic_data = data;\r\n\r\n\t//use pym to create iframed chart dependent on specified variables\r\n\tpymChild = new pym.Child({\r\n\t\trenderCallback: drawGraphic\r\n\t});\r\n});\r\n",
            "chart_css": ".dataLabels{\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n}\r\n",
            "data_csv": "name,Category 1,Category 2,Category 3,Category 4 with a long name,Category 5\r\nAdmin,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268\r\nArts,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155\r\nRetail,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462\r\nManufacturing,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495\r\nConstruction,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893\r\nHealth and social work,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361\r\nTransportation and storage,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727\r\nAccommodation and food,24.56805884,89.47462279,49.36685439,50.05168647,65.708543\r\nOther,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682\r\nAll businesses,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289\r\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-with-dropdown": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#27A0CC\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"dataLabels\": {\n\t\t\t\"show\": true,\n\t\t\t\"numberFormat\": \".0%\"\n\t\t},\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"defaultOption\": \"option1\"\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 30,\n\t\t\t\"md\": 30,\n\t\t\t\"lg\": 30\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet select = d3.select('#select');\nlet pymChild = null;\nlet x, y;\n\n\nfunction drawGraphic() {\n\tgraphic.selectAll('*').remove();\n\tselect.selectAll('*').remove();\n\t\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tuniqueOptions = [...new Set(graphic_data.map((d) => d.option))];\n\n\tconsole.log(`dropdownData contains: ${JSON.stringify(uniqueOptions)}`);\n\n\tconst optns = select\n\t\t.append('div')\n\t\t.attr('id', 'sel')\n\t\t.append('select')\n\t\t.attr('id', 'optionsSelect')\n\t\t.attr('style', 'width:calc(100% - 6px)')\n\t\t.attr('class', 'chosen-select');\n\n\t// Add the placeholder option\n\toptns.append('option').attr('value', '').text('Select an option'); // Placeholder text\n\n\toptns\n\t\t.selectAll('option.option')\n\t\t.data(uniqueOptions)\n\t\t.enter()\n\t\t.append('option')\n\t\t.attr('value', (d) => d)\n\t\t.text((d) => d);\n\n\t\n\n\t\t\t//add some more accessibility stuff\n\td3.select('input.chosen-search-input').attr('id', 'chosensearchinput');\n\td3.select('div.chosen-search')\n\t\t.insert('label', 'input.chosen-search-input')\n\t\t.attr('class', 'visuallyhidden')\n\t\t.attr('for', 'chosensearchinput')\n\t\t.html('Type to select an area');\n\t\t\n\n\t\t$('#optionsSelect').trigger('chosen:updated');  // Initialize Chosen\n\n\t\tlet labelPositions = new Map();  // Create a map to store label positions\n\t\t\n\t\t$('#optionsSelect').chosen().change(function () {\n\t\t\tconst selectedOption = $(this).val();\n\t\t\tconsole.log(`Selected option: ${selectedOption}`);\n\t\t\n\t\t\tif (selectedOption) {\n\t\t\t\tchangeData(selectedOption);\n\n    } else {\n        // Clear the chart if no option is selected\n        clearChart();\n    }\n});\n\n// Clear the chart if no option is selected\n\nfunction clearChart() {\n    // Clear the chart graphics\n    svg.selectAll('rect').transition().duration(2000).attr('width', 0).remove();\n\n    svg\n        .selectAll('text.dataLabels')\n        .transition()\n        .duration(1000)\n        .attr('x', -100)\n        .remove();\n};\n\nfunction changeData(selectedOption) {\n\t\n\tlet filteredData = graphic_data.filter(\n\t\t(d) => d.option === selectedOption\n\t)\n\n\t// Sort the data \n\t.sort((a,b)=>  y.domain().indexOf(a.name)-y.domain().indexOf(b.name));\n\t\n\tconsole.log('Filtered data:', filteredData);\n\n\n\t// Update the y scale domain based on the filtered data\n\ty.domain(filteredData.map((d) => d.name));\n\n\t// Update the y axis with the new domain\n\tsvg\n\t\t.select('y axis')\n\t\t.transition()\n\t\t.duration(2000)\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\t// Store the current positions of the labels in the map\n\tsvg.selectAll('text.dataLabels').each(function(d) {\n\t\tlabelPositions.set(d.name, x(d.value));\n\t});\n\n\t// Enter and update\n\tlet bars = svg.selectAll('rect').data(filteredData, (d) => d.name);\n\n\t// Exit\n\tbars.exit().transition().duration(400).ease(d3.easeCubic).attr('width', 0).remove();\n\n\t// Enter and update\n\tbars\n\t\t.enter()\n\t\t.append('rect')\n\t\t// .attr('x', x(0))\n\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\n\t\t.attr('y', (d) => y(d.name))\n\t\t// .attr('width', 0)\n\t\t.attr('width', d =>  d.value < 0 ? Math.abs(x(d.value) - x(0)) : x(d.value) - x(0))\n\t\t.attr('height', y.bandwidth())\n\t\t.attr('fill', config.essential.colour_palette)\n\t\t.merge(bars)\n\t\t.transition()\n\t\t.duration(1250)\n\t\t.ease(d3.easeCubic)\n\t\t// .attr('width', (d) => x(d.value) - x(0));\n\t\t.attr('width', d =>  d.value < 0 ? Math.abs(x(d.value) - x(0)) : x(d.value) - x(0))\n\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0));\n\n\nlet labelPositionFactor = 7;\n\n\t// Update the data labels\n\tif (config.essential.dataLabels.show === true) {\n\t\tsvg\n\t\t\t.selectAll('text.dataLabels')\n\t\t\t.data(filteredData)\n\t\t\t.join('text')\n\t\t\t.attr('class', 'dataLabels')\n\t\t\t.attr('x', (d) => \n\t\t\tMath.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\n\t\t\t.attr('dx', (d) => d.value > 0 ?\n\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\n\t\t\t-3)\n\t\t\t.attr('y', (d) => y(d.name) + y.bandwidth()/2)\n\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t.attr('text-anchor', (d) => d.value > 0 ?\n\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\n\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'end' : 'start')\n\t\t)\n\n\t\t.attr('fill', (d) =>\n\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\n\t\t)\n\t\t\t.text((d) =>\n\t\t\t\td3.format(config.essential.dataLabels.numberFormat)(d.value)\n\t\t\t)\n\t\t\t.transition()\n\t\t\t.duration(1200)\n\t\t\t.ease(d3.easeCubic)\n\t\t\t\t\t\t\t.tween('text', function(d) {\n\t\t// Parse this.textContent as a float and multiply it by 0.001 to get the start value. This need to match the data.\n\t\tlet startValue = parseFloat(this.textContent)*0.001;\n\n\t\t// Create an interpolator\n\t\tconst i = d3.interpolate(startValue, d.value);\n\n\t\t// Create a position interpolator\n\t\tconst xi = d3.interpolate(labelPositions.get(d.name) || x(0), x(d.value) - (x(d.value) - x(0) < chart_width / 10 ? -3 : 3));\n\n\t\treturn function(t) {\n\t\t\t// Calculate the interpolated value\n\t\t\tlet interpolatedValue = i(t);\n\n\t\t\t// Update the label's text\n\t\t\tthis.textContent = d3.format(config.essential.dataLabels.numberFormat)(interpolatedValue);\n\n\t\t\t// Update the label's x position\n\t\t\td3.select(this).attr('x', xi(t));\n\t\t};\n\t});\n}\n\n}\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\n\tlet uniqueNames = [...new Set(graphic_data.map((d) => d.name))];\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * uniqueNames.length +\n\t\t10 * (uniqueNames.length - 1) +\n\t\t12;\n\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\n\t//set up scales\n\tx = d3.scaleLinear().range([0, chart_width]);\n\n\ty = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.2)\n\t\t.paddingInner(((graphic_data.length - 1) * 10) / (graphic_data.length * 30))\n\t\t.range([0, height])\n\t\t.round(true);\n\n\t//use the data to find unique entries in the name column\n\ty.domain([...new Set(graphic_data.map((d) => d.name))]);\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.tickFormat(d3.format(config.essential.dataLabels.numberFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t// Append y-axis to SVG\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\t\tif (config.essential.xDomain == 'auto') {\n\t\t\tif (d3.min(graphic_data.map(({ value }) => Number(value))) >= 0) {\n\t\t\t\tx.domain([\n\t\t\t\t\t0,\n\t\t\t\t\td3.max(graphic_data.map(({ value }) => Number(value)))]); //modified so it converts string to number\n\t\t\t} else {\n\t\t\t\tx.domain(d3.extent(graphic_data.map(({ value }) => Number(value))))\n\t\t\t}\n\t\t} else {\n\t\t\tx.domain(config.essential.xDomain);\n\t\t}\n\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\tconsole.log(`Length of graphic_data: ${graphic_data.length}`);\n\n\n\t// This does the x-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.append('text')\n\t\t.attr('x', chart_width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t$('#optionsSelect').val(config.essential.defaultOption).trigger('chosen:updated');\n\tchangeData(config.essential.defaultOption)\n\t// updateLegend(\"Agriculture, forestry and fishing\", 0)\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "data_csv": "name,value,option\nOther services,0.987848719,option1\nManufacturing,0.283661406,option1\nConstruction,0.681288045,option1\nArts,0.481757214,option1\nAdministrative,-0.209665614,option1\nWholesale trade,0.176396639,option1\nAdministrative and supportive service activities,0.047910167,option1\nOther services,0.787848719,option2\nManufacturing,0.783661406,option2\nConstruction,0.581288045,option2\nArts,0.381757214,option2\nAdministrative,-0.109665614,option2\nWholesale trade,0.076396639,option2\nAdministrative and supportive service activities,0.947910167,option2\nOther services,0.987848719,option3\nManufacturing,0.983661406,option3\nConstruction,0.681288045,option3\nArts,0.481757214,option3\nAdministrative,-0.209665614,option3\nWholesale trade,0.176396639,option3\nAdministrative and supportive service activities,-0.047910167,option3\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-with-reference-line": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#27A0CC\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"dataLabels\": {\n\t\t\t\"show\": false,\n\t\t\t\"numberFormat\": \".0%\"\n\t\t},\n\t\t\"xAxisNumberFormat\":\".0%\",\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisLabel\": \"x axis label\"\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 30,\n\t\t\t\"md\": 30,\n\t\t\t\"lg\": 30\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\n\n\n\nline.refline {\n  stroke: #222;\n  stroke-width: 3px;\n  stroke-linecap: round;\n}\n\ndiv.legend--item--here {\n  display:flex;\n  padding-right:40px;\n  padding-bottom: 12px;\n  margin-top: 12px;\n}\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\n\t\t10 * (graphic_data.length - 1) +\n\t\t12;\n\n\t//Set up the legend\n\tlegend\n\t\t.append('div')\n\t\t.attr('class', 'legend--item--here')\n\t\t.append('svg')\n\t\t.attr('height',14)\n\t\t.attr('width',25)\n\t\t.append('circle')\n\t\t.attr('cx',13)\n\t\t.attr('cy',8)\n\t\t.attr('r',6)\n\t\t.attr('fill', config.essential.colour_palette)\n\t\t.attr('class','legendCircle');\n\t\n\n\td3.select(\".legend--item--here\")\n\t\t.append('div')\n\t\t.append('p').attr('class', 'legend--text')\n\t\t.html(\"Value\")\n\n\tlegend\n\t\t.append('div')\n\t\t.attr(\"class\", \"legend--item--here refline\")\n\t\t.append('svg')\n\t\t.attr('height',14)\n\t\t.attr('width',25)\n\t\t.append('line')\n\t\t.attr('x1',2)\n\t\t.attr('x2',22)\n\t\t.attr('y1',8)\n\t\t.attr('y2',8)\n\t\t.attr('class','refline')\n\n\td3.select(\".legend--item--here.refline\")\n\t\t.append('div')\n\t\t.append('p').attr('class', 'legend--text')\n\t\t.html(\"Reference value\")\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\tconst y = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.2)\n\t\t.paddingInner(((graphic_data.length - 1) * 10) / (graphic_data.length * 30))\n\t\t.range([0, height])\n\t\t.round(true);\n\n\t//use the data to find unique entries in the name column\n\ty.domain([...new Set(graphic_data.map((d) => d.name))]);\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.tickFormat(d3.format(config.essential.xAxisNumberFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\n\tif (config.essential.xDomain == 'auto') {\n\t\tx.domain([\n\t\t\tMath.min(0, d3.min(graphic_data.map(({ value }) => Number(value))),\n\t\t\td3.min(graphic_data.map(({ ref }) => Number(ref)))),\n\t\t\t//x domain is the maximum out of the value and the reference value\n\t\t\tMath.max(d3.max(graphic_data.map(({ value }) => Number(value))),\n\t\t\td3.max(graphic_data.map(({ ref }) => Number(ref))))\n\t\t])\n\t} else {\n\t\tx.domain(config.essential.xDomain);\n\t}\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.selectAll('rect')\n\t\t.data(graphic_data)\n\t\t.join('rect')\n\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\n\t\t.attr('y', (d) => y(d.name))\n\t\t.attr('width', (d) => Math.abs(x(d.value) - x(0)))\n\t\t.attr('height', y.bandwidth())\n\t\t.attr('fill', config.essential.colour_palette);\n\n\t\tsvg\n\t\t.selectAll('line.refline')\n\t\t.data(graphic_data)\n\t\t.join('line')\n\t\t.attr('class', 'refline')\n\t\t.attr('x1', (d) => x(d.ref))\n\t\t.attr('x2', (d) => x(d.ref))\n\t\t.attr('y1', (d) => y(d.name))\n\t\t.attr('y2', (d) => y(d.name) + y.bandwidth())\n\n\n\t\tlet labelPositionFactor = 7;\n\n\tif (config.essential.dataLabels.show == true) {\n\t\tsvg\n\t\t\t.selectAll('text.dataLabels')\n\t\t\t.data(graphic_data)\n\t\t\t.join('text')\n\t\t\t.attr('class', 'dataLabels')\n\t\t\t.attr('x', (d) => d.value > 0 ? x(d.value) :\n\t\t\tMath.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\n\t\t  .attr('dx', (d) => d.value > 0 ?\n\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\n\t\t\t3)\n\t\t\t.attr('y', (d) => y(d.name) + y.bandwidth()/2)\n\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t.attr('text-anchor', (d) => d.value > 0 ?\n\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\n\t\t\t\"start\"\n\t\t  )\n\t\t  .attr('fill', (d) =>\n\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\n\t\t  )\n\t\t\t.text((d) =>\n\t\t\t\td3.format(config.essential.dataLabels.numberFormat)(d.value)\n\t\t\t);\n\t} //end if for datalabels\n\n\t// This does the x-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.append('text')\n\t\t.attr('x', chart_width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "data_csv": "name,value,ref\nOther services,0.987848719,0.1\nManufacturing,0.983661406,0.2\nConstruction,0.681288045,0.4\nArts,0.481757214,0.8\nAdministrative,-0.209665614,-0.17\nWholesale trade,0.176396639,1.3\nAdministrative and supportive service activities,0.047910167,0.5\n",
            "comparison_csv": null
        },
        "bar-chart-horizontal-with-reference-sm": {
            "config_js": "config = {\r\n\t\"essential\": {\r\n\t\t\"graphic_data_url\": \"data.csv\",\r\n\t\t\"colour_palette\": \"#27A0CC\",\r\n\t\t\"sourceText\": \"Office for National Statistics\",\r\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\r\n\t\t\"dataLabels\": {\r\n\t\t\t\"show\": false,\r\n\t\t\t\"numberFormat\": \".0%\"\r\n\t\t},\r\n\t\t\"xDomain\": \"auto\",\r\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\r\n\t\t\"xAxisLabel\": \"x axis label\"\r\n\t},\r\n\t\"optional\": {\r\n\t\t\"chart_every\": {\r\n\t\t\t\"sm\": 1,\r\n\t\t\t\"md\": 1,\r\n\t\t\t\"lg\": 2\r\n\t\t},\r\n\t\t\"aspectRatio\": {\r\n\t\t\t\"sm\": [1, 2],\r\n\t\t\t\"md\": [1, 2],\r\n\t\t\t\"lg\": [1, 2]\r\n\t\t},\r\n\t\t\"margin\": {\r\n\t\t\t\"sm\": {\r\n\t\t\t\t\"top\": 30,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 200\r\n\t\t\t},\r\n\t\t\t\"md\": {\r\n\t\t\t\t\"top\": 30,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 200\r\n\t\t\t},\r\n\t\t\t\"lg\": {\r\n\t\t\t\t\"top\": 30,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 200\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"seriesHeight\": {\r\n\t\t\t\"sm\": 30,\r\n\t\t\t\"md\": 30,\r\n\t\t\t\"lg\": 30\r\n\t\t},\r\n\t\t\"xAxisTicks\": {\r\n\t\t\t\"sm\": 2,\r\n\t\t\t\"md\": 2,\r\n\t\t\t\"lg\": 4\r\n\t\t},\r\n\t\t\"mobileBreakpoint\": 510,\r\n\t\t\"mediumBreakpoint\": 600,\r\n\t\t\"dropYAxis\": true\r\n\t},\r\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\r\n\t\"chart_build\": {}\r\n};\r\n",
            "script_js": "let graphic = d3.select('#graphic');\r\nlet legend = d3.select('#legend');\r\nlet pymChild = null;\r\n\r\nfunction drawGraphic() {\r\n\t// clear out existing graphics\r\n\tgraphic.selectAll('*').remove();\r\n\tlegend.selectAll('*').remove();\r\n\r\n\t//population accessible summmary\r\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\r\n\r\n\tlet threshold_md = config.optional.mediumBreakpoint;\r\n\tlet threshold_sm = config.optional.mobileBreakpoint;\r\n\r\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\r\n\t\tsize = 'sm';\r\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\r\n\t\tsize = 'md';\r\n\t} else {\r\n\t\tsize = 'lg';\r\n\t}\r\n\r\n\t//Set up the legend\r\n\tlegend\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--item--here')\r\n\t\t.append('div').attr('class', 'legend--icon--circle')\r\n\t\t.style('background-color', config.essential.colour_palette)\r\n\r\n\td3.select(\".legend--item--here\")\r\n\t\t.append('div')\r\n\t\t.append('p').attr('class', 'legend--text')\r\n\t\t.html(\"Value\")\r\n\r\n\tlegend\r\n\t\t.append('div')\r\n\t\t.attr(\"class\", \"legend--item--here refline\")\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--icon--refline')\r\n\t\t.style('background-color', \"#222\")\r\n\t\t.style('border-radius', '5px');\r\n\r\n\td3.select(\".legend--item--here.refline\")\r\n\t\t.append('div')\r\n\t\t.append('p').attr('class', 'legend--text')\r\n\t\t.html(\"Reference value\")\r\n\r\n\t// Nest the graphic_data by the 'series' column\r\n\tlet nested_data = d3.group(graphic_data, (d) => d.series);\r\n\r\n\t//Generate a list of categories based on the order in the first chart that we can use to order the subsequent charts\r\n\tlet namesArray = [...nested_data][0][1].map(d => d.name);\r\n\r\n\t// Create a container div for each small multiple\r\n\tlet chartContainers = graphic\r\n\t\t.selectAll('.chart-container')\r\n\t\t.data(Array.from(nested_data))\r\n\t\t.join('div')\r\n\t\t.attr('class', 'chart-container');\r\n\r\n\tfunction drawChart(container, data, chartIndex) {\r\n\t\t// Log the data being used for each small multiple\r\n\t\t// console.log('Data for this small multiple:', data);\r\n\t\t// console.log(chartIndex);\r\n\r\n\t\t//Sort the data so that the bars in each chart are in the same order\r\n\t\tdata.sort((a, b) => namesArray.indexOf(a.name) - namesArray.indexOf(b.name))\r\n\r\n\t\tfunction calculateChartWidth(size) {\r\n\t\t\tconst chartEvery = config.optional.chart_every[size];\r\n\t\t\tconst chartMargin = config.optional.margin[size];\r\n\r\n\t\t\tif (config.optional.dropYAxis) {\r\n\t\t\t\t// Chart width calculation allowing for 10px left margin between the charts\r\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\r\n\t\t\t\treturn chartWidth;\r\n\t\t\t} else {\r\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\r\n\t\t\t\treturn chartWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// Calculate the height based on the data\r\n\t\tlet height = config.optional.seriesHeight[size] * data.length +\r\n\t\t\t10 * (data.length - 1) +\r\n\t\t\t12;\r\n\r\n\r\n\t\tlet chartsPerRow = config.optional.chart_every[size];\r\n\t\tlet chartPosition = chartIndex % chartsPerRow;\r\n\r\n\t\tlet margin = { ...config.optional.margin[size] };\r\n\r\n\t\t// If the chart is not in the first position in the row, reduce the left margin\r\n\t\tif (config.optional.dropYAxis) {\r\n\t\t\tif (chartPosition !== 0) {\r\n\t\t\t\tmargin.left = 10;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet chart_width = calculateChartWidth(size)\r\n\r\n\t\t//set up scales\r\n\t\tconst x = d3.scaleLinear().range([0, chart_width]);\r\n\r\n\t\tconst y = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.paddingOuter(0.2)\r\n\t\t\t.paddingInner(((data.length - 1) * 10) / (data.length * 30))\r\n\t\t\t.range([0, height])\r\n\t\t\t.round(true);\r\n\r\n\t\t//use the data to find unique entries in the name column\r\n\t\ty.domain([...new Set(data.map((d) => d.name))]);\r\n\r\n\t\t//set up yAxis generator\r\n\r\n\t\tlet yAxis = d3.axisLeft(y)\r\n\t\t\t.tickSize(0)\r\n\t\t\t.tickPadding(10)\r\n\t\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? (d) :\r\n\t\t\t\tchartPosition == 0 ? (d) : \"\");\r\n\r\n\t\t//set up xAxis generator\r\n\t\tlet xAxis = d3\r\n\t\t\t.axisBottom(x)\r\n\t\t\t.tickSize(-height)\r\n\t\t\t.tickFormat(d3.format(config.essential.dataLabels.numberFormat))\r\n\t\t\t.ticks(config.optional.xAxisTicks[size]);\r\n\r\n\t\t//create svg for chart\r\n\t\tsvg = container\r\n\t\t\t.append('svg')\r\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\r\n\t\t\t.attr('height', height + margin.top + margin.bottom)\r\n\t\t\t.attr('class', 'chart')\r\n\t\t\t.style('background-color', '#fff')\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n\t\tif (config.essential.xDomain == 'auto') {\r\n\t\t\tx.domain([\r\n\t\t\t\tMath.min(0, d3.min(graphic_data.map(({ value }) => Number(value))),\r\n\t\t\t\t\td3.min(graphic_data.map(({ ref }) => Number(ref)))),\r\n\t\t\t\t//x domain is the maximum out of the value and the reference value\r\n\t\t\t\tMath.max(d3.max(graphic_data.map(({ value }) => Number(value))),\r\n\t\t\t\t\td3.max(graphic_data.map(({ ref }) => Number(ref))))\r\n\t\t\t])\r\n\t\t} else {\r\n\t\t\tx.domain(config.essential.xDomain);\r\n\t\t}\r\n\r\n\t\tsvg\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(0,' + height + ')')\r\n\t\t\t.attr('class', 'x axis')\r\n\t\t\t.call(xAxis)\r\n\t\t\t.selectAll('line')\r\n\t\t\t.each(function (d) {\r\n\t\t\t\tif (d == 0) {\r\n\t\t\t\t\td3.select(this).attr('class', 'zero-line');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// if (chartPosition == 0) {\r\n\t\tsvg\r\n\t\t\t.append('g')\r\n\t\t\t.attr('class', 'y axis')\r\n\t\t\t.call(yAxis)\r\n\t\t\t.selectAll('text')\r\n\t\t\t.call(wrap, margin.left - 10);\r\n\t\t// }\r\n\r\n\r\n\t\tsvg\r\n\t\t\t.selectAll('rect')\r\n\t\t\t.data(data)\r\n\t\t\t.join('rect')\r\n\t\t\t.attr('x', d => d.value < 0 ? x(d.value) : x(0))\r\n\t\t\t.attr('y', (d) => y(d.name))\r\n\t\t\t.attr('width', (d) => Math.abs(x(d.value) - x(0)))\r\n\t\t\t.attr('height', y.bandwidth())\r\n\t\t\t.attr('fill', config.essential.colour_palette);\r\n\r\n\r\n\t\tsvg\r\n\t\t\t.selectAll('line.refline')\r\n\t\t\t.data(data)\r\n\t\t\t.join('line')\r\n\t\t\t.attr('class', 'refline')\r\n\t\t\t.attr('x1', (d) => x(d.ref))\r\n\t\t\t.attr('x2', (d) => x(d.ref))\r\n\t\t\t.attr('y1', (d) => y(d.name))\r\n\t\t\t.attr('y2', (d) => y(d.name) + y.bandwidth())\r\n\r\n\t\tlet labelPositionFactor = 7;\r\n\r\n\t\tif (config.essential.dataLabels.show == true) {\r\n\t\t\tsvg\r\n\t\t\t\t.selectAll('text.dataLabels')\r\n\t\t\t\t.data(data)\r\n\t\t\t\t.join('text')\r\n\t\t\t\t.attr('class', 'dataLabels')\r\n\t\t\t\t.attr('x', (d) => d.value > 0 ? x(d.value) :\r\n\t\t\t\t\tMath.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? x(0) : x(d.value))\r\n\t\t\t\t.attr('dx', (d) => d.value > 0 ?\r\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 3 : -3) :\r\n\t\t\t\t\t3)\r\n\t\t\t\t.attr('y', (d) => y(d.name) + y.bandwidth()/2)\r\n\t\t\t\t.attr('dominant-baseline', 'middle')\r\n\t\t\t\t.attr('text-anchor', (d) => d.value > 0 ?\r\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? 'start' : 'end') :\r\n\t\t\t\t\t\"start\"\r\n\t\t\t\t)\r\n\t\t\t\t.attr('fill', (d) =>\r\n\t\t\t\t\t(Math.abs(x(d.value) - x(0)) < chart_width / labelPositionFactor ? '#414042' : '#ffffff')\r\n\t\t\t\t)\r\n\t\t\t\t.text((d) =>\r\n\t\t\t\t\td3.format(config.essential.dataLabels.numberFormat)(d.value)\r\n\t\t\t\t);\r\n\t\t} //end if for datalabels\r\n\r\n\t\t// This does the chart title label\r\n\t\tsvg\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(0, 0)')\r\n\t\t\t.append('text')\r\n\t\t\t.attr('x', 0)\r\n\t\t\t.attr('y', 0)\r\n\t\t\t.attr('dy', -15)\r\n\t\t\t.attr('class', 'title')\r\n\t\t\t.text(d => d[0])\r\n\t\t\t.attr('text-anchor', 'start')\r\n\t\t\t.call(wrap, chart_width);\r\n\r\n\t\t// This does the x-axis label\r\n\t\tif (chartIndex % chartsPerRow === chartsPerRow - 1 || chartIndex === [...nested_data].length - 1) {\r\n\t\t\tsvg\r\n\t\t\t\t.append('g')\r\n\t\t\t\t.attr('transform', `translate(0, ${height})`)\r\n\t\t\t\t.append('text')\r\n\t\t\t\t.attr('x', chart_width)\r\n\t\t\t\t.attr('y', 35)\r\n\t\t\t\t.attr('class', 'axis--label')\r\n\t\t\t\t.text(config.essential.xAxisLabel)\r\n\t\t\t\t.attr('text-anchor', 'end');\r\n\t\t}\r\n\t}\r\n\r\n\t// Draw the charts for each small multiple\r\n\tchartContainers.each(function ([key, value], i) {\r\n\t\tdrawChart(d3.select(this), value, i);\r\n\t});\r\n\r\n\t//create link to source\r\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\r\n\r\n\t//use pym to calculate chart dimensions\r\n\tif (pymChild) {\r\n\t\tpymChild.sendHeight();\r\n\t}\r\n}\r\n\r\nfunction wrap(text, width) {\r\n\ttext.each(function () {\r\n\t\tlet text = d3.select(this),\r\n\t\t\twords = text.text().split(/\\s+/).reverse(),\r\n\t\t\tword,\r\n\t\t\tline = [],\r\n\t\t\tlineNumber = 0,\r\n\t\t\tlineHeight = 1.1, // ems\r\n\t\t\tx = text.attr('x'),\r\n\t\t\tdy = parseFloat(text.attr('dy')),\r\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\r\n\t\twhile ((word = words.pop())) {\r\n\t\t\tline.push(word);\r\n\t\t\ttspan.text(line.join(' '));\r\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\r\n\t\t\t\tline.pop();\r\n\t\t\t\ttspan.text(line.join(' '));\r\n\t\t\t\tline = [word];\r\n\t\t\t\ttspan = text\r\n\t\t\t\t\t.append('tspan')\r\n\t\t\t\t\t.attr('x', x)\r\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\r\n\t\t\t\t\t.text(word);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet breaks = text.selectAll('tspan').size();\r\n\t\ttext.attr('y', function () {\r\n\t\t\treturn -6 * (breaks - 1);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nd3.csv(config.essential.graphic_data_url).then((data) => {\r\n\t//load chart data\r\n\tgraphic_data = data;\r\n\t//use pym to create iframed chart dependent on specified variables\r\n\tpymChild = new pym.Child({\r\n\t\trenderCallback: drawGraphic\r\n\t});\r\n});\r\n",
            "data_csv": "name,value,ref,series\r\nOther services,0.987848719,0.713166822,series1\r\nManufacturing,0.983661406,0.482401697,series1\r\nConstruction,0.681288045,0.495087081,series1\r\nArts,0.481757214,0.310957379,series1\r\nAdministrative,0.209665614,0.223459104,series1\r\nWholesale trade,0.176396639,0.787709541,series1\r\nAdministrative and supportive service activities,0.047910167,0.873262589,series1\r\nOther services,0.987848719,0.102020442,series2\r\nManufacturing,0.983661406,0.497197175,series2\r\nConstruction,0.681288045,0.450160625,series2\r\nArts,0.481757214,0.546506975,series2\r\nAdministrative,0.209665614,0.604779339,series2\r\nWholesale trade,0.176396639,0.511551674,series2\r\nAdministrative and supportive service activities,0.047910167,0.503160932,series2\r\nOther services,0.987848719,0.426386631,series3\r\nManufacturing,0.983661406,0.656803629,series3\r\nAdministrative,0.209665614,-0.138300364,series3\r\nWholesale trade,-0.0176396639,0.545809768,series3\r\nAdministrative and supportive service activities,0.047910167,0.127290739,series3\r\nConstruction,0.681288045,0.488025492,series3\r\nArts,0.481757214,0.029835392,series3\r\n",
            "chart_css": ".dataLabels{\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n}\r\n\r\n.chart-container {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.chart-container:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n.title {\r\n  font-weight: 600;\r\n  fill: #414042;\r\n}\r\n\r\nline.refline {\r\n  stroke: #222;\r\n  stroke-width: 3px;\r\n  stroke-linecap: round;\r\n}\r\n\r\ndiv.legend--item--here {\r\n  display:flex;\r\n  padding-right:40px;\r\n  padding-bottom: 12px;\r\n  margin-top: 12px;\r\n}\r\n",
            "comparison_csv": null
        },
        "bubble-chart-animated": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#27A0CC\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is your accessibility summary, dvcXXXX\",\n\t\t\"xDomain\": \"auto\", //auto for auto domain or array [0,50] to define your own\n\t\t\"yDomain\": \"auto\", //auto for auto domain or array [0,50] to define your own\n\t\t\"rDomain\": [25, 2700], //input the domain for the circles\n\t\t\"dateFormat\": \"%Y\", //format you want to display\n\t\t\"dateParse\": \"%Y\", //format you are loading the data in from csv,\n\t\t\"xDisplayFormat\": \".0f\", //x axis ticks display format\n\t\t\"yDisplayFormat\": \".0f\", //y axis ticks display format\n\t\t\"legendLabels\": [\"50 thousand people\", \"5 million people\"], //labels for the legend\n\t\t\"legendRadius\": [100, 3000], //how big you want the legend circles to be\n\t\t\"legendCX\": [-25, 160], //for adusting the legend circle X\n\t\t\"legendCY\": [-50, -25], //for adusting the legend circle X\n\t\t\"timeLoad\": \"2022\", //Input the time you want the chart to load on if there is a slider\n\t\t\"xAxisLabel\": \"Wage growth % year on year\",\n\t\t\"yAxisLabel\": \"Median hourly pay (£)\",\n\t\t\"drawSliderButtons\": true,\n\t\t\"highlight\": true //if you want to adjust where the highlight label goes, input top/bottom/middle for the relevant groups in the label_y column of the data file or start/middle/end to alter the text anchor in the label_anchor column\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 140,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 35\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 115,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 35\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 115,\n\t\t\t\t\"right\": 60,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 35\n\t\t\t}\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [16, 14],\n\t\t\t\"md\": [16, 12],\n\t\t\t\"lg\": [16, 12]\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 2,\n\t\t\t\"md\": 4,\n\t\t\t\"lg\": 4\n\t\t},\n\t\t\"mobileBreakpoint\": 450, //if you update this, update the max-width on the @media css for the tooltip to size correctly\n\t\t\"mediumBreakpoint\": 600\n\t}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\td3.select('#slider-simple').selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height = Math.ceil(\n\t\t(chart_width * config.optional.aspectRatio[size][1]) /\n\t\tconfig.optional.aspectRatio[size][0]\n\t);\n\n\t//Set the timepoints from the data for the slider labels and sort from oldest to newest\n\tlet timepoints = [...new Set(graphic_data.map((d) => d.year))].sort();\n\n\t//Takes the last data point from the date series\n\n\tlet timeLoad = config.essential.timeLoad;\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\tconst y = d3.scaleLinear().range([height, 0]);\n\n\tconst r = d3.scaleSqrt();\n\n\tfunction drawSliderButtons() {\n\t\t//Set the initial timepoint for the data load at from the config\n\n\t\tlet a = config.essential.timeLoad;\n\n\t\t//Set the date format for the slider label\n\n\t\tdateformat = d3.timeFormat(config.essential.dateFormat);\n\t\tdateparse = d3.timeParse(config.essential.dateParse);\n\n\t\t//Make the slider\n\n\t\tfunction makeSlider() {\n\t\t\tsliderDomain = [0, timepoints.length - 1]; //set the domain according to the length of the timepoints\n\n\t\t\t//Set the linear scale for the slider\n\n\t\t\tlet sliderScale = d3\n\t\t\t\t.scaleLinear()\n\t\t\t\t.domain(sliderDomain)\n\t\t\t\t.range([0, chart_width - margin.right]);\n\n\t\t\tsliderSimple = d3\n\t\t\t\t.sliderHorizontal(sliderScale)\n\t\t\t\t.step(1)\n\t\t\t\t.default(timepoints.indexOf(timeLoad)) //defaults the the slider to load with data from timeLoad in the config\n\t\t\t\t.width(chart_width - 150)\n\t\t\t\t.displayFormat(function (i) {\n\t\t\t\t\treturn dateformat(dateparse(timepoints[i]));\n\t\t\t\t}) //labels taken from timepoints\n\t\t\t\t.displayValue(true)\n\t\t\t\t.handle(d3.symbol().type(d3.symbolCircle).size(500)) //Handle colour is set in the chart.css file under parameter handle\n\t\t\t\t.fill('#206095')\n\t\t\t\t.ticks(0)\n\t\t\t\t.on('onchange', function (val) {\n\t\t\t\t\t// a is the master variable for the current timepoint\n\t\t\t\t\tif (a !== val) {\n\t\t\t\t\t\t// if a has changed\n\t\t\t\t\t\ta = val;\n\t\t\t\t\t}\n\t\t\t\t\tupdateVisuals(\n\t\t\t\t\t\tgraphic_data.filter(function (d) {\n\t\t\t\t\t\t\treturn d.year == timepoints[val];\n\t\t\t\t\t\t})\n\t\t\t\t\t); //update the chart according to the timepoint value from the slider by filtering on the timepoint\n\t\t\t\t});\n\n\t\t\t//call the slider\n\n\t\t\td3.select('#slider-simple')\n\t\t\t\t.append('svg')\n\t\t\t\t.attr('width', chart_width - 75)\n\t\t\t\t.attr('height', 100)\n\t\t\t\t.append('g')\n\t\t\t\t.attr('transform', 'translate(' + margin.left + ',19)')\n\t\t\t\t.call(sliderSimple);\n\n\t\t\td3.selectAll('.parameter-value text');\n\t\t}\n\n\t\t//Set the function of each play, forward and back buttons\n\n\t\tfunction setButtons() {\n\t\t\td3.select('#play').on('click', onPlay);\n\n\t\t\td3.select('#forward').on('click', fwd_animate);\n\n\t\t\td3.select('#back').on('click', rev_animate);\n\t\t}\n\n\t\t//Call the functions to set the buttons and make the slider\n\n\t\tsetButtons();\n\t\tmakeSlider();\n\n\t\t//Function to move the slider and retrieve the value from the slider\n\n\t\tfunction moveSliderToVal() {\n\t\t\tsliderSimple.silentValue(a);\n\t\t}\n\n\t\t//Forward animation function for the buttons\n\n\t\tfunction fwd_animate() {\n\t\t\t// go forwards in time and then back to the beginning once it reaches the end\n\t\t\tif (a < timepoints.length - 1) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = 0;\n\t\t\t}\n\t\t\tmoveSliderToVal(); //retrieves the value from the slider\n\t\t\tupdateVisuals(\n\t\t\t\tgraphic_data.filter(function (d) {\n\t\t\t\t\treturn d.year == timepoints[a];\n\t\t\t\t})\n\t\t\t); //update the chart according to the timepoint value from the slider by filtering on the timepoint\n\t\t}\n\n\t\t//Backwards animation function for the buttons\n\n\t\tfunction rev_animate() {\n\t\t\t// go back in time\n\t\t\tif (a > 0) {\n\t\t\t\ta = a - 1;\n\t\t\t} else {\n\t\t\t\ta = variables.length - 1;\n\t\t\t}\n\t\t\tmoveSliderToVal(); //retrieves the value from the slider\n\t\t\tupdateVisuals(\n\t\t\t\tgraphic_data.filter(function (d) {\n\t\t\t\t\treturn d.year == timepoints[a];\n\t\t\t\t})\n\t\t\t); //update the chart according to the timepoint value from the slider by filtering on the timepoint\n\t\t}\n\n\t\t//Function for clicking on the play button\n\n\t\tfunction onPlay() {\n\t\t\tfwd_animate(); // don't need a delay bfeore first animation\n\t\t\tanimating = setInterval(function () {\n\t\t\t\tfwd_animate();\n\t\t\t}, 1500); //sets an brief interval before moving the slider on one point\n\n\t\t\t// replace play control with pause\n\t\t\td3.select('#play')\n\t\t\t\t.select('span')\n\t\t\t\t.classed('glyphicon-play', false)\n\t\t\t\t.classed('glyphicon-pause', true);\n\n\t\t\t// switch id/class of play to pause\n\t\t\td3.select('#play').attr('id', 'pause');\n\t\t\t// change button event from play to pause\n\t\t\td3.select('#pause').on('click', onPause);\n\t\t}\n\n\t\t//Function for clicking on the pause button\n\t\tfunction onPause() {\n\t\t\t// replace pause symbol with play symbol\n\t\t\td3.select('#pause')\n\t\t\t\t.select('span')\n\t\t\t\t.classed('glyphicon-pause', false)\n\t\t\t\t.classed('glyphicon-play', true);\n\t\t\td3.select('#pause').attr('id', 'play');\n\t\t\t// make symbols clickable\n\t\t\tsetButtons(); //Resets the buttons\n\t\t\tclearInterval(animating); //stops the animation from moving forwards\n\t\t}\n\t}\n\n\t//if config drawSliderButtons is set to true, draw the buttons etc\n\n\tif (config.essential.drawSliderButtons === true) {\n\t\tdrawSliderButtons();\n\t} else {\n\t\td3.selectAll('.flex-container').remove();\n\t}\n\n\t//set up yAxis generator\n\tlet yAxis = d3\n\t\t.axisLeft(y)\n\t\t.tickSize(-chart_width - 10)\n\t\t.tickFormat(d3.format(config.essential.yDisplayFormat));\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height - 10)\n\t\t.tickFormat(d3.format(config.essential.xDisplayFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t// Set the scales for the chart - auto calculates the scale from the data or you can select your own in the config\n\t//X scale\n\tif (config.essential.xDomain == 'auto') {\n\t\tx.domain([\n\t\t\td3.min(graphic_data, (d) => d.x),\n\t\t\td3.max(graphic_data, (d) => d.x)\n\t\t]);\n\t} else {\n\t\tx.domain(config.essential.xDomain);\n\t}\n\n\t//Y Scale\n\tif (config.essential.yDomain == 'auto') {\n\t\ty.domain([\n\t\t\td3.min(graphic_data, (d) => d.y),\n\t\t\td3.max(graphic_data, (d) => d.y)\n\t\t]);\n\t} else {\n\t\ty.domain(config.essential.yDomain);\n\t}\n\n\t//R scale for the size of the circle\n\tif (config.essential.rDomain == 'auto') {\n\t\tr.domain([\n\t\t\td3.min(graphic_data, (d) => d.size),\n\t\t\td3.max(graphic_data, (d) => d.size)\n\t\t]);\n\t\tr.range([0, 20]);\n\t} else {\n\t\tr.domain(config.essential.rDomain);\n\t\tr.range([0, 20]);\n\t}\n\n\t//Draws the x axis zero line\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t//Draws the y axis zero line\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t})\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\t//remove the highlight stroke on mobile\n\tif (parseInt(graphic.style('width')) < threshold_md) {\n\t\td3.selectAll('.dots').attr('stroke', config.essential.colour_palette);\n\t}\n\n\t// // This does the y-axis label\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,0)')\n\t\t.append('text')\n\t\t.attr('x', -margin.left + 2)\n\t\t.attr('y', -20)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('id', 'yAxisLabel')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n\t// // This does the x-axis label\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.append('text')\n\t\t.attr('x', chart_width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//Initial draw of the chart with the data filtered on the timeLoad specified\n\n\tupdateVisuals(\n\t\tgraphic_data.filter(function (d) {\n\t\t\treturn d.year == timeLoad;\n\t\t})\n\t);\n\n\t//Function to update the visuals\n\n\tfunction updateVisuals(data) {\n\t\t// create a tooltip\n\t\tlet tooltip = d3\n\t\t\t.selectAll('body')\n\t\t\t.append('div')\n\t\t\t.attr('class', 'tooltip')\n\t\t\t.style('opacity', 0);\n\n\t\t//Set the date format\n\t\tlet data_format = d3.format('.1f');\n\n\t\t// Three functions that change the tooltip when user hover / move / leave the circle\n\n\t\tlet mouseover = function (d) {\n\t\t\ttooltip.style('opacity', 1);\n\t\t\td3.select(this).style('stroke', 'orange').style('opacity', 1);\n\t\t};\n\t\tlet mousemove = function (event, d) {\n\t\t\t// console.log(d3.pointer(event))\n\t\t\tif (parseInt(graphic.style('width')) > threshold_md) {\n\t\t\t\ttooltip\n\t\t\t\t\t.html(\n\t\t\t\t\t\t'<span style =\"color: #206095;font-size: 15px;\">' +\n\t\t\t\t\t\td.group +\n\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t'<br><br>' +\n\t\t\t\t\t\t'<span style=\"font-weight:500; opacity:1\">' +\n\t\t\t\t\t\t'Wage growth: ' +\n\t\t\t\t\t\tdata_format(d.y) +\n\t\t\t\t\t\t' p.p.' +\n\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t'<br>' +\n\t\t\t\t\t\t'<span style=\"font-weight:500; opacity:1\">' +\n\t\t\t\t\t\t'Median hourly pay (£): ' +\n\t\t\t\t\t\tdata_format(d.x) +\n\t\t\t\t\t\t'%' +\n\t\t\t\t\t\t'</span>'\n\t\t\t\t\t)\n\t\t\t\t\t.style(\n\t\t\t\t\t\t'left',\n\t\t\t\t\t\td3.pointer(event)[0] > chart_width - 200\n\t\t\t\t\t\t\t? d3.pointer(event)[0] - 200 + 'px'\n\t\t\t\t\t\t\t: d3.pointer(event)[0] + 25 + 'px'\n\t\t\t\t\t)\n\t\t\t\t\t.style(\n\t\t\t\t\t\t'top',\n\t\t\t\t\t\td3.pointer(event)[1] < 25\n\t\t\t\t\t\t\t? d3.pointer(event)[1] + 150 + 'px'\n\t\t\t\t\t\t\t: d3.pointer(event)[1] - 20 + 'px'\n\t\t\t\t\t);\n\t\t\t\t// .style(\"top\", (d3.pointer(event)[1]-20) + \"px\")\n\t\t\t} else {\n\t\t\t\ttooltip\n\t\t\t\t\t.html(\n\t\t\t\t\t\t'<span style =\"color: #206095; font-size: 15px;\">' +\n\t\t\t\t\t\td.group +\n\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t'<br><br>' +\n\t\t\t\t\t\t'<span style=\"font-weight:500; opacity:1\">' +\n\t\t\t\t\t\t'Wage growth: ' +\n\t\t\t\t\t\tdata_format(d.y) +\n\t\t\t\t\t\t' p.p.' +\n\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t'<br>' +\n\t\t\t\t\t\t'<span style=\"font-weight:500; opacity:1\">' +\n\t\t\t\t\t\t'Median hourly pay (£): ' +\n\t\t\t\t\t\tdata_format(d.x) +\n\t\t\t\t\t\t'%' +\n\t\t\t\t\t\t'</span>'\n\t\t\t\t\t)\n\t\t\t\t\t.style('right', 5 + 'px')\n\t\t\t\t\t.style('top', 0 + 'px');\n\t\t\t}\n\t\t};\n\t\tlet mouseleave = function (d) {\n\t\t\tif (parseInt(graphic.style('width')) > threshold_md) {\n\t\t\t\ttooltip.style('opacity', 0);\n\t\t\t\td3.select(this)\n\t\t\t\t\t.style('opacity', 0.75)\n\t\t\t\t\t.style('stroke', (d) =>\n\t\t\t\t\t\td.highlight == 0 ? config.essential.colour_palette : '#222222'\n\t\t\t\t\t);\n\t\t\t} else {\n\t\t\t\ttooltip.style('opacity', 0);\n\t\t\t\td3.select(this)\n\t\t\t\t\t.style('opacity', 0.75)\n\t\t\t\t\t.style('stroke', config.essential.colour_palette);\n\t\t\t}\n\t\t};\n\n\t\t//draw the circles with transition if slider is drawn\n\n\t\tt = d3.transition().duration(750).ease(d3.easeCircle);\n\n\t\tsvg\n\t\t\t.selectAll('circle')\n\t\t\t.data(data)\n\t\t\t.join('circle')\n\t\t\t.merge(d3.selectAll('circle'))\n\t\t\t.attr('class', 'dots')\n\t\t\t.transition(t)\n\t\t\t.attr('cx', (d) => x(d.x))\n\t\t\t.attr('cy', (d) => y(d.y))\n\t\t\t.attr('r', (d) => r(d.size))\n\t\t\t.attr('fill', config.essential.colour_palette)\n\t\t\t.attr('opacity', 0.75)\n\t\t\t.attr('stroke-width', (d) => (d.highlight == 0 ? '1px' : '1.5px'))\n\t\t\t.attr('stroke', (d) =>\n\t\t\t\td.highlight == 0 ? config.essential.colour_palette : '#222222'\n\t\t\t);\n\n\t\td3.selectAll('.dots')\n\t\t\t.on('mouseover', mouseover)\n\t\t\t.on('mousemove', mousemove)\n\t\t\t.on('mouseleave', mouseleave)\n\t\t\t.on('click', function (event, d) {\n\t\t\t\td3.pointer(event)[0];\n\t\t\t});\n\n\t\t//draw legend on desktop\n\n\t\tfunction drawLegend() {\n\t\t\td3.selectAll('.legend_text').remove(); //Remove the legend to redraw\n\n\t\t\t//pull in the legend data from the config\n\n\t\t\tlet legendData = d3.zip(\n\t\t\t\tconfig.essential.legendLabels,\n\t\t\t\tconfig.essential.legendRadius,\n\t\t\t\tconfig.essential.legendCX\n\t\t\t);\n\n\t\t\t//draw legend for medium and large screens\n\n\t\t\tif (parseInt(graphic.style('width')) > threshold_sm) {\n\t\t\t\t//append circles\n\n\t\t\t\tsvg\n\t\t\t\t\t.selectAll('legend')\n\t\t\t\t\t.data(legendData)\n\t\t\t\t\t.join('circle')\n\t\t\t\t\t.attr('class', 'legend')\n\t\t\t\t\t.attr('cx', (d, i) => legendData[i][2])\n\t\t\t\t\t.attr('cy', -(margin.top * 0.66))\n\t\t\t\t\t.attr('r', (d, i) => r(legendData[i][1]))\n\t\t\t\t\t.attr('fill', config.essential.colour_palette)\n\t\t\t\t\t.attr('opacity', 0.75)\n\t\t\t\t\t.attr('stroke-width', '1px')\n\t\t\t\t\t.attr('stroke', config.essential.colour_palette);\n\n\t\t\t\t//append text\n\n\t\t\t\tsvg\n\t\t\t\t\t.selectAll('legend_text')\n\t\t\t\t\t.data(legendData)\n\t\t\t\t\t.join('text')\n\t\t\t\t\t.attr('class', 'legend_text')\n\t\t\t\t\t.attr('x', (d, i) => legendData[i][2] + r(legendData[i][1]) + 5)\n\t\t\t\t\t.attr('y', -(margin.top * 0.66) + 5)\n\t\t\t\t\t.text((d, i) => legendData[i][0])\n\t\t\t\t\t.style('font-size', '14px')\n\t\t\t\t\t.call(wrap, 150);\n\t\t\t} //end if\n\t\t\t//Draw legend for mobile\n\t\t\telse {\n\t\t\t\t//append circles\n\n\t\t\t\tsvg\n\t\t\t\t\t.selectAll('legend')\n\t\t\t\t\t.data(legendData)\n\t\t\t\t\t.join('circle')\n\t\t\t\t\t.attr('class', 'legend')\n\t\t\t\t\t.attr('cx', -10)\n\t\t\t\t\t.attr('cy', (d, i) => -margin.top + 20 + r(legendData[i][1] * 5)) //may need to tweak these values to get the legend to sit correctly\n\t\t\t\t\t.attr('r', (d, i) => r(legendData[i][1]))\n\t\t\t\t\t.attr('fill', config.essential.colour_palette)\n\t\t\t\t\t.attr('opacity', 0.75)\n\t\t\t\t\t.attr('stroke-width', '1px')\n\t\t\t\t\t.attr('stroke', config.essential.colour_palette);\n\n\t\t\t\t//append text\n\n\t\t\t\tsvg\n\t\t\t\t\t.selectAll('legend_text')\n\t\t\t\t\t.data(legendData)\n\t\t\t\t\t.join('text')\n\t\t\t\t\t.attr('class', 'legend_text')\n\t\t\t\t\t.attr('x', (d, i) => legendData[0][2] + r(legendData[i][1]) + 20)\n\t\t\t\t\t.attr('y', (d, i) => -margin.top + 20 + r(legendData[i][1] * 5) + 5) //may need to tweak these values to get the legend to sit correctly\n\t\t\t\t\t.text((d, i) => legendData[i][0])\n\t\t\t\t\t.style('font-size', '14px')\n\t\t\t\t\t.call(wrap, 150);\n\t\t\t} //end else\n\t\t} //ends drawLegend function\n\n\t\tdrawLegend();\n\n\t\t//if screen is larger than medium threshold and highlight is true in config, add the labels\n\n\t\tif (\n\t\t\t(parseInt(graphic.style('width')) > threshold_md &&\n\t\t\t\tconfig.essential.highlight === true) === true\n\t\t) {\n\t\t\tdrawHighlight();\n\t\t} //end if for datalabels\n\n\t\t//if you have lots of labels, you can choose whether you want them to sit above, below or in the middle of the circle using the label_y column in data.csv\n\t\t//if you have lots of labels, you can choose whether you want them to start or end on the circle using the label_anchor column in data.csv\n\n\t\tfunction drawHighlight() {\n\t\t\t// d3.selectAll('.dataLabels').remove()\n\t\t\tsvg\n\t\t\t\t.selectAll('text.dataLabels')\n\t\t\t\t.data(data)\n\t\t\t\t.join('text')\n\t\t\t\t.merge(d3.selectAll('text.dataLabels'))\n\t\t\t\t.transition(t)\n\t\t\t\t.attr('class', 'dataLabels')\n\t\t\t\t.attr('id', function (d, i) {\n\t\t\t\t\treturn d.group;\n\t\t\t\t})\n\t\t\t\t.style('font-size', '14px')\n\t\t\t\t.style('font-weight', 500)\n\t\t\t\t.attr('x', function (d) {\n\t\t\t\t\tif (d.label_y == 'middle' && d.label_anchor == 'start') {\n\t\t\t\t\t\treturn x(d.x) + r(d.size) + 6;\n\t\t\t\t\t} // shifts to the side of the circle when text anchor is middle\n\t\t\t\t\telse if (d.label_y == 'middle' && d.label_anchor == 'end') {\n\t\t\t\t\t\treturn x(d.x) - r(d.size) - 6;\n\t\t\t\t\t} // shifts to the other side of the circle when text anchor is middle\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn x(d.x);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t// .attr('y',function(d) { return (y(d.y) < (topYTick) ? (y(d.y)+r(d.size)+15) : (y(d.y)-r(d.size))-2 )})\n\t\t\t\t.attr('y', function (d) {\n\t\t\t\t\tif (d.label_y == 'top') {\n\t\t\t\t\t\treturn y(d.y) - r(d.size) - 6;\n\t\t\t\t\t} else if (d.label_y == 'bottom') {\n\t\t\t\t\t\treturn y(d.y) + r(d.size) + 15;\n\t\t\t\t\t} else if (d.label_y == 'middle') {\n\t\t\t\t\t\treturn y(d.y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn y(d.y) - r(d.size) - 2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.style('text-anchor', function (d) {\n\t\t\t\t\tif (d.label_anchor == 'start') {\n\t\t\t\t\t\treturn d.label_anchor;\n\t\t\t\t\t} else if (d.label_anchor == 'middle') {\n\t\t\t\t\t\treturn d.label_anchor;\n\t\t\t\t\t} else if (d.label_anchor == 'end') {\n\t\t\t\t\t\treturn d.label_anchor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'start';\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.text((d) => (d.highlight == 0 ? null : d.group));\n\t\t}\n\t} //end updateVisuals function\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n} ///END DRAW GRAPHIC\n\nfunction wrap(\n\ttext,\n\twidth,\n\tdyAdjust,\n\tlineHeightEms,\n\tlineHeightSquishFactor,\n\tsplitOnHyphen,\n\tcentreVertically\n) {\n\t// Use default values for the last three parameters if values are not provided.\n\tif (!lineHeightEms) lineHeightEms = 1.15;\n\tif (!lineHeightSquishFactor) lineHeightSquishFactor = 1;\n\tif (splitOnHyphen == null) splitOnHyphen = true;\n\tif (centreVertically == null) centreVertically = true;\n\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\tx = text.attr('x'),\n\t\t\ty = text.attr('y');\n\n\t\tlet words = [];\n\t\ttext\n\t\t\t.text()\n\t\t\t.split(/\\s+/)\n\t\t\t.forEach(function (w) {\n\t\t\t\tif (splitOnHyphen) {\n\t\t\t\t\tlet subWords = w.split('-');\n\t\t\t\t\tfor (let i = 0; i < subWords.length - 1; i++)\n\t\t\t\t\t\twords.push(subWords[i] + '-');\n\t\t\t\t\twords.push(subWords[subWords.length - 1] + ' ');\n\t\t\t\t} else {\n\t\t\t\t\twords.push(w + ' ');\n\t\t\t\t}\n\t\t\t});\n\n\t\ttext.text(null); // Empty the text element\n\n\t\t// `tspan` is the tspan element that is currently being added to\n\t\tlet tspan = text.append('tspan');\n\n\t\tlet line = ''; // The current value of the line\n\t\tlet prevLine = ''; // The value of the line before the last word (or sub-word) was added\n\t\tlet nWordsInLine = 0; // Number of words in the line\n\t\tfor (let i = 0; i < words.length; i++) {\n\t\t\tlet word = words[i];\n\t\t\tprevLine = line;\n\t\t\tline = line + word;\n\t\t\t++nWordsInLine;\n\t\t\ttspan.text(line.trim());\n\t\t\tif (tspan.node().getComputedTextLength() > width && nWordsInLine > 1) {\n\t\t\t\t// The tspan is too long, and it contains more than one word.\n\t\t\t\t// Remove the last word and add it to a new tspan.\n\t\t\t\ttspan.text(prevLine.trim());\n\t\t\t\tprevLine = '';\n\t\t\t\tline = word;\n\t\t\t\tnWordsInLine = 1;\n\t\t\t\ttspan = text.append('tspan').text(word.trim());\n\t\t\t}\n\t\t}\n\n\t\tlet tspans = text.selectAll('tspan');\n\n\t\tlet h = lineHeightEms;\n\t\t// Reduce the line height a bit if there are more than 2 lines.\n\t\tif (tspans.size() > 2)\n\t\t\tfor (let i = 0; i < tspans.size(); i++) h *= lineHeightSquishFactor;\n\n\t\ttspans.each(function (d, i) {\n\t\t\t// Calculate the y offset (dy) for each tspan so that the vertical centre\n\t\t\t// of the tspans roughly aligns with the text element's y position.\n\t\t\tlet dy = i * h;\n\n\t\t\tif (centreVertically) dy -= ((tspans.size() - 1) * h) / 2;\n\t\t\td3.select(this)\n\t\t\t\t.attr('y', y)\n\t\t\t\t.attr('x', x)\n\t\t\t\t.attr('dy', dy + 'em');\n\t\t});\n\t});\n} //end wrap\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tdata.forEach(function (d) {\n\t\td.x = +d.x;\n\t\td.y = +d.y;\n\t\td.size = +d.size;\n\t\td.highlight = +d.highlight;\n\t});\n\n\tgraphic_data = data;\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": "html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\nhtml {\n  -webkit-text-size-adjust: none;\n  /* prevent font scaling in landscape */\n}\n\nbody\n/* required */\n  {\n  font-family: 'Open Sans', sans-serif;\n  font-weight: 400;\n  max-width: 700px;\n  margin: 0px auto;\n}\n\ntext\n/* required */\n  {\n\n  font-family: 'Open Sans', sans-serif;\n  font-weight: 400;\n}\n\n/* chart */\n#graphic\n/* required */\n  {\n  width: 100%;\n}\n\n.timeControlButtons {\n  background: none;\n  border: none;\n  color: #206095;\n  font-size: 27px;\n}\n\n.glyphicon {\n  color: #206095;\n  font-size: 27px;\n}\n\n.parameter-value text {\n  font-size: 21px;\n  font-weight: 600;\n}\n\n\n/* axis tick labels */\nsvg.chart g.axis text\n/* sets all tick text as grey 100 */\n  {\n  font-size: 14px;\n  fill: #414042;\n}\n\n/* overwrites x-axis as grey 75 */\nsvg.chart g.x.axis text\n{\n  fill:#707071;\n}\n\n/* this sets the labels for the axis */\n.axis--label{\n  font-size: 14px;\n  fill: #707071;\n}\n\n\n/* do not show the line that runs the domain of the axis */\nsvg.chart g.axis path.domain\n/* required */\n{\n  display:none;\n}\n\n/* this sets the ticks */\nsvg.chart .axis line\n{\n  stroke: #d9d9d9;\n  shape-rendering: crispEdges;\n}\n\n/* this sets zero line */\n\ng.tick line.zero-line\n{\n  stroke: #B3B3B3;\n  stroke-width: 1.5px;\n  shape-rendering: crispEdges;\n}\n\n\n/* source */\n#source {\n  font-size: 16px;\n  margin: 16px 0 8px 0;\n  font-weight: 400;\n  color: #707071;\n}\n\n/* legend div */\n#legend{\n  display:flex;\n  flex-wrap: wrap;\n}\n\n.legend--item {\n  display:flex;\n  padding-right:40px;\n  padding-bottom: 12px;\n}\n\n.legend--icon {\n  height: 12px;\n  width: 12px;\n  border-radius: 50%;\n  align-self: center;\n\n}\n\n.legend--text{\n  color:#707070;\n  line-height: 14px;\n  font-size: 14px;\n  padding-left: 12px\n}\n\n@media (max-width: 450px) {\n  #legend{\n    flex-flow:column;\n  }\n\n  .legend--item{\n    padding-bottom: 8px;\n  }\n\n  div.tooltip {\t\n    position: absolute;\t\t\t\n    text-align: start;\t\t\t\n    font-weight: 600;\n    font-size: 14px;\n    color: #414042;\n    border: 0px;\t\t\n    border-radius: 8px;\t\t\t\n    pointer-events: none;\n    background-color: #FFF;\n    border: orange 2px solid;\n    padding: 5px;\n    max-width: 50%;\n    font-family: 'Open Sans', sans-serif;\n  }\n}\n\n\n/* for content that needs to be visible to a screenreader but invisible and take no space for users viewing the chart */\n.visuallyhidden{\n\tposition: absolute;\n\twidth: 1px;\n\theight: 1px;\n\tmargin: -1px;\n\tpadding: 0;\n\toverflow: hidden;\n \tclip: rect(0,0,0,0);\n\tborder: 0;\n}\n\n\n.dataLabels{\n  font-weight: 500;\n  font-size: 14px;\n  color: #414042;\n}\n\n\n.annotations{\n  font-size: 14px;\n  color: #414042;\n}\n\n.ticky11 text{\n  font-weight: 700;\n}\n\nh6 {\n  font-size: 16px;\n  margin: 16px 0 8px 0;\n  font-weight: 700;\n  color:#323132;\n}\n\ndiv.tooltip {\t\n  position: absolute;\t\t\t\n  text-align: start;\t\t\t\n  font-weight: 600;\n  font-size: 14px;\n  color: #414042;\n  border: 0px;\t\t\n  border-radius: 8px;\t\t\t\n  pointer-events: none;\n  background-color: #FFF;\n  border: orange 2px solid;\n  padding: 5px;\n  font-family: 'Open Sans', sans-serif;\n  max-width: 250px;\n}\n\n\n.zero-line\n{\n  stroke: #B3B3B3;\n  stroke-width: 1.5px;\n  shape-rendering: crispEdges;\n}\n\nhr {\n  border:none;\n  border-top:1px dashed #414042;\n  color:#fff;\n  background-color:#fff;\n  height:1px;\n  /* width:50%; */\n  }\n\n  br {\n    /* display: block;\n    margin-bottom: 2px;\n    font-size:2px; */\n    line-height: 20;\n  }\n\n\n  .legend{\n    width: 50%;\n    height: 110px;\n    margin-top: 10px;\n  }\n  \n  .legendcircle{\n    fill: none;\n    stroke: #222222;\n    stroke-width: 1.5;\n  }\n  \n  .legendline{\n    stroke: #222222;\n    stroke-width: 1.5;\n    stroke-dasharray: 5 2;\n  }\n  \n  .legendtext{\n    font-size: 14px;\n  }\n\n  .parameter-value path{\n    fill:#003C57;\n    stroke:white;\n    stroke-width:1.5px;\n  }\n  .parameter-value path:focus{\n    fill:#003C57;\n    stroke:orange;\n    stroke-width:3px;\n  }\n\n  .flex-container {\n    display: flex;\n    flex-direction: row;\n  }\n\n",
            "data_csv": "group,x,y,size,year,highlight,label_y,label_anchor\r\nAdministrative occupations,4.7,12.92,2516,2022,0,,\r\nAdministrative occupations,3.4,12.3,2576,2021,0,,\r\nAdministrative occupations,1.4,11.9,2291,2020,0,,\r\nAdministrative occupations,3.2,11.74,2426,2019,0,,\r\nBusiness and public service associate professionals,2.6,17.07,1981,2022,0,,\r\nBusiness and public service associate professionals,3.3,17.17,2379,2021,0,,\r\nBusiness and public service associate professionals,-2.8,16.63,2269,2020,0,,\r\nBusiness and public service associate professionals,1.9,17.1,2232,2019,0,,\r\n\"Business, media and public service professionals\",2.7,21.65,2154,2022,0,,\r\n\"Business, media and public service professionals\",3.5,21.63,1668,2021,0,,\r\n\"Business, media and public service professionals\",1.4,20.91,1566,2020,0,,\r\n\"Business, media and public service professionals\",3.4,20.63,1516,2019,0,,\r\nCaring personal service occupations,7,11.16,1809,2022,0,,\r\nCaring personal service occupations,2.8,10.43,2205,2021,0,,\r\nCaring personal service occupations,2.9,10.14,2057,2020,0,,\r\nCaring personal service occupations,5.7,9.85,2101,2019,0,,\r\nCommunity and civil enforcement occupations,4.4,13.24,27,2022,0,,\r\n\"Culture, media and sports occupations\",6.4,14.06,235,2022,0,,\r\n\"Culture, media and sports occupations\",0,13.29,260,2021,0,,\r\n\"Culture, media and sports occupations\",-2.9,13.29,274,2020,0,,\r\n\"Culture, media and sports occupations\",0.2,13.68,265,2019,0,,\r\nCustomer service occupations,8.6,11.37,500,2022,0,,\r\nCustomer service occupations,1.7,10.62,538,2021,0,,\r\nCustomer service occupations,0.2,10.44,565,2020,0,,\r\nCustomer service occupations,0.8,10.42,560,2019,0,,\r\nDirectors,4.3,24.47,2203,2022,1,top,start\r\nDirectors,0.3,22.82,2333,2021,1,bottom,start\r\nDirectors,-1,22.76,2395,2020,1,bottom,start\r\nDirectors,1.7,23,2395,2019,1,bottom,start\r\nElementary administration and service occupations,6.5,10.12,2523,2022,0,,\r\nElementary administration and service occupations,3.5,9.5,2321,2021,0,,\r\nElementary administration and service occupations,3.5,9.18,2082,2020,0,,\r\nElementary administration and service occupations,5.5,8.86,2573,2019,0,,\r\nElementary trades and related occupations,7.8,10.81,300,2022,0,,\r\nElementary trades and related occupations,3.3,10.07,356,2021,0,,\r\nElementary trades and related occupations,2.2,9.75,326,2020,0,,\r\nElementary trades and related occupations,3.7,9.54,353,2019,0,,\r\nHealth and social care associate professionals,4.1,12.87,600,2022,0,,\r\nHealth and social care associate professionals,2.2,13.5,474,2021,0,,\r\nHealth and social care associate professionals,0.6,13.21,433,2020,0,,\r\nHealth and social care associate professionals,2,13.13,386,2019,0,,\r\nHealth professionals,2.6,20.64,1844,2022,0,,\r\nHealth professionals,1.9,20.03,1651,2021,0,,\r\nHealth professionals,1,19.66,1628,2020,0,,\r\nHealth professionals,6.1,19.46,1605,2019,0,,\r\n\"Leisure, travel and related personal service occupations\",6.9,10.69,371,2022,0,,\r\n\"Leisure, travel and related personal service occupations\",3.8,10,338,2021,0,,\r\n\"Leisure, travel and related personal service occupations\",0.6,9.63,366,2020,0,,\r\n\"Leisure, travel and related personal service occupations\",6.1,9.57,422,2019,0,,\r\nOther managers and proprietors,6.5,16.01,539,2022,0,,\r\nOther managers and proprietors,0.7,14.96,477,2021,0,,\r\nOther managers and proprietors,0.1,14.86,450,2020,0,,\r\nOther managers and proprietors,4.8,14.84,450,2019,0,,\r\n\"Process, plant and machine operatives\",8.7,12.17,696,2022,0,,\r\n\"Process, plant and machine operatives\",4.2,11.27,632,2021,0,,\r\n\"Process, plant and machine operatives\",0,10.81,648,2020,0,,\r\n\"Process, plant and machine operatives\",3.1,10.82,705,2019,0,,\r\nProtective service occupations,0,19.71,447,2022,1,bottom,\r\nProtective service occupations,2.3,19.67,366,2021,1,bottom,\r\nProtective service occupations,2.9,19.23,340,2020,1,bottom,\r\nProtective service occupations,0.6,18.68,312,2019,1,bottom,\r\nSales occupations,4.2,10.19,1322,2022,0,,\r\nSales occupations,5.4,9.81,1435,2021,0,,\r\nSales occupations,4.9,9.31,1415,2020,0,,\r\nSales occupations,5,8.87,1454,2019,0,,\r\n\"Science, engineering and technology associate professionals\",4,14.9,808,2022,0,,\r\n\"Science, engineering and technology associate professionals\",0.5,14.37,775,2021,0,,\r\n\"Science, engineering and technology associate professionals\",-0.5,14.3,746,2020,0,,\r\n\"Science, engineering and technology associate professionals\",2,14.37,714,2019,0,,\r\n\"Science, research, engineering and technology professionals\",3.6,22.41,1844,2022,0,,\r\n\"Science, research, engineering and technology professionals\",3,21.99,1589,2021,0,,\r\n\"Science, research, engineering and technology professionals\",-0.6,21.35,1426,2020,0,,\r\n\"Science, research, engineering and technology professionals\",1.5,21.48,1388,2019,0,,\r\nSecretarial and related occupations,4.4,11.29,539,2022,0,,\r\nSecretarial and related occupations,4.1,10.78,587,2021,0,,\r\nSecretarial and related occupations,0.9,10.36,558,2020,0,,\r\nSecretarial and related occupations,2.7,10.27,601,2019,0,,\r\nSkilled agricultural and related trades,6.1,11.54,107,2022,0,,\r\nSkilled agricultural and related trades,3.7,10.8,100,2021,0,,\r\nSkilled agricultural and related trades,2.6,10.42,104,2020,0,,\r\nSkilled agricultural and related trades,4.4,10.15,103,2019,0,,\r\nSkilled construction and building trades,5.1,14.5,289,2022,0,,\r\nSkilled construction and building trades,8.6,13.7,300,2021,0,,\r\nSkilled construction and building trades,-5.1,12.62,296,2020,0,,\r\nSkilled construction and building trades,2.8,13.29,304,2019,0,,\r\n\"Skilled metal, electrical and electronic trades\",6.7,15.47,928,2022,1,middle,end\r\n\"Skilled metal, electrical and electronic trades\",5.5,14.62,879,2021,1,top,end\r\n\"Skilled metal, electrical and electronic trades\",-3.6,13.86,930,2020,1,top,start\r\n\"Skilled metal, electrical and electronic trades\",2.7,14.37,999,2019,1,top,end\r\nTeaching and educational professionals,2.5,24.5,1769,2022,1,bottom,start\r\nTeaching and educational professionals,2.7,24.17,1728,2021,1,top,start\r\nTeaching and educational professionals,1.6,23.53,1626,2020,1,top,start\r\nTeaching and educational professionals,2.1,23.16,1536,2019,1,top,start\r\n\"Textiles, printing and other skilled trades\",11.8,11,406,2022,0,,\r\n\"Textiles, printing and other skilled trades\",1.3,9.84,425,2021,0,,\r\n\"Textiles, printing and other skilled trades\",-1.8,9.71,429,2020,0,,\r\n\"Textiles, printing and other skilled trades\",5,9.88,511,2019,0,,\r\nTransport and mobile machine drivers and operatives,9,12.75,743,2022,0,,\r\nTransport and mobile machine drivers and operatives,6.3,11.69,695,2021,0,,\r\nTransport and mobile machine drivers and operatives,-2,11,692,2020,0,,\r\nTransport and mobile machine drivers and operatives,3.9,11.23,794,2019,0,,\r\n",
            "comparison_csv": null
        },
        "column-chart": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#206095\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%Y\",\n\t\t\t\"md\": \"%Y\",\n\t\t\t\"lg\": \"%b-%y\"\n\t\t},\n\t\t\"yAxisTickFormat\": \".0%\",\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"dateFormat\": \"%b-%y\",\n\t\t//the format your date data has in data.csv\n\t\t\"yDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"yAxisLabel\": \"y axis label\"\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 25,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 25,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 25,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t}\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [2, 1]\n\t\t},\n\t\t\"xAxisTicksEvery\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 4,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"addFirstDate\": false,\n\t\t\"addFinalDate\": false,\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\n\tconst aspectRatio = config.optional.aspectRatio[size];\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by the aspect ratio\n\tlet height =\n\t\taspectRatio[1] / aspectRatio[0] * chart_width;\n\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\n\t//set up scales\n\tconst y = d3.scaleLinear().range([height, 0]);\n\n\tconst x = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.0)\n\t\t.paddingInner(0.1)\n\t\t.range([0, chart_width])\n\t\t.round(false);\n\n\t//use the data to find unique entries in the date column\n\tx.domain([...new Set(graphic_data.map((d) => d.date))]);\n\n\tlet tickValues = x.domain().filter(function (d, i) {\n\t\treturn !(i % config.optional.xAxisTicksEvery[size])\n\t});\n\n\t//Labelling the first and/or last bar if needed\n\tif (config.optional.addFirstDate == true) {\n\t\ttickValues.push(graphic_data[0].date)\n\t\tconsole.log(\"First date added\")\n\t}\n\n\tif (config.optional.addFinalDate == true) {\n\t\ttickValues.push(graphic_data[graphic_data.length - 1].date)\n\t\tconsole.log(\"Last date added\")\n\t}\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y)\n\t\t.tickSize(-chart_width)\n\t\t.tickPadding(10)\n\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t.tickFormat(d3.format(config.essential.yAxisTickFormat));\n\n\t\tlet xDataType;\n\n\t\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t\t  xDataType = 'date';\n\t\t} else {\n\t\t  xDataType = 'numeric';\n\t\t}\n\t  \n\t\t// console.log(xDataType)\n\t\t\n\tlet xTime = d3.timeFormat(config.essential.xAxisTickFormat[size])\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(10)\n\t\t.tickPadding(10)\n\t\t.tickValues(tickValues) //Labelling the first and/or last bar if needed\n\t\t.tickFormat((d) => xDataType == 'date' ? xTime(d)\n\t\t: d3.format(config.essential.xAxisNumberFormat)(d));\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tif (config.essential.yDomain == 'auto') {\n\t\tif (d3.min(graphic_data.map(({ value }) => Number(value))) >= 0) {\n\t\ty.domain([\n\t\t\t0,\n\t\t\td3.max(graphic_data.map(({ value }) => Number(value)))]); //modified so it converts string to number\n\t\t} else {\n\t\t\ty.domain(d3.extent(graphic_data.map(({ value }) => Number(value))))\n\t\t}\n\t} else {\n\t\ty.domain(config.essential.yDomain);\n\t}\n\t\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis);\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t})\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.selectAll('rect')\n\t\t.data(graphic_data)\n\t\t.join('rect')\n\t\t.attr('y', (d) => y(Math.max(d.value, 0)))\n\t\t.attr('x', (d) => x(d.date))\n\t\t.attr('height', (d) => Math.abs(y(d.value) - y(0)))\n\t\t.attr('width', x.bandwidth())\n\t\t.attr('fill', config.essential.colour_palette);\n\n\n\t// This does the y-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,0)')\n\t\t.append('text')\n\t\t.attr('x', 5 - margin.left)\n\t\t.attr('y', -10)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\tlet parseTime = d3.timeParse(config.essential.dateFormat);\n\n    data.forEach((d, i) => {\n\n\t\t//If the date column is has date data store it as dates\n\t\tif (parseTime(data[i].date) !== null) {\n\t\t  d.date = parseTime(d.date)\n\t\t}\n\n\t  });\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n",
            "data_csv": "date,value\r\nJan-20,0.987848719\r\nFeb-20,0.983661406\r\nMar-20,0.681288045\r\nApr-20,0.511422389\r\nMay-20,0.979079334\r\nJun-20,0.790509497\r\nJul-20,0.458534842\r\nAug-20,0.37607897\r\nSep-20,0.184634081\r\nOct-20,0.444556832\r\nNov-20,0.172716557\r\nDec-20,0.203252651\r\nJan-21,0.241938997\r\nFeb-21,0.582086196\r\nMar-21,0.732952731\r\nApr-21,0.916589365\r\n",
            "comparison_csv": null
        },
        "column-chart-sm": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#206095\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%b-%y\",\n\t\t\t\"md\": \"%b-%y\",\n\t\t\t\"lg\": \"%b-%y\"\n\t\t},\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"yAxisTickFormat\": \".0%\",\n\t\t\"dateFormat\": \"%b-%y\",\n\t\t//the format your date data has in data.csv\n\t\t\"yDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"yAxisLabel\": \"y axis label\"\n\t},\n\t\"optional\": {\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [1, 1]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 40,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 40,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 40,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t}\n\t\t},\n\t\t\"xAxisTicksEvery\": { // this is the interval of ticks on the x axis - always including the first and last date\n\t\t\t\"sm\": 3,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\": 4\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600,\n\t\t\"dropYAxis\": true\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\n\t// Nest the graphic_data by the 'series' column\n\tlet nested_data = d3.groups(graphic_data, (d) => d.series);\n\n\t// Create a container div for each small multiple\n\tlet chartContainers = graphic\n\t\t.selectAll('.chart-container')\n\t\t.data(Array.from(nested_data))\n\t\t.join('div')\n\t\t.attr('class', 'chart-container');\n\n\tlet xDataType;\n\n\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t\txDataType = 'date';\n\t} else {\n\t\txDataType = 'numeric';\n\t}\n\n\t// console.log(xDataType)\n\n\tfunction drawChart(container, data, chartIndex) {\n\n\t\tfunction calculateChartWidth(size) {\n\n\t\t\tconst chartMargin = config.optional.margin[size];\n\n\t\t\tif (config.optional.dropYAxis) {\n\t\t\t\t// Chart width calculation allowing for 10px left margin between the charts\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\n\t\t\t\treturn chartWidth;\n\t\t\t} else {\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n\t\t\t\treturn chartWidth;\n\t\t\t}\n\t\t}\n\n\t\tconst chartEvery = config.optional.chart_every[size];\n\t\tconst chartsPerRow = config.optional.chart_every[size];\n\t\tlet chartPosition = chartIndex % chartsPerRow;\n\n\t\tlet margin = { ...config.optional.margin[size] };\n\n\t\t// If the chart is not in the first position in the row, reduce the left margin\n\t\tif (config.optional.dropYAxis) {\n\t\t\tif (chartPosition !== 0) {\n\t\t\t\tmargin.left = 10;\n\t\t\t}\n\t\t}\n\n\t\tconst aspectRatio = config.optional.aspectRatio[size];\n\t\tlet chart_width = calculateChartWidth(size)\n\n\t\t//height is set by the aspect ratio\n\t\tlet height =\n\t\t\taspectRatio[1] / aspectRatio[0] * chart_width;\n\n\t\t//set up scales\n\t\tconst y = d3.scaleLinear().range([height, 0]);\n\n\t\tconst x = d3\n\t\t\t.scaleBand()\n\t\t\t.paddingOuter(0.0)\n\t\t\t.paddingInner(0.1)\n\t\t\t.range([0, chart_width])\n\t\t\t.round(false);\n\n\t\t//use the data to find unique entries in the date column\n\t\tx.domain([...new Set(graphic_data.map((d) => d.date))]);\n\n\t\t//set up yAxis generator\n\t\tlet yAxis = d3.axisLeft(y)\n\t\t\t.tickSize(-chart_width)\n\t\t\t.tickPadding(10)\n\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? d3.format(config.essential.yAxisTickFormat)(d) :\n\t\t\t\tchartPosition == 0 ? d3.format(config.essential.yAxisTickFormat)(d) : \"\");\n\n\t\tlet xTime = d3.timeFormat(config.essential.xAxisTickFormat[size])\n\n\t\t//set up xAxis generator\n\t\tlet xAxis = d3\n\t\t\t.axisBottom(x)\n\t\t\t.tickSize(10)\n\t\t\t.tickPadding(10)\n\t\t\t.tickValues(xDataType == 'date' ? graphic_data\n\t\t\t\t.map(function (d) {\n\t\t\t\t\treturn d.date.getTime()\n\t\t\t\t}) //just get dates as seconds past unix epoch\n\t\t\t\t.filter(function (d, i, arr) {\n\t\t\t\t\treturn arr.indexOf(d) == i\n\t\t\t\t}) //find unique\n\t\t\t\t.map(function (d) {\n\t\t\t\t\treturn new Date(d)\n\t\t\t\t}) //map back to dates\n\t\t\t\t.sort(function (a, b) {\n\t\t\t\t\treturn a - b\n\t\t\t\t})\n\t\t\t\t.filter(function (d, i) {\n\t\t\t\t\treturn i % config.optional.xAxisTicksEvery[size] === 0 && i <= graphic_data.length - config.optional.xAxisTicksEvery[size] || i == data.length - 1 //Rob's fussy comment about labelling the last date\n\t\t\t\t}) : x.domain().filter((d, i) => { return i % config.optional.xAxisTicksEvery[size] === 0 && i <= graphic_data.length - config.optional.xAxisTicksEvery[size] || i == data.length - 1 })\n\t\t\t)\n\t\t\t.tickFormat((d) => xDataType == 'date' ? xTime(d)\n\t\t\t\t: d3.format(config.essential.xAxisNumberFormat)(d));\n\n\t\t//create svg for chart\n\t\tsvg = d3\n\t\t\t.select('#graphic')\n\t\t\t.append('svg')\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t\t.attr('class', 'chart')\n\t\t\t.style('background-color', '#fff')\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t\t\tif (config.essential.yDomain == 'auto') {\n\t\t\t\tif (d3.min(graphic_data.map(({ value }) => Number(value))) >= 0) {\n\t\t\t\ty.domain([\n\t\t\t\t\t0,\n\t\t\t\t\td3.max(graphic_data.map(({ value }) => Number(value)))]); //modified so it converts string to number\n\t\t\t\t} else {\n\t\t\t\t\ty.domain(d3.extent(graphic_data.map(({ value }) => Number(value))))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ty.domain(config.essential.yDomain);\n\t\t\t}\n\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.call(xAxis);\n\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis numeric') //Can be numeric or categorical\n\t\t\t.call(yAxis)\n\t\t\t.selectAll('line')\n\t\t\t.each(function (d) {\n\t\t\t\tif (d == 0) {\n\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.selectAll('text')\n\t\t\t.call(wrap, margin.left - 10);\n\n\t\tsvg\n\t\t\t.selectAll('rect')\n\t\t\t.data(data)\n\t\t\t.join('rect')\n\t\t\t.attr('y', (d) => y(Math.max(d.value, 0)))\n\t\t\t.attr('x', (d) => x(d.date))\n\t\t\t.attr('height', (d) => Math.abs(y(d.value) - y(0)))\n\t\t\t.attr('width', x.bandwidth())\n\t\t\t.attr('fill', config.essential.colour_palette);\n\n\t\t// This does the chart title label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('dy', -25)\n\t\t\t.attr('class', 'title')\n\t\t\t.text(data[0].series)\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.call(wrap, chart_width);\n\n\t\t// This does the y-axis label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0,0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 5 - margin.left)\n\t\t\t.attr('y', -10)\n\t\t\t.attr('class', 'axis--label')\n\t\t\t.text(() => chartIndex % chartEvery == 0 ? config.essential.yAxisLabel : \"\")\n\t\t\t.attr('text-anchor', 'start');\n\t}\n\n\t// Draw the charts for each small multiple\n\tchartContainers.each(function ([key, value], i) {\n\t\tdrawChart(d3.select(this), value, i);\n\t});\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\tlet parseTime = d3.timeParse(config.essential.dateFormat);\n\n\tdata.forEach((d, i) => {\n\n\t\t//If the date column is has date data store it as dates\n\t\tif (parseTime(data[i].date) !== null) {\n\t\t\td.date = parseTime(d.date)\n\t\t}\n\n\t});\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\n.chart-container {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.chart-container:last-child {\n  margin-right: 0;\n}\n\n.title {\n  font-weight: 600;\n  fill: #414042;\n}",
            "data_csv": "date,value,series\r\nJan-20,0.987848719,series1\r\nFeb-20,0.983661406,series1\r\nMar-20,0.681288045,series1\r\nApr-20,0.511422389,series1\r\nMay-20,0.979079334,series1\r\nJun-20,0.790509497,series1\r\nJul-20,0.458534842,series1\r\nAug-20,0.37607897,series1\r\nSep-20,0.184634081,series1\r\nOct-20,0.444556832,series1\r\nNov-20,0.172716557,series1\r\nDec-20,0.203252651,series1\r\nJan-21,0.241938997,series1\r\nFeb-21,0.582086196,series1\r\nMar-21,0.732952731,series1\r\nApr-21,0.916589365,series1\r\nJan-20,0.13554371,series2\r\nFeb-20,0.287644862,series2\r\nMar-20,0.114407276,series2\r\nApr-20,0.541399347,series2\r\nMay-20,0.467822116,series2\r\nJun-20,0.27638854,series2\r\nJul-20,0.031688215,series2\r\nAug-20,0.358073562,series2\r\nSep-20,0.511080326,series2\r\nOct-20,0.150613511,series2\r\nNov-20,0.889265569,series2\r\nDec-20,0.312108044,series2\r\nJan-21,0.844648386,series2\r\nFeb-21,0.704373203,series2\r\nMar-21,0.386153851,series2\r\nApr-21,0.050997871,series2\r\nJan-20,0.13554371,series3\r\nFeb-20,0.287644862,series3\r\nMar-20,0.114407276,series3\r\nApr-20,0.541399347,series3\r\nMay-20,0.467822116,series3\r\nJun-20,0.27638854,series3\r\nJul-20,0.031688215,series3\r\nAug-20,0.358073562,series3\r\nSep-20,0.511080326,series3\r\nOct-20,0.150613511,series3\r\nNov-20,0.889265569,series3\r\nDec-20,0.312108044,series3\r\nJan-21,0.844648386,series3\r\nFeb-21,0.704373203,series3\r\nMar-21,0.386153851,series3\r\nApr-21,0.050997871,series3\r\nJan-20,0.987848719,series4\r\nFeb-20,0.983661406,series4\r\nMar-20,0.681288045,series4\r\nApr-20,0.511422389,series4\r\nMay-20,0.979079334,series4\r\nJun-20,0.790509497,series4\r\nJul-20,0.458534842,series4\r\nAug-20,0.37607897,series4\r\nSep-20,0.184634081,series4\r\nOct-20,0.444556832,series4\r\nNov-20,0.172716557,series4\r\nDec-20,0.203252651,series4\r\nJan-21,0.241938997,series4\r\nFeb-21,0.582086196,series4\r\nMar-21,0.732952731,series4\r\nApr-21,0.916589365,series4\r\n",
            "comparison_csv": null
        },
        "column-chart-stacked": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%Y\",\n\t\t\t\"md\": \"%Y\",\n\t\t\t\"lg\": \"%b-%y\"\n\t\t},\n\t\t\"yAxisTickFormat\": \".0f\",\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"dateFormat\": \"%b-%y\",\n\t\t//the format your date data has in data.csv\n\t\t\"yDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"stackOffset\": \"stackOffsetNone\",\n\t\t// options include\n\t\t// stackOffsetNone means the baseline is set at zero\n\t\t// stackOffsetExpand to do 100% charts\n\t\t// stackOffsetDiverging for data with positive and negative values\n\t\t\"stackOrder\": \"stackOrderNone\"\n\t\t// other options include\n\t\t// stackOrderNone means the order is taken from the datafile\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\n\t\t// stackOrderReverse reverse the order as set from the data file\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 20,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 20,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 20,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t}\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [2, 1]\n\t\t},\n\t\t\"xAxisTicksEvery\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 4,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"addFirstDate\": false,\n\t\t\"addFinalDate\": false,\n\t\t\"legendColumns\": 4,\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\t\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\n\tconst aspectRatio = config.optional.aspectRatio[size];\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by the aspect ratio\n\tlet height =\n\t\taspectRatio[1] / aspectRatio[0] * chart_width;\n\n\n\t//set up scales\n\tconst y = d3.scaleLinear().range([height, 0]);\n\n\tconst x = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.0)\n\t\t.paddingInner(0.1)\n\t\t.range([0, chart_width])\n\t\t.round(false);\n\n\tconst colour = d3\n\t\t.scaleOrdinal()\n\t\t.domain(graphic_data.columns.slice(1))\n\t\t.range(config.essential.colour_palette);\n\n\t//use the data to find unique entries in the date column\n\tx.domain([...new Set(graphic_data.map((d) => d.date))]);\n\n\tlet tickValues = x.domain().filter(function (d, i) {\n\t\treturn !(i % config.optional.xAxisTicksEvery[size])\n\t});\n\n\t//Labelling the first and/or last bar if needed\n\tif (config.optional.addFirstDate == true) {\n\t\ttickValues.push(graphic_data[0].date)\n\t\tconsole.log(\"First date added\")\n\t}\n\n\tif (config.optional.addFinalDate == true) {\n\t\ttickValues.push(graphic_data[graphic_data.length - 1].date)\n\t\tconsole.log(\"Last date added\")\n\t}\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y)\n\t\t.tickSize(-chart_width)\n\t\t.tickPadding(10)\n\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t.tickFormat(d3.format(config.essential.yAxisTickFormat));\n\n\tconst stack = d3\n\t\t.stack()\n\t\t.keys(graphic_data.columns.slice(1))\n\t\t.offset(d3[config.essential.stackOffset])\n\t\t.order(d3[config.essential.stackOrder]);\n\n\tconst series = stack(graphic_data);\n\n\tlet xDataType;\n\n\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t  xDataType = 'date';\n\t} else {\n\t  xDataType = 'numeric';\n\t}\n  \n\t// console.log(xDataType)\n\n\tlet xTime = d3.timeFormat(config.essential.xAxisTickFormat[size])\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(10)\n\t\t.tickPadding(10)\n\t\t.tickValues(tickValues) //Labelling the first and/or last bar if needed\n\t\t.tickFormat((d) => xDataType == 'date' ? xTime(d)\n\t\t: d3.format(config.essential.xAxisNumberFormat)(d));\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tif (config.essential.yDomain == 'auto') {\n\t\ty.domain(d3.extent(series.flat(2))); //flatten the arrays and then get the extent\n\t} else {\n\t\ty.domain(config.essential.yDomain);\n\t}\n\n\t//Getting the list of colours used in this visualisation\n\tlet colours = [...config.essential.colour_palette].slice(0, graphic_data.columns.slice(1).length)\n\n\t// Set up the legend\n\tlet legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(graphic_data.columns.slice(1).reverse(), colours.reverse())\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\tif (size !== 'sm') {\n\t\td3.select('#legend')\n\t\t\t.style('grid-template-columns', `repeat(${config.optional.legendColumns}, 1fr)`)\n\t}\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis);\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t})\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('g')\n\t\t.data(series)\n\t\t.join('g')\n\t\t.attr('fill', (d, i) => config.essential.colour_palette[i])\n\t\t.selectAll('rect')\n\t\t.data((d) => d)\n\t\t.join('rect')\n\t\t.attr('y', (d) => Math.min(y(d[0]), y(d[1])))\n\t\t.attr('x', (d) => x(d.data.date))\n\t\t.attr('height', (d) => Math.abs(y(d[0]) - y(d[1])))\n\t\t.attr('width', x.bandwidth());\n\n\n\t// This does the y-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,0)')\n\t\t.append('text')\n\t\t.attr('x', 5 - margin.left)\n\t\t.attr('y', -10)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\tlet parseTime = d3.timeParse(config.essential.dateFormat);\n\n\tdata.forEach((d, i) => {\n\n\t\t//If the date column is has date data store it as dates\n\t\tif (parseTime(data[i].date) !== null) {\n\t\t\td.date = parseTime(d.date)\n\t\t}\n\n\t});\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\n#legend{\n  display: grid;\n  align-items: center;\n  padding-bottom: 20px;\n}",
            "data_csv": "date,Category 1,Category 2,Category 3,Category 4 with a long name,Category 5\r\nJan-20,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268\r\nFeb-20,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155\r\nMar-20,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462\r\nApr-20,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495\r\nMay-20,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893\r\nJun-20,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361\r\nJul-20,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727\r\nAug-20,24.56805884,89.47462279,49.36685439,50.05168647,65.708543\r\nSep-20,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682\r\nOct-20,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289",
            "comparison_csv": null
        },
        "column-chart-stacked-sm": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%Y\",\n\t\t\t\"md\": \"%Y\",\n\t\t\t\"lg\": \"%b-%y\"\n\t\t},\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"yAxisTickFormat\": \".0f\",\n\t\t\"dateFormat\": \"%b-%y\",\n\t\t//the format your date data has in data.csv\n\t\t\"yDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"stackOffset\": \"stackOffsetNone\",\n\t\t// options include\n\t\t// stackOffsetNone means the baseline is set at zero\n\t\t// stackOffsetExpand to do 100% charts\n\t\t// stackOffsetDiverging for data with positive and negative values\n\t\t\"stackOrder\": \"stackOrderNone\"\n\t\t// other options include\n\t\t// stackOrderNone means the order is taken from the datafile\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\n\t\t// stackOrderReverse reverse the order as set from the data file\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t}\n\t\t},\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [4, 3]\n\t\t},\n\t\t\"xAxisTicksEvery\": { // this is the interval of ticks on the x axis - always including the first and last date\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 4,\n\t\t\t\"lg\": 3\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 10,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 4\n\t\t},\n\t\t\"legendColumns\": 4,\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600,\n\t\t\"dropYAxis\": true\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\t// Nest the graphic_data by the 'series' column\n\tlet nested_data = d3.group(graphic_data, (d) => d.series);\n\n\t// Create a container div for each small multiple\n\tlet chartContainers = graphic\n\t\t.selectAll('.chart-container')\n\t\t.data(Array.from(nested_data))\n\t\t.join('div')\n\t\t.attr('class', 'chart-container');\n\n\tlet xDataType;\n\n\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t\txDataType = 'date';\n\t} else {\n\t\txDataType = 'numeric';\n\t}\n\n\t// console.log(xDataType)\n\n\tfunction drawChart(container, data, chartIndex) {\n\n\t\tfunction calculateChartWidth(size) {\n\n\t\t\tconst chartMargin = config.optional.margin[size];\n\n\t\t\tif (config.optional.dropYAxis) {\n\t\t\t\t// Chart width calculation allowing for 10px left margin between the charts\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\n\t\t\t\treturn chartWidth;\n\t\t\t} else {\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n\t\t\t\treturn chartWidth;\n\t\t\t}\n\t\t}\n\n\t\tconst chartEvery = config.optional.chart_every[size];\n\t\tconst chartsPerRow = config.optional.chart_every[size];\n\t\tlet chartPosition = chartIndex % chartsPerRow;\n\n\t\tlet margin = { ...config.optional.margin[size] };\n\n\t\t// If the chart is not in the first position in the row, reduce the left margin\n\t\tif (config.optional.dropYAxis) {\n\t\t\tif (chartPosition !== 0) {\n\t\t\t\tmargin.left = 10;\n\t\t\t}\n\t\t}\n\n\t\tconst aspectRatio = config.optional.aspectRatio[size];\n\t\tlet chart_width = calculateChartWidth(size)\n\n\t\t//height is set by the aspect ratio\n\t\tlet height =\n\t\t\taspectRatio[1] / aspectRatio[0] * chart_width;\n\n\t\t//set up scales\n\t\tconst y = d3.scaleLinear().range([height, 0]);\n\n\t\tconst x = d3\n\t\t\t.scaleBand()\n\t\t\t.paddingOuter(0.0)\n\t\t\t.paddingInner(0.1)\n\t\t\t.range([0, chart_width])\n\t\t\t.round(false);\n\n\t\tconst colour = d3\n\t\t\t.scaleOrdinal()\n\t\t\t.domain(graphic_data.columns.slice(2))\n\t\t\t.range(config.essential.colour_palette);\n\n\t\t//use the data to find unique entries in the date column\n\t\tx.domain([...new Set(graphic_data.map((d) => d.date))]);\n\n\t\t//set up yAxis generator\n\t\tconst yAxis = d3.axisLeft(y)\n\t\t\t.tickSize(-chart_width)\n\t\t\t.tickPadding(10)\n\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? d3.format(config.essential.yAxisTickFormat)(d) :\n\t\t\t\tchartPosition == 0 ? d3.format(config.essential.yAxisTickFormat)(d) : \"\");\n\n\t\tconst stack = d3\n\t\t\t.stack()\n\t\t\t.keys(graphic_data.columns.slice(2))\n\t\t\t.offset(d3[config.essential.stackOffset])\n\t\t\t.order(d3[config.essential.stackOrder]);\n\n\t\tconst series = stack(data);\n\t\tconst seriesAll = stack(graphic_data);\n\n\t\tlet xTime = d3.timeFormat(config.essential.xAxisTickFormat[size])\n\n\t\t//set up xAxis generator\n\t\tconst xAxis = d3\n\t\t\t.axisBottom(x)\n\t\t\t.tickSize(10)\n\t\t\t.tickPadding(10)\n\t\t\t.tickValues(xDataType == 'date' ? graphic_data\n\t\t\t\t.map(function (d) {\n\t\t\t\t\treturn d.date.getTime()\n\t\t\t\t}) //just get dates as seconds past unix epoch\n\t\t\t\t.filter(function (d, i, arr) {\n\t\t\t\t\treturn arr.indexOf(d) == i\n\t\t\t\t}) //find unique\n\t\t\t\t.map(function (d) {\n\t\t\t\t\treturn new Date(d)\n\t\t\t\t}) //map back to dates\n\t\t\t\t.sort(function (a, b) {\n\t\t\t\t\treturn a - b\n\t\t\t\t})\n\t\t\t\t.filter(function (d, i) {\n\t\t\t\t\treturn i % config.optional.xAxisTicksEvery[size] === 0 && i <= graphic_data.length - config.optional.xAxisTicksEvery[size] || i == data.length - 1 //Rob's fussy comment about labelling the last date\n\t\t\t\t}) : x.domain().filter((d, i) => { return i % config.optional.xAxisTicksEvery[size] === 0 && i <= graphic_data.length - config.optional.xAxisTicksEvery[size] || i == data.length - 1 })\n\t\t\t)\n\t\t\t.tickFormat((d) => xDataType == 'date' ? xTime(d)\n\t\t\t\t: d3.format(config.essential.xAxisNumberFormat)(d));\n\n\t\t// //Labelling the first and/or last bar if needed\n\t\t// if (config.optional.showStartEndDate == true) {\n\t\t// \txAxis.tickValues(x.domain().filter(function (d, i) {\n\t\t// \t\treturn !(i % config.optional.xAxisTicksEvery[size])\n\t\t// \t}).concat(x.domain()[0], x.domain()[x.domain().length - 1]))\n\t\t// }\n\n\t\t//create svg for chart\n\t\tconst svg = container\n\t\t\t.append('svg')\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t\t.attr('class', 'chart')\n\t\t\t.style('background-color', '#fff')\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t\tif (config.essential.yDomain == 'auto') {\n\t\t\ty.domain(d3.extent(seriesAll.flat(2))); //flatten the arrays and then get the extent\n\t\t} else {\n\t\t\ty.domain(config.essential.yDomain);\n\t\t}\n\n\t\t//Getting the list of colours used in this visualisation\n\t\tlet colours = [...config.essential.colour_palette].slice(0, graphic_data.columns.slice(2).length)\n\n\t\t// Set up the legend\n\t\tlet legenditem = d3\n\t\t\t.select('#legend')\n\t\t\t.selectAll('div.legend--item')\n\t\t\t.data(\n\t\t\t\td3.zip(graphic_data.columns.slice(2).reverse(), colours.reverse())\n\t\t\t)\n\t\t\t.enter()\n\t\t\t.append('div')\n\t\t\t.attr('class', 'legend--item');\n\n\t\tlegenditem\n\t\t\t.append('div')\n\t\t\t.attr('class', 'legend--icon--circle')\n\t\t\t.style('background-color', function (d) {\n\t\t\t\treturn d[1];\n\t\t\t});\n\n\t\tlegenditem\n\t\t\t.append('div')\n\t\t\t.append('p')\n\t\t\t.attr('class', 'legend--text')\n\t\t\t.html(function (d) {\n\t\t\t\treturn d[0];\n\t\t\t});\n\n\t\tif (size !== 'sm') {\n\t\t\td3.select('#legend')\n\t\t\t\t.style('grid-template-columns', `repeat(${config.optional.legendColumns}, 1fr)`)\n\t\t}\n\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.call(xAxis);\n\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis')\n\t\t\t.call(yAxis)\n\t\t\t.selectAll('line')\n\t\t\t.each(function (d) {\n\t\t\t\tif (d == 0) {\n\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.selectAll('text')\n\t\t\t.call(wrap, margin.left - 10);\n\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.selectAll('g')\n\t\t\t.data(series)\n\t\t\t.join('g')\n\t\t\t.attr('fill', (d, i) => config.essential.colour_palette[i])\n\t\t\t.selectAll('rect')\n\t\t\t.data((d) => d)\n\t\t\t.join('rect')\n\t\t\t.attr('y', (d) => Math.min(y(d[0]), y(d[1])))\n\t\t\t.attr('x', (d) => x(d.data.date))\n\t\t\t.attr('height', (d) => Math.abs(y(d[0]) - y(d[1])))\n\t\t\t.attr('width', x.bandwidth());\n\n\t\t// This does the chart title label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('dy', -30)\n\t\t\t.attr('class', 'title')\n\t\t\t.text(data[0].series)\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.call(wrap, chart_width);\n\n\n\t\t// This does the y-axis label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0,0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 5 - margin.left)\n\t\t\t.attr('y', -10)\n\t\t\t.attr('class', 'axis--label')\n\t\t\t.text(() => chartIndex % chartEvery == 0 ? config.essential.yAxisLabel : \"\")\n\t\t\t.attr('text-anchor', 'start');\n\t};\n\n\t// Draw the charts for each small multiple\n\tchartContainers.each(function ([key, value], i) {\n\t\tdrawChart(d3.select(this), value, i);\n\t});\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\tlet parseTime = d3.timeParse(config.essential.dateFormat);\n\n\tdata.forEach((d, i) => {\n\n\t\t//If the date column is has date data store it as dates\n\t\tif (parseTime(data[i].date) !== null) {\n\t\t\td.date = parseTime(d.date)\n\t\t}\n\n\t});\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "data_csv": "date,series,Category 1,Category 2,Category 3,Category 4 with a long name,Category 5\nJan-20,series1,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268\nFeb-20,series1,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155\nMar-20,series1,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462\nApr-20,series1,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495\nMay-20,series1,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893\nJun-20,series1,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361\nJul-20,series1,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727\nAug-20,series1,24.56805884,89.47462279,49.36685439,50.05168647,65.708543\nSep-20,series1,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682\nOct-20,series1,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289\nJan-20,series2,0.933950623,9.624031575,72.95935918,6.77595291,28.53102882\nFeb-20,series2,42.67837059,46.59217919,67.77733609,8.925781009,1.795089023\nMar-20,series2,47.00071225,9.037706465,10.9849663,0.452189724,20.59393944\nApr-20,series2,24.20432653,59.86689017,42.15415468,72.6617888,31.66840009\nMay-20,series2,41.54685317,23.16632079,2.389611457,4.813825608,12.61856841\nJun-20,series2,3.798081223,45.01552316,1.591733076,42.1961274,5.81108836\nJul-20,series2,56.69771887,25.70328174,31.2276681,4.687134985,23.4460375\nAug-20,series2,2.291284423,20.75322693,45.39235296,32.55708764,31.58368269\nSep-20,series2,8.979986448,11.44169148,40.6953067,33.53376474,1.417492362\nOct-20,series2,14.49825282,18.73452297,9.162783215,80.32986673,6.273620969\nJan-20,series3,87.72957303,78.20844009,73.61438423,71.32424048,79.91439476\nFeb-20,series3,58.16540724,32.99819999,9.856849706,97.34373835,79.99683494\nMar-20,series3,8.772748019,40.13236012,92.61020539,33.55972913,77.76240631\nApr-20,series3,73.95082667,61.47976532,30.56231134,9.679967748,56.50124322\nMay-20,series3,72.50402495,56.47240048,94.8410951,44.48195369,10.88876233\nJun-20,series3,54.39548057,12.38889185,93.59330285,73.79213895,21.36077763\nJul-20,series3,38.83710414,19.76902548,41.46335831,5.805762559,71.14340522\nAug-20,series3,3.418394354,94.12353895,46.79323662,49.58736749,99.44353072\nSep-20,series3,70.22092796,56.52766708,18.36433592,13.47723194,86.93400296\nOct-20,series3,68.36646707,53.41870414,87.80039611,88.98978628,12.66577263\nJan-20,series4,13.46519787,57.03145807,89.4723652,25.4734746,64.31632125\nFeb-20,series4,97.75793294,10.90663142,64.13005332,79.10043408,97.75434054\nMar-20,series4,67.45128621,23.08017243,64.4892647,78.80150895,8.03937043\nApr-20,series4,27.47475335,43.02540187,25.78801009,86.70448892,21.11512093\nMay-20,series4,11.57834567,82.57230791,77.34477933,79.81166212,10.9685112\nJun-20,series4,95.83571673,48.28154456,84.4705485,90.31647127,1.451346358\nJul-20,series4,82.09708714,98.10893307,79.22420574,47.50524785,86.11139071\nAug-20,series4,5.29225365,91.58355761,51.62819774,88.4223957,66.89798742\nSep-20,series4,96.14198802,93.32172592,93.58391111,19.84140874,83.39377318\nOct-20,series4,53.9721427,68.97760975,51.39568127,53.4496707,79.33609547\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\n.chart-container {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.chart-container:last-child {\n  margin-right: 0;\n}\n\n.title {\n  font-weight: 600;\n  fill: #414042;\n}\n\n#legend{\n  display: grid;\n  align-items: center;\n  padding-bottom: 20px;\n}",
            "comparison_csv": null
        },
        "column-chart-stacked-with-line": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [ \"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\", \"#003C57\"],\n\t\t\"line_colour\": \"#222222\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%Y\",\n\t\t\t\"md\": \"%Y\",\n\t\t\t\"lg\": \"%b-%y\"\n\t\t},\n\t\t\"yAxisTickFormat\": \".0%\",\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"dateFormat\": \"%b-%y\",\n\t\t//the format your date data has in data.csv\n\t\t\"yDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"line_series\": \"value1\",\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"stackOffset\": \"stackOffsetDiverging\",\n\t\t// options include\n\t\t// stackOffsetNone means the baseline is set at zero\n\t\t// stackOffsetExpand to do 100% charts\n\t\t// stackOffsetDiverging for data with positive and negative values\n\t\t\"stackOrder\": \"stackOrderNone\"\n\t\t// other options include\n\t\t// stackOrderNone means the order is taken from the datafile\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\n\t\t// stackOrderReverse reverse the order as set from the data file\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 70\n\t\t\t}\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [2, 1]\n\t\t},\n\t\t\"xAxisTicksEvery\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 4,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"addFirstDate\": false,\n\t\t\"addFinalDate\": false,\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\n\tconst aspectRatio = config.optional.aspectRatio[size];\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by the aspect ratio\n\tlet height =\n\t\taspectRatio[1] / aspectRatio[0] * chart_width;\n\n\t//set up scales\n\tconst y = d3.scaleLinear().range([height, 0]);\n\n\tconst x = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0.0)\n\t\t.paddingInner(0.1)\n\t\t.range([0, chart_width])\n\t\t.round(false);\n\n\t//use the data to find unique entries in the date column\n\tx.domain([...new Set(graphic_data.map((d) => d.date))]);\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y)\n\t\t.tickSize(-chart_width)\n\t\t.tickPadding(10)\n\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t.tickFormat(d3.format(config.essential.yAxisTickFormat));\n\n\t\tlet xDataType;\n\n\t\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t\t  xDataType = 'date';\n\t\t} else {\n\t\t  xDataType = 'numeric';\n\t\t}\n\t  \n\t\t// console.log(xDataType)\n\n\tlet xTime = d3.timeFormat(config.essential.xAxisTickFormat[size])\n\n\tlet tickValues = x.domain().filter(function (d, i) {\n\t\treturn !(i % config.optional.xAxisTicksEvery[size])\n\t});\n\n\t//Labelling the first and/or last bar if needed\n\tif (config.optional.addFirstDate == true) {\n\t\ttickValues.push(graphic_data[0].date)\n\t\tconsole.log(\"First date added\")\n\t}\n\n\tif (config.optional.addFinalDate == true) {\n\t\ttickValues.push(graphic_data[graphic_data.length - 1].date)\n\t\tconsole.log(\"Last date added\")\n\t}\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(10)\n\t\t.tickPadding(10)\n\t\t.tickValues(tickValues)\n\t\t.tickFormat((d) => xDataType == 'date' ? xTime(d)\n\t\t: d3.format(config.essential.xAxisNumberFormat)(d));\n\n\tconst stack = d3\n\t\t.stack()\n\t\t.keys(graphic_data.columns.slice(1).filter(d => (d) !== config.essential.line_series))\n\t\t.offset(d3[config.essential.stackOffset])\n\t\t.order(d3[config.essential.stackOrder]);\n\n\tlet series = stack(graphic_data);\n\n\t//gets array of arrays for individual lines\n\tlet lines = [];\n\tfor (let column in graphic_data[0]) {\n\t\tif (column == 'date') continue;\n\t\tlines[column] = graphic_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\t'name': d.date,\n\t\t\t\t'amt': d[column]\n\t\t\t};\n\t\t});\n\t}\n\n\n\t// console.log(\"linesflat: \", Object.entries(lines).flat(3))\n\n\tlet counter;\n\t// do some code to overwrite blanks with the last known point\n\tkeys = Object.keys(lines);\n\tfor (i = 0; i < keys.length; i++) {\n\t\t// console.log(lines[keys[i]])\n\t\tlines[keys[i]].forEach(function (d, j) {\n\t\t\tif (d.amt != \"null\") {\n\t\t\t\tcounter = j;\n\t\t\t} else {\n\t\t\t\td.name = lines[keys[i]][counter].name\n\t\t\t\td.amt = lines[keys[i]][counter].amt\n\t\t\t}\n\n\t\t})\n\n\t}\n\n\t// console.log(\"keys: \", keys)\n\n\t// Set up the legend\n\tlet legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(graphic_data.columns.slice(1).filter(d => (d) !== config.essential.line_series), config.essential.colour_palette)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\td3.select('#legend')\n\t\t.append('div')\n\t\t.attr('class', 'legend--item line')\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--refline')\n\t\t.style('background-color', config.essential.line_colour);\n\n\td3.select('.legend--item.line')\n\t\t.append('div')\n\t\t.attr('class', 'legend--text')\n\t\t.text(config.essential.line_series)\n\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tif (config.essential.yDomain == 'auto') {\n\t\t// y.domain([\n\t\t// \t0,\n\t\t// \td3.max(graphic_data, (d) => d3.max(keys, (c) => d[c]))])\n\t\ty.domain(d3.extent(series.flat(2)));\n\t} else {\n\t\ty.domain(config.essential.yDomain);\n\t}\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis);\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t})\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('g')\n\t\t.data(series)\n\t\t.join('g')\n\t\t.attr('fill', (d, i) => config.essential.colour_palette[i])\n\t\t.selectAll('rect')\n\t\t.data((d) => d)\n\t\t.join('rect')\n\t\t.attr('y', (d) => Math.min(y(d[0]), y(d[1])))\n\t\t.attr('x', (d) => x(d.data.date))\n\t\t.attr('height', (d) => Math.abs(y(d[0]) - y(d[1])))\n\t\t.attr('width', x.bandwidth())\n\t// .attr('fill', config.essential.colour_palette[0]);\n\n\n\tlet thisCurve = d3.curveLinear\n\n\tlet line = d3.line()\n\t\t.defined((d) => d.amt !== 'null')\n\t\t.curve(thisCurve)\n\t\t.x((d) => x(d.name))\n\t\t.y((d) => y(d.amt));\n\t// //     //opposite sex\n\n\tlet line_values = Object.entries(lines).filter(d => d[0] == config.essential.line_series)\n\n\t// console.log(\"lines: \", lines)\n\t// console.log(\"Object.entries(lines)\", Object.entries(lines))\n\t// console.log(\"filtered lines: \", Object.entries(lines).filter(d => d[0] == config.essential.line_series))\n\n\tsvg.append('g')\n\t\t.selectAll('path')\n\t\t.data(line_values)\n\t\t.enter()\n\t\t.append('path')\n\t\t.attr(\"stroke\", (d, i) => config.essential.line_colour)\n\t\t.attr(\"class\", \"dataLine\")\n\t\t.attr('d', (d) =>\n\t\t\tline(d[1]))\n\t\t.attr(\"transform\", \"translate(\" + x.bandwidth() / 2 + \",0)\");\n\n\t// This does the y-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,0)')\n\t\t.append('text')\n\t\t.attr('x', 5 - margin.left)\n\t\t.attr('y', -10)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\tlet parseTime = d3.timeParse(config.essential.dateFormat);\n\n\tdata.forEach((d, i) => {\n\n\t\t//If the date column is has date data store it as dates\n\t\tif (parseTime(data[i].date) !== null) {\n\t\t\td.date = parseTime(d.date)\n\t\t}\n\n\t});\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "data_csv": "date,value1,value2,value3,value4,value5\nJan-20,0.089,0.008,0.033,0.054,-0.073\nFeb-20,0.064,-0.06,-0.083,0.084,-0.087\nMar-20,0.007,-0.007,-0.088,0.009,0.011\nApr-20,0.04,0.07,-0.08,0.046,0.089\nMay-20,-0.04,0.093,0.012,0.018,0.018\nJun-20,-0.003,0.007,-0.032,0.016,0.088\nJul-20,0,0,-0.002,-0.034,-0.063\nAug-20,0.074,-0.064,0.068,0.094,0.035\nSep-20,-0.092,0.093,-0.039,-0.079,0.06\nOct-20,-0.02,-0.029,-0.02,0.073,-0.061\nNov-20,-0.099,-0.025,0.02,-0.004,-0.071\nDec-20,0.055,0.024,-0.004,0.052,0.09\nJan-21,0.088,0.083,-0.042,0.017,-0.061\nFeb-21,0.056,0.043,-0.086,-0.083,0.098\nMar-21,0.041,0.057,-0.065,0.057,0.036\nApr-21,0.033,-0.057,0.004,0.02,0.022\n",
            "chart_css": ".dataLabels {\n  font-weight: 600;\n  font-size: 14px;\n}\n\n.dataLine {\n  stroke-width: 3px;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  fill: none;\n\n}",
            "comparison_csv": null
        },
        "column-chart-stacked-with-line-sm": {
            "config_js": "config = {\r\n\t\"essential\": {\r\n\t\t\"graphic_data_url\": \"data.csv\",\r\n\t\t\"colour_palette\": [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\"],\r\n\t\t\"line_colour\": \"#222222\",\r\n\t\t\"sourceText\": \"Office for National Statistics\",\r\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\r\n\t\t\"xAxisTickFormat\": {\r\n\t\t\t\"sm\": \"%Y\",\r\n\t\t\t\"md\": \"%Y\",\r\n\t\t\t\"lg\": \"%b-%y\"\r\n\t\t},\r\n\t\t\"xAxisNumberFormat\": \".0f\",\r\n\t\t\"yAxisTickFormat\": \".0f\",\r\n\t\t\"dateFormat\": \"%b-%y\",\r\n\t\t//the format your date data has in data.csv\r\n\t\t\"yDomain\": \"auto\",\r\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\r\n\t\t\"line_series\": \"Category 5\",\r\n\t\t\"yAxisLabel\": \"y axis label\",\r\n\t\t\"stackOffset\": \"stackOffsetNone\",\r\n\t\t// options include\r\n\t\t// stackOffsetNone means the baseline is set at zero\r\n\t\t// stackOffsetExpand to do 100% charts\r\n\t\t// stackOffsetDiverging for data with positive and negative values\r\n\t\t\"stackOrder\": \"stackOrderNone\"\r\n\t\t// other options include\r\n\t\t// stackOrderNone means the order is taken from the datafile\r\n\t\t// stackOrderAppearance the earliest series (according to the maximum value) is at the bottom\r\n\t\t// stackOrderAscending the smallest series (according to the sum of values) is at the bottom\r\n\t\t// stackOrderDescending the largest series (according to the sum of values) is at the bottom\r\n\t\t// stackOrderReverse reverse the order as set from the data file\r\n\t},\r\n\t\"optional\": {\r\n\t\t\"margin\": {\r\n\t\t\t\"sm\": {\r\n\t\t\t\t\"top\": 50,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 70\r\n\t\t\t},\r\n\t\t\t\"md\": {\r\n\t\t\t\t\"top\": 50,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 70\r\n\t\t\t},\r\n\t\t\t\"lg\": {\r\n\t\t\t\t\"top\": 50,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 70\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"chart_every\": {\r\n\t\t\t\"sm\": 1,\r\n\t\t\t\"md\": 2,\r\n\t\t\t\"lg\": 2\r\n\t\t},\r\n\t\t\"aspectRatio\": {\r\n\t\t\t\"sm\": [1, 1],\r\n\t\t\t\"md\": [1, 1],\r\n\t\t\t\"lg\": [4, 3]\r\n\t\t},\r\n\t\t\"xAxisTicksEvery\": { // this is the interval of ticks on the x axis - always including the first and last date\r\n\t\t\t\"sm\": 4,\r\n\t\t\t\"md\": 4,\r\n\t\t\t\"lg\": 3\r\n\t\t},\r\n\t\t\"yAxisTicks\": {\r\n\t\t\t\"sm\": 10,\r\n\t\t\t\"md\": 8,\r\n\t\t\t\"lg\": 4\r\n\t\t},\r\n\t\t\"legendColumns\": 4,\r\n\t\t\"mobileBreakpoint\": 510,\r\n\t\t\"mediumBreakpoint\": 600,\r\n\t\t\"dropYAxis\": true\r\n\t},\r\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\r\n\t\"chart_build\": {}\r\n};\r\n",
            "chart_css": ".dataLabels{\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n}\r\n\r\n.chart-container {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.chart-container:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\n.title {\r\n  font-weight: 600;\r\n  fill: #414042;\r\n}\r\n\r\n#legend{\r\n  display: grid;\r\n  align-items: center;\r\n  padding-bottom: 20px;\r\n}\r\n\r\n.dataLine {\r\n  stroke-width: 3px;\r\n  stroke-linecap: round;\r\n  stroke-linejoin: round;\r\n  fill: none;\r\n}",
            "script_js": "let graphic = d3.select('#graphic');\r\nlet legend = d3.select('#legend');\r\nlet pymChild = null;\r\n\r\nfunction drawGraphic() {\r\n\t// clear out existing graphics\r\n\tgraphic.selectAll('*').remove();\r\n\tlegend.selectAll('*').remove();\r\n\r\n\t//population accessible summmary\r\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\r\n\r\n\tlet threshold_md = config.optional.mediumBreakpoint;\r\n\tlet threshold_sm = config.optional.mobileBreakpoint;\r\n\r\n\t//set variables for chart dimensions dependent on width of #graphic\r\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\r\n\t\tsize = 'sm';\r\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\r\n\t\tsize = 'md';\r\n\t} else {\r\n\t\tsize = 'lg';\r\n\t}\r\n\r\n\t// Nest the graphic_data by the 'series' column\r\n\tlet nested_data = d3.group(graphic_data, (d) => d.series);\r\n\r\n\t// Create a container div for each small multiple\r\n\tlet chartContainers = graphic\r\n\t\t.selectAll('.chart-container')\r\n\t\t.data(Array.from(nested_data))\r\n\t\t.join('div')\r\n\t\t.attr('class', 'chart-container');\r\n\r\n\tlet xDataType;\r\n\r\n\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\r\n\t\txDataType = 'date';\r\n\t} else {\r\n\t\txDataType = 'numeric';\r\n\t}\r\n\r\n\t// console.log(xDataType)\r\n\r\n\tfunction drawChart(container, data, chartIndex) {\r\n\r\n\t\tfunction calculateChartWidth(size) {\r\n\r\n\t\t\tconst chartMargin = config.optional.margin[size];\r\n\r\n\t\t\tif (config.optional.dropYAxis) {\r\n\t\t\t\t// Chart width calculation allowing for 10px left margin between the charts\r\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\r\n\t\t\t\treturn chartWidth;\r\n\t\t\t} else {\r\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\r\n\t\t\t\treturn chartWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst chartEvery = config.optional.chart_every[size];\r\n\t\tconst chartsPerRow = config.optional.chart_every[size];\r\n\t\tlet chartPosition = chartIndex % chartsPerRow;\r\n\r\n\t\tlet margin = { ...config.optional.margin[size] };\r\n\r\n\t\t// If the chart is not in the first position in the row, reduce the left margin\r\n\t\tif (config.optional.dropYAxis) {\r\n\t\t\tif (chartPosition !== 0) {\r\n\t\t\t\tmargin.left = 10;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst aspectRatio = config.optional.aspectRatio[size];\r\n\t\tlet chart_width = calculateChartWidth(size)\r\n\r\n\t\t//height is set by the aspect ratio\r\n\t\tlet height =\r\n\t\t\taspectRatio[1] / aspectRatio[0] * chart_width;\r\n\r\n\t\t//set up scales\r\n\t\tconst y = d3.scaleLinear().range([height, 0]);\r\n\r\n\t\tconst x = d3\r\n\t\t\t.scaleBand()\r\n\t\t\t.paddingOuter(0.0)\r\n\t\t\t.paddingInner(0.1)\r\n\t\t\t.range([0, chart_width])\r\n\t\t\t.round(false);\r\n\r\n\t\tconst colour = d3\r\n\t\t\t.scaleOrdinal()\r\n\t\t\t.domain(graphic_data.columns.slice(2))\r\n\t\t\t.range(config.essential.colour_palette);\r\n\r\n\t\t//use the data to find unique entries in the date column\r\n\t\tx.domain([...new Set(graphic_data.map((d) => d.date))]);\r\n\r\n\t\t//set up yAxis generator\r\n\t\tconst yAxis = d3.axisLeft(y)\r\n\t\t\t.tickSize(-chart_width)\r\n\t\t\t.tickPadding(10)\r\n\t\t\t.ticks(config.optional.yAxisTicks[size])\r\n\t\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? d3.format(config.essential.yAxisTickFormat)(d) :\r\n\t\t\t\tchartPosition == 0 ? d3.format(config.essential.yAxisTickFormat)(d) : \"\");\r\n\r\n\t\tconst stack = d3\r\n\t\t\t.stack()\r\n\t\t\t.keys(graphic_data.columns.slice(2).filter(d => (d) !== config.essential.line_series))\r\n\t\t\t.offset(d3[config.essential.stackOffset])\r\n\t\t\t.order(d3[config.essential.stackOrder]);\r\n\r\n\t\tconst series = stack(data);\r\n\t\tconst seriesAll = stack(graphic_data);\r\n\r\n\t\tlet xTime = d3.timeFormat(config.essential.xAxisTickFormat[size])\r\n\r\n\t\t//set up xAxis generator\r\n\t\tconst xAxis = d3\r\n\t\t\t.axisBottom(x)\r\n\t\t\t.tickSize(10)\r\n\t\t\t.tickPadding(10)\r\n\t\t\t.tickValues(xDataType == 'date' ? graphic_data\r\n\t\t\t\t.map(function (d) {\r\n\t\t\t\t\treturn d.date.getTime()\r\n\t\t\t\t}) //just get dates as seconds past unix epoch\r\n\t\t\t\t.filter(function (d, i, arr) {\r\n\t\t\t\t\treturn arr.indexOf(d) == i\r\n\t\t\t\t}) //find unique\r\n\t\t\t\t.map(function (d) {\r\n\t\t\t\t\treturn new Date(d)\r\n\t\t\t\t}) //map back to dates\r\n\t\t\t\t.sort(function (a, b) {\r\n\t\t\t\t\treturn a - b\r\n\t\t\t\t})\r\n\t\t\t\t.filter(function (d, i) {\r\n\t\t\t\t\treturn i % config.optional.xAxisTicksEvery[size] === 0 && i <= graphic_data.length - config.optional.xAxisTicksEvery[size] || i == data.length - 1 //Rob's fussy comment about labelling the last date\r\n\t\t\t\t}) : x.domain().filter((d, i) => { return i % config.optional.xAxisTicksEvery[size] === 0 && i <= graphic_data.length - config.optional.xAxisTicksEvery[size] || i == data.length - 1 })\r\n\t\t\t)\r\n\t\t\t.tickFormat((d) => xDataType == 'date' ? xTime(d)\r\n\t\t\t\t: d3.format(config.essential.xAxisNumberFormat)(d));\r\n\r\n\t\t// //Labelling the first and/or last bar if needed\r\n\t\t// if (config.optional.showStartEndDate == true) {\r\n\t\t// \txAxis.tickValues(x.domain().filter(function (d, i) {\r\n\t\t// \t\treturn !(i % config.optional.xAxisTicksEvery[size])\r\n\t\t// \t}).concat(x.domain()[0], x.domain()[x.domain().length - 1]))\r\n\t\t// }\r\n\r\n\t\t//create svg for chart\r\n\t\tconst svg = container\r\n\t\t\t.append('svg')\r\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\r\n\t\t\t.attr('height', height + margin.top + margin.bottom)\r\n\t\t\t.attr('class', 'chart')\r\n\t\t\t.style('background-color', '#fff')\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\r\n\r\n\t\tif (config.essential.yDomain == 'auto') {\r\n\t\t\ty.domain(d3.extent(seriesAll.flat(2))); //flatten the arrays and then get the extent\r\n\t\t} else {\r\n\t\t\ty.domain(config.essential.yDomain);\r\n\t\t}\r\n\r\n\t\t//Getting the list of colours used in this visualisation\r\n\t\tlet colours = [...config.essential.colour_palette].slice(0, graphic_data.columns.slice(2).length - 1)\r\n\r\n\t\t//gets array of arrays for individual lines\r\n\t\tlet lines = [];\r\n\t\tfor (let column in graphic_data[0]) {\r\n\t\t\tif (column == 'date' || column == 'series') continue;\r\n\t\t\tlines[column] = data.map(function (d) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t'name': d.date,\r\n\t\t\t\t\t'amt': d[column]\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// console.log(\"linesflat: \", Object.entries(lines).flat(3))\r\n\r\n\t\tlet counter;\r\n\t\t// do some code to overwrite blanks with the last known point\r\n\t\tkeys = Object.keys(lines);\r\n\t\tfor (i = 0; i < keys.length; i++) {\r\n\t\t\t// console.log(lines[keys[i]])\r\n\t\t\tlines[keys[i]].forEach(function (d, j) {\r\n\t\t\t\tif (d.amt != \"null\") {\r\n\t\t\t\t\tcounter = j;\r\n\t\t\t\t} else {\r\n\t\t\t\t\td.name = lines[keys[i]][counter].name\r\n\t\t\t\t\td.amt = lines[keys[i]][counter].amt\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\r\n\t\t}\r\n\r\n\t\t// console.log(\"keys: \", keys)\r\n\t\tlet bar_keys = keys.filter(d => d !== config.essential.line_series);\r\n\t\t// console.log(bar_keys)\r\n\r\n\t\t// Set up the legend\r\n\t\tlet legenditem = d3\r\n\t\t\t.select('#legend')\r\n\t\t\t.selectAll('div.legend--item')\r\n\t\t\t.data(\r\n\t\t\t\td3.zip(bar_keys.reverse(), colours.reverse())\r\n\t\t\t)\r\n\t\t\t.enter()\r\n\t\t\t.append('div')\r\n\t\t\t.attr('class', 'legend--item');\r\n\r\n\t\tlegenditem\r\n\t\t\t.append('div')\r\n\t\t\t.attr('class', 'legend--icon--circle')\r\n\t\t\t.style('background-color', function (d) {\r\n\t\t\t\treturn d[1];\r\n\t\t\t});\r\n\r\n\t\tlegenditem\r\n\t\t\t.append('div')\r\n\t\t\t.append('p')\r\n\t\t\t.attr('class', 'legend--text')\r\n\t\t\t.html(function (d) {\r\n\t\t\t\treturn d[0];\r\n\t\t\t});\r\n\r\n\t\tif (size !== 'sm') {\r\n\t\t\td3.select('#legend')\r\n\t\t\t\t.style('grid-template-columns', `repeat(${config.optional.legendColumns}, 1fr)`)\r\n\t\t}\r\n\r\n\t\tsvg\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(0,' + height + ')')\r\n\t\t\t.attr('class', 'x axis')\r\n\t\t\t.call(xAxis);\r\n\r\n\t\tsvg\r\n\t\t\t.append('g')\r\n\t\t\t.attr('class', 'y axis numeric') //Can be numeric or categorical\r\n\t\t\t.call(yAxis)\r\n\t\t\t.selectAll('line')\r\n\t\t\t.each(function (d) {\r\n\t\t\t\tif (d == 0) {\r\n\t\t\t\t\td3.select(this).attr('class', 'zero-line');\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.selectAll('text')\r\n\t\t\t.call(wrap, margin.left - 10);\r\n\r\n\t\t//Columns\r\n\t\tsvg\r\n\t\t\t.append('g')\r\n\t\t\t.selectAll('g')\r\n\t\t\t.data(series)\r\n\t\t\t.join('g')\r\n\t\t\t.attr('fill', (d, i) => config.essential.colour_palette[i])\r\n\t\t\t.selectAll('rect')\r\n\t\t\t.data((d) => d)\r\n\t\t\t.join('rect')\r\n\t\t\t.attr('y', (d) => Math.min(y(d[0]), y(d[1])))\r\n\t\t\t.attr('x', (d) => x(d.data.date))\r\n\t\t\t.attr('height', (d) => Math.abs(y(d[0]) - y(d[1])))\r\n\t\t\t.attr('width', x.bandwidth());\r\n\r\n\t\t//Lines\r\n\t\tlet thisCurve = d3.curveLinear\r\n\r\n\t\tlet line = d3.line()\r\n\t\t\t.defined((d) => d.amt !== 'null')\r\n\t\t\t.curve(thisCurve)\r\n\t\t\t.x((d) => x(d.name))\r\n\t\t\t.y((d) => y(d.amt));\r\n\r\n\t\tlet line_values = Object.entries(lines).filter(d => d[0] == config.essential.line_series);\r\n\r\n\t\tsvg.append('g')\r\n\t\t\t.selectAll('path')\r\n\t\t\t.data(line_values)\r\n\t\t\t.enter()\r\n\t\t\t.append('path')\r\n\t\t\t.attr(\"stroke\", (d, i) => config.essential.line_colour)\r\n\t\t\t.attr(\"class\", \"dataLine\")\r\n\t\t\t.attr('d', (d) =>\r\n\t\t\t\tline(d[1]))\r\n\t\t\t.attr(\"transform\", \"translate(\" + x.bandwidth() / 2 + \",0)\");\r\n\r\n\t\t// This does the chart title label\r\n\t\tsvg\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(0, 0)')\r\n\t\t\t.append('text')\r\n\t\t\t.attr('x', 0)\r\n\t\t\t.attr('y', 0)\r\n\t\t\t.attr('dy', -30)\r\n\t\t\t.attr('class', 'title')\r\n\t\t\t.text(data[0].series)\r\n\t\t\t.attr('text-anchor', 'start')\r\n\t\t\t.call(wrap, chart_width);\r\n\r\n\r\n\t\t// This does the y-axis label\r\n\t\tsvg\r\n\t\t\t.append('g')\r\n\t\t\t.attr('transform', 'translate(0,0)')\r\n\t\t\t.append('text')\r\n\t\t\t.attr('x', 5 - margin.left)\r\n\t\t\t.attr('y', -10)\r\n\t\t\t.attr('class', 'axis--label')\r\n\t\t\t.text(() => chartIndex % chartEvery == 0 ? config.essential.yAxisLabel : \"\")\r\n\t\t\t.attr('text-anchor', 'start');\r\n\t};\r\n\r\n\t// Draw the charts for each small multiple\r\n\tchartContainers.each(function ([key, value], i) {\r\n\t\tdrawChart(d3.select(this), value, i);\r\n\t});\r\n\r\n\td3.select('#legend')\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--item line')\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--icon--refline')\r\n\t\t.style('background-color', config.essential.line_colour);\r\n\r\n\td3.select('.legend--item.line')\r\n\t\t.append('div')\r\n\t\t.attr('class', 'legend--text')\r\n\t\t.text(config.essential.line_series)\r\n\r\n\t//create link to source\r\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\r\n\r\n\t//use pym to calculate chart dimensions\r\n\tif (pymChild) {\r\n\t\tpymChild.sendHeight();\r\n\t}\r\n}\r\n\r\nfunction wrap(text, width) {\r\n\ttext.each(function () {\r\n\t\tlet text = d3.select(this),\r\n\t\t\twords = text.text().split(/\\s+/).reverse(),\r\n\t\t\tword,\r\n\t\t\tline = [],\r\n\t\t\tlineNumber = 0,\r\n\t\t\tlineHeight = 1.1, // ems\r\n\t\t\t// y = text.attr(\"y\"),\r\n\t\t\tx = text.attr('x'),\r\n\t\t\tdy = parseFloat(text.attr('dy')),\r\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\r\n\t\twhile ((word = words.pop())) {\r\n\t\t\tline.push(word);\r\n\t\t\ttspan.text(line.join(' '));\r\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\r\n\t\t\t\tline.pop();\r\n\t\t\t\ttspan.text(line.join(' '));\r\n\t\t\t\tline = [word];\r\n\t\t\t\ttspan = text\r\n\t\t\t\t\t.append('tspan')\r\n\t\t\t\t\t.attr('x', x)\r\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\r\n\t\t\t\t\t.text(word);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet breaks = text.selectAll('tspan').size();\r\n\t\ttext.attr('y', function () {\r\n\t\t\treturn -6 * (breaks - 1);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nd3.csv(config.essential.graphic_data_url).then((data) => {\r\n\t//load chart data\r\n\tgraphic_data = data;\r\n\r\n\tlet parseTime = d3.timeParse(config.essential.dateFormat);\r\n\r\n\tdata.forEach((d, i) => {\r\n\r\n\t\t//If the date column is has date data store it as dates\r\n\t\tif (parseTime(data[i].date) !== null) {\r\n\t\t\td.date = parseTime(d.date)\r\n\t\t}\r\n\r\n\t});\r\n\r\n\t//use pym to create iframed chart dependent on specified variables\r\n\tpymChild = new pym.Child({\r\n\t\trenderCallback: drawGraphic\r\n\t});\r\n});\r\n",
            "data_csv": "date,series,Category 1,Category 2,Category 3,Category 4 with a long name,Category 5\r\nJan-20,series1,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268\r\nFeb-20,series1,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155\r\nMar-20,series1,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462\r\nApr-20,series1,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495\r\nMay-20,series1,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893\r\nJun-20,series1,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361\r\nJul-20,series1,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727\r\nAug-20,series1,24.56805884,89.47462279,49.36685439,50.05168647,65.708543\r\nSep-20,series1,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682\r\nOct-20,series1,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289\r\nJan-20,series2,0.933950623,9.624031575,72.95935918,6.77595291,28.53102882\r\nFeb-20,series2,42.67837059,46.59217919,67.77733609,8.925781009,1.795089023\r\nMar-20,series2,47.00071225,9.037706465,10.9849663,0.452189724,20.59393944\r\nApr-20,series2,24.20432653,59.86689017,42.15415468,72.6617888,31.66840009\r\nMay-20,series2,41.54685317,23.16632079,2.389611457,4.813825608,12.61856841\r\nJun-20,series2,3.798081223,45.01552316,1.591733076,42.1961274,5.81108836\r\nJul-20,series2,56.69771887,25.70328174,31.2276681,4.687134985,23.4460375\r\nAug-20,series2,2.291284423,20.75322693,45.39235296,32.55708764,31.58368269\r\nSep-20,series2,8.979986448,11.44169148,40.6953067,33.53376474,1.417492362\r\nOct-20,series2,14.49825282,18.73452297,9.162783215,80.32986673,6.273620969\r\nJan-20,series3,87.72957303,78.20844009,73.61438423,71.32424048,79.91439476\r\nFeb-20,series3,58.16540724,32.99819999,9.856849706,97.34373835,79.99683494\r\nMar-20,series3,8.772748019,40.13236012,92.61020539,33.55972913,77.76240631\r\nApr-20,series3,73.95082667,61.47976532,30.56231134,9.679967748,56.50124322\r\nMay-20,series3,72.50402495,56.47240048,94.8410951,44.48195369,10.88876233\r\nJun-20,series3,54.39548057,12.38889185,93.59330285,73.79213895,21.36077763\r\nJul-20,series3,38.83710414,19.76902548,41.46335831,5.805762559,71.14340522\r\nAug-20,series3,3.418394354,94.12353895,46.79323662,49.58736749,99.44353072\r\nSep-20,series3,70.22092796,56.52766708,18.36433592,13.47723194,86.93400296\r\nOct-20,series3,68.36646707,53.41870414,87.80039611,88.98978628,12.66577263\r\nJan-20,series4,13.46519787,57.03145807,89.4723652,25.4734746,64.31632125\r\nFeb-20,series4,97.75793294,10.90663142,64.13005332,79.10043408,97.75434054\r\nMar-20,series4,67.45128621,23.08017243,64.4892647,78.80150895,8.03937043\r\nApr-20,series4,27.47475335,43.02540187,25.78801009,86.70448892,21.11512093\r\nMay-20,series4,11.57834567,82.57230791,77.34477933,79.81166212,10.9685112\r\nJun-20,series4,95.83571673,48.28154456,84.4705485,90.31647127,1.451346358\r\nJul-20,series4,82.09708714,98.10893307,79.22420574,47.50524785,86.11139071\r\nAug-20,series4,5.29225365,91.58355761,51.62819774,88.4223957,66.89798742\r\nSep-20,series4,96.14198802,93.32172592,93.58391111,19.84140874,83.39377318\r\nOct-20,series4,53.9721427,68.97760975,51.39568127,53.4496707,79.33609547\r\n",
            "comparison_csv": null
        },
        "column-chart-with-ci-sm": {
            "script_js": "let graphic = d3.select('#graphic');\nlet pymChild = null;\nlet legend = d3.select('#legend');\n\nfunction drawGraphic() {\n\n  //population accessible summmary\n  d3.select('#accessibleSummary').html(config.essential.accessibleSummary)\n\n  let threshold_md = config.optional.mediumBreakpoint;\n  let threshold_sm = config.optional.mobileBreakpoint;\n  let colour = d3.scaleOrdinal(config.essential.colour_palette); //\n\n\n\n  //set variables for chart dimensions dependent on width of #graphic\n  if (parseInt(graphic.style(\"width\")) < threshold_sm) {\n    size = \"sm\"\n  } else if (parseInt(graphic.style(\"width\")) < threshold_md) {\n    size = \"md\"\n  } else {\n    size = \"lg\"\n  }\n\n  const chartEvery = config.optional.chartEvery[size];\n\n\n  // clear out existing graphics\n  graphic.selectAll(\"*\").remove();\n  legend.selectAll(\"*\").remove();\n\n\n  // let legenditem = d3\n  //   .select('#legend')\n  //   .selectAll('div.legend-item')\n  //   .data(legendGroups)\n  //   .enter()\n  //   .append('div')\n  //   .attr('class', 'legend--item');\n\n  // legenditem\n  //   .append('div')\n  //   .attr('class', 'legend--icon--circle')\n  //   .style('background-color', (d) => colour(d));\n\n  // legenditem\n  //   .append('div')\n  //   .append('p')\n  //   .attr('class', 'legend--text')\n  //   .html((d) => d);\n\n\n  //lets also try a new smallmultiple version here which will group data on the basis of plot\n  grouped_data = d3.group(graphic_data, d => d.plot)\n\n  let xDataType;\n\n  if (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n    xDataType = 'date';\n  } else {\n    xDataType = 'numeric';\n  }\n\n  // console.log(xDataType)\n\n  // console.log(Array.from(grouped_data))\n\n  // Create a container div for each small multiple\n  var chartContainers = graphic\n    .selectAll('.chart-container')\n    .data(Array.from(grouped_data))\n    .join('div')\n    .attr('class', 'chart-container');\n\n  function drawChart(container, data, chartIndex) {\n\n    function calculateChartWidth(size) {\n      const chartEvery = config.optional.chartEvery[size];\n      const chartMargin = config.optional.margin[size];\n\n      if (config.optional.dropYAxis) {\n        // Chart width calculation allowing for 10px left margin between the charts\n        const chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * 10)) / chartEvery) - chartMargin.right;\n        return chartWidth;\n      } else {\n        const chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n        return chartWidth;\n      }\n\n\n    }\n\n    let chartsPerRow = chartEvery;\n    let chartPosition = chartIndex % chartsPerRow;\n\n    let margin = { ...config.optional.margin[size] };\n\n    if (config.optional.dropYAxis) {\n      // If the chart is not in the first position in the row, reduce the left margin\n      if (chartPosition !== 0) {\n        margin.left = 10;\n      }\n    }\n\n\n    let chart_width = calculateChartWidth(size)\n    let height = 400 - margin.top - margin.bottom;\n\n    const x = d3\n      .scaleBand()\n      .paddingOuter(0.0)\n      .paddingInner(0.1)\n      .range([0, chart_width])\n      .round(false);\n\n    //use the data to find unique entries in the date column\n    x.domain([...new Set(graphic_data.map((d) => d.date))]);\n\n    // console.log(\"x\", d3.extent(graphic_data, (d) => +d.date))\n\n    const y = d3.scaleLinear()\n      .range([height, 0])\n\n    //create svg for chart\n    svg = container\n      .append('svg')\n      .attr(\"width\", chart_width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .attr(\"class\", \"chart\")\n      .style(\"background-color\", \"#fff\")\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + (margin.top) + \")\")\n\n    // console.log(grouped_data)\n\n    // both of these are need to be looked at.\n    if (config.essential.yDomain == \"auto\") {\n      if (d3.min(graphic_data.map(({ lowerCI }) => Number(lowerCI))) >= 0) {\n        y.domain([\n          0,\n          d3.max(graphic_data.map(({ upperCI }) => Number(upperCI)))]); //modified so it converts string to number\n        } else {\n          y.domain([d3.min(graphic_data, function (d) { return d.lowerCI }), d3.max(graphic_data, function (d) { return d.upperCI })])\n        }\n\n    } else {\n      y.domain(config.essential.yDomain)\n    }\n\n    svg\n      .append('g')\n      .attr('class', 'x axis')\n      .attr('transform', `translate(0,${height})`)\n      .call(\n        d3.axisBottom(x)\n          .ticks(config.optional.xAxisTicks[size])\n          .tickSize(-height)\n          .tickPadding(10)\n          .tickFormat((d) => xDataType == 'date' ? d3.timeFormat(config.essential.xAxisFormat)(d)\n            : d3.format(config.essential.xAxisNumberFormat)(d)))\n\n    svg.selectAll('g.x.axis')\n      .selectAll('text')\n      .call(wrap, x.bandwidth());\n\n\n    //Add the y-axis to the leftmost chart, or all charts if dropYAxis in the config is false\n    svg\n      .append('g')\n      .attr('class', 'axis numeric')\n      .call(\n        d3.axisLeft(y)\n          .ticks(config.optional.yAxisTicks[size])\n          .tickSize(-chart_width)\n          .tickPadding(10)\n          .tickFormat((d) => config.optional.dropYAxis !== true ? d3.format(config.essential.yAxisTickFormat)(d) :\n            chartPosition == 0 ? d3.format(config.essential.yAxisTickFormat)(d) : \"\")\n      );\n\n\n\n    //add columns to the plot\n    svg.selectAll('rect')\n      .data(data)\n      .join('rect')\n      .attr('x', (d) => x(d.date))\n\t\t\t.attr('y', (d) => y(Math.max(d.yvalue, 0)))\n\t\t\t.attr('height', (d) => Math.abs(y(d.yvalue) - y(0)))\n      .attr('width', x.bandwidth())\n      // .attr('r', config.essential.radius)\n      .attr(\"fill\", (d) => colour(d.group)) // This adds the colour to the circles based on the group\n      .attr('fill-opacity', config.essential.fillOpacity)\n      .attr('stroke', (d) => colour(d.group))\n      .attr('stroke-opacity', config.essential.strokeOpacity);\n\n\n    //adding ci's to each of the charts.\n    svg.append('g')\n      .selectAll('line')\n      .data((d) => d[1])\n      .join('line')\n      .attr('x1', d => x(d.date) + x.bandwidth() / 2)\n      .attr('y1', d => y(d.lowerCI))\n      .attr('x2', d => x(d.date) + x.bandwidth() / 2)\n      .attr('y2', d => y(d.upperCI))\n      .attr(\"stroke\", '#222')\n      .attr('stroke-width', '2px')\n\n\n    let capWidth = 10;\n\n    svg.append('g')\n      .selectAll('line.lower')\n      .data((d) => d[1])\n      .join('line')\n      .attr('class', 'lower')\n      .attr('x1', d => x(d.date) + x.bandwidth() / 2 - capWidth / 2)\n      .attr('y1', d => y(d.lowerCI))\n      .attr('x2', d => x(d.date) + x.bandwidth() / 2 + capWidth / 2)\n      .attr('y2', d => y(d.lowerCI))\n      .attr(\"stroke\", '#222')\n      .attr('stroke-width', '2px')\n\n\n    svg.append('g')\n      .selectAll('line.upper')\n      .data((d) => d[1])\n      .join('line')\n      .attr('class', 'upper')\n      .attr('x1', d => x(d.date) + x.bandwidth() / 2 - capWidth / 2)\n      .attr('y1', d => y(d.upperCI))\n      .attr('x2', d => x(d.date) + x.bandwidth() / 2 + capWidth / 2)\n      .attr('y2', d => y(d.upperCI))\n      .attr(\"stroke\", '#222')\n      .attr('stroke-width', '2px')\n\n\n    // This does the chart title label\n    svg\n      .append('g')\n      .attr('transform', 'translate(0, 0)')\n      .append('text')\n      .attr('x', 0)\n      .attr('y', 0)\n      .attr('dy', 5 - margin.top)\n      .attr('class', 'title')\n      .text(d => d[0])\n      .attr('text-anchor', 'start')\n      .call(wrap, chart_width);\n\n    // This does the x-axis label\n    svg\n      .append('g')\n      .attr('transform', 'translate(0,' + height + ')')\n      .append('text')\n      .attr('x', chart_width)\n      .attr('y', margin.bottom)\n      .attr('class', 'axis--label')\n      .text(() => chartIndex % chartEvery == chartEvery - 1 ?\n        config.essential.xAxisLabel : \"\")\n      .attr('text-anchor', 'end')\n    // .call(wrap, chart_width);\n\n    // This does the y-axis label\n    svg\n      .append('g')\n      .attr('transform', 'translate(0,0)')\n      .append('text')\n\t\t\t.attr('x', 5 - margin.left)\n\t\t\t.attr('y', -10)\n      .attr('class', 'axis--label')\n      .text(() => chartPosition == 0 ? config.essential.yAxisLabel : \"\")\n      .attr('text-anchor', 'start');\n\n\n\n  }// End drawChart\n\n\n\n  // Draw the charts for each small multiple\n  chartContainers.each(function ([key, value], i) {\n    drawChart(d3.select(this), value, i);\n  });\n\n\n\n  //create link to source\n  d3.select(\"#source\")\n    .text(\"Source: \" + config.essential.sourceText)\n\n\n  //use pym to calculate chart dimensions\n  if (pymChild) {\n    pymChild.sendHeight();\n  }\n}\n\nfunction wrap(text, width) {\n  // console.log(width)\n  text.each(function () {\n    let text = d3.select(this),\n      words = text.text().split(/\\s+/).reverse(),\n      word,\n      line = [],\n      lineNumber = 0,\n      lineHeight = 1.1, // ems\n      // y = text.attr(\"y\"),\n      x = text.attr(\"x\"),\n      dy = parseFloat(text.attr(\"dy\")),\n      tspan = text.text(null).append(\"tspan\").attr('x', x);\n    if (x == undefined) { x = 0 }\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").attr('x', x).attr(\"dy\", lineHeight + \"em\").text(word);\n      }\n    }\n    let breaks = text.selectAll(\"tspan\").size();\n    text.attr(\"y\", function () { return 10 - 6 * (breaks - 1); });\n  });\n\n}\n\n//load data \nd3.csv(config.essential.graphic_data_url)\n  .then((data) => {\n\n    let parseTime = d3.timeParse(config.essential.dateFormat);\n    //load chart data\n    graphic_data = data;\n\n    data.forEach((d, i) => {\n\n      //If the date column is has date data store it as dates\n      if (parseTime(data[i].date) !== null) {\n        d.date = parseTime(d.date)\n      }\n      // console.log(data[i].date)\n    });\n\n    //use pym to create iframed chart dependent on specified variables\n    pymChild = new pym.Child({\n      renderCallback: drawGraphic\n    });\n  });\n",
            "config_js": "config = {\n  \"essential\": {\n    \"graphic_data_url\": \"data.csv\",\n    \"colour_palette\": [\"#27A0CC\", \"#206095\", \"#871A5B\", \"#A8BD3A\", \"#F66068\", \"#003C57\"],\n    \"fillOpacity\": 1,\n    \"strokeOpacity\": 1,\n    \"dateFormat\": \"%d/%m/%Y\",\n    \"sourceText\": \"Office for National Statistics\",\n    \"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n    \"xDomain\": \"auto\",\n    \"yDomain\": \"auto\",\n    // either \"auto\" or an array for the x domain e.g. [0,100]\n    \"xAxisLabel\": \"x axis label\",\n    \"yAxisLabel\": \"y axis label\",\n    \"xAxisFormat\": \"%b %Y\",\n    \"xAxisNumberFormat\": \".0f\",\n    \"yAxisTickFormat\": \".0%\"\n  },\n  \"optional\": {\n    \"chartEvery\": {\n      \"sm\": 1,\n      \"md\": 1,\n      \"lg\": 2\n    },\n    \"margin\": {\n      \"sm\": {\n        \"top\": 50,\n        \"right\": 20,\n        \"bottom\": 50,\n        \"left\": 50\n      },\n      \"md\": {\n        \"top\": 50,\n        \"right\": 20,\n        \"bottom\": 50,\n        \"left\": 50\n      },\n      \"lg\": {\n        \"top\": 50,\n        \"right\": 10,\n        \"bottom\": 50,\n        \"left\": 50\n      }\n    },\n    \"xAxisTicks\": {\n      \"sm\": 4,\n      \"md\": 4,\n      \"lg\": 7\n    },\n    \"yAxisTicks\": {\n      \"sm\": 4,\n      \"md\": 4,\n      \"lg\": 10\n    },\n    \"mobileBreakpoint\": 510,\n    \"mediumBreakpoint\": 600,\n    \"dropYAxis\": true\n  },\n  \"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n  \"chart_build\": {}\n};\n",
            "chart_css": ".grid line {\n  stroke: #ccc;\n  stroke-opacity: 0.7;\n}\n\n.grid .tick {\n  stroke: lightgrey;\n  stroke-opacity: 0.7;\n  shape-rendering: crispEdges;\n}\n\n.grid path {\n  stroke-width: 0;\n}\n\n.chart-container {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.chart-container:last-child {\n  margin-right: 0;\n}\n\n.title {\n  font-weight: 600;\n  fill: #414042;\n}",
            "data_csv": "date,plot,group,yvalue,lowerCI,upperCI\n30/04/2023,series1,group1,0.9,0.762140582,0.91544367\n01/05/2023,series1,group1,0.986,0.953756323,1.113716766\n02/05/2023,series1,group1,0.4,0.252092563,0.469616388\n03/05/2023,series1,group1,0.2,0.07675212,0.269448362\n04/05/2023,series1,group1,-0.16,-0.463193732,-0.0755478832\n05/05/2023,series1,group1,0.4,0.394911927,0.522593444\n06/05/2023,series1,group1,0.15,0.021105974,0.349661967\n30/04/2023,series2,group1,0.9,0.806077985,1.036773339\n01/05/2023,series2,group1,0.986,0.914420714,1.054011192\n02/05/2023,series2,group1,0.4,0.229932036,0.459549418\n03/05/2023,series2,group1,0.2,0.188541358,0.292497468\n04/05/2023,series2,group1,0.6,0.479429245,0.659173911\n05/05/2023,series2,group1,0.4,0.273715149,0.400069653\n06/05/2023,series2,group1,0.15,0.005229229,0.156457096",
            "comparison_csv": null
        },
        "comet-plot": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"legendLabels\": { \"min\": \"2011\", \"max\": \"2021\" },\n\t\t//the keys match the column names\n\t\t\"colour_palette\": [\"#206095\", \"#F66068\", \"#A09FA0\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\":\n\t\t\t\"Here is the screenreader text describing the chart.\",\n\t\t\"numberFormat\": \".0f\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"xDomain\": [0, 100],\n\t\t// either auto or a custom domain as an array e.g [0,100]\n\t\t\"dotsize\": 6,\n\t\t\"legendItems\": [\"Inc\",\"Dec\",\"No\"],\n\t\t//Choose which items to include in the legend, and the order that they appear\n\t\t\"legendLineLength\": 60,\n\t\t\"legendItemWidth\": 150,\n\t\t\"showDataLabels\": true\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 5,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 20,\n\t\t\t\t\"left\": 100\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 5,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 20,\n\t\t\t\t\"left\": 100\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 5,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 40,\n\t\t\t\t\"left\": 100\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 40,\n\t\t\t\"md\": 40,\n\t\t\t\"lg\": 40\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"legendHeight\": {\n\t\t\t\"sm\": 40,\n\t\t\t\"md\": 40,\n\t\t\t\"lg\": 40\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\n\tgroups = d3.groups(graphic_data, (d) => d.group);\n\n\tif (config.essential.xDomain == 'auto') {\n\t\tlet min = 1000000;\n\t\tlet max = 0;\n\t\tfor (i = 2; i < graphic_data.columns.length; i++) {\n\t\t\tmin = d3.min([\n\t\t\t\tmin,\n\t\t\t\td3.min(graphic_data, (d) => +d[graphic_data.columns[i]])\n\t\t\t]);\n\t\t\tmax = d3.max([\n\t\t\t\tmax,\n\t\t\t\td3.max(graphic_data, (d) => +d[graphic_data.columns[i]])\n\t\t\t]);\n\t\t}\n\t\txDomain = [min, max];\n\t} else {\n\t\txDomain = config.essential.xDomain;\n\t}\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]).domain(xDomain);\n\n\tconst colour = d3\n\t\t.scaleOrdinal()\n\t\t.range(config.essential.colour_palette)\n\t\t.domain(Object.keys(config.essential.legendLabels));\n\n\t// create the y scale in groups\n\tgroups.map(function (d) {\n\t\t//height\n\t\td[2] = config.optional.seriesHeight[size] * d[1].length;\n\n\t\t// y scale\n\t\td[3] = d3\n\t\t\t.scalePoint()\n\t\t\t.padding(0.5)\n\t\t\t.range([0, d[2]])\n\t\t\t.domain(d[1].map((d) => d.name));\n\t\t//y axis generator\n\t\td[4] = d3.axisLeft(d[3]).tickSize(0).tickPadding(10);\n\t});\n\n\t//set up xAxis generator\n\tlet xAxis = d3.axisBottom(x).ticks(config.optional.xAxisTicks[size]);\n\n\tdivs = graphic.selectAll('div.categoryLabels').data(groups).join('div');\n\n\tdivs\n\t\t.append('p')\n\t\t.attr('class', 'groupLabels')\n\t\t.html((d) => d[0]);\n\n\tsvgs = divs\n\t\t.append('svg')\n\t\t.attr('class', 'chart')\n\t\t.attr('height', (d) => d[2] + margin.top + margin.bottom)\n\t\t.attr('width', chart_width + margin.left + margin.right);\n\n\tcharts = svgs\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tcharts.each(function (d) {\n\t\td3.select(this)\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis')\n\t\t\t.call(d[4])\n\t\t\t.selectAll('text')\n\t\t\t.call(wrap, margin.left - 10);\n\n\t\td3.select(this)\n\t\t\t.append('g')\n\t\t\t.attr('transform', (d) => 'translate(0,' + d[2] + ')')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.each(function () {\n\t\t\t\td3.select(this)\n\t\t\t\t\t.call(xAxis.tickSize(-d[2]))\n\t\t\t\t\t.selectAll('line')\n\t\t\t\t\t.each(function (e) {\n\t\t\t\t\t\tif (e == 0) {\n\t\t\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\tcharts\n\t\t.selectAll('line.between')\n\t\t.data((d) => d[1])\n\t\t.join('line')\n\t\t.attr('class', 'between')\n\t\t.attr('x1', (d) => x(d.min))\n\t\t.attr('x2', (d) => x(d.max))\n\t\t.attr('y1', (d, i) => groups.filter((e) => e[0] == d.group)[0][3](d.name))\n\t\t.attr('y2', (d, i) => groups.filter((e) => e[0] == d.group)[0][3](d.name))\n\t\t.attr('stroke', (d) =>\n\t\t\t+d.min > +d.max\n\t\t\t\t? config.essential.colour_palette[1]\n\t\t\t\t: +d.min < +d.max\n\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t: config.essential.colour_palette[2]\n\t\t)\n\t\t.attr('stroke-width', '3px');\n\n\t//   charts.selectAll('circle.min')\n\t//     .data(d => d[1])\n\t//     .join('circle')\n\t//     .attr('class', 'min')\n\t//     .attr('cx', d => x(d.min))\n\t//     .attr('cy', d => groups.filter(f => f[0] == d.group)[0][3](d.name))\n\t//     .attr('r', 6)\n\t//     .attr('fill', colour('min'))\n\n\tcharts\n\t\t.selectAll('circle.max')\n\t\t.data((d) => d[1])\n\t\t.join('circle')\n\t\t.attr('class', 'max')\n\t\t.attr('cx', (d) => x(d.max))\n\t\t.attr('cy', (d) => groups.filter((f) => f[0] == d.group)[0][3](d.name))\n\t\t.attr('r', config.essential.dotsize)\n\t\t.attr('fill', (d) =>\n\t\t\t+d.min > +d.max\n\t\t\t\t? config.essential.colour_palette[1]\n\t\t\t\t: +d.min < +d.max\n\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t: config.essential.colour_palette[2]\n\t\t);\n\n\tif (config.essential.showDataLabels == true) {\n\t\tcharts\n\t\t\t.selectAll('text.min')\n\t\t\t.data((d) => d[1])\n\t\t\t.join('text')\n\t\t\t.attr('class', 'dataLabels')\n\t\t\t.attr('x', (d) => x(d.min))\n\t\t\t.attr('y', (d) => groups.filter((f) => f[0] == d.group)[0][3](d.name))\n\t\t\t.text((d) => d3.format(config.essential.numberFormat)(d.min))\n\t\t\t.attr('fill', (d) =>\n\t\t\t\t+d.min > +d.max\n\t\t\t\t\t? config.essential.colour_palette[1]\n\t\t\t\t\t: +d.min < +d.max\n\t\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t\t: 'none'\n\t\t\t)\n\t\t\t.attr('dy', 6)\n\t\t\t.attr('dx', (d) => (+d.min < +d.max ? -5 : 5))\n\t\t\t.attr('text-anchor', (d) => (+d.min < +d.max ? 'end' : 'start'));\n\n\t\tcharts\n\t\t\t.selectAll('text.max')\n\t\t\t.data((d) => d[1])\n\t\t\t.join('text')\n\t\t\t.attr('class', 'dataLabels')\n\t\t\t.attr('x', (d) => x(d.max))\n\t\t\t.attr('y', (d) => groups.filter((f) => f[0] == d.group)[0][3](d.name))\n\t\t\t.text((d) => d3.format(config.essential.numberFormat)(d.max))\n\t\t\t.attr('fill', (d) =>\n\t\t\t\t+d.min > +d.max\n\t\t\t\t\t? config.essential.colour_palette[1]\n\t\t\t\t\t: +d.min < +d.max\n\t\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t\t: config.essential.colour_palette[2]\n\t\t\t)\n\t\t\t.attr('dy', 6)\n\t\t\t.attr('dx', (d) =>\n\t\t\t\t+d.min > +d.max\n\t\t\t\t\t? -(config.essential.dotsize + 5)\n\t\t\t\t\t: config.essential.dotsize + 5\n\t\t\t)\n\t\t\t.attr('text-anchor', (d) => (+d.min > +d.max ? 'end' : 'start'));\n\t}\n\n\t// This does the x-axis label\n\tcharts.each(function (d, i) {\n\t\tif (i == groups.length - 1) {\n\t\t\td3.select(this)\n\t\t\t\t.append('text')\n\t\t\t\t.attr('x', chart_width)\n\t\t\t\t.attr('y', (d) => d[2] + 35)\n\t\t\t\t.attr('class', 'axis--label')\n\t\t\t\t.text(config.essential.xAxisLabel)\n\t\t\t\t.attr('text-anchor', 'end');\n\t\t}\n\t});\n\n\t// // Set up the legend\n\tlet legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(config.essential.legendItems)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', (d) => 'legend--item ' + [d]);\n\n\tdrawLegend();\n\n\tfunction drawLegend() {\n\t\tvar_group = d3\n\t\t\t.select('#legend')\n\t\t\t.selectAll('div.legend--item.Inc')\n\t\t\t.append('svg')\n\t\t\t.attr('height', config.optional.legendHeight[size])\n\t\t\t.attr('width', config.essential.legendItemWidth);\n\t\tvar_group2 = d3\n\t\t\t.select('#legend')\n\t\t\t.selectAll('div.legend--item.Dec')\n\t\t\t.append('svg')\n\t\t\t.attr('height', config.optional.legendHeight[size])\n\t\t\t.attr('width', config.essential.legendItemWidth);\n\t\tvar_group3 = d3\n\t\t\t.select('#legend')\n\t\t\t.selectAll('div.legend--item.No')\n\t\t\t.append('svg')\n\t\t\t.attr('height', config.optional.legendHeight[size])\n\t\t\t.attr('width', config.essential.legendItemWidth);\n\n\t\t//Increase legend item\n\t\tvar_group\n\t\t\t.append('text')\n\t\t\t.attr('y', 30)\n\t\t\t.attr('x', 0)\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.attr('class', 'mintext legendLabel')\n\t\t\t.attr('fill', config.essential.colour_palette[0])\n\t\t\t.text(config.essential.legendLabels.min);\n\n\t\t//this measures how wide the \"min\" value is so that we can place the legend items responsively\n\t\tlet minTextWidth = d3.select('text.mintext').node().getBBox().width + 5;\n\n\t\tvar_group\n\t\t\t.append('line')\n\t\t\t.attr('stroke', config.essential.colour_palette[0])\n\t\t\t.attr('stroke-width', '3px')\n\t\t\t.attr('y1', 26)\n\t\t\t.attr('y2', 26)\n\t\t\t.attr('x1', minTextWidth)\n\t\t\t.attr('x2', minTextWidth + config.essential.legendLineLength);\n\n\t\tvar_group\n\t\t\t.append('circle')\n\t\t\t.attr('r', config.essential.dotsize)\n\t\t\t.attr('fill', config.essential.colour_palette[0])\n\t\t\t.attr('cx', minTextWidth + config.essential.legendLineLength)\n\t\t\t.attr('cy', 26);\n\n\t\tvar_group\n\t\t\t.append('text')\n\t\t\t.attr('y', 30)\n\t\t\t.attr(\n\t\t\t\t'x',\n\t\t\t\tminTextWidth +\n\t\t\t\t\tconfig.essential.legendLineLength +\n\t\t\t\t\tconfig.essential.dotsize +\n\t\t\t\t\t5\n\t\t\t)\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.attr('class', 'maxtext legendLabel')\n\t\t\t.attr('fill', config.essential.colour_palette[0])\n\t\t\t.text(config.essential.legendLabels.max);\n\n\t\t//this measures how wide the \"max\" value is so that we can place the legend items responsively\n\t\tlet maxTextWidth = d3.select('text.maxtext').node().getBBox().width + 5;\n\n\t\tvar_group\n\t\t\t.append('text')\n\t\t\t.attr('y', 15)\n\t\t\t.attr(\n\t\t\t\t'x',\n\t\t\t\t(minTextWidth +\n\t\t\t\t\tconfig.essential.legendLineLength +\n\t\t\t\t\tconfig.essential.dotsize +\n\t\t\t\t\tmaxTextWidth) /\n\t\t\t\t\t2\n\t\t\t)\n\t\t\t.attr('text-anchor', 'middle')\n\t\t\t.attr('class', 'legendLabel')\n\t\t\t.attr('fill', config.essential.colour_palette[0])\n\t\t\t.text('Increase');\n\n\t\t//Decrease legend item\n\t\tvar_group2\n\t\t\t.append('line')\n\t\t\t.attr('stroke', config.essential.colour_palette[1])\n\t\t\t.attr('stroke-width', '3px')\n\t\t\t.attr('y1', 26)\n\t\t\t.attr('y2', 26)\n\t\t\t.attr('x1', maxTextWidth + config.essential.dotsize)\n\t\t\t.attr(\n\t\t\t\t'x2',\n\t\t\t\tmaxTextWidth +\n\t\t\t\t\tconfig.essential.dotsize +\n\t\t\t\t\tconfig.essential.legendLineLength\n\t\t\t);\n\n\t\tvar_group2\n\t\t\t.append('circle')\n\t\t\t.attr('r', config.essential.dotsize)\n\t\t\t.attr('fill', config.essential.colour_palette[1])\n\t\t\t.attr('cx', maxTextWidth + config.essential.dotsize)\n\t\t\t.attr('cy', 26);\n\n\t\tvar_group2\n\t\t\t.append('text')\n\t\t\t.attr('y', 30)\n\t\t\t.attr('x', 0)\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.attr('class', 'legendLabel')\n\t\t\t.attr('fill', config.essential.colour_palette[1])\n\t\t\t.text(config.essential.legendLabels.max);\n\n\t\tvar_group2\n\t\t\t.append('text')\n\t\t\t.attr('y', 30)\n\t\t\t.attr(\n\t\t\t\t'x',\n\t\t\t\tmaxTextWidth +\n\t\t\t\t\tconfig.essential.legendLineLength +\n\t\t\t\t\tconfig.essential.dotsize +\n\t\t\t\t\t5\n\t\t\t)\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.attr('class', 'legendLabel')\n\t\t\t.attr('fill', config.essential.colour_palette[1])\n\t\t\t.text(config.essential.legendLabels.min);\n\n\t\tvar_group2\n\t\t\t.append('text')\n\t\t\t.attr('y', 15)\n\t\t\t.attr(\n\t\t\t\t'x',\n\t\t\t\t(maxTextWidth +\n\t\t\t\t\tconfig.essential.legendLineLength +\n\t\t\t\t\tconfig.essential.dotsize +\n\t\t\t\t\tminTextWidth) /\n\t\t\t\t\t2\n\t\t\t)\n\t\t\t.attr('text-anchor', 'middle')\n\t\t\t.attr('class', 'legendLabel')\n\t\t\t.attr('fill', config.essential.colour_palette[1])\n\t\t\t.text('Decrease');\n\n\t\t//No change legend item\n\t\tvar_group3\n\t\t\t.append('circle')\n\t\t\t.attr('r', config.essential.dotsize)\n\t\t\t.attr('fill', config.essential.colour_palette[2])\n\t\t\t.attr('cx', 10)\n\t\t\t.attr('cy', 26);\n\n\t\tvar_group3\n\t\t\t.append('text')\n\t\t\t.attr('y', 30)\n\t\t\t.attr('x', config.essential.dotsize + 15)\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.attr('class', 'legendLabel')\n\t\t\t.attr('fill', config.essential.colour_palette[2])\n\t\t\t.text('No change');\n\t} //End drawLegend\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": " \n  .dataLabels{\n    font-weight: 600;\n    font-size: 14px;\n  }\n  \n  p.groupLabels{\n    padding-top:15px;\n    font-weight: 600;\n  }\n\n  .legendLabel{\n    font-size: 14px;\n  }",
            "data_csv": "name,group,min,max\nEngland,Group name 1,44.79967469,65.51485629\nWales,Group name 1,19.5544272,86.4112192\nNorth East,Group name 2,21.04544788,55.54073662\nNorth West,Group name 2,39.13579896,51.13881403\nYorkshire and The Humber,Group name 2,30.57469086,95.726681\nEast Midlands,Group name 2,29.36591976,51.76293031\nWest Midlands,Group name 2,39.86949419,80.18516748\nEast,Group name 2,17.64884078,83.95086243\nLondon,Group name 2,43.91069538,57.87608769\nSouth West,Group name 2,64,64\nSouth East,Group name 2,8.973142806,61.1748033\nAnother name,Group name 3,65.58717189,24.79415817\nAnd another,Group name 3,80.32467139,42.56371279",
            "comparison_csv": null
        },
        "dot-plot": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"legendLabels\": [\"2015-2019\", \"2020\"],\n\t\t\"colour_palette\": [\"#A09FA0\", \"#206095\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\":\n\t\t\t\"CHere is the screenreader text describing the chart.\",\n\t\t\"xDomain\": \"auto\"\n\t\t// either auto or a custom domain as an array e.g [0,100]\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 20,\n\t\t\t\t\"left\": 100\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 20,\n\t\t\t\t\"left\": 100\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 20,\n\t\t\t\t\"left\": 100\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 40,\n\t\t\t\"md\": 40,\n\t\t\t\"lg\": 40\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "chart_css": "line.between{\n  stroke:#E5E6E7;\n  stroke-width:3px;\n}\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height\n\tlet height = config.optional.seriesHeight[size] * graphic_data.length;\n\n\t//set up scales\n\tlet x = d3.scaleLinear().range([0, chart_width]);\n\n\tlet y = d3.scalePoint().padding(0.5).range([0, height]);\n\n\t//use the data to find unique entries in the name column\n\ty.domain(graphic_data.map((d) => d.name));\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y).tickSize(-chart_width).tickPadding(10);\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t// Set up the legend\n\tlet legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(config.essential.legendLabels, config.essential.colour_palette)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tif (config.essential.xDomain == 'auto') {\n\t\tlet max = d3.max(graphic_data, function (d) {\n\t\t\treturn d3.max([+d.min, +d.max]);\n\t\t});\n\t\tx.domain([0, max]);\n\t} else {\n\t\tx.domain(config.essential.xDomain);\n\t}\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.attr('stroke-dasharray', '2 2')\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 5);\n\n\tsvg\n\t\t.selectAll('circle.min')\n\t\t.data(graphic_data)\n\t\t.enter()\n\t\t.append('circle')\n\t\t.attr('class', 'min')\n\t\t.attr('r', 6)\n\t\t.attr('fill', config.essential.colour_palette[0])\n\t\t.attr('cx', function (d) {\n\t\t\treturn x(d.min);\n\t\t})\n\t\t.attr('cy', function (d) {\n\t\t\treturn y(d.name);\n\t\t});\n\n\tsvg\n\t\t.selectAll('circle.max')\n\t\t.data(graphic_data)\n\t\t.enter()\n\t\t.append('circle')\n\t\t.attr('class', 'max')\n\t\t.attr('r', 6)\n\t\t.attr('fill', config.essential.colour_palette[1])\n\t\t.attr('cx', function (d) {\n\t\t\treturn x(d.max);\n\t\t})\n\t\t.attr('cy', function (d) {\n\t\t\treturn y(d.name);\n\t\t});\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "data_csv": "name,min,max\nHome,1.036438598,82.81832389\nHospital,67.79034467,97.15070027\nCare home,51.44576587,20.33129332\nOther long title for wrapping,30.69747402,83.59107712\n",
            "comparison_csv": null
        },
        "dot-plot-with-ci-sm": {
            "config_js": "config = {\n  \"essential\": {\n    \"graphic_data_url\": \"data.csv\",\n    \"colour_palette\": [\"#206095\", \"#3fb0b3\"],\n    \"fillOpacity\": 0.5,\n    \"strokeOpacity\": 1,\n    \"dateFormat\": \"%d/%m/%Y\",\n    \"radius\": \"4\",\n    \"sourceText\": \"Office for National Statistics\",\n    \"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n    \"xDomain\": \"auto\",\n    \"yDomain\": \"auto\",\n    // either \"auto\" or an array for the x domain e.g. [0,100]\n    \"xAxisLabel\": \"x axis label\",\n    \"yAxisLabel\": \"y axis label\",\n    \"xAxisFormat\": \"%d/%m/%y\",\n    \"xAxisNumberFormat\": \".0f\",\n    \"yAxisFormat\": \".0%\"\n  },\n  \"optional\": {\n    \"chartEvery\": {\n      \"sm\": 1,\n      \"md\": 1,\n      \"lg\": 2\n    },\n    \"margin\": {\n      \"sm\": {\n        \"top\": 50,\n        \"right\": 20,\n        \"bottom\": 50,\n        \"left\": 50\n      },\n      \"md\": {\n        \"top\": 50,\n        \"right\": 20,\n        \"bottom\": 50,\n        \"left\": 50\n      },\n      \"lg\": {\n        \"top\": 50,\n        \"right\": 50,\n        \"bottom\": 50,\n        \"left\": 50\n      }\n    },\n    \"xAxisTicks\": {\n      \"sm\": 4,\n      \"md\": 4,\n      \"lg\": 4\n    },\n    \"yAxisTicks\": {\n      \"sm\": 4,\n      \"md\": 4,\n      \"lg\": 10\n    },\n    \"mobileBreakpoint\": 510,\n    \"mediumBreakpoint\": 600,\n    \"dropYAxis\": true\n  },\n  \"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n  \"chart_build\": {}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n  //population accessible summmary\n  d3.select('#accessibleSummary').html(config.essential.accessibleSummary)\n\n  let threshold_md = config.optional.mediumBreakpoint;\n  let threshold_sm = config.optional.mobileBreakpoint;\n  let colour = d3.scaleOrdinal(config.essential.colour_palette); //\n\n\n\n  //set variables for chart dimensions dependent on width of #graphic\n  if (parseInt(graphic.style(\"width\")) < threshold_sm) {\n    size = \"sm\"\n  } else if (parseInt(graphic.style(\"width\")) < threshold_md) {\n    size = \"md\"\n  } else {\n    size = \"lg\"\n  }\n\n  const chartEvery = config.optional.chartEvery[size];\n\n  let margin = config.optional.margin[size]\n  let chart_width = (parseInt(graphic.style(\"width\")) / chartEvery) - margin.left - margin.right;\n  let height = 400 - margin.top - margin.bottom;\n\n  // lets move on to setting up the legend for this chart. \n  let legendGroups = [...new Set(graphic_data.map(item => item.group))]; // this will extract the unique groups from the data.csv\n\n\n\n  let legenditem = d3\n    .select('#legend')\n    .selectAll('div.legend-item')\n    .data(legendGroups)\n    .enter()\n    .append('div')\n    .attr('class', 'legend--item');\n\n  legenditem\n    .append('div')\n    .attr('class', 'legend--icon--circle')\n    .style('background-color', (d) => colour(d));\n\n  legenditem\n    .append('div')\n    .append('p')\n    .attr('class', 'legend--text')\n    .html((d) => d);\n\n\n  //group data on the basis of plot\n  grouped_data = d3.group(graphic_data, d => d.plot)\n\n  let plots = [...new Set(d3.map(graphic_data, d => d.plot))];\n\n  let xDataType;\n\n  if (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n    xDataType = 'date';\n  } else {\n    xDataType = 'numeric';\n  }\n\n  // console.log(xDataType)\n\n  //set up scales\n\n  let x;\n\n  if (xDataType == 'date') {\n    x = d3.scaleTime()\n      .domain(d3.extent(graphic_data, (d) => d.date))\n      .range([0, chart_width]);\n  } else {\n    x = d3.scaleLinear()\n      .domain(d3.extent(graphic_data, (d) => +d.date))\n      .range([0, chart_width]);\n  }\n\n\n  // console.log(\"x\",d3.extent(graphic_data, (d) => +d.date))\n\n  const y = d3.scaleLinear()\n    .range([height, 0])\n\n  //create svg for chart\n  svg = d3.select('#graphic')\n    .selectAll('div')\n    .data(grouped_data)\n    .enter()\n    .append('svg')\n    .attr(\"width\", chart_width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"class\", \"chart\")\n    .style(\"background-color\", \"#fff\")\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + (margin.top) + \")\")\n\n  // both of these are need to be looked at.\n\n  if (config.essential.yDomain == \"auto\") {\n    y.domain([0, d3.max(graphic_data, function (d) { return d.upperCI })]);\n  } else {\n    y.domain(config.essential.yDomain)\n  }\n\n  svg\n    .append('g')\n    .attr('class', 'x axis')\n    .attr('transform', `translate(0,${height})`)\n    .call(\n      d3.axisBottom(x)\n        .ticks(config.optional.xAxisTicks[size])\n        .tickSize(-height)\n        .tickPadding(10)\n        .tickFormat((d) => xDataType == 'date' ? d3.timeFormat(config.essential.xAxisFormat)(d)\n          : d3.format(config.essential.xAxisNumberFormat)(d)));\n\n\n  svg\n    .append('g')\n    .attr('class', 'axis numeric')\n    .call(\n      d3.axisLeft(y)\n        .ticks(config.optional.yAxisTicks[size])\n        .tickSize(-chart_width)\n        .tickPadding(10)\n        .tickFormat(d3.format(config.essential.yAxisFormat))\n    );\n\n\n  //adding ci's to each of the charts.\n\n  svg.append('g')\n    .selectAll('line')\n    .data((d) => d[1])\n    .join('line')\n    .attr('x1', d => x(d.date))\n    .attr('y1', d => y(d.lowerCI))\n    .attr('x2', d => x(d.date))\n    .attr('y2', d => y(d.upperCI))\n    .attr(\"stroke\", d => colour(d.group))\n    .attr('stroke-opacity')\n\n  let capWidth = 10;\n\n  svg.append('g')\n    .selectAll('line.lower')\n    .data((d) => d[1])\n    .join('line')\n    .attr('class', 'lower')\n    .attr('x1', d => x(d.date) - capWidth / 2)\n    .attr('y1', d => y(d.lowerCI))\n    .attr('x2', d => x(d.date) + capWidth / 2)\n    .attr('y2', d => y(d.lowerCI))\n    .attr(\"stroke\", d => colour(d.group))\n\n  svg.append('g')\n    .selectAll('line.upper')\n    .data((d) => d[1])\n    .join('line')\n    .attr('class', 'upper')\n    .attr('x1', d => x(d.date) - capWidth / 2)\n    .attr('y1', d => y(d.upperCI))\n    .attr('x2', d => x(d.date) + capWidth / 2)\n    .attr('y2', d => y(d.upperCI))\n    .attr(\"stroke\", d => colour(d.group))\n\n\n  //add dots to the plot\n  svg.selectAll('circle')\n    .data(graphic_data)\n    .join('circle')\n    .attr('cx', (d) => x(d.date))\n    .attr('cy', (d) => y(d.yvalue))\n    .attr('r', config.essential.radius)\n    .attr(\"fill\", (d) => colour(d.group)) // This adds the colour to the circles based on the group\n    .attr('fill-opacity', config.essential.fillOpacity)\n    .attr('stroke', (d) => colour(d.group))\n    .attr('stroke-opacity', config.essential.strokeOpacity);\n\n  // This does the chart title label\n  svg\n    .append('g')\n    .attr('transform', 'translate(0, 0)')\n    .append('text')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('dy', 20 - margin.top)\n    .attr('class', 'title')\n    .text(d => d[0])\n    .attr('text-anchor', 'start')\n    .call(wrap, chart_width);\n\n  // This does the x-axis label - just on the rightmost chart of each row\n  svg\n    .append('g')\n    .attr('transform', 'translate(0,' + height + ')')\n    .append('text')\n    .attr('x', chart_width)\n    .attr('y', 40)\n    .attr('class', 'axis--label')\n    .text((d, i) => i % chartEvery == chartEvery - 1 || plots.indexOf(d[0]) === plots.length - 1 ?\n      config.essential.xAxisLabel : \"\")\n    .attr('text-anchor', 'end');\n\n  // This does the y-axis label - just on the leftmost chart of each row\n  svg\n    .append('g')\n    .attr('transform', 'translate(0,0)')\n    .append('text')\n    .attr('x', -(margin.left - 5))\n    .attr('y', -10)\n    .attr('class', 'axis--label')\n    .text((d) => plots.indexOf(d[0]) % chartEvery == 0 ? config.essential.yAxisLabel : \"\")\n    .attr('text-anchor', 'start');\n\n\n  //create link to source\n  d3.select(\"#source\")\n    .text(\"Source: \" + config.essential.sourceText)\n\n\n  //use pym to calculate chart dimensions\n  if (pymChild) {\n    pymChild.sendHeight();\n  }\n}\n\nfunction wrap(text, width) {\n  text.each(function () {\n    let text = d3.select(this),\n      words = text.text().split(/\\s+/).reverse(),\n      word,\n      line = [],\n      lineNumber = 0,\n      lineHeight = 1.1, // ems\n      // y = text.attr(\"y\"),\n      x = text.attr(\"x\"),\n      dy = parseFloat(text.attr(\"dy\")),\n      tspan = text.text(null).append(\"tspan\").attr('x', x);\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").attr('x', x).attr(\"dy\", lineHeight + \"em\").text(word);\n      }\n    }\n    let breaks = text.selectAll(\"tspan\").size();\n    text.attr(\"y\", function () { return -6 * (breaks - 1); });\n  });\n\n}\n\n//load data \nd3.csv(config.essential.graphic_data_url)\n  .then((data) => {\n\n    let parseTime = d3.timeParse(config.essential.dateFormat);\n    //load chart data\n    graphic_data = data;\n\n    data.forEach((d, i) => {\n\n      //If the date column is has date data store it as dates\n      if (parseTime(data[i].date) !== null) {\n        d.date = parseTime(d.date)\n      }\n      // console.log(data[i].date)\n    });\n\n    //use pym to create iframed chart dependent on specified variables\n    pymChild = new pym.Child({\n      renderCallback: drawGraphic\n    });\n  });\n",
            "chart_css": ".grid line {\n  stroke: #ccc;\n  stroke-opacity: 0.7;\n}\n\n.grid .tick {\n  stroke: lightgrey;\n  stroke-opacity: 0.7;\n  shape-rendering: crispEdges;\n}\n\n.grid path {\n  stroke-width: 0;\n}\n\n.title {\n  font-weight: 600;\n  fill: #414042;\n}",
            "data_csv": "date,plot,group,yvalue,lowerCI,upperCI\n30/04/2023,series1,group1,0.9,0.762140582,0.91544367\n01/05/2023,series1,group1,0.986,0.953756323,1.113716766\n02/05/2023,series1,group1,0.4,0.252092563,0.469616388\n03/05/2023,series1,group1,0.2,0.07675212,0.269448362\n04/05/2023,series1,group1,0.6,0.463193732,0.755478832\n05/05/2023,series1,group1,0.4,0.394911927,0.522593444\n06/05/2023,series1,group1,0.15,0.021105974,0.349661967\n30/04/2023,series1,group2,0.2,0.195807801,0.384076313\n01/05/2023,series1,group2,0.6,0.496945796,0.67667971\n02/05/2023,series1,group2,0.2,0.112500197,0.346942267\n03/05/2023,series1,group2,0.4,0.333845371,0.503155176\n04/05/2023,series1,group2,0.8,0.673464525,0.876978637\n05/05/2023,series1,group2,0.5,0.328923663,0.588612633\n06/05/2023,series1,group2,0.25,0.184799135,0.267839835\n30/04/2023,series2,group1,0.9,0.806077985,1.036773339\n01/05/2023,series2,group1,0.986,0.914420714,1.054011192\n02/05/2023,series2,group1,0.4,0.229932036,0.459549418\n03/05/2023,series2,group1,0.2,0.188541358,0.292497468\n04/05/2023,series2,group1,0.6,0.479429245,0.659173911\n05/05/2023,series2,group1,0.4,0.273715149,0.400069653\n06/05/2023,series2,group1,0.15,0.005229229,0.156457096\n30/04/2023,series2,group2,0.2,0.051586064,0.352947862\n01/05/2023,series2,group2,0.6,0.447526175,0.70307366\n02/05/2023,series2,group2,0.2,0.135839648,0.245317339\n03/05/2023,series2,group2,0.4,0.316933746,0.402191087\n04/05/2023,series2,group2,0.8,0.623075007,0.928424395\n05/05/2023,series2,group2,0.5,0.316819495,0.598116676\n06/05/2023,series2,group2,0.25,0.053475873,0.288919209\n",
            "comparison_csv": null
        },
        "doughnut": {
            "config_js": "config = {\r\n\t\"essential\": {\r\n\t\t\"graphic_data_url\": \"data.csv\",\r\n\t\t\"colour_palette\": [\"#206095\", \"#27A0CC\", \"#871A5B\", \"#A8BD3A\", \"#F66068\", \"#003C57\"],\r\n\t\t\"sourceText\": \"Office for National Statistics\",\r\n\t\t\"accessibleSummary\": \"\",\r\n\t\t\"dataLabels\": {\r\n\t\t\t\"show\": true,\r\n\t\t\t\"numberFormat\": \".1%\"\r\n\t\t},\r\n\t\t\"centreLabel\": \"Sikh identity\"\r\n\t},\r\n\t\"optional\": {\r\n\t\t\"margin\": {\r\n\t\t\t\"sm\": {\r\n\t\t\t\t\"top\": 15,\r\n\t\t\t\t\"right\": 20,\r\n\t\t\t\t\"bottom\": 50,\r\n\t\t\t\t\"left\": 20\r\n\t\t\t},\r\n\t\t\t\"md\": {\r\n\t\t\t\t\"top\": 20,\r\n\t\t\t\t\"right\": 80,\r\n\t\t\t\t\"bottom\": 90,\r\n\t\t\t\t\"left\": 80\r\n\t\t\t},\r\n\t\t\t\"lg\": {\r\n\t\t\t\t\"top\": 20,\r\n\t\t\t\t\"right\": 60,\r\n\t\t\t\t\"bottom\": 70,\r\n\t\t\t\t\"left\": 60\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"mobileBreakpoint\": 510,\r\n\t\t\"mediumBreakpoint\": 600\r\n\t},\r\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\r\n\t\"chart_build\": {}\r\n};",
            "script_js": "var graphic = d3.select('#graphic');\r\nvar legend = d3.select('#legend');\r\nvar pymChild = null;\r\n\r\nfunction drawGraphic() {\r\n\t// clear out existing graphics\r\n\tgraphic.selectAll('*').remove();\r\n\tlegend.selectAll('*').remove();\r\n\r\n    //population accessible summmary\r\n    d3.select('#accessibleSummary').html(config.essential.accessibleSummary);\r\n\r\n    var threshold_md = config.optional.mediumBreakpoint;\r\n    var threshold_sm = config.optional.mobileBreakpoint;\r\n\r\n    //set variables for chart dimensions dependent on width of #graphic\r\n    if (parseInt(graphic.style('width')) < threshold_sm) {\r\n        size = 'sm';\r\n    } else if (parseInt(graphic.style('width')) < threshold_md) {\r\n        size = 'md';\r\n    } else {\r\n        size = 'lg';\r\n    }\r\n\r\n    var margin = config.optional.margin[size];\r\n    var chart_width =\r\n        parseInt(graphic.style('width')) - margin.left - margin.right;\r\n    //height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\r\n    var height = 400 - margin.top - margin.bottom;\r\n\r\n    const radius = Math.min(chart_width, height) / 2\r\n    const outerRadius = radius * 1.1\r\n\r\n    const arc = d3.arc()\r\n        .innerRadius(radius / 2)\r\n        .outerRadius(radius)\r\n\r\n    const labelArc = d3.arc()\r\n        .innerRadius(outerRadius)\r\n        .outerRadius(outerRadius)\r\n\r\n    const lineArc = d3.arc()\r\n        .innerRadius(radius + 5)\r\n        .outerRadius(radius + 5)\r\n\r\n    const pie = d3.pie()\r\n        .padAngle(3 / height) //The white space between the sections of the doughnut - expressed in radians\r\n        .value(d => d.value)\r\n\r\n\r\n    //create svg for chart\r\n    svg = d3\r\n        .select('#graphic')\r\n        .append('svg')\r\n        .attr('width', chart_width + margin.left + margin.right)\r\n        .attr('height', height + margin.top + margin.bottom)\r\n        .attr('class', 'chart')\r\n        .style('background-color', '#fff')\r\n        .append('g')\r\n        .attr('transform', 'translate(' + 0 + ',' + (margin.top) + ')');\r\n\r\n\r\n    //Drawing the pie\r\n    svg.append('g')\r\n        .attr('transform', 'translate(' + (margin.left + chart_width / 2) + ',' + (margin.top + height / 2) + ')')\r\n        .selectAll()\r\n        .data(pie(graphic_data))\r\n        .join('path')\r\n        .attr('class', (d, i) => 'path' + i)\r\n        .attr('fill', (d, i) => config.essential.colour_palette[i])\r\n        .attr('d', arc)\r\n\r\n    if (config.essential.dataLabels.show && size !== \"sm\") {\r\n\r\n        //Adding layers for lines and labels\r\n        let labels = svg.append(\"g\")\r\n            .attr('transform', 'translate(' + (margin.left + chart_width / 2) + ',' + (margin.top + height / 2) + ')')\r\n            .attr(\"class\", \"dataLabels\")\r\n\r\n        //Adding text for category and values\r\n        labels\r\n            .selectAll('text')\r\n            .data(pie(graphic_data))\r\n            .join('text')\r\n            .attr('transform', d => {\r\n                var pos = labelArc.centroid(d);\r\n                pos[0] = radius * 1 * (midAngle(d) < Math.PI ? 1 : -1);\r\n                return `translate(${pos})`\r\n            })\r\n            .text(d => d.data.category)\r\n            .attr('x', 0)\r\n            .attr('y', 0)\r\n            .attr('dy', '0.35em')\r\n            .attr('text-anchor', d => midAngle(d) < Math.PI ? \"start\" : \"end\")\r\n            .attr('fill', '#414042')\r\n            .style('font-weight', 600)\r\n            .attr('class', (d, i) => \"label\" + i)\r\n            .call(wrap, (parseInt(graphic.style('width')) - (2 * radius)) / 2)\r\n\r\n        labels\r\n            .selectAll('text')\r\n            .data(pie(graphic_data))\r\n            .join('text')\r\n            .append('tspan')\r\n            .attr('x', 0)\r\n            .attr('dy', '1.1em')\r\n            .attr('font-weight', 400)\r\n            .text(d => d3.format(config.essential.dataLabels.numberFormat)(d.value))\r\n\r\n        //Adding connecting lines\r\n        svg.append(\"g\")\r\n            .attr('transform', 'translate(' + (margin.left + chart_width / 2) + ',' + (margin.top + height / 2) + ')')\r\n            .attr(\"class\", \"lines\")\r\n            .selectAll('polyline')\r\n            .data(pie(graphic_data))\r\n            .join('polyline')\r\n            .attr('points', d => {\r\n                var pos = labelArc.centroid(d);\r\n                pos[0] = radius * 0.95 * (midAngle(d) < Math.PI ? 1 : -1);\r\n                var second = labelArc.centroid(d);\r\n                second[0] = lineArc.centroid(d)[0] + (labelArc.centroid(d)[1] - lineArc.centroid(d)[1])\r\n                return [lineArc.centroid(d), second, pos]\r\n            })\r\n            .attr('stroke', '#b3b3b3')\r\n            .attr('stroke-width', '1px')\r\n            .attr('fill', 'none')\r\n            .attr('class', (d, i) => \"polyline\" + i)\r\n\r\n        //Use this function to manually shift labels by small distances - labels are numbered (called \"index\" here) clockwise from the top\r\n        function moveLabel(index, yDistance) {\r\n\r\n            //Manually shifting this polyline\r\n            d3.select('.polyline' + index)\r\n                .attr('points', d => {\r\n                    var second = labelArc.centroid(d);\r\n                    second[0] = lineArc.centroid(d)[0] - Math.abs(yDistance) - (lineArc.centroid(d)[1] - labelArc.centroid(d)[1]);\r\n                    second[1] = second[1] + yDistance;\r\n                    var last = labelArc.centroid(d);\r\n                    last[0] = radius * 0.95 * (midAngle(d) < Math.PI ? 1 : -1);\r\n                    last[1] = last[1] + yDistance;\r\n                    return [lineArc.centroid(d), second, last]\r\n                })\r\n\r\n            //Manually shifting this label\r\n            d3.select('.label' + index)\r\n                .attr('transform', d => {\r\n                    var pos = labelArc.centroid(d);\r\n                    pos[0] = radius * 1 * (midAngle(d) < Math.PI ? 1 : -1);\r\n                    pos[1] = pos[1] + yDistance;\r\n                    return `translate(${pos})`\r\n                })\r\n\r\n        }\r\n\r\n        //e.g. To move the third label up 10px\r\n        moveLabel(2, -10)\r\n\r\n\r\n        function midAngle(d) {\r\n            return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n        }\r\n\r\n    } else {\r\n\r\n        // Set up the legend\r\n        var legenditemPie = d3.select('#legend')\r\n            .selectAll('div.legend--item')\r\n            .data(d3.zip(graphic_data.map(item => (item.category)),\r\n                graphic_data.map(item => d3.format(config.essential.dataLabels.numberFormat)(item.value)),\r\n                config.essential.colour_palette))\r\n            .enter()\r\n            .append('div')\r\n            .attr('class', 'container'); // Add float-right class here\r\n\r\n        var leftContainer = legenditemPie.append('div').attr('class', 'leftContainer'); // Add a div to contain left1 and left2\r\n\r\n        leftContainer.append('div').attr('class', 'left1') // Add class left1\r\n            .append('svg') // Append an SVG element\r\n            .attr('width', 18) // Set the width of the SVG\r\n            .attr('height', 15) // Set the height of the SVG\r\n            .append('circle') // Append a circle element\r\n            .attr('cx', 8) // Set the x-coordinate of the circle's center\r\n            .attr('cy', 9) // Set the y-coordinate of the circle's center\r\n            .attr('r', 6)\r\n            .attr('fill', d => d[2]); // Set the fill color of the circle\r\n\r\n        leftContainer.append('div').attr('class', 'left2') // Add class left2\r\n            .append('p').html(d => d[0]);\r\n\r\n        legenditemPie.append('div').attr('class', 'right')\r\n            .append('p').html(d => d[1]);\r\n    };\r\n\r\n\r\n    // This does the centre label\r\n    svg\r\n        .append('g')\r\n        .attr('transform', 'translate(' + (margin.left + chart_width / 2) + ',' + (margin.top + height / 2) + ')')\r\n        .append('text')\r\n        .attr('fill', '#414042')\r\n        .attr('x', 0)\r\n        .attr('y', 0)\r\n        .style('font-weight', 600)\r\n        .text(config.essential.centreLabel)\r\n        .attr('text-anchor', 'middle')\r\n        .call(wrap, radius / 2);\r\n\r\n\r\n    //create link to source\r\n    d3.select('#source').text('Source: ' + config.essential.sourceText);\r\n\r\n    //use pym to calculate chart dimensions\r\n    if (pymChild) {\r\n        pymChild.sendHeight();\r\n    }\r\n}\r\n\r\nfunction wrap(text, width) {\r\n    text.each(function () {\r\n        var text = d3.select(this),\r\n            words = text.text().split(/\\s+/).reverse(),\r\n            word,\r\n            line = [],\r\n            lineNumber = 0,\r\n            lineHeight = 1, // ems\r\n            // y = text.attr(\"y\"),\r\n            x = text.attr('x'),\r\n            dy = parseFloat(text.attr('dy')),\r\n            tspan = text.text(null).append('tspan').attr('x', x);\r\n        while ((word = words.pop())) {\r\n            line.push(word);\r\n            tspan.text(line.join(' '));\r\n            if (tspan.node().getComputedTextLength() > width) {\r\n                line.pop();\r\n                tspan.text(line.join(' '));\r\n                line = [word];\r\n                tspan = text\r\n                    .append('tspan')\r\n                    .attr('x', x)\r\n                    .attr('dy', lineHeight + 'em')\r\n                    .text(word);\r\n            }\r\n        }\r\n        var breaks = text.selectAll('tspan').size();\r\n        text.attr('y', function () {\r\n            return -6 * (breaks - 1);\r\n        });\r\n    });\r\n}\r\n\r\nd3.csv(config.essential.graphic_data_url).then((data) => {\r\n    //load chart data\r\n    graphic_data = data.sort(function (a, b) {\r\n        return b.value - a.value //  Sorting the categories by value, may prefer to sort alphabetically (a.category - b.category) or not at all\r\n    });\r\n\r\n    //use pym to create iframed chart dependent on specified variables\r\n    pymChild = new pym.Child({\r\n        renderCallback: drawGraphic\r\n    });\r\n});",
            "chart_css": ".dataLabels {\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n}\r\n\r\n/* .container {\r\n    overflow: hidden; \r\n  }\r\n  \r\n  .leftContainer {\r\n    float: left; \r\n  }\r\n  \r\n.left1,\r\n.left2{\r\n  display: inline-block; \r\n   vertical-align: top; \r\n}\r\n.left2{\r\n  word-wrap: break-word; \r\n}\r\n  .right {\r\n    float: right; \r\n  }\r\n   */\r\n\r\n.right {\r\n  padding-right: 50px;\r\n}\r\n\r\n@media (max-width: 530px) {\r\n  #legend {\r\n    flex-flow: column;\r\n    font-size: 14px;\r\n  }\r\n\r\n  .legend--item {\r\n    padding-bottom: 8px;\r\n  }\r\n\r\n\r\n  .right {\r\n    padding-right: 0px;\r\n  }\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n}\r\n\r\n.leftContainer {\r\n  display: flex;\r\n  /* flex-grow: 1; */\r\n}\r\n\r\n.left1,\r\n.left2 {\r\n  padding-right: 6px;\r\n  font-weight: 600;\r\n}\r\n\r\n.right {\r\n  margin-left: auto;\r\n\r\n}\r\n\r\np {\r\n  margin-block-start: 0;\r\n  margin-block-end: 5px;\r\n  /* flex: 1;\r\n  white-space: normal; */\r\n}\r\n\r\n.legend--value--text {\r\n  color: #707070;\r\n  line-height: 14px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  padding-right: 10px;\r\n  margin: 0;\r\n}",
            "data_csv": "category,value\r\nReligion only,0.810504497\r\nEthnic group only ,0.003299295\r\nBoth religion and ethnic group,0.186196208\r\n",
            "comparison_csv": null
        },
        "heatmap": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"YlGnBu\",\n\t\t// must be a colour brewer palette\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"dataLabelsNumberFormat\": \".0f\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"numberOfBreaks\": 5,\n\t\t\"breaks\": \"jenks\",\n\t\t// either \"jenks\",\"equal\" or an array with custom breaks\n\t\t\"cascadeX\": true,\n\t\t//turns on or off cascading xaxis label\n\t\t\"legendFormat\": \".0f\"\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 180,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 180,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 180,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 40,\n\t\t\t\"md\": 40,\n\t\t\t\"lg\": 40\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "chart_css": "svg{\n  font-family:\"Open Sans\"\n}\n\n.dataLabels{\n  font-weight: 600;\n  font-size: 16px;\n}\n\nsvg.chart g.x g.tick text{\n  font-weight: 700;\n  fill:#414042;\n}\n\ng.y g.tick text{\n  font-weight: 600;\n}\n\n#key .tick text{\n  font-size: 14px;\n}\n\n#key path.domain{\n  display:none;\n}\n\n#keysymbol path{\n  transform: rotate(180deg) ;\n}\n",
            "data_csv": "name,London,South East,East of England,South West,Scotland,North West,West Midlands,East Midlands,Yorkshire and The Humber\nAdmin,20.85373832,17.6949027,84.86276061,31.5783842,48.20562268,92.09218949,80.66789858,50.56484924,31.1986153\nArts,75.10385606,92.78801932,98.42939789,95.19411478,38.58584155,99.36743553,59.81457575,87.03107767,13.74814058\nRetail,64.12511024,36.80002708,38.20913822,4.832285581,31.60393462,49.45953284,67.95744598,21.37821922,78.39457609\nManufacturing,58.04407128,91.82819229,44.15710484,93.53981204,32.06639495,84.91241512,60.32044686,3.489901745,82.20569463\nConstruction,49.29571885,61.7405718,2.633201818,12.00880742,86.95296893,52.89787277,29.47984492,93.683539,57.04940039\nHealth and social work,26.42919394,68.3881695,38.34804204,45.46625342,24.65361361,11.23520019,68.82058623,43.13596269,84.71592843\nTransportation and storage,66.02170789,25.88544503,67.54775376,45.4008622,68.65015727,12.04880862,73.06841193,8.464006935,13.69451549\nAccommodation and food,24.56805884,89.47462279,49.36685439,50.05168647,65.708543,29.6147122,29.46106092,31.7637962,45.00028678\nOther,27.48215082,14.64375439,66.97898751,58.11839376,9.358939682,73.9975048,74.84578974,54.81083207,19.75232875\nAll businesses,48.97683167,80.16796002,18.79872569,90.21841354,57.08565289,6.333619886,58.75578025,64.53514981,39.21478802\n",
            "script_js": "const graphic = d3.select('#graphic');\nconst legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\n\t\t3 * (graphic_data.length - 1);\n\n\tcolumnNames = graphic_data.columns.slice(1);\n\n\tnumbers = graphic_data\n\t\t.flatMap(function (d) {\n\t\t\treturn Object.values(d)\n\t\t\t\t.map(Number)\n\t\t\t\t.filter((d) => !isNaN(d));\n\t\t})\n\t\t.sort(d3.ascending);\n\n\tdataPivoted = Array.from(\n\t\tpivot(graphic_data, graphic_data.columns.slice(1), 'region', 'value')\n\t);\n\n\tif (config.essential.breaks == 'jenks') {\n\t\tbreaks = [];\n\n\t\tss.ckmeans(numbers, config.essential.numberOfBreaks).map(function (\n\t\t\tcluster,\n\t\t\ti\n\t\t) {\n\t\t\tif (i < config.essential.numberOfBreaks - 1) {\n\t\t\t\tbreaks.push(cluster[0]);\n\t\t\t} else {\n\t\t\t\tbreaks.push(cluster[0]);\n\t\t\t\t//if the last cluster take the last max value\n\t\t\t\tbreaks.push(cluster[cluster.length - 1]);\n\t\t\t}\n\t\t});\n\t} else if (config.essential.breaks == 'equal') {\n\t\tbreaks = ss.equalIntervalBreaks(numbers, dvc.numberBreaks);\n\t} else {\n\t\tbreaks = config.essential.breaks;\n\t}\n\n\t//set up scales\n\tconst x = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0)\n\t\t.paddingInner(\n\t\t\t((columnNames.length - 1) * 3) /\n\t\t\t\t(chart_width - (columnNames.length - 1) * 3)\n\t\t)\n\t\t.range([0, chart_width])\n\t\t.round(true)\n\t\t.domain(columnNames);\n\n\tconst y = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0)\n\t\t.paddingInner(((graphic_data.length - 1) * 3) / (graphic_data.length * 30))\n\t\t.range([0, height])\n\t\t.round(true);\n\n\tcolour = d3\n\t\t.scaleThreshold()\n\t\t.domain(breaks.slice(1, 6))\n\t\t.range(\n\t\t\tchroma\n\t\t\t\t.scale(chroma.brewer[config.essential.colour_palette])\n\t\t\t\t.colors(config.essential.numberOfBreaks)\n\t\t);\n\n\t// draw a legend, stealing code from simple maps template\n\tlegend.selectAll('*').remove();\n\tkey = legend\n\t\t.append('svg')\n\t\t.attr('id', 'key')\n\t\t.attr('aria-hidden', true)\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', 75)\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',35)');\n\n\tlegendx = d3\n\t\t.scaleLinear()\n\t\t.domain([breaks[0], breaks[config.essential.numberOfBreaks]])\n\t\t.range([0, chart_width]);\n\n\tkey\n\t\t.append('g')\n\t\t.selectAll('rect.blocks')\n\t\t.data(\n\t\t\tcolour.range().map((d, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tx0: legendx(breaks[i]),\n\t\t\t\t\tx1: legendx(breaks[i + 1]),\n\t\t\t\t\tfill: d\n\t\t\t\t};\n\t\t\t})\n\t\t)\n\t\t.join('rect')\n\t\t.attr('class', 'blocks')\n\t\t.attr('height', 10)\n\t\t.attr('x', (d) => d.x0)\n\t\t.attr('width', (d) => d.x1 - d.x0)\n\t\t.style('fill', (d) => d.fill);\n\n\tkey\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,0)')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(legendx)\n\t\t\t\t.tickValues(breaks)\n\t\t\t\t.tickSize(15)\n\t\t\t\t.tickFormat(d3.format(config.essential.legendFormat))\n\t\t);\n\n\tkey\n\t\t.append('text')\n\t\t.attr('id', 'keytext')\n\t\t.attr('text-anchor', 'middle')\n\t\t.attr('dy', -12);\n\n\tkey\n\t\t.append('g')\n\t\t.attr('id', 'keysymbol')\n\t\t.append('path')\n\t\t.attr('d', d3.symbol(d3.symbolTriangle))\n\t\t.attr('stroke', 'black')\n\t\t.attr('stroke-width', '2px')\n\t\t.attr('fill', 'white')\n\t\t.attr('opacity', 0);\n\n\t//use the data to find unique entries in the name column\n\ty.domain([...new Set(graphic_data.map((d) => d.name))]);\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n\t//set up xAxis generator\n\tlet xAxis = d3.axisTop(x).tickSize(0);\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tsvg.append('g').attr('class', 'x axis').call(xAxis);\n\n\tif (config.essential.cascadeX === true) {\n\t\td3.selectAll('g.x.axis text').each(function (d, i) {\n\t\t\td3.select(this)\n\t\t\t\t.attr('dy', -20 * i)\n\t\t\t\t.attr('text-anchor', 'end')\n\t\t\t\t.attr('x', x.bandwidth() / 2);\n\n\t\t\tlet bbox = this.getBBox();\n\n\t\t\td3.select(this.parentNode)\n\t\t\t\t.append('line')\n\t\t\t\t.attr('x1', x.bandwidth() / 2 - 2)\n\t\t\t\t.attr('x2', x.bandwidth() / 2 - 2)\n\t\t\t\t.attr('y1', 0)\n\t\t\t\t.attr('y2', bbox.y + bbox.height)\n\t\t\t\t.attr('stroke', 'black')\n\t\t\t\t.attr('stroke-width', '3px');\n\t\t});\n\t} //end cascadeX if loop\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('rect')\n\t\t.data(dataPivoted)\n\t\t.join('rect')\n\t\t.attr('fill', (d) => colour(+d.value))\n\t\t.attr('x', (d) => x(d.region))\n\t\t.attr('y', (d) => y(d.name))\n\t\t.attr('width', x.bandwidth())\n\t\t.attr('height', y.bandwidth())\n\t\t.on('mouseover', function (d) {\n\t\t\td3.select('#keytext')\n\t\t\t\t.text(\n\t\t\t\t\td3.format(config.essential.dataLabelsNumberFormat)(\n\t\t\t\t\t\td3.select(this).data()[0].value\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t.transition()\n\t\t\t\t.attr('x', legendx(+d3.select(this).data()[0].value));\n\n\t\t\td3.select('#keysymbol path').attr('opacity', 1);\n\n\t\t\td3.select('#keysymbol')\n\t\t\t\t.transition()\n\t\t\t\t.attr(\n\t\t\t\t\t'transform',\n\t\t\t\t\t'translate(' + legendx(+d3.select(this).data()[0].value) + ',0)'\n\t\t\t\t);\n\t\t})\n\t\t.on('mouseout', mouseout);\n\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('text')\n\t\t.data(dataPivoted)\n\t\t.join('text')\n\t\t.attr('class', 'dataLabels')\n\t\t.attr('fill', (d) => (d.value >= breaks[2] ? '#ffffff' : '#414042'))\n\t\t.attr('x', (d) => x(d.region))\n\t\t.attr('dx', x.bandwidth() / 2)\n\t\t.attr('y', (d) => y(d.name))\n\t\t.attr('dy', y.bandwidth() / 2 + 4)\n\t\t.attr('text-anchor', 'middle')\n\t\t.text((d) => d3.format(config.essential.dataLabelsNumberFormat)(d.value))\n\t\t.attr('pointer-events', 'none');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction mouseout() {\n\td3.select('#keytext').text('');\n\td3.select('#keysymbol path').attr('opacity', 0);\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\n// This is from bostock's notebook https://observablehq.com/d/ac2a320cf2b0adc4\n// which is turn comes from this thread on wide to long data https://github.com/d3/d3-array/issues/142\nfunction* pivot(data, columns, name, value, opts) {\n\tconst keepCols = columns\n\t\t? data.columns.filter((c) => !columns.includes(c))\n\t\t: data.columns;\n\tfor (const col of columns) {\n\t\tfor (const d of data) {\n\t\t\tconst row = {};\n\t\t\tkeepCols.forEach((c) => {\n\t\t\t\trow[c] = d[c];\n\t\t\t});\n\t\t\t// TODO, add an option to ignore if fails a truth test to approximate `values_drop_na`\n\t\t\trow[name] = col;\n\t\t\trow[value] = d[col];\n\t\t\tyield row;\n\t\t}\n\t}\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "comparison_csv": null
        },
        "heatmap-per-column": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"YlGnBu\",\n\t\t// must be a colour brewer palette\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"dataLabelsNumberFormat\": \".0f\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"numberOfBreaks\": 5,\n\t\t\"breaks\": \"jenks\"\n\t\t// either \"jenks\",\"equal\" or an array with custom breaks\n\t\t// if using custom breaks, it needs to be an object with keys the same as the columns and then an array of the value as the value of the key\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 40,\n\t\t\t\"md\": 40,\n\t\t\t\"lg\": 40\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 }\n};\n",
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 16px;\n}\n\nsvg.chart g.x g.tick text{\n  font-weight: 700;\n  fill:#414042;\n}\n\ng.y g.tick text{\n  font-weight: 600;\n}\n",
            "data_csv": "name,Ldn,SE,EE,SW,Sc,NW,WM,EM,Y&H\nAdmin,20.85373832,6.68734369,91.8170006,31.5783842,48.20562268,92.09218949,80.66789858,50.56484924,31.1986153\nArts,75.10385606,3.971293978,92.64287588,95.19411478,38.58584155,99.36743553,59.81457575,87.03107767,13.74814058\nRetail,64.12511024,3.684834977,94.44235097,4.832285581,31.60393462,49.45953284,67.95744598,21.37821922,78.39457609\nManufacturing,58.04407128,3.831340656,98.73914808,93.53981204,32.06639495,84.91241512,60.32044686,3.489901745,82.20569463\nConstruction,49.29571885,2.361259964,98.63071594,12.00880742,86.95296893,52.89787277,29.47984492,93.683539,57.04940039\nHealth and social work,26.42919394,9.990174158,99.05070131,45.46625342,24.65361361,11.23520019,68.82058623,43.13596269,84.71592843\nTransportation and storage,66.02170789,5.30485909,95.36621072,45.4008622,68.65015727,12.04880862,73.06841193,8.464006935,13.69451549\nAccommodation and food,24.56805884,9.05074823,97.99504955,50.05168647,65.708543,29.6147122,29.46106092,31.7637962,45.00028678\nOther,27.48215082,3.439446902,91.30961441,58.11839376,9.358939682,73.9975048,74.84578974,54.81083207,19.75232875\nAll businesses,48.97683167,6.159398858,90.44471927,90.21841354,57.08565289,6.333619886,58.75578025,64.53514981,39.21478802",
            "script_js": "let graphic = d3.select('#graphic');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height =\n\t\tconfig.optional.seriesHeight[size] * graphic_data.length +\n\t\t3 * (graphic_data.length - 1);\n\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\n\tcolumnNames = graphic_data.columns.slice(1);\n\n\tconst numbers = new Map();\n\n\tcolumnNames.forEach((item) => {\n\t\tnumbers.set(\n\t\t\titem,\n\t\t\tgraphic_data.map((d) => +d[item])\n\t\t);\n\t});\n\n\tconst breaks = new Map();\n\n\tdataPivoted = Array.from(\n\t\tpivot(graphic_data, graphic_data.columns.slice(1), 'region', 'value')\n\t);\n\n\tif (config.essential.breaks == 'jenks') {\n\t\tcolumnNames.forEach((item) => {\n\t\t\tlet temp = [];\n\n\t\t\tss.ckmeans(numbers.get(item), config.essential.numberOfBreaks).map(\n\t\t\t\tfunction (cluster, i) {\n\t\t\t\t\tif (i < config.essential.numberOfBreaks - 1) {\n\t\t\t\t\t\ttemp.push(cluster[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttemp.push(cluster[0]);\n\t\t\t\t\t\t//if the last cluster take the last max value\n\t\t\t\t\t\ttemp.push(cluster[cluster.length - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tbreaks.set(item, temp);\n\t\t});\n\t} else if (config.essential.breaks == 'equal') {\n\t\tcolumnNames.forEach((item) => {\n\t\t\tbreaks.set(\n\t\t\t\titem,\n\t\t\t\tss.equalIntervalBreaks(numbers.get(item), dvc.numberBreaks)\n\t\t\t);\n\t\t});\n\t} else {\n\t\tcolumnNames.forEach((item) => {\n\t\t\tbreaks.set(item, config.essential.breaks[item]);\n\t\t});\n\t}\n\n\t//set up scales\n\tconst x = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0)\n\t\t.paddingInner(\n\t\t\t((columnNames.length - 1) * 10) /\n\t\t\t\t(chart_width - (columnNames.length - 1) * 10)\n\t\t)\n\t\t.range([0, chart_width])\n\t\t.round(true)\n\t\t.domain(columnNames);\n\n\tconst y = d3\n\t\t.scaleBand()\n\t\t.paddingOuter(0)\n\t\t.paddingInner(((graphic_data.length - 1) * 3) / (graphic_data.length * 30))\n\t\t.range([0, height])\n\t\t.round(true);\n\n\tconst colour = new Map();\n\tcolumnNames.forEach((item) => {\n\t\tcolour.set(\n\t\t\titem,\n\t\t\td3\n\t\t\t\t.scaleThreshold()\n\t\t\t\t.domain(breaks.get(item).slice(0, -1))\n\t\t\t\t.range(\n\t\t\t\t\tchroma\n\t\t\t\t\t\t.scale(chroma.brewer[config.essential.colour_palette])\n\t\t\t\t\t\t.colors(config.essential.numberOfBreaks)\n\t\t\t\t)\n\t\t);\n\t});\n\n\t//use the data to find unique entries in the name column\n\ty.domain([...new Set(graphic_data.map((d) => d.name))]);\n\n\t//set up yAxis generator\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n\t//set up xAxis generator\n\tlet xAxis = d3.axisTop(x).tickSize(0);\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tsvg.append('g').attr('class', 'x axis').call(xAxis);\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('rect')\n\t\t.data(dataPivoted)\n\t\t.join('rect')\n\t\t.attr('fill', (d) => colour.get(d.region)(+d.value))\n\t\t.attr('x', (d) => x(d.region))\n\t\t.attr('y', (d) => y(d.name))\n\t\t.attr('width', x.bandwidth())\n\t\t.attr('height', y.bandwidth());\n\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('text')\n\t\t.data(dataPivoted)\n\t\t.join('text')\n\t\t.attr('class', 'dataLabels')\n\t\t.attr('fill', (d) =>\n\t\t\tchroma.contrast(colour.get(d.region)(+d.value), '#fff') < 4.5\n\t\t\t\t? '#414042'\n\t\t\t\t: '#fff'\n\t\t)\n\t\t.attr('x', (d) => x(d.region))\n\t\t.attr('dx', x.bandwidth() / 2)\n\t\t.attr('y', (d) => y(d.name))\n\t\t.attr('dy', y.bandwidth() / 2 + 4)\n\t\t.attr('text-anchor', 'middle')\n\t\t.text((d) => d3.format(config.essential.dataLabelsNumberFormat)(d.value));\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\n// This is from bostock's notebook https://observablehq.com/d/ac2a320cf2b0adc4\n// which is turn comes from this thread on wide to long data https://github.com/d3/d3-array/issues/142\nfunction* pivot(data, columns, name, value, opts) {\n\tconst keepCols = columns\n\t\t? data.columns.filter((c) => !columns.includes(c))\n\t\t: data.columns;\n\tfor (const col of columns) {\n\t\tfor (const d of data) {\n\t\t\tconst row = {};\n\t\t\tkeepCols.forEach((c) => {\n\t\t\t\trow[c] = d[c];\n\t\t\t});\n\t\t\t// TODO, add an option to ignore if fails a truth test to approximate `values_drop_na`\n\t\t\trow[name] = col;\n\t\t\trow[value] = d[col];\n\t\t\tyield row;\n\t\t}\n\t}\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "comparison_csv": null
        },
        "line-chart": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\n\t\t\t\"#206095\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"text_colour_palette\": [\n\t\t\t\"#206095\",\n\t\t\t\"#1F80A3\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#6E7E26\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"drawLegend\": false,\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"lineCurveType\": \"curveLinear\", // Set the default line curve type\n\t\t// Examples of line curve types\n\t\t// \"lineCurveType\": \"curveLinear\", // Straight line segments\n\t\t// \"lineCurveType\": \"curveStep\", // Step-wise line\n\t\t// \"lineCurveType\": \"curveStepBefore\", // Step-before line\n\t\t// \"lineCurveType\": \"curveStepAfter\", // Step-after line\n\t\t// \"lineCurveType\": \"curveBasis\", // B-spline curve\n\t\t// \"lineCurveType\": \"curveCardinal\", // Cardinal spline curve\n\t\t// \"lineCurveType\": \"curveCatmullRom\" // Catmull-Rom spline curve\n\t\t// \"lineCurveType\": \"curveMonotoneX\" // Monotone spline curve\n\n\t\t\"yDomain\": [-10000,30000],\n\t\t// either \"auto\" or an array for the x domain e.g. [0,2000]\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%b %y\",\n\t\t\t\"md\": \"%b %y\",\n\t\t\t\"lg\": \"%B %Y\"\n\t\t},\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"yAxisNumberFormat\": \".0f\",\n\t\t\"dateFormat\": \"%d/%m/%Y\",\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"xAxisLabel\": \"\",\n\t\t\"zeroLine\": \"0\"\n\t},\n\t\"optional\": {\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [1, 1]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 30,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 55\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 100,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 80\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 100,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 60\n\t\t\t}\n\t\t},\n\t\t\"xAxisTicks\": { // this is the number of ticks on the x axis - add the first and last date with the options below\n\t\t\t\"sm\": 2,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 5\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 7,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\":8\n\t\t},\n\t\t\"addFirstDate\": false,\n\t\t\"addFinalDate\": false,\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "chart_css": ".grid line {\n    stroke: #ccc;\n    stroke-opacity: 0.7;\n  }\n  \n  /* Need to discuss this with the team */\n  .axis path,\n  .axis line {\n    stroke: none; /* Changes the color of the axis lines */\n  }\n  \n  .grid .tick {\n    stroke: lightgrey; /* Changes the color of the gridlines */\n    stroke-opacity: 0.7;\n    shape-rendering: crispEdges; /* Makes the gridlines appear more crisp */\n  }\n  .grid path {\n    stroke-width: 0; /* Removes the line along the y-axis */\n  }\n  ",
            "data_csv": "date,category one,category two,category three,category four two lines,category five\n01/01/2020,20000,,1350,25000,23000\n02/02/2020,18000,0,12000,19000,12000\n03/03/2020,16070,0,19000,16000,4000\n04/04/2020,12000,9000,9000,12000,1000\n05/05/2020,13050,,11000,8000,18000\n06/06/2020,22000,4000,12000,5000,9000\n07/07/2020,25000,16500,13000,4000,7000\n08/08/2020,27000,15000,12000,3000,10000\n09/09/2020,29000,19000,11000,1000,11000\n10/10/2020,15000,21000,10000,6000,9000\n11/11/2020,12000,24000,7000,19000,21000\n12/12/2020,4000,28000,13000,18000,23000\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\n//console.log(`Graphic selected: ${graphic}`);\n\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//Accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\t//\tconsole.log(`Accessible summary set: ${config.essential.accessibleSummary}`);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\t// console.log(`Size set: ${size}`);\n\n\n\n\t// Define the dimensions and margin, width and height of the chart.\n\tlet margin = config.optional.margin[size];\n\tlet width = parseInt(graphic.style('width')) - margin.left - margin.right;\n\tlet height = 400 - margin.top - margin.bottom;\n\t// console.log(`Margin, width, and height set: ${margin}, ${width}, ${height}`);\n\n\t// Get categories from the keys used in the stack generator\n\tconst categories = Object.keys(graphic_data[0]).filter((k) => k !== 'date');\n\t// console.log(`Categories retrieved: ${categories}`);\n\n\tlet xDataType;\n\n\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t  xDataType = 'date';\n\t} else {\n\t  xDataType = 'numeric';\n\t}\n  \n\t// console.log(xDataType)\n\n\t// Define the x and y scales\n\n\tlet x;\n\n\tif (xDataType == 'date') {\n\t  x = d3.scaleTime()\n\t  .domain(d3.extent(graphic_data, (d) => d.date))\n\t  .range([0, width]);\n\t} else {\n\t  x = d3.scaleLinear()\n\t  .domain(d3.extent(graphic_data, (d) => +d.date))\n\t  .range([0, width]);\n\t}\n\t//console.log(`x defined`);\n\n\tconst y = d3\n\t\t.scaleLinear()\n\t\t.range([height, 0]);\n\n\tif (config.essential.yDomain == \"auto\") {\n\t\tlet minY = d3.min(graphic_data, (d) => Math.min(...categories.map((c) => d[c])))\n\t\tlet maxY = d3.max(graphic_data, (d) => Math.max(...categories.map((c) => d[c])))\n\t\ty.domain([minY, maxY])\n\t\tconsole.log(minY, maxY)\n\t} else {\n\t\ty.domain(config.essential.yDomain)\n\t}\n\n\t// This function generates an array of approximately count + 1 uniformly-spaced, rounded values in the range of the given start and end dates (or numbers).\n\tlet tickValues = x.ticks(config.optional.xAxisTicks[size]);\n\n\tif (config.optional.addFirstDate == true) {\n\t\ttickValues.push(graphic_data[0].date)\n\t\tconsole.log(\"First date added\")\n\t}\n\n\tif (config.optional.addFinalDate == true) {\n\t\ttickValues.push(graphic_data[graphic_data.length - 1].date)\n\t\tconsole.log(\"Last date added\")\n\t}\n\n\t// Create an SVG element\n\tconst svg = graphic\n\t\t.append('svg')\n\t\t.attr('width', width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\n\t//console.log(`SVG element created`);\n\n\n\n\t// create lines and circles for each category\n\tcategories.forEach(function (category) {\n\t\tconst lineGenerator = d3\n\t\t\t.line()\n\t\t\t.x((d) => x(d.date))\n\t\t\t.y((d) => y(d[category]))\n\t\t\t.defined(d => d[category] !== null) // Only plot lines where we have values\n\t\t\t.curve(d3[config.essential.lineCurveType]) // I used bracket notation here to access the curve type as it's a string\n\t\t\t.context(null);\n\t\t// console.log(`Line generator created for category: ${category}`);\n\n\t\tsvg\n\t\t\t.append('path')\n\t\t\t.datum(graphic_data)\n\t\t\t.attr('fill', 'none')\n\t\t\t.attr(\n\t\t\t\t'stroke',\n\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t]\n\t\t\t)\n\t\t\t.attr('stroke-width', 3)\n\t\t\t.attr('d', lineGenerator)\n\t\t\t.style('stroke-linejoin', 'round')\n\t\t\t.style('stroke-linecap', 'round');\n\t\t//console.log(`Path appended for category: ${category}`);\n\n\t\tconst lastDatum = graphic_data[graphic_data.length - 1];\n\n\n\t\t// console.log(`drawLegend: ${size}`);\n\t\t// size === 'sm'\n\n\t\tif (config.essential.drawLegend || size === 'sm') {\n\n\n\t\t\t// Set up the legend\n\t\t\tlet legenditem = d3\n\t\t\t\t.select('#legend')\n\t\t\t\t.selectAll('div.legend--item')\n\t\t\t\t.data(categories.map((c, i) => [c, config.essential.colour_palette[i % config.essential.colour_palette.length]]))\n\t\t\t\t.enter()\n\t\t\t\t.append('div')\n\t\t\t\t.attr('class', 'legend--item');\n\n\t\t\tlegenditem\n\t\t\t\t.append('div')\n\t\t\t\t.attr('class', 'legend--icon--circle')\n\t\t\t\t.style('background-color', function (d) {\n\t\t\t\t\treturn d[1];\n\t\t\t\t});\n\n\t\t\tlegenditem\n\t\t\t\t.append('div')\n\t\t\t\t.append('p')\n\t\t\t\t.attr('class', 'legend--text')\n\t\t\t\t.html(function (d) {\n\t\t\t\t\treturn d[0];\n\t\t\t\t});\n\n\t\t} else {\n\n\t\t\t// Add text labels to the right of the circles\n\t\t\tsvg\n\t\t\t\t.append('text')\n\t\t\t\t.attr(\n\t\t\t\t\t'transform',\n\t\t\t\t\t`translate(${x(lastDatum.date)}, ${y(lastDatum[category])})`\n\t\t\t\t)\n\t\t\t\t.attr('x', 10)\n\t\t\t\t.attr('dy', '.35em')\n\t\t\t\t.attr('text-anchor', 'start')\n\t\t\t\t.attr(\n\t\t\t\t\t'fill',\n\t\t\t\t\tconfig.essential.text_colour_palette[\n\t\t\t\t\tcategories.indexOf(category) % config.essential.text_colour_palette.length\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\t.text(category)\n\t\t\t\t.attr(\"class\",\"directLineLabel\")\n\t\t\t\t.call(wrap, margin.right - 10); //wrap function for the direct labelling.\n\n\t\t};\n\n\n\t\tsvg\n\t\t\t.append('circle')\n\t\t\t.attr('cx', x(lastDatum.date))\n\t\t\t.attr('cy', y(lastDatum[category]))\n\t\t\t.attr('r', 4)\n\t\t\t.attr(\n\t\t\t\t'fill',\n\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t]\n\t\t\t);\n\t\t// console.log(`Circle appended for category: ${category}`);\n\n\n\n\t});\n\n\t// add grid lines to y axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'grid')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisLeft(y)\n\t\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t\t.tickSize(-width)\n\t\t\t\t.tickFormat('')\n\t\t)\n\t\t.lower();\n\n\td3.selectAll('g.tick line')\n\t\t.each(function (e) {\n\t\t\tif (e == config.essential.zeroLine) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t})\n\n\t// Add the x-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', `translate(0, ${height})`)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(x)\n\t\t\t\t.tickValues(tickValues)\n\t\t\t\t.tickFormat((d) => xDataType == 'date' ? d3.timeFormat(config.essential.xAxisTickFormat[size])(d)\n\t\t\t\t\t: d3.format(config.essential.xAxisNumberFormat)(d))\n\t\t);\n\n\n\t// Add the y-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(d3.axisLeft(y).ticks(config.optional.yAxisTicks[size])\n\t\t.tickFormat(d3.format(config.essential.yAxisNumberFormat)));\n\t\n\n\n\t// This does the y-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', `translate(0, 0)`)\n\t\t.append('text')\n\t\t.attr('x', -margin.left + 5)\n\t\t.attr('y', -15)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n// This does the x-axis label\nsvg\n.append('g')\n.attr('transform', \"translate(0, \"+(height+margin.bottom)+\")\")\n.append('text')\n.attr('x',width)\n.attr('y', -25)\n.attr('class', 'axis--label')\n.text(config.essential.xAxisLabel)\n.attr('text-anchor', 'end');\n\n//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\t// console.log(`Link to source created`);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n\t// console.log(`PymChild height sent`);\n}\n\n//text wrap function for the direct labelling\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\n// Load the data\nd3.csv(config.essential.graphic_data_url).then((rawData) => {\n\tgraphic_data = rawData.map((d) => {\n\t\tif (d3.timeParse(config.essential.dateFormat)(d.date) !== null) {\n\t\t\treturn {\n\t\t\t\tdate: d3.timeParse(config.essential.dateFormat)(d.date),\n\t\t\t\t...Object.entries(d)\n\t\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t\t.map(([key, value]) => [key, value == \"\" ? null : +value]) // Checking for missing values so that they can be separated from zeroes\n\t\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tdate: (+d.date),\n\t\t\t\t...Object.entries(d)\n\t\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t\t.map(([key, value]) => [key,  value == \"\" ? null : +value]) // Checking for missing values so that they can be separated from zeroes\n\t\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t\t}}\n\t\t});\n\n\tconsole.log(graphic_data);\n\n\t// console.log(`Data from CSV processed`);\n\n\t// console.log('Final data structure:');\n\t// console.log(graphic_data);\n\n\t// Use pym to create an iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n\t// console.log(`PymChild created with renderCallback to drawGraphic`);\n});\n",
            "comparison_csv": null
        },
        "line-chart-sm": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\n\t\t\t\"#003C57\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#dadada\"\n\t\t],\n\t\t\"labelFinalPoint\": true,\n\t\t\"reference_category\": \"England\",// Highlighted on each chart and doesn't get it's own chart - leave blank to turn off\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"lineCurveType\": \"curveLinear\", // Set the default line curve type\n\t\t// Examples of line curve types\n\t\t// \"lineCurveType\": \"curveLinear\", // Straight line segments\n\t\t// \"lineCurveType\": \"curveStep\", // Step-wise line\n\t\t// \"lineCurveType\": \"curveStepBefore\", // Step-before line\n\t\t// \"lineCurveType\": \"curveStepAfter\", // Step-after line\n\t\t// \"lineCurveType\": \"curveBasis\", // B-spline curve\n\t\t// \"lineCurveType\": \"curveCardinal\", // Cardinal spline curve\n\t\t// \"lineCurveType\": \"curveCatmullRom\" // Catmull-Rom spline curve\n\t\t// \"lineCurveType\": \"curveMonotoneX\" // Monotone spline curve\n\n\t\t\"yDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the y domain e.g. [0,2000]\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%b %y\",\n\t\t\t\"md\": \"%b %y\",\n\t\t\t\"lg\": \"%b %y\"\n\t\t},\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"dateFormat\": \"%d/%m/%Y\",\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"zeroLine\": \"0\"\n\n\t},\n\t\"optional\": {\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 3\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [1, 1]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 45,\n\t\t\t\t\"right\": 50,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 60\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 45,\n\t\t\t\t\"right\": 50,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 60\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 45,\n\t\t\t\t\"right\": 50,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 60\n\t\t\t}\n\t\t},\n\t\t\"xAxisTicksEvery\": { // this is the interval of ticks on the x axis - always including the first and last date\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 5\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 7,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\":8\n\t\t},\n\t\t\"addFirstDate\": false,\n\t\t\"addFinalDate\": false,\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "chart_css": ".grid line {\n    stroke: #ccc;\n    stroke-opacity: 0.7;\n  }\n  \n  /* Need to discuss this with the team */\n  .axis path,\n  .axis line {\n    stroke: none; /* Changes the color of the axis lines */\n  }\n  \n  .grid .tick {\n    stroke: lightgrey; /* Changes the color of the gridlines */\n    stroke-opacity: 0.7;\n    shape-rendering: crispEdges; /* Makes the gridlines appear more crisp */\n  }\n  .grid path {\n    stroke-width: 0; /* Removes the line along the y-axis */\n  }\n  \n  .chart-container {\n    display: inline-block;\n    vertical-align: top;\n  }\n  \n  .chart-container:last-child {\n    margin-right: 0;\n  }\n  \n  .title {\n    font-weight: 600;\n    fill: #414042;\n  }\n\n  .dataLabel {\n    font-weight: 600;\n    font-size: 14px;\n  }",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//Accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tconst aspectRatio = config.optional.aspectRatio[size];\n\tconst chart_every = config.optional.chart_every[size];\n\tconst droppedMargin = 20;\n\t// let chart_width =\n\t// \t((parseInt(graphic.style('width')) - margin.left + 10) / chart_every) - margin.right -10;\n\n\n\tfunction calculateChartWidth(size) {\n\t\tconst chartEvery = config.optional.chart_every[size];\n\t\t// const aspectRatio = config.optional.aspectRatio[size];\n\t\tconst chartMargin = config.optional.margin[size];\n\n\t\tconst chartWidth =\n\t\t\t((parseInt(graphic.style('width')) - chartMargin.left + droppedMargin) / chartEvery) - chartMargin.right - droppedMargin;\n\t\treturn chartWidth;\n\t}\n\n\tconst reference = config.essential.reference_category;\n\n\t// Get categories from the keys used in the stack generator\n\tconst categories = Object.keys(graphic_data[0]).filter((k) => k !== 'date' && k !== reference);\n\tconst categoriesToPlot = Object.keys(graphic_data[0]).filter((k) => k !== 'date')\n\n\t// Create a container div for each small multiple\n\tlet chartContainers = graphic\n\t\t.selectAll('.chart-container')\n\t\t.data(categories)\n\t\t.join('div')\n\t\t.attr('class', 'chart-container');\n\n\tfunction drawChart(container, series, index) {\n\t\t// Set dimensions\n\t\tlet margin = { ...config.optional.margin[size] };\n\n\t\t// If the chart is not in the first position in the row, reduce the left margin\n\t\tif (index % chart_every !== 0) {\n\t\t\tmargin.left = droppedMargin;\n\t\t}\n\n\t\tlet chart_width = calculateChartWidth(size);\n\n\t\t//height is set by the aspect ratio\n\t\tlet height =\n\t\t\taspectRatio[1] / aspectRatio[0] * chart_width;\n\n\t\t// Define the x and y scales\n\n\t\tlet xDataType;\n\n\t\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t\t  xDataType = 'date';\n\t\t} else {\n\t\t  xDataType = 'numeric';\n\t\t}\n\t  \n\t\t// console.log(xDataType)\n\n\t\tlet x;\n\n\t\tif (xDataType == 'date') {\n\t\t  x = d3.scaleTime()\n\t\t  .domain(d3.extent(graphic_data, (d) => d.date))\n\t\t  .range([0, chart_width]);\n\t\t} else {\n\t\t  x = d3.scaleLinear()\n\t\t  .domain(d3.extent(graphic_data, (d) => +d.date))\n\t\t  .range([0, chart_width]);\n\t\t}\n\n\n\t\tconst y = d3\n\t\t\t.scaleLinear()\n\t\t\t.range([height, 0]);\n\n\t\t\tif (config.essential.yDomain == \"auto\") {\n\t\t\t\tlet minY = d3.min(graphic_data, (d) => Math.min(...categoriesToPlot.map((c) => d[c])))\n\t\t\t\tlet maxY = d3.max(graphic_data, (d) => Math.max(...categoriesToPlot.map((c) => d[c])))\n\t\t\t\ty.domain([minY, maxY])\n\t\t\t\t// console.log(minY, maxY)\n\t\t\t} else {\n\t\t\t\ty.domain(config.essential.yDomain)\n\t\t\t}\n\n\t\t// Create an SVG element\n\t\tconst svg = container\n\t\t\t.append('svg')\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t\t.attr('class', 'chart')\n\t\t\t.style('background-color', '#fff')\n\t\t\t.append('g')\n\t\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\n\n\n\n\t\t// create lines and circles for each category\n\t\tcategoriesToPlot.forEach(function (category) {\n\t\t\tconst lineGenerator = d3\n\t\t\t\t.line()\n\t\t\t\t.x((d) => x(d.date))\n\t\t\t\t.y((d) => y(d[category]))\n\t\t\t\t.defined(d => d[category] !== null) // Only plot lines where we have values\n\t\t\t\t.curve(d3[config.essential.lineCurveType]) // I used bracket notation here to access the curve type as it's a string\n\t\t\t\t.context(null);\n\n\t\t\tsvg\n\t\t\t\t.append('path')\n\t\t\t\t.datum(graphic_data)\n\t\t\t\t.attr('fill', 'none')\n\t\t\t\t.attr(\n\t\t\t\t\t'stroke', () => (categories.indexOf(category) == index) ? config.essential.colour_palette[0] :\n\t\t\t\t\t\tcategory == reference ? config.essential.colour_palette[1] : config.essential.colour_palette[2]\n\t\t\t\t\t// config.essential.colour_palette[\n\t\t\t\t\t// categories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t\t// ]\n\t\t\t\t)\n\t\t\t\t.attr('stroke-width', 2)\n\t\t\t\t.attr('d', lineGenerator)\n\t\t\t\t.style('stroke-linejoin', 'round')\n\t\t\t\t.style('stroke-linecap', 'round')\n\t\t\t\t.attr('class', 'line' + categories.indexOf(category));\n\n\t\t\tsvg.selectAll('.line' + index).attr('stroke-width', 2.5).raise()\n\n\t\t\tconst lastDatum = graphic_data[graphic_data.length - 1];\n\n\t\t\t//Labelling the final data point on each chart if option selected in the config\n\t\t\tif (config.essential.labelFinalPoint == true) {\n\t\t\t\t// Add text labels to the right of the circles\n\t\t\t\tif (categories.indexOf(category) == index) {\n\t\t\t\t\tsvg\n\t\t\t\t\t\t.append('text')\n\t\t\t\t\t\t.attr('class', 'dataLabel')\n\t\t\t\t\t\t.attr(\n\t\t\t\t\t\t\t'transform',\n\t\t\t\t\t\t\t`translate(${x(lastDatum.date)}, ${y(lastDatum[category])})`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.attr('x', 5)\n\t\t\t\t\t\t.attr('y', 4)\n\t\t\t\t\t\t.attr('text-anchor', 'start')\n\t\t\t\t\t\t.attr(\n\t\t\t\t\t\t\t'fill', config.essential.colour_palette[0]\n\t\t\t\t\t\t\t// config.essential.colour_palette[\n\t\t\t\t\t\t\t// categories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t\t\t\t// ]\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.text(d3.format(\",.0f\")(lastDatum[category]))\n\t\t\t\t}\n\n\t\t\t\tif (categories.indexOf(category) == index) {\n\t\t\t\t\tsvg\n\t\t\t\t\t\t.append('circle')\n\t\t\t\t\t\t.attr('cx', x(lastDatum.date))\n\t\t\t\t\t\t.attr('cy', y(lastDatum[category]))\n\t\t\t\t\t\t.attr('r', 3)\n\t\t\t\t\t\t.attr(\n\t\t\t\t\t\t\t'fill', config.essential.colour_palette[0]\n\t\t\t\t\t\t\t// config.essential.colour_palette[\n\t\t\t\t\t\t\t// categories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t\t\t\t// ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\td3.selectAll('circle').raise()\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// add grid lines to y axis\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'grid')\n\t\t\t.call(\n\t\t\t\td3\n\t\t\t\t\t.axisLeft(y)\n\t\t\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t\t\t.tickSize(-chart_width)\n\t\t\t\t\t.tickFormat('')\n\t\t\t)\n\t\t\t.lower();\n\n\t\t\td3.selectAll('g.tick line')\n\t\t\t\t.each(function (e) {\n\t\t\t\t\tif (e == config.essential.zeroLine) {\n\t\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t// Add the x-axis\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.attr('transform', `translate(0, ${height})`)\n\t\t\t.call(\n\t\t\t\td3\n\t\t\t\t\t.axisBottom(x)\n\t\t\t\t\t.tickValues(graphic_data\n\t\t\t\t\t\t.map((d) => xDataType == 'date' ? \n\t\t\t\t\t\t\t d.date.getTime() : d.date\n\t\t\t\t\t\t) //just get dates as seconds past unix epoch\n\t\t\t\t\t\t.filter(function (d, i, arr) {\n\t\t\t\t\t\t\treturn arr.indexOf(d) == i\n\t\t\t\t\t\t}) //find unique\n\t\t\t\t\t\t.map(function (d) {\n\t\t\t\t\t\t\treturn new Date(d)\n\t\t\t\t\t\t}) //map back to dates\n\t\t\t\t\t\t.sort(function (a, b) {\n\t\t\t\t\t\t\treturn a - b\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(function (d, i) {\n\t\t\t\t\t\t\treturn i % config.optional.xAxisTicksEvery[size] === 0 && i <= graphic_data.length - config.optional.xAxisTicksEvery[size] || i == graphic_data.length - 1 //Rob's fussy comment about labelling the last date\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t\t.tickFormat((d) => xDataType == 'date' ? d3.timeFormat(config.essential.xAxisTickFormat[size])(d)\n\t\t\t\t\t: d3.format(config.essential.xAxisNumberFormat)(d))\n\t\t\t);\n\n\n\t\t//Only draw the y axis tick labels on the first chart in each row\n\t\tif (index % chart_every === 0) {\n\t\t\tsvg\n\t\t\t\t.append('g')\n\t\t\t\t.attr('class', 'y axis')\n\t\t\t\t.call(d3.axisLeft(y).ticks(config.optional.yAxisTicks[size]))\n\t\t\t\t.selectAll('.tick text')\n\t\t\t\t.call(wrap, margin.left - 10);\n\t\t} else {\n\t\t\tsvg.append('g').attr('class', 'y axis').call(d3.axisLeft(y).tickValues([]));\n\t\t}\n\n\n\t\t// This does the chart title label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('dy', -20)\n\t\t\t.attr('class', 'title')\n\t\t\t.text(series)\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.call(wrap, (chart_width + margin.right));\n\n\n\t\t// This does the y-axis label\n\t\tif (index % chart_every === 0) {\n\t\t\tsvg\n\t\t\t\t.append('g')\n\t\t\t\t.attr('transform', `translate(0, 0)`)\n\t\t\t\t.append('text')\n\t\t\t\t.attr('x', -margin.left + 5)\n\t\t\t\t.attr('y', 0)\n\t\t\t\t.attr('class', 'axis--label')\n\t\t\t\t.text(config.essential.yAxisLabel)\n\t\t\t\t.attr('text-anchor', 'start');\n\t\t}\n\n\t\t// This does the x-axis label\n\t\t\tif (index % chart_every === chart_every - 1 || index === [...chartContainers].length - 1) {\n\t\t\t\tsvg\n\t\t\t\t\t.append('g')\n\t\t\t\t\t.attr('transform', `translate(0, ${height})`)\n\t\t\t\t\t.append('text')\n\t\t\t\t\t.attr('x', chart_width)\n\t\t\t\t\t.attr('y', 35)\n\t\t\t\t\t.attr('class', 'axis--label')\n\t\t\t\t\t.text(config.essential.xAxisLabel)\n\t\t\t\t\t.attr('text-anchor', 'end');\n\t\t\t}\n\t}\n\n\t// Draw the charts for each small multiple\n\tchartContainers.each(function (chart, i) {\n\t\tdrawChart(d3.select(this), chart, i);\n\t});\n\n\n\t// Set up the legend\n\tlet legenditem = legend\n\t\t.selectAll('div.legend--item')\n\t\t.data([[\"Selected region\", config.essential.colour_palette[0]], [reference, config.essential.colour_palette[1]], [\"All other regions\", config.essential.colour_palette[2]]])\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--refline')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n\t// console.log(`PymChild height sent`);\n}\n\n//text wrap function for the direct labelling\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\n// Load the data\nd3.csv(config.essential.graphic_data_url).then((rawData) => {\n\tgraphic_data = rawData.map((d) => {\n\t\tif (d3.timeParse(config.essential.dateFormat)(d.date) !== null) {\n\t\t\treturn {\n\t\t\t\tdate: d3.timeParse(config.essential.dateFormat)(d.date),\n\t\t\t\t...Object.entries(d)\n\t\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t\t.map(([key, value]) => [key, value == \"\" ? null : +value]) // Checking for missing values so that they can be separated from zeroes\n\t\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tdate: (+d.date),\n\t\t\t\t...Object.entries(d)\n\t\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t\t.map(([key, value]) => [key, value == \"\" ? null : +value]) // Checking for missing values so that they can be separated from zeroes\n\t\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t\t}}\n\t\t});\n\n\t// Use pym to create an iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n\n});\n",
            "data_csv": "date,category one,category two,category three,category four two lines,category five,category six,category seven,category eight,England\n01/01/2020,20000,15000,1350,25000,23000,2147.647674,803.4236518,8761.200865,20186.82495\n02/02/2020,18000,25000,12000,19000,12000,15107.03413,6265.399707,6219.250923,8958.465726\n03/03/2020,16070,16000,19000,16000,4000,1578.114468,1387.812878,1305.516917,479.0131944\n04/04/2020,12000,9000,9000,12000,1000,5493.805776,4584.536935,9831.943688,285.2240553\n05/05/2020,13050,7000,11000,8000,18000,5151.210511,2178.066478,2627.321883,16723.99743\n06/06/2020,22000,4000,12000,5000,9000,3760.459879,7483.754553,3364.22916,8803.264019\n07/07/2020,25000,16500,13000,4000,7000,3573.186076,8570.58649,1381.490126,2205.526834\n08/08/2020,27000,15000,12000,3000,10000,8543.773412,6015.670275,2046.407088,891.9963241\n09/09/2020,29000,19000,11000,1000,11000,14594.12132,6302.600221,769.5904996,4146.356126\n10/10/2020,15000,21000,10000,6000,9000,9625.136914,5080.766341,4507.307144,3299.148339\n11/11/2020,12000,24000,7000,19000,21000,9098.24159,464.6884476,5187.1558,10150.04736\n12/12/2020,4000,28000,13000,18000,23000,16333.7828,187.247021,14119.25473,16971.117",
            "comparison_csv": null
        },
        "line-chart-sm-colours": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\n\t\t\t\"#206095\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"lineCurveType\": \"curveLinear\", // Set the default line curve type\n\t\t// Examples of line curve types\n\t\t// \"lineCurveType\": \"curveLinear\", // Straight line segments\n\t\t// \"lineCurveType\": \"curveStep\", // Step-wise line\n\t\t// \"lineCurveType\": \"curveStepBefore\", // Step-before line\n\t\t// \"lineCurveType\": \"curveStepAfter\", // Step-after line\n\t\t// \"lineCurveType\": \"curveBasis\", // B-spline curve\n\t\t// \"lineCurveType\": \"curveCardinal\", // Cardinal spline curve\n\t\t// \"lineCurveType\": \"curveCatmullRom\" // Catmull-Rom spline curve\n\t\t// \"lineCurveType\": \"curveMonotoneX\" // Monotone spline curve\n\n\t\t\"xDomain\": \"auto\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,2000]\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%b %y\",\n\t\t\t\"md\": \"%b %y\",\n\t\t\t\"lg\": \"%b %y\"\n\t\t},\n\t\t\"yAxisFormat\": \",.0f\",\n\t\t\"dateFormat\": \"%d/%m/%Y\",\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"zeroLine\": \"0\"\n\t},\n\t\"optional\": {\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [1, 1],\n\t\t\t\"lg\": [1, 1]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 50,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 60\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 50,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 60\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 50,\n\t\t\t\t\"right\": 50,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 60\n\t\t\t}\n\t\t},\n\t\t\"xAxisTicksEvery\": { // this is the interval of ticks on the x axis but it will always show the first and last date.\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 3\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 7,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\":8\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600,\n\t\t\"dropYAxis\": true,\n\t\t\"freeYAxisScales\": false //If true dropYAxis will be ignored - each chart will always have a y-axis\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//Accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tconst droppedMargin = 20;\n\t// var chart_width =\n\t// \t((parseInt(graphic.style('width')) - margin.left + 10) / chartEvery) - margin.right -10;\n\n\n\t// function calculateChartWidth(size) {\n\t// \tconst chartEvery = config.optional.chart_every[size];\n\t// \t// const aspectRatio = config.optional.aspectRatio[size];\n\t// \tconst chartMargin = config.optional.margin[size];\n\n\t// \tconst chartWidth =\n\t// \t\t((parseInt(graphic.style('width')) - chartMargin.left + droppedMargin) / chartEvery) - chartMargin.right - droppedMargin;\n\t// \treturn chartWidth;\n\t// }\n\n\t// Get categories from the keys used in the stack generator\n\tconst categories = Object.keys(graphic_data[0]).filter((k) => k !== 'date' && k !== 'series');\n\t// console.log(categories)\n\n\t// Nest the graphic_data by the 'series' column\n\tlet nested_data = d3.group(graphic_data, (d) => d.series);\n\n\t// console.log(Array.from(nested_data))\n\t// Create a container div for each small multiple\n\tlet chartContainers = graphic\n\t\t.selectAll('.chart-container')\n\t\t.data(Array.from(nested_data))\n\t\t.join('div')\n\t\t.attr('class', 'chart-container');\n\n\tfunction drawChart(container, data, chartIndex) {\n\n\t\tfunction calculateChartWidth(size) {\n\n\t\t\tconst chartMargin = config.optional.margin[size];\n\n\t\t\tif (config.optional.dropYAxis && !config.optional.freeYAxisScales) {\n\t\t\t\t// Chart width calculation allowing for droppedMargin px left margin between the charts\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * droppedMargin)) / chartEvery) - chartMargin.right;\n\t\t\t\treturn chartWidth;\n\t\t\t} else {\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n\t\t\t\treturn chartWidth;\n\t\t\t}\n\t\t}\n\n\t\tconst chartEvery = config.optional.chart_every[size];\n\t\tconst chartsPerRow = config.optional.chart_every[size];\n\t\tlet chartPosition = chartIndex % chartsPerRow;\n\n\t\tlet margin = { ...config.optional.margin[size] };\n\n\t\t// If the chart is not in the first position in the row, reduce the left margin\n\t\tif (config.optional.dropYAxis && !config.optional.freeYAxisScales) {\n\t\t\tif (chartPosition !== 0) {\n\t\t\t\tmargin.left = droppedMargin;\n\t\t\t}\n\t\t}\n\n\t\tconst aspectRatio = config.optional.aspectRatio[size];\n\t\tlet chart_width = calculateChartWidth(size)\n\n\t\t//height is set by the aspect ratio\n\t\tvar height =\n\t\t\taspectRatio[1] / aspectRatio[0] * chart_width;\n\n\t\t// Define the x and y scales\n\t\tconst xAxis = d3\n\t\t\t.scaleTime()\n\t\t\t.domain(d3.extent(graphic_data, (d) => d.date))\n\t\t\t.range([0, chart_width]);\n\n\n\t\tconst y = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([\n\t\t\t\t0, //This should be a calculated rather than 0 to allow for negativ values\n\t\t\t\td3.max(config.optional.freeYAxisScales ? data[1] : graphic_data, (d) => Math.max(...categories.map((c) => d[c])))\n\t\t\t])\n\t\t\t.nice()\n\t\t\t.range([height, 0]);\n\n\n\t\t// Create an SVG element\n\t\tconst svg = container\n\t\t\t.append('svg')\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t\t.attr('class', 'chart')\n\t\t\t.style('background-color', '#fff')\n\t\t\t.append('g')\n\t\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\n\n\n\n\t\t// create lines and circles for each category\n\t\tcategories.forEach(function (category) {\n\t\t\tconst lineGenerator = d3\n\t\t\t\t.line()\n\t\t\t\t.x((d) => xAxis(d.date))\n\t\t\t\t.y((d) => y(d[category]))\n\t\t\t\t.curve(d3[config.essential.lineCurveType]) // I used bracket notation here to access the curve type as it's a string\n\t\t\t\t.context(null)\n\t\t\t\t.defined(d => d[category] !== null) // Only plot lines where we have values\n\n\t\t\tsvg\n\t\t\t\t.append('path')\n\t\t\t\t.datum(data[1])\n\t\t\t\t.attr('fill', 'none')\n\t\t\t\t.attr(\n\t\t\t\t\t'stroke', /*() => (categories.indexOf(category) == chartIndex) ? \"#206095\" : \"#dadada\"*/\n\t\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\t.attr('stroke-width', 2.5)\n\t\t\t\t.attr('d', lineGenerator)\n\t\t\t\t.style('stroke-linejoin', 'round')\n\t\t\t\t.style('stroke-linecap', 'round')\n\t\t\t\t.attr('class', 'line' + categories.indexOf(category));\n\n\t\t});\n\n\t\t// add grid lines to y axis\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'grid')\n\t\t\t.call(\n\t\t\t\td3\n\t\t\t\t\t.axisLeft(y)\n\t\t\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t\t\t.tickSize(-chart_width)\n\t\t\t\t\t.tickFormat('')\n\t\t\t)\n\t\t\t.lower();\n\n\t\td3.selectAll('g.tick line')\n\t\t\t.each(function (e) {\n\t\t\t\tif (e == config.essential.zeroLine) {\n\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t}\n\t\t\t})\n\n\t\t// Add the x-axis\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.attr('transform', `translate(0, ${height})`)\n\t\t\t.call(\n\t\t\t\td3\n\t\t\t\t\t.axisBottom(xAxis)\n\t\t\t\t\t.tickValues([...new Set(graphic_data\n\t\t\t\t\t\t.map(function (d) {\n\t\t\t\t\t\t\treturn d.date.getTime()\n\t\t\t\t\t\t}))] //just get unique dates as seconds past unix epoch\n\t\t\t\t\t\t.map(function (d) {\n\t\t\t\t\t\t\treturn new Date(d)\n\t\t\t\t\t\t}) //map back to dates\n\t\t\t\t\t\t.sort(function (a, b) {\n\t\t\t\t\t\t\treturn a - b\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(function (d, i) {\n\t\t\t\t\t\t\treturn i % config.optional.xAxisTicksEvery[size] === 0 && i <= data[1].length - config.optional.xAxisTicksEvery[size] || i == data[1].length - 1 //Rob's fussy comment about labelling the last date\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t\t.tickFormat(d3.timeFormat(config.essential.xAxisTickFormat[size]))\n\t\t\t);\n\n\n\t\t//If dropYAxis == true Only draw the y axis tick labels on the first chart in each row\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis numeric')\n\t\t\t.call(d3.axisLeft(y)\n\t\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t\t.tickFormat((d) => config.optional.freeYAxisScales ? d3.format(config.essential.yAxisFormat)(d) :\n\t\t\t\t\tconfig.optional.dropYAxis ? (chartPosition == 0 ? d3.format(config.essential.yAxisFormat)(d) : \"\") :\n\t\t\t\t\td3.format(config.essential.yAxisFormat)(d)))\n\t\t\t.selectAll('.tick text')\n\t\t\t.call(wrap, margin.left - 10);\n\n\n\n\t\t// This does the chart title label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('dy', -35)\n\t\t\t.attr('class', 'title')\n\t\t\t.text(d => d[0])\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.call(wrap, (chart_width + margin.right));\n\n\n\t\t// This does the y-axis label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', `translate(${-margin.left}, ${-margin.top})`)\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 35)\n\t\t\t.attr('class', 'axis--label')\n\t\t\t.text(() => config.optional.freeYAxisScales ? config.essential.yAxisLabel : \n\t\t\tchartIndex % chartEvery == 0 ?\n\t\t\t\tconfig.essential.yAxisLabel : \"\") //May need to make the y-axis label an array in the config?\n\t\t\t.attr('text-anchor', 'start');\n\t}\n\n\n\t// Draw the charts for each small multiple\n\tchartContainers.each(function (chart, i) {\n\t\tdrawChart(d3.select(this), chart, i);\n\t});\n\n\n\t// Set up the legend\n\tvar legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(categories, config.essential.colour_palette)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n\t// console.log(`PymChild height sent`);\n}\n\n//text wrap function for the direct labelling\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tvar text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tvar breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\n// Load the data\nd3.csv(config.essential.graphic_data_url).then((rawData) => {\n\tgraphic_data = rawData.map((d) => {\n\t\treturn {\n\t\t\tdate: d3.timeParse(config.essential.dateFormat)(d.date),\n\t\t\t...Object.entries(d)\n\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t.map(([key, value]) => key !== \"series\" ? [key, value == \"\" ? null : +value] : [key, value]) // Checking for missing values so that they can be separated from zeroes\n\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t};\n\t});\n\n\t// Use pym to create an iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n\n});\n",
            "chart_css": ".grid line {\n    stroke: #ccc;\n    stroke-opacity: 0.7;\n  }\n  \n  /* Need to discuss this with the team */\n  .axis path,\n  .axis line {\n    stroke: none; /* Changes the color of the axis lines */\n  }\n  \n  .grid .tick {\n    stroke: lightgrey; /* Changes the color of the gridlines */\n    stroke-opacity: 0.7;\n    shape-rendering: crispEdges; /* Makes the gridlines appear more crisp */\n  }\n  .grid path {\n    stroke-width: 0; /* Removes the line along the y-axis */\n  }\n  \n  .chart-container {\n    display: inline-block;\n    vertical-align: top;\n  }\n  \n  .chart-container:last-child {\n    margin-right: 0;\n  }\n  \n  .title {\n    font-weight: 600;\n    fill: #414042;\n  }\n\n  .dataLabel {\n    font-weight: 600;\n    font-size: 14px;\n  }\n\n  #legend {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }",
            "data_csv": "date,series,category one,category two,category three,category four two lines,category five\n01/01/2020,First,20000,,1350,25000,23000\n02/02/2020,First,18000,,12000,19000,12000\n03/03/2020,First,16070,,19000,16000,4000\n04/04/2020,First,12000,,9000,12000,1000\n05/05/2020,First,13050,,11000,8000,18000\n06/06/2020,First,22000,,12000,5000,9000\n07/07/2020,First,25000,,13000,4000,7000\n08/08/2020,First,27000,,12000,3000,10000\n09/09/2020,First,29000,,11000,1000,11000\n10/10/2020,First,15000,,10000,6000,9000\n11/11/2020,First,12000,,7000,19000,21000\n12/12/2020,First,4000,,13000,18000,23000\n01/01/2020,Second,482.495862,6396.469399,466.5735997,4578.593199,8848.149683\n02/02/2020,Second,16428.17405,13050.42745,2326.014871,7690.21225,7432.733848\n03/03/2020,Second,8437.625817,7411.853904,1933.039861,3588.661808,2743.003989\n04/04/2020,Second,5176.089114,3930.166621,,4960.134801,87.14450154\n05/05/2020,Second,3067.287354,2101.910411,,707.7133206,15723.54157\n06/06/2020,Second,21894.056,2541.195861,,3917.058618,1989.086454\n07/07/2020,Second,21835.47288,10946.29623,7866.811971,3095.905796,4848.339928\n08/08/2020,Second,13119.97057,10526.64195,3673.311405,2596.754837,5170.280521\n09/09/2020,Second,20309.05775,17076.23491,10444.76184,140.3848781,1451.703193\n10/10/2020,Second,8173.976488,12147.62654,5409.031345,2944.038551,4758.873409\n11/11/2020,Second,5237.670297,19938.44912,868.77407,8054.884251,15896.87709\n12/12/2020,Second,159.7248455,17020.61066,11684.28499,4725.18281,20999.63155\n01/01/2020,Third,440.5282528,2858.339571,355.0191296,3471.466271,3677.624693\n02/02/2020,Third,15222.06642,12030.98772,586.041359,7364.334901,7127.619635\n03/03/2020,Third,6102.234171,1038.164866,37.96484322,191.9085074,2482.745507\n04/04/2020,Third,4905.094975,789.7991954,201.9796087,3614.218012,16.75763596\n05/05/2020,Third,488.5670546,450.3531597,642.4715638,57.21871199,14371.1071\n06/06/2020,Third,5760.480109,2160.917839,2335.649869,3717.940262,227.1203974\n07/07/2020,Third,13890.85169,7055.350239,7398.494057,208.01509,837.6827717\n08/08/2020,Third,8247.101259,4518.902447,678.4232623,1112.263592,4585.050939\n09/09/2020,Third,16546.7432,6595.827086,86.70754305,139.57466,349.8928442\n10/10/2020,Third,2474.738547,10677.41426,4626.017653,1896.836908,3170.273289\n11/11/2020,Third,3705.160167,6653.917558,807.9568241,6403.585015,15339.77719\n12/12/2020,Third,76.03134223,5724.341153,1478.765859,3095.032876,9614.295569\n01/01/2020,Fourth,33.54442296,995.3964743,56.24456929,1899.105038,1227.635124\n02/02/2020,Fourth,9163.523255,9255.829113,324.8554239,78.7271963,2121.313316\n03/03/2020,Fourth,3750.270703,410.7083267,10.02944143,117.1182182,1497.59581\n04/04/2020,Fourth,2967.663837,746.1274766,54.9256114,2517.764362,15.20187195\n05/05/2020,Fourth,30.95966275,379.4539785,500.9525932,53.32040669,9645.167396\n06/06/2020,Fourth,3586.564923,1974.41153,2145.932377,2016.837639,199.7323207\n07/07/2020,Fourth,4124.673293,4762.050088,6362.320071,21.07280351,304.2894515\n08/08/2020,Fourth,7884.343096,1389.827094,102.0929162,426.4270492,266.8050704\n09/09/2020,Fourth,1741.252508,3786.653011,6.435044955,3.174721441,334.5135094\n10/10/2020,Fourth,1398.070218,2009.064688,109.1564444,642.3760488,268.2066726\n11/11/2020,Fourth,150.4833776,715.4037825,544.7605849,803.0840646,11214.18882\n12/12/2020,Fourth,71.49298418,408.9381088,781.8907324,1073.681759,2634.951385\n",
            "comparison_csv": null
        },
        "line-chart-with-area": {
            "script_js": "//Note: see data.csv for the required data format - the template is quite paticular on the columns ending with _lowerCI and _upperCI\n\nlet graphic = d3.select('#graphic');\n//console.log(`Graphic selected: ${graphic}`);\nlet legend = d3.selectAll('#legend')\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\t//console.log(`Removed existing chart elements`);\n\tlegend.selectAll('*').remove();\n\t//Accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\t//\tconsole.log(`Accessible summary set: ${config.essential.accessibleSummary}`);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\t// console.log(`Size set: ${size}`);\n\n\n\t// Define the dimensions and margin, width and height of the chart.\n\tlet margin = config.optional.margin[size];\n\tlet width = parseInt(graphic.style('width')) - margin.left - margin.right;\n\t// let height = 400 - margin.top - margin.bottom;\n\tlet height = (config.optional.aspectRatio[size][1] / config.optional.aspectRatio[size][0]) * width\n\t// console.log(`Margin, width, and height set: ${margin}, ${width}, ${height}`);\n\n\n\n\t// Get categories from the keys used in the stack generator\n\t// const categories = Object.keys(graphic_data[0]).filter((k) => k !== 'date');\n\tconst categories = Object.keys(graphic_data[0]).filter(d => !d.endsWith('_lowerCI') && !d.endsWith('_upperCI')).slice(1)\n\t// console.log(categories);\n\n\tconst fulldataKeys = Object.keys(graphic_data[0]).slice(1)\n\n\t// Define the x and y scales\n\n\tlet xDataType;\n\n\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t\txDataType = 'date';\n\t} else {\n\t\txDataType = 'numeric';\n\t}\n\n\t// console.log(xDataType)\n\n\tlet x;\n\n\n\n\tif (xDataType == 'date') {\n\t\tx = d3.scaleTime()\n\t\t\t.domain(d3.extent(graphic_data, (d) => d.date))\n\t\t\t.range([0, width]);\n\t} else if (config.essential.xDomain == \"auto\") {\n\t\tx = d3.scaleLinear()\n\t\t\t.domain(d3.extent(graphic_data, (d) => +d.date))\n\t\t\t.range([0, width]);\n\t} else {\n\t\tx = d3.scaleLinear()\n\t\t\t.domain(config.essential.xDomain)\n\t\t\t.range([0, width]);\n\t}\n\t//console.log(`x defined`);\n\n\tconst y = d3\n\t\t.scaleLinear()\n\t\t.range([height, 0]);\n\n\tif (config.essential.yDomain == \"auto\") {\n\t\ty.domain(\n\t\t\t[d3.min(graphic_data, (d) => Math.min(...fulldataKeys.map((c) => d[c]))),\n\t\t\td3.max(graphic_data, (d) => Math.max(...fulldataKeys.map((c) => d[c])))]\n\t\t)\n\t} else {\n\t\ty.domain(config.essential.yDomain)\n\t}\n\t//console.log(`yAxis defined`);\n\n\n\t// This function generates an array of approximately count + 1 uniformly-spaced, rounded values in the range of the given start and end dates (or numbers).\n\tlet tickValues = x.ticks(config.optional.xAxisTicks[size]);\n\n\t// Add the first and last dates to the ticks array, and use a Set to remove any duplicates\n\t// tickValues = Array.from(new Set([graphic_data[0].date, ...tickValues, graphic_data[graphic_data.length - 1].date]));\n\n\tif (config.optional.addFirstDate == true) {\n\t\ttickValues.push(graphic_data[0].date)\n\t\tconsole.log(\"First date added\")\n\t}\n\n\tif (config.optional.addFinalDate == true) {\n\t\ttickValues.push(graphic_data[graphic_data.length - 1].date)\n\t\tconsole.log(\"Last date added\")\n\t}\n\n\n\t// Create an SVG element\n\tconst svg = graphic\n\t\t.append('svg')\n\t\t.attr('width', width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\n\t//console.log(`SVG element created`);\n\n\n\t// Add the x-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', `translate(0, ${height})`)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(x)\n\t\t\t\t.tickValues(tickValues)\n\t\t\t\t.tickFormat((d) => xDataType == 'date' ? d3.timeFormat(config.essential.xAxisTickFormat[size])(d)\n\t\t\t\t\t: d3.format(config.essential.xAxisNumberFormat)(d))\n\t\t);\n\n\n\t// Add the y-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis numeric')\n\t\t.call(d3.axisLeft(y).ticks(config.optional.yAxisTicks[size]));\n\n\t// add grid lines to y axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'grid')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisLeft(y)\n\t\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t\t.tickSize(-width)\n\t\t\t\t.tickFormat('')\n\t\t);\n\n\td3.selectAll('g.tick line')\n\t\t.each(function (e) {\n\t\t\tif (e == config.essential.zeroLine) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t})\n\n\t// create lines and areas for each category\n\tcategories.forEach(function (category) {\n\t\tconst lineGenerator = d3\n\t\t\t.line()\n\t\t\t.x((d) => x(d.date))\n\t\t\t.y((d) => y(d[category]))\n\t\t\t.defined(d => d[category] !== null) // Only plot lines where we have values\n\t\t\t.curve(d3[config.essential.lineCurveType]) // I used bracket notation here to access the curve type as it's a string\n\t\t\t.context(null);\n\t\t// console.log(`Line generator created for category: ${category}`);\n\n\t\tsvg\n\t\t\t.append('path')\n\t\t\t.datum(graphic_data)\n\t\t\t.attr('fill', 'none')\n\t\t\t.attr(\n\t\t\t\t'stroke',\n\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t]\n\t\t\t)\n\t\t\t.attr('stroke-width', 3)\n\t\t\t.attr('d', lineGenerator)\n\t\t\t.style('stroke-linejoin', 'round')\n\t\t\t.style('stroke-linecap', 'round');\n\t\t//console.log(`Path appended for category: ${category}`);\n\n\t\tconst lastDatum = graphic_data[graphic_data.length - 1];\n\n\t\tconst areaGenerator = d3.area()\n\t\t\t.x(d => x(d.date))\n\t\t\t.y0(d => y(d[`${category}_lowerCI`]))\n\t\t\t.y1(d => y(d[`${category}_upperCI`]))\n\t\t\t.defined(d => d[`${category}_lowerCI`] !== null && d[`${category}_upperCI`] !== null) // Only plot areas where we have values\n\n\t\tsvg.append('path')\n\t\t\t.attr('d', areaGenerator(graphic_data))\n\t\t\t.attr('fill', config.essential.colour_palette[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t])\n\t\t\t.attr('opacity', 0.15)\n\n\t\t// console.log(`drawLegend: ${size}`);\n\t\t// size === 'sm'\n\n\t\tif (config.essential.drawLegend || size === 'sm') {\n\n\n\t\t\t// Set up the legend\n\t\t\tlet legenditem = d3\n\t\t\t\t.select('#legend')\n\t\t\t\t.selectAll('div.legend--item')\n\t\t\t\t.data(categories.map((c, i) => [c, config.essential.colour_palette[i % config.essential.colour_palette.length]]))\n\t\t\t\t.enter()\n\t\t\t\t.append('div')\n\t\t\t\t.attr('class', 'legend--item');\n\n\t\t\tlegenditem\n\t\t\t\t.append('div')\n\t\t\t\t.attr('class', 'legend--icon--circle')\n\t\t\t\t.style('background-color', function (d) {\n\t\t\t\t\treturn d[1];\n\t\t\t\t});\n\n\t\t\tlegenditem\n\t\t\t\t.append('div')\n\t\t\t\t.append('p')\n\t\t\t\t.attr('class', 'legend--text')\n\t\t\t\t.html(function (d) {\n\t\t\t\t\treturn d[0];\n\t\t\t\t});\n\n\t\t} else {\n\n\t\t\t// Add text labels to the right of the circles\n\t\t\tsvg\n\t\t\t\t.append('text')\n\t\t\t\t.attr(\n\t\t\t\t\t'transform',\n\t\t\t\t\t`translate(${x(lastDatum.date)}, ${y(lastDatum[category])})`\n\t\t\t\t)\n\t\t\t\t.attr('x', 10)\n\t\t\t\t.attr('dy', '.35em')\n\t\t\t\t.attr('text-anchor', 'start')\n\t\t\t\t.attr(\n\t\t\t\t\t'fill', //Colours adjusted for text where needed\n\t\t\t\t\tconfig.essential.text_colour_palette[\n\t\t\t\t\tcategories.indexOf(category) % config.essential.text_colour_palette.length\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\t.text(category)\n\t\t\t\t.attr(\"class\", \"directLineLabel\")\n\t\t\t\t.call(wrap, margin.right - 10); //wrap function for the direct labelling.\n\n\t\t\tsvg\n\t\t\t\t.append('circle')\n\t\t\t\t.attr('cx', x(lastDatum.date))\n\t\t\t\t.attr('cy', y(lastDatum[category]))\n\t\t\t\t.attr('r', 4)\n\t\t\t\t.attr(\n\t\t\t\t\t'fill',\n\t\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t\t]\n\t\t\t\t);\n\t\t\t// console.log(`Circle appended for category: ${category}`);\n\n\t\t};\n\n\n\t});\n\n\td3.select('#legend')\n\t\t.append('div')\n\t\t.attr('class', 'legend--item CI')\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--square')\n\n\td3.select('.legend--item.CI')\n\t\t.append('div')\n\t\t.attr('class', 'legend--text')\n\t\t.text('95% confidence interval')\n\n\n\t// This does the y-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', `translate(0, 0)`)\n\t\t.append('text')\n\t\t.attr('x', -margin.left + 10)\n\t\t.attr('y', -10)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\t// console.log(`Link to source created`);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n\t// console.log(`PymChild height sent`);\n}\n\n//text wrap function for the direct labelling\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\n// Load the data\nd3.csv(config.essential.graphic_data_url).then(data => {\n\n\tgraphic_data = data.map((d) => {\n\t\tif (d3.timeParse(config.essential.dateFormat)(d.date) !== null) {\n\t\t\treturn {\n\t\t\t\tdate: d3.timeParse(config.essential.dateFormat)(d.date),\n\t\t\t\t...Object.entries(d)\n\t\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t\t.map(([key, value]) => [key, value == \"\" ? null : +value]) // Checking for missing values so that they can be separated from zeroes\n\t\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tdate: (+d.date),\n\t\t\t\t...Object.entries(d)\n\t\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t\t.map(([key, value]) => [key, value == \"\" ? null : +value]) // Checking for missing values so that they can be separated from zeroes\n\t\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t\t}\n\t\t}\n\t});\n\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n\n});\n",
            "chart_css": ".grid line {\n    stroke: #ccc;\n    stroke-opacity: 0.7;\n  }\n  \n  /* Need to discuss this with the team */\n  .axis path,\n  .axis line {\n    stroke: none; /* Changes the color of the axis lines */\n  }\n  \n  .grid .tick {\n    stroke: lightgrey; /* Changes the color of the gridlines */\n    stroke-opacity: 0.7;\n    shape-rendering: crispEdges; /* Makes the gridlines appear more crisp */\n  }\n  .grid path {\n    stroke-width: 0; /* Removes the line along the y-axis */\n  }\n\n  .legend--icon--square {\n    height: 12px;\n    width: 12px;\n    background-color: #c6c6c6;\n    /* border-radius: 50%; */\n    align-self: center;\n    flex-shrink: 0;\n  }\n",
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"datanumeric.csv\",\n\t\t\"colour_palette\": [\n\t\t\t\"#206095\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"text_colour_palette\": [\n\t\t\t\"#206095\",\n\t\t\t\"#1F80A3\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#6E7E26\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"drawLegend\": false,\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"lineCurveType\": \"curveLinear\", // Set the default line curve type\n\t\t// Examples of line curve types\n\t\t// \"lineCurveType\": \"curveLinear\", // Straight line segments\n\t\t// \"lineCurveType\": \"curveStep\", // Step-wise line\n\t\t// \"lineCurveType\": \"curveStepBefore\", // Step-before line\n\t\t// \"lineCurveType\": \"curveStepAfter\", // Step-after line\n\t\t// \"lineCurveType\": \"curveBasis\", // B-spline curve\n\t\t// \"lineCurveType\": \"curveCardinal\", // Cardinal spline curve\n\t\t// \"lineCurveType\": \"curveCatmullRom\" // Catmull-Rom spline curve\n\t\t// \"lineCurveType\": \"curveMonotoneX\" // Monotone spline curve\n\t\t\"xDomain\": \"auto\",\n\t\t\"yDomain\": [0,7],\n\t\t// either \"auto\" or an array for the x domain e.g. [0,2000]\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%b %y\",\n\t\t\t\"md\": \"%b %y\",\n\t\t\t\"lg\": \"%b %y\"\n\t\t},\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"dateFormat\": \"%d/%m/%Y\",\n\t\t\"yAxisLabel\": \"y axis label\",\n\t\t\"zeroLine\": \"0\"\n\t},\n\t\"optional\": {\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1, 1],\n\t\t\t\"md\": [4, 3],\n\t\t\t\"lg\": [16, 9]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 30,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 30\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 100,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 30\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 100,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 30\n\t\t\t}\n\t\t},\n\t\t\"xAxisTicks\": { // this is the number of ticks on the x axis - add the first and last date with the options below\n\t\t\t\"sm\": 3,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\": 7\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 7,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\":8\n\t\t},\n\t\t\"addFirstDate\": false,\n\t\t\"addFinalDate\": false,\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "data_csv": "date,metric1,metric1_lowerCI,metric1_upperCI,metric2,metric2_lowerCI,metric2_upperCI,metric3 with a long label,metric3 with a long label_lowerCI,metric3 with a long label_upperCI\n01/01/2020,2.35,1.96,2.77,2.62,2.38,2.89,2.86,2.55,3.2\n02/02/2020,2.3,1.92,2.74,2.6,2.34,2.87,2.79,2.48,3.13\n03/03/2020,2.26,1.87,2.69,2.58,2.33,2.85,2.73,2.43,3.07\n04/04/2020,2.23,1.84,2.64,2.57,2.32,2.83,2.68,2.38,3.01\n05/05/2020,2.2,1.82,2.6,2.57,2.33,2.82,2.65,2.36,2.96\n06/06/2020,2.18,1.82,2.57,2.58,2.35,2.82,2.63,2.35,2.93\n07/07/2020,2.17,1.82,2.55,2.6,2.38,2.83,2.63,2.35,2.91\n08/08/2020,2.17,1.82,2.55,2.63,2.41,2.87,2.64,2.37,2.91\n09/09/2020,2.19,1.84,2.57,2.68,2.45,2.92,2.66,2.39,2.94\n10/10/2020,2.22,1.87,2.6,2.74,2.49,2.99,2.71,2.43,2.99\n11/11/2020,2.28,1.91,2.68,2.82,2.56,3.08,2.77,2.47,3.07\n12/12/2020,2.35,1.96,2.76,2.91,2.64,3.19,2.84,2.53,3.16\n01/01/2021,2.44,2.04,2.88,3.02,2.74,3.3,2.94,2.62,3.26\n02/02/2021,2.56,2.14,3,3.15,2.85,3.44,3.04,2.72,3.38\n06/03/2021,2.69,2.27,3.14,3.29,3,3.59,3.17,2.83,3.51\n07/04/2021,2.85,2.42,3.3,3.46,3.17,3.75,3.31,2.98,3.65\n09/05/2021,3.03,2.58,3.49,3.64,3.35,3.93,3.47,3.15,3.8\n10/06/2021,3.23,2.76,3.7,3.84,3.55,4.13,3.64,3.33,3.98\n12/07/2021,3.45,2.98,3.93,4.05,3.76,4.35,3.83,3.51,4.17\n13/08/2021,3.68,3.18,4.18,4.27,3.97,4.59,4.03,3.7,4.38\n14/09/2021,3.91,3.39,4.45,4.51,4.19,4.84,4.25,3.89,4.62\n16/10/2021,4.15,3.61,4.73,4.76,4.41,5.11,4.47,4.1,4.87\n17/11/2021,4.38,3.83,4.98,5.01,4.65,5.38,4.7,4.3,5.11\n19/12/2021,4.6,4.02,5.22,5.26,4.89,5.64,4.93,4.53,5.36\n20/01/2022,4.8,4.22,5.43,5.51,5.13,5.9,5.17,4.74,5.61\n21/02/2022,4.99,4.4,5.6,5.75,5.37,6.13,5.4,4.97,5.86\n25/03/2022,5.15,4.57,5.77,5.99,5.62,6.35,5.64,5.21,6.09\n26/04/2022,5.3,4.71,5.93,6.21,5.84,6.58,5.87,5.44,6.32\n",
            "comparison_csv": null
        },
        "line-chart-with-ci-sm": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\n\t\t\t\"#206095\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"sourceText\": \"Annual Population Survey from the Office for National Statistics \",\n\t\t\"accessibleSummary\": \"Here is the screen reader text describing the chart.\",\n\t\t\"lineCurveType\": \"curveLinear\", // Set the default line curve type\n\t\t// Examples of line curve types\n\t\t// \"lineCurveType\": \"curveLinear\", // Straight line segments\n\t\t// \"lineCurveType\": \"curveStep\", // Step-wise line\n\t\t// \"lineCurveType\": \"curveStepBefore\", // Step-before line\n\t\t// \"lineCurveType\": \"curveStepAfter\", // Step-after line\n\t\t// \"lineCurveType\": \"curveBasis\", // B-spline curve\n\t\t// \"lineCurveType\": \"curveCardinal\", // Cardinal spline curve\n\t\t// \"lineCurveType\": \"curveCatmullRom\" // Catmull-Rom spline curve\n\t\t// \"lineCurveType\": \"curveMonotoneX\" // Monotone spline curve\n\n\t\t\"xDomain\": [-13,25],\n\t\t// either \"auto\" or an array for the x domain e.g. [0,2000] - DOES NOT WORK\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%Y\",\n\t\t\t\"md\": \"%Y\",\n\t\t\t\"lg\": \"%Y\"\n\t\t},\n\t\t\"yAxisFormat\": \",.0%\",\n\t\t\"dateFormat\": \"%Y\",\n\t\t\"yAxisLabel\": \"Pay Gap\",\n\t\t\"CI_legend\": true,\n\t\t\"CI_legend_text\": \"95% confidence interval\",\n\t\t\"zeroLine\": \"0\"\n\t},\n\t\"optional\": {\n\t\t\"chart_every\": {\n\t\t\t\"sm\": 1,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [1.2, 1],\n\t\t\t\"md\": [1.2, 1],\n\t\t\t\"lg\": [1.2, 1]\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 70,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 45\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 70,\n\t\t\t\t\"right\": 25,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 45\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 70,\n\t\t\t\t\"right\": 25,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 45\n\t\t\t}\n\t\t},\n\t\t\"xAxisTicksEvery\": { // this is the interval of ticks on the x axis but it will always show the first and last date.\n\t\t\t\"sm\": 2,\n\t\t\t\"md\": 2,\n\t\t\t\"lg\": 2\n\t\t},\n\t\t\"yAxisTicks\": {\n\t\t\t\"sm\": 7,\n\t\t\t\"md\": 5,\n\t\t\t\"lg\":8\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600,\n\t\t\"dropYAxis\": true\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//Accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tconst droppedMargin = 20;\n\n\t// var chart_width =\n\t// \t((parseInt(graphic.style('width')) - margin.left + 10) / chartEvery) - margin.right -10;\n\n\n\t// function calculateChartWidth(size) {\n\t// \tconst chartEvery = config.optional.chart_every[size];\n\t// \t// const aspectRatio = config.optional.aspectRatio[size];\n\t// \tconst chartMargin = config.optional.margin[size];\n\n\t// \tconst chartWidth =\n\t// \t\t((parseInt(graphic.style('width')) - chartMargin.left + droppedMargin) / chartEvery) - chartMargin.right - droppedMargin;\n\t// \treturn chartWidth;\n\t// }\n\n\t// Get categories from the keys used in the stack generator\n\t// const categories = Object.keys(graphic_data[0]).filter((k) => k !== 'date');\n\tconst categories = Object.keys(graphic_data[0]).filter(d => !d.endsWith('_lowerCI') && !d.endsWith('_upperCI')).slice(1).filter((k) => k !== 'series')\n\t//  console.log(categories);\n\n\tconst fulldataKeys = Object.keys(graphic_data[0]).slice(1).filter((k) => k !== 'series')\n\n\t// console.log(fulldataKeys);\n\n\t// Nest the graphic_data by the 'series' column\n\tlet nested_data = d3.group(graphic_data, (d) => d.series);\n\n\t// console.log(Array.from(nested_data))\n\t// Create a container div for each small multiple\n\tlet chartContainers = graphic\n\t\t.selectAll('.chart-container')\n\t\t.data(Array.from(nested_data))\n\t\t.join('div')\n\t\t.attr('class', 'chart-container');\n\n\tfunction drawChart(container, data, chartIndex) {\n\n\t\tfunction calculateChartWidth(size) {\n\n\t\t\tconst chartMargin = config.optional.margin[size];\n\n\t\t\tif (config.optional.dropYAxis) {\n\t\t\t\t// Chart width calculation allowing for droppedMargin px left margin between the charts\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) - chartMargin.left - ((chartEvery - 1) * droppedMargin)) / chartEvery) - chartMargin.right;\n\t\t\t\treturn chartWidth;\n\t\t\t} else {\n\t\t\t\tconst chartWidth = ((parseInt(graphic.style('width')) / chartEvery) - chartMargin.left - chartMargin.right);\n\t\t\t\treturn chartWidth;\n\t\t\t}\n\t\t}\n\n\t\tconst chartEvery = config.optional.chart_every[size];\n\t\tconst chartsPerRow = config.optional.chart_every[size];\n\t\tlet chartPosition = chartIndex % chartsPerRow;\n\n\t\tlet margin = { ...config.optional.margin[size] };\n\n\t\t// If the chart is not in the first position in the row, reduce the left margin\n\t\tif (config.optional.dropYAxis) {\n\t\t\tif (chartPosition !== 0) {\n\t\t\t\tmargin.left = droppedMargin;\n\t\t\t}\n\t\t}\n\n\n\n\t\tconst aspectRatio = config.optional.aspectRatio[size];\n\t\tlet chart_width = calculateChartWidth(size)\n\n\t\t//height is set by the aspect ratio\n\t\tvar height =\n\t\t\taspectRatio[1] / aspectRatio[0] * chart_width;\n\n\t\t// Define the x and y scales\n\t\tconst x = d3\n\t\t\t.scaleTime()\n\t\t\t.domain(d3.extent(graphic_data, (d) => d.date))\n\t\t\t.range([0, chart_width]);\n\n\n\t\tconst y = d3\n\t\t\t.scaleLinear()\n\t\t\t.domain([\n\t\t\t\td3.min(graphic_data, (d) => Math.min(...fulldataKeys.map((c) => d[c]))),\n\t\t\t\td3.max(graphic_data, (d) => Math.max(...fulldataKeys.map((c) => d[c])))\n\t\t\t])\n\t\t\t// .nice()\n\t\t\t.range([height, 0]);\n\n\n\t\t// Create an SVG element\n\t\tconst svg = container\n\t\t\t.append('svg')\n\t\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t\t.attr('class', 'chart')\n\t\t\t.style('background-color', '#fff')\n\t\t\t.append('g')\n\t\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\n\n\n\t\t// create lines and circles for each category\n\t\tcategories.forEach(function (category) {\n\t\t\tconst lineGenerator = d3\n\t\t\t\t.line()\n\t\t\t\t.x((d) => x(d.date))\n\t\t\t\t.y((d) => y(d[category]))\n\t\t\t\t.curve(d3[config.essential.lineCurveType]) // I used bracket notation here to access the curve type as it's a string\n\t\t\t\t.context(null)\n\t\t\t\t.defined(d => d[category] !== null) // Only plot lines where we have values\n\n\t\t\t// console.log(data)\n\n\t\t\tsvg\n\t\t\t\t.append('path')\n\t\t\t\t.datum(data[1])\n\t\t\t\t.attr('fill', 'none')\n\t\t\t\t.attr(\n\t\t\t\t\t'stroke', /*() => (categories.indexOf(category) == chartIndex) ? \"#206095\" : \"#dadada\"*/\n\t\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t\t.attr('stroke-width', 2.5)\n\t\t\t\t.attr('d', lineGenerator)\n\t\t\t\t.style('stroke-linejoin', 'round')\n\t\t\t\t.style('stroke-linecap', 'round')\n\t\t\t\t.attr('class', 'line' + categories.indexOf(category));\n\n\t\t\tconst areaGenerator = d3.area()\n\t\t\t\t.x(d => x(d.date))\n\t\t\t\t.y0(d => y(d[`${category}_lowerCI`]))\n\t\t\t\t.y1(d => y(d[`${category}_upperCI`]))\n\t\t\t\t.defined(d => d[`${category}_lowerCI`] !== null && d[`${category}_upperCI`] !== null) // Only plot areas where we have values\n\n\t\t\tsvg.append('path')\n\t\t\t\t.attr('d', areaGenerator(data[1]))\n\t\t\t\t.attr('fill', config.essential.colour_palette[\n\t\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t])\n\t\t\t\t.attr('opacity', 0.15)\n\n\t\t});\n\n\t\t// add grid lines to y axis\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'grid')\n\t\t\t.call(\n\t\t\t\td3\n\t\t\t\t\t.axisLeft(y)\n\t\t\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t\t\t.tickSize(-chart_width)\n\t\t\t\t\t.tickFormat('')\n\t\t\t)\n\t\t\t.lower();\n\n\t\td3.selectAll('g.tick line')\n\t\t\t.each(function (e) {\n\t\t\t\tif (e == config.essential.zeroLine) {\n\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t}\n\t\t\t})\n\n\t\t// Add the x-axis\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.attr('transform', `translate(0, ${height})`)\n\t\t\t.call(\n\t\t\t\td3\n\t\t\t\t\t.axisBottom(x)\n\t\t\t\t\t.tickValues([...new Set(graphic_data\n\t\t\t\t\t\t.map(function (d) {\n\t\t\t\t\t\t\treturn d.date.getTime()\n\t\t\t\t\t\t}))] //just get unique dates as seconds past unix epoch\n\t\t\t\t\t\t.map(function (d) {\n\t\t\t\t\t\t\treturn new Date(d)\n\t\t\t\t\t\t}) //map back to dates\n\t\t\t\t\t\t.sort(function (a, b) {\n\t\t\t\t\t\t\treturn a - b\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(function (d, i) {\n\t\t\t\t\t\t\treturn i % config.optional.xAxisTicksEvery[size] === 0 && i <= data[1].length - config.optional.xAxisTicksEvery[size] || i == data[1].length - 1 //Rob's fussy comment about labelling the last date\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t\t.tickFormat(d3.timeFormat(config.essential.xAxisTickFormat[size]))\n\t\t\t);\n\n\n\t\t//If dropYAxis == true Only draw the y axis tick labels on the first chart in each row\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis numeric')\n\t\t\t.call(d3.axisLeft(y)\n\t\t\t\t.ticks(config.optional.yAxisTicks[size])\n\t\t\t\t.tickFormat((d) => config.optional.dropYAxis !== true ? d3.format(config.essential.yAxisFormat)(d) :\n\t\t\t\t\tchartPosition == 0 ? d3.format(config.essential.yAxisFormat)(d) : \"\"))\n\t\t\t.selectAll('.tick text')\n\t\t\t.call(wrap, margin.left - 10);\n\n\n\n\n\n\t\t// This does the chart title label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', 'translate(0, 0)')\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', 0)\n\t\t\t.attr('dy', -45)\n\t\t\t.attr('class', 'title')\n\t\t\t.text(d => d[0])\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.call(wrap, (chart_width + margin.right));\n\n\n\t\t// This does the y-axis label\n\t\tsvg\n\t\t\t.append('g')\n\t\t\t.attr('transform', `translate(${-margin.left}, ${-margin.top})`)\n\t\t\t.append('text')\n\t\t\t.attr('x', 0)\n\t\t\t.attr('y', margin.top - 15)\n\t\t\t.attr('class', 'axis--label')\n\t\t\t.text(() => chartIndex % chartEvery == 0 ?\n\t\t\t\tconfig.essential.yAxisLabel : \"\")\n\t\t\t.attr('text-anchor', 'start');\n\t}\n\n\n\t// Draw the charts for each small multiple\n\tchartContainers.each(function (chart, i) {\n\t\tdrawChart(d3.select(this), chart, i);\n\t});\n\n\n\t// Set up the legend\n\tvar legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(categories, config.essential.colour_palette)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\tif (config.essential.CI_legend) {\n\n\t\t// add confidence interval into legend as seperate div \n\t\tvar legenditemCI = d3.select('#legend')\n\t\t\t.selectAll('div.legend--item2')\n\t\t\t.data(d3.zip(0)) // creating a filler for the div to read in. 0 is meaningless\n\t\t\t.enter()\n\t\t\t.append('div')\n\t\t\t.attr('class', 'legend--itemCI')\n\n\t\tlegenditemCI.append('div')\n\t\t\t.attr('class', 'legend--icon--rect')\n\t\t\t.style('background-color', '#C6C6C6');\n\n\n\t\tlegenditemCI.append('div')\n\t\t\t.append('p')\n\t\t\t.attr('class', 'legend--text')\n\t\t\t.html(config.essential.CI_legend_text);\n\n\t}\n\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n\t// console.log(`PymChild height sent`);\n}\n\n//text wrap function for the direct labelling\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tvar text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tvar breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\n// Load the data\nd3.csv(config.essential.graphic_data_url).then((rawData) => {\n\tgraphic_data = rawData.map((d) => {\n\t\treturn {\n\t\t\tdate: d3.timeParse(config.essential.dateFormat)(d.date),\n\t\t\t...Object.entries(d)\n\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t.map(([key, value]) => key !== \"series\" ? [key, value == \"\" ? null : +value] : [key, value]) // Checking for missing values so that they can be separated from zeroes\n\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t};\n\t});\n\n\t// Use pym to create an iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n\n});\n",
            "chart_css": ".grid line {\n    stroke: #ccc;\n    stroke-opacity: 0.7;\n  }\n  \n  /* Need to discuss this with the team */\n  .axis path,\n  .axis line {\n    stroke: none; /* Changes the color of the axis lines */\n  }\n  \n  .grid .tick {\n    stroke: lightgrey; /* Changes the color of the gridlines */\n    stroke-opacity: 0.7;\n    shape-rendering: crispEdges; /* Makes the gridlines appear more crisp */\n  }\n  .grid path {\n    stroke-width: 0; /* Removes the line along the y-axis */\n  }\n  \n  .chart-container {\n    display: inline-block;\n    vertical-align: top;\n  }\n  \n  .chart-container:last-child {\n    margin-right: 0;\n  }\n  \n  .title {\n    font-weight: 600;\n    fill: #414042;\n  }\n\n  .dataLabel {\n    font-weight: 600;\n    font-size: 14px;\n  }\n\n  #legend {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n\n  \n  .legend--icon--rect {\n    height: 12px;\n    width: 12px;\n    align-self: center;\n    flex-shrink: 0;\n  }\n\n  .legend--itemCI {\n  display: flex;\n  padding-right: 40px;\n  padding-bottom: 12px;\n}",
            "data_csv": "date,series,Raw Pay Gap,Raw Pay Gap_lowerCI,Raw Pay Gap_upperCI,Adjusted Pay Gap,Adjusted Pay Gap_lowerCI,Adjusted Pay Gap_upperCI\n2012,Bangladeshi - UK-born,0.139,-0.033,0.282,0.093,0.004,0.174\n2013,Bangladeshi - UK-born,0.153,0.025,0.265,0.181,0.129,0.23\n2014,Bangladeshi - UK-born,0.268,0.189,0.34,0.121,0.067,0.171\n2015,Bangladeshi - UK-born,0.176,0.07,0.27,0.042,-0.006,0.089\n2016,Bangladeshi - UK-born,-0.02,-0.179,0.118,-0.012,-0.146,0.107\n2017,Bangladeshi - UK-born,0.137,-0.082,0.311,0.105,-0.01,0.207\n2018,Bangladeshi - UK-born,0.102,-0.059,0.238,0.097,0.024,0.164\n2019,Bangladeshi - UK-born,0.08,-0.037,0.184,0.07,0,0.135\n2020,Bangladeshi - UK-born,-0.16,-0.409,0.045,0.035,-0.026,0.093\n2021,Bangladeshi - UK-born,-0.048,-0.174,0.064,0.183,0.156,0.208\n2022,Bangladeshi - UK-born,0.159,0.029,0.271,0.083,-0.037,0.189\n2012,Bangladeshi - Non-UK-born,0.272,0.167,0.364,0.201,0.113,0.281\n2013,Bangladeshi - Non-UK-born,0.287,0.187,0.375,0.212,0.162,0.258\n2014,Bangladeshi - Non-UK-born,0.329,0.24,0.409,0.165,0.115,0.213\n2015,Bangladeshi - Non-UK-born,0.218,0.108,0.314,0.178,0.116,0.235\n2016,Bangladeshi - Non-UK-born,0.318,0.264,0.367,0.196,0.142,0.247\n2017,Bangladeshi - Non-UK-born,0.259,0.166,0.342,0.225,0.171,0.275\n2018,Bangladeshi - Non-UK-born,0.271,0.187,0.346,0.287,0.226,0.343\n2019,Bangladeshi - Non-UK-born,0.2,0.103,0.286,0.206,0.145,0.264\n2020,Bangladeshi - Non-UK-born,0.287,0.16,0.395,0.226,0.143,0.302\n2021,Bangladeshi - Non-UK-born,0.217,0.146,0.282,0.204,0.173,0.235\n2022,Bangladeshi - Non-UK-born,0.22,0.086,0.334,0.174,0.136,0.211\n2012,Chinese - UK-born,-0.091,-0.435,0.171,0.09,0.016,0.16\n2013,Chinese - UK-born,-0.218,-0.644,0.097,0.059,-0.03,0.141\n2014,Chinese - UK-born,-0.257,-0.542,-0.025,0.025,-0.039,0.085\n2015,Chinese - UK-born,0.085,-0.112,0.247,-0.035,-0.209,0.113\n2016,Chinese - UK-born,-0.254,-0.569,-0.001,-0.055,-0.169,0.048\n2017,Chinese - UK-born,-0.49,-0.772,-0.253,-0.015,-0.335,0.228\n2018,Chinese - UK-born,-0.444,-0.744,-0.196,-0.053,-0.27,0.126\n2019,Chinese - UK-born,-0.161,-0.397,0.035,0.01,-0.079,0.091\n2020,Chinese - UK-born,-0.318,-0.789,0.029,0.007,-0.067,0.076\n2021,Chinese - UK-born,-0.311,-0.527,-0.125,-0.048,-0.115,0.015\n2022,Chinese - UK-born,-0.323,-0.624,-0.078,0.022,-0.123,0.148\n2012,Chinese - Non-UK-born,-0.092,-0.267,0.059,0.075,0.021,0.125\n2013,Chinese - Non-UK-born,-0.18,-0.383,-0.007,0.094,0.009,0.172\n2014,Chinese - Non-UK-born,-0.151,-0.387,0.045,0.075,0.014,0.132\n2015,Chinese - Non-UK-born,-0.259,-0.444,-0.099,0.086,0.044,0.126\n2016,Chinese - Non-UK-born,-0.284,-0.501,-0.098,0.03,-0.025,0.082\n2017,Chinese - Non-UK-born,-0.177,-0.361,-0.017,0.06,0.009,0.109\n2018,Chinese - Non-UK-born,-0.283,-0.451,-0.135,0.088,0.051,0.123\n2019,Chinese - Non-UK-born,-0.312,-0.586,-0.086,0.073,0.043,0.101\n2020,Chinese - Non-UK-born,-0.585,-0.852,-0.356,-0.051,-0.134,0.025\n2021,Chinese - Non-UK-born,-0.58,-0.888,-0.323,-0.02,-0.089,0.045\n2022,Chinese - Non-UK-born,-0.21,-0.427,-0.025,0.012,-0.127,0.134\n2012,Indian - UK-born,-0.055,-0.146,0.029,0.035,-0.01,0.077\n2013,Indian - UK-born,-0.127,-0.223,-0.039,0.049,0.02,0.077\n2014,Indian - UK-born,-0.106,-0.187,-0.031,0.058,0.023,0.091\n2015,Indian - UK-born,-0.11,-0.189,-0.036,-0.003,-0.048,0.04\n2016,Indian - UK-born,-0.168,-0.26,-0.083,0.019,-0.036,0.07\n2017,Indian - UK-born,-0.111,-0.205,-0.024,-0.012,-0.054,0.029\n2018,Indian - UK-born,-0.165,-0.284,-0.057,0.005,-0.035,0.043\n2019,Indian - UK-born,-0.238,-0.337,-0.146,-0.017,-0.051,0.016\n2020,Indian - UK-born,-0.268,-0.387,-0.159,-0.002,-0.04,0.034\n2021,Indian - UK-born,-0.258,-0.383,-0.145,0.06,0.021,0.098\n2022,Indian - UK-born,-0.238,-0.366,-0.123,-0.018,-0.08,0.039\n2012,Indian - Non-UK-born,-0.119,-0.199,-0.044,0.074,0.041,0.107\n2013,Indian - Non-UK-born,-0.043,-0.11,0.021,0.084,0.058,0.11\n2014,Indian - Non-UK-born,-0.098,-0.173,-0.028,0.105,0.076,0.134\n2015,Indian - Non-UK-born,-0.017,-0.089,0.05,0.126,0.094,0.157\n2016,Indian - Non-UK-born,-0.035,-0.11,0.035,0.099,0.068,0.13\n2017,Indian - Non-UK-born,-0.11,-0.209,-0.019,0.078,0.051,0.104\n2018,Indian - Non-UK-born,-0.113,-0.203,-0.03,0.06,0.029,0.091\n2019,Indian - Non-UK-born,-0.109,-0.209,-0.017,0.067,0.036,0.097\n2020,Indian - Non-UK-born,-0.135,-0.231,-0.045,0.091,0.047,0.133\n2021,Indian - Non-UK-born,-0.124,-0.231,-0.026,0.085,0.046,0.122\n2022,Indian - Non-UK-born,-0.143,-0.279,-0.021,0.063,0.023,0.101\n2012,Pakistani - UK-born,0.128,0.043,0.205,0.055,0.004,0.105\n2013,Pakistani - UK-born,0.123,0.041,0.198,0.101,0.071,0.131\n2014,Pakistani - UK-born,0.222,0.137,0.299,0.13,0.093,0.166\n2015,Pakistani - UK-born,0.175,0.11,0.234,0.074,0.009,0.135\n2016,Pakistani - UK-born,0.123,0.048,0.192,0.072,0.03,0.112\n2017,Pakistani - UK-born,0.134,0.081,0.185,0.068,0.028,0.107\n2018,Pakistani - UK-born,0.049,-0.046,0.136,0.061,0.021,0.098\n2019,Pakistani - UK-born,0.08,-0.012,0.165,0.032,-0.022,0.082\n2020,Pakistani - UK-born,0.126,0.026,0.216,0.121,0.084,0.157\n2021,Pakistani - UK-born,0.06,-0.016,0.13,0.095,0.047,0.141\n2022,Pakistani - UK-born,0.052,-0.044,0.14,-0.02,-0.107,0.059\n2012,Pakistani - Non-UK-born,0.234,0.178,0.287,0.164,0.094,0.228\n2013,Pakistani - Non-UK-born,0.283,0.229,0.334,0.135,0.106,0.163\n2014,Pakistani - Non-UK-born,0.286,0.224,0.343,0.174,0.141,0.207\n2015,Pakistani - Non-UK-born,0.175,0.116,0.229,0.123,0.074,0.169\n2016,Pakistani - Non-UK-born,0.143,0.056,0.223,0.126,0.086,0.164\n2017,Pakistani - Non-UK-born,0.182,0.106,0.251,0.134,0.07,0.193\n2018,Pakistani - Non-UK-born,0.208,0.149,0.264,0.147,0.114,0.18\n2019,Pakistani - Non-UK-born,0.194,0.13,0.253,0.16,0.11,0.207\n2020,Pakistani - Non-UK-born,0.145,0.044,0.236,0.208,0.171,0.243\n2021,Pakistani - Non-UK-born,0.137,0.018,0.242,0.119,0.071,0.165\n2022,Pakistani - Non-UK-born,0.192,0.09,0.283,0.141,0.095,0.185\n2012,Other Asian - UK-born,-0.268,-0.586,-0.014,-0.032,-0.071,0.005\n2013,Other Asian - UK-born,-0.044,-0.374,0.207,0.137,0.109,0.163\n2014,Other Asian - UK-born,-0.014,-0.369,0.249,0.066,0.027,0.103\n2015,Other Asian - UK-born,-0.235,-0.427,-0.069,-0.022,-0.24,0.157\n2016,Other Asian - UK-born,-0.141,-0.361,0.043,0.013,-0.057,0.079\n2017,Other Asian - UK-born,-0.082,-0.332,0.121,0.087,0.037,0.135\n2018,Other Asian - UK-born,-0.262,-0.512,-0.053,-0.056,-0.137,0.019\n2019,Other Asian - UK-born,-0.006,-0.274,0.206,0.082,0.058,0.105\n2020,Other Asian - UK-born,-0.199,-0.478,0.027,0.012,-0.063,0.082\n2021,Other Asian - UK-born,-0.41,-0.741,-0.142,0.109,0.048,0.166\n2022,Other Asian - UK-born,-0.475,-0.897,-0.147,-0.023,-0.429,0.267\n2012,Other Asian - Non-UK-born,0.164,0.089,0.232,0.175,0.148,0.201\n2013,Other Asian - Non-UK-born,0.128,0.036,0.212,0.169,0.146,0.191\n2014,Other Asian - Non-UK-born,0.208,0.139,0.271,0.113,0.08,0.145\n2015,Other Asian - Non-UK-born,0.218,0.172,0.262,0.162,0.136,0.187\n2016,Other Asian - Non-UK-born,0.13,0.067,0.189,0.117,0.079,0.153\n2017,Other Asian - Non-UK-born,0.132,0.073,0.188,0.138,0.103,0.171\n2018,Other Asian - Non-UK-born,0.103,0.039,0.164,0.16,0.125,0.194\n2019,Other Asian - Non-UK-born,0.099,0.039,0.155,0.142,0.103,0.179\n2020,Other Asian - Non-UK-born,0.105,0.024,0.18,0.146,0.098,0.191\n2021,Other Asian - Non-UK-born,0.118,0.055,0.176,0.133,0.078,0.185\n2022,Other Asian - Non-UK-born,0.115,0.057,0.169,0.157,0.127,0.187\n",
            "comparison_csv": null
        },
        "population-pyramid-static": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"accessibleSummary\":\n\t\t\t\"This chart has been hidden from screen readers. The main message of the chart is summarised in the chart title.\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"dataType\": \"numbers\",\n\t\t// dataType can be a 'percentage' or 'numbers' where it works out the percentage in the script\n\t\t\"colour_palette\": [\"#6749A6\", \"#2EA1A4\"],\n\t\t// this is the darker palette when there are no comparison lines  [\"#6749A6\",\"#2EA1A4\"]\n\t\t\"legend\": [\"Variable name\"],\n\t\t\"xAxislabel\": [\"Percentage\"],\n\t\t\"yAxislabel\": [\"Age\"]\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"centre\": 60\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 6,\n\t\t\t\"md\": 6,\n\t\t\t\"lg\": 6\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 3,\n\t\t\t\"md\": 3,\n\t\t\t\"lg\": 3\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 1 }\n};\n",
            "script_js": "const graphic = d3.select('#graphic');\nconst titles = d3.select('#titles');\nconst legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\ttitles.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tmargin.centre = config.optional.margin.centre;\n\n\t// calculate percentage if we have numbers\n\t// percentages are based of total populations as is common practice amongst pop pyramids\n\tif (config.essential.dataType == 'numbers') {\n\t\tpopTotal = d3.sum(graphic_data, (d) => d.maleBar + d.femaleBar);\n\n\t\t// turn into tidy data\n\t\tgraphic_data_new = graphic_data\n\t\t\t.map(function (d) {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'female',\n\t\t\t\t\t\tvalue: d.femaleBar / popTotal\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'male',\n\t\t\t\t\t\tvalue: d.maleBar / popTotal\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t})\n\t\t\t.flatMap((d) => d);\n\t} else {\n\t\t// turn into tidy data\n\t\tgraphic_data_new = graphic_data\n\t\t\t.map(function (d) {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tvalue: d.femaleBar,\n\t\t\t\t\t\tsex: 'female'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'male',\n\t\t\t\t\t\tvalue: d.maleBar\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t})\n\t\t\t.flatMap((d) => d);\n\t}\n\n\tmaxPercentage = d3.max(graphic_data_new, (d) => d.value);\n\n\t// set up widths\n\tfullwidth = parseInt(graphic.style('width'));\n\tchart_width = (parseInt(graphic.style('width')) - margin.centre - margin.left - margin.right) / 2;\n\theight = (graphic_data_new.length / 2) * config.optional.seriesHeight[size];\n\n\t// set up some scales, first the left scale\n\txLeft = d3\n\t\t.scaleLinear()\n\t\t.domain([0, maxPercentage])\n\t\t.rangeRound([chart_width, 0]);\n\n\t// right scale\n\txRight = d3\n\t\t.scaleLinear()\n\t\t.domain(xLeft.domain())\n\t\t.rangeRound([chart_width + margin.centre, chart_width * 2 + margin.centre]);\n\n\t// y scale\n\ty = d3\n\t\t.scaleBand()\n\t\t.domain([...new Set(graphic_data_new.map((d) => d.age))])\n\t\t.rangeRound([height, 0])\n\t\t.paddingInner(0.1);\n\n\t// create the svg\n\tsvg = graphic\n\t\t.append('svg')\n\t\t.attr('class', 'chart')\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('width', fullwidth)\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t//add x-axis left\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xLeft)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t//add x-axis right\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis right')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xRight)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t// add bars\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('rect')\n\t\t.data(graphic_data_new)\n\t\t.join('rect')\n\t\t.attr('fill', (d) =>\n\t\t\td.sex === 'female'\n\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t: config.essential.colour_palette[1]\n\t\t)\n\t\t.attr('x', (d) => (d.sex === 'female' ? xLeft(d.value) : xRight(0)))\n\t\t.attr('y', (d) => y(d.age))\n\t\t.attr('width', (d) =>\n\t\t\td.sex === 'female'\n\t\t\t\t? xLeft(0) - xLeft(d.value)\n\t\t\t\t: xRight(d.value) - xRight(0)\n\t\t)\n\t\t.attr('height', y.bandwidth());\n\n\t//add y-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2 - 3) + ',0)'\n\t\t)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisRight(y)\n\t\t\t\t.tickSize(0)\n\t\t\t\t.tickValues(y.domain().filter((d, i) => !(i % 10)))\n\t\t)\n\t\t.selectAll('text')\n\t\t.each(function () {\n\t\t\td3.select(this).attr('text-anchor', 'middle');\n\t\t});\n\n\t//add x-axis titles\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' +\n\t\t\t\t(fullwidth - margin.left) +\n\t\t\t\t',' +\n\t\t\t\t(height + 30) +\n\t\t\t\t')'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'end')\n\t\t.text(config.essential.xAxislabel);\n\n\t//add y-axis title\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2) + ',-15)'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'middle')\n\t\t.text(config.essential.yAxislabel);\n\n\twidths = [chart_width + margin.left, chart_width + margin.right];\n\n\tlegend\n\t\t.append('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data(['Females', 'Males'])\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'chartLabel')\n\t\t.append('p')\n\t\t.text((d) => d);\n\n\tdataForLegend = [['x', 'x']]; //dummy data\n\n\ttitleDivs = titles\n\t\t.selectAll('div')\n\t\t.data(dataForLegend)\n\t\t.join('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data((d) => d)\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.style('background-color', (d, i) => config.essential.colour_palette[i])\n\t\t.attr('class', 'legend--icon--circle');\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(config.essential.legend);\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n} //end draw graphic\n\nd3.csv(config.essential.graphic_data_url, d3.autoType).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": "div.chartLabel>p {\n    font-size: 16px;\n    font-weight: 600;\n    margin-bottom: 10px;\n}\n\ndiv#titles {\n    display: flex;\n    flex-wrap: nowrap;\n    flex-direction: column;\n}\n\n.flex-row {\n    display: flex;\n    flex-direction: row;\n}\n\n",
            "data_csv": "age,femaleBar,maleBar\n<1,449,469\n1,458,496\n2,510,536\n3,476,510\n4,518,559\n5,551,558\n6,505,527\n7,528,569\n8,561,611\n9,592,580\n10,564,604\n11,596,642\n12,579,609\n13,568,622\n14,563,574\n15,571,597\n16,554,537\n17,542,543\n18,425,502\n19,431,478\n20,495,487\n21,514,500\n22,563,502\n23,535,464\n24,515,537\n25,554,510\n26,548,529\n27,601,513\n28,579,527\n29,606,529\n30,629,566\n31,617,512\n32,612,565\n33,646,539\n34,647,553\n35,574,532\n36,600,539\n37,560,520\n38,565,492\n39,583,498\n40,555,516\n41,581,529\n42,499,500\n43,501,447\n44,502,435\n45,501,519\n46,492,452\n47,560,498\n48,546,595\n49,633,622\n50,680,629\n51,664,589\n52,698,610\n53,705,646\n54,709,648\n55,759,677\n56,719,731\n57,753,680\n58,730,681\n59,740,662\n60,691,693\n61,633,633\n62,650,627\n63,590,596\n64,575,609\n65,572,548\n66,542,511\n67,489,521\n68,561,482\n69,507,513\n70,491,466\n71,534,496\n72,545,472\n73,543,524\n74,523,491\n75,371,391\n76,372,347\n77,341,275\n78,345,221\n79,322,236\n80,274,229\n81,302,213\n82,281,215\n83,310,199\n84,273,168\n85,209,169\n86,219,122\n87,166,122\n88,168,101\n89,135,81\n90+,511,217",
            "comparison_csv": null
        },
        "population-pyramid-static-with-comparison": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"accessibleSummary\":\n\t\t\t\"This chart has been hidden from screen readers. The main message of the chart is summarised in the chart title.\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"comparison_data\": \"comparison.csv\",\n\t\t\"dataType\": \"numbers\",\n\t\t// dataType can be a 'percentage' or 'numbers' where it works out the percentage in the script\n\t\t\"colour_palette\": [\"#9A86E9\", \"#3fb0b3\"],\n\t\t// this is the lighter palette for reference lines [\"#9A86E9\", \"#3fb0b3\"]\n\t\t\"comparison_colour_palette\": [\"#5c5185\", \"#306970\"],\n\t\t\"legend\": [\"Area name\", \"England and Wales\"],\n\t\t\"xAxislabel\": [\"Percentage\"],\n\t\t\"yAxislabel\": [\"Age\"]\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"centre\": 60\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 6,\n\t\t\t\"md\": 6,\n\t\t\t\"lg\": 6\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 3,\n\t\t\t\"md\": 3,\n\t\t\t\"lg\": 3\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 1 }\n};\n",
            "data_csv": "age,femaleBar,maleBar\n<1,449,469\n1,458,496\n2,510,536\n3,476,510\n4,518,559\n5,551,558\n6,505,527\n7,528,569\n8,561,611\n9,592,580\n10,564,604\n11,596,642\n12,579,609\n13,568,622\n14,563,574\n15,571,597\n16,554,537\n17,542,543\n18,425,502\n19,431,478\n20,495,487\n21,514,500\n22,563,502\n23,535,464\n24,515,537\n25,554,510\n26,548,529\n27,601,513\n28,579,527\n29,606,529\n30,629,566\n31,617,512\n32,612,565\n33,646,539\n34,647,553\n35,574,532\n36,600,539\n37,560,520\n38,565,492\n39,583,498\n40,555,516\n41,581,529\n42,499,500\n43,501,447\n44,502,435\n45,501,519\n46,492,452\n47,560,498\n48,546,595\n49,633,622\n50,680,629\n51,664,589\n52,698,610\n53,705,646\n54,709,648\n55,759,677\n56,719,731\n57,753,680\n58,730,681\n59,740,662\n60,691,693\n61,633,633\n62,650,627\n63,590,596\n64,575,609\n65,572,548\n66,542,511\n67,489,521\n68,561,482\n69,507,513\n70,491,466\n71,534,496\n72,545,472\n73,543,524\n74,523,491\n75,371,391\n76,372,347\n77,341,275\n78,345,221\n79,322,236\n80,274,229\n81,302,213\n82,281,215\n83,310,199\n84,273,168\n85,209,169\n86,219,122\n87,166,122\n88,168,101\n89,135,81\n90+,511,217",
            "chart_css": "div.chartLabel > p{\nfont-size: 16px;\nfont-weight: 600;\nmargin-bottom:10px;\n}\n\ndiv#titles{\n    display: flex;\n    flex-wrap: nowrap;\n    flex-direction: column;\n}\n\n.flex-row{\n    display: flex;\n    flex-direction: row;\n}\n\ndiv.legend--item div:last-child{\n    flex-shrink: 1;\n}\n\n.legend--icon--circle{\n    margin-right: 8px;\n}\n",
            "comparison_csv": "age,femaleBar,maleBar\n<1,282933,296055\n1,295634,310301\n2,301599,317434\n3,306032,320330\n4,315442,331189\n5,321107,337582\n6,317726,332834\n7,321907,336955\n8,334272,351858\n9,339456,355003\n10,337922,356597\n11,335465,352255\n12,334871,350387\n13,332212,350411\n14,323711,339496\n15,313590,330524\n16,315209,334252\n17,311182,330865\n18,308256,324799\n19,319917,330301\n20,319929,329370\n21,330231,338097\n22,342462,345066\n23,350317,347977\n24,358627,352375\n25,359798,352107\n26,370055,357353\n27,379832,363058\n28,388230,368108\n29,399459,377283\n30,410249,387679\n31,407064,381724\n32,409408,381229\n33,413828,385229\n34,403811,372364\n35,400036,376410\n36,395941,371338\n37,388142,365390\n38,385261,363598\n39,384105,365169\n40,393488,372710\n41,385950,368248\n42,363845,350507\n43,341802,330754\n44,341634,331468\n45,346214,336594\n46,354480,345229\n47,359914,350581\n48,374715,365326\n49,390222,379370\n50,399771,385521\n51,390018,378728\n52,399572,386717\n53,397200,384198\n54,398328,387701\n55,399263,384855\n56,398741,385216\n57,389462,375674\n58,380825,367810\n59,368413,356110\n60,354854,346541\n61,337895,328541\n62,332120,320308\n63,321213,311104\n64,307955,295467\n65,294275,281753\n66,288358,272253\n67,288286,271693\n68,279734,260946\n69,274921,255277\n70,275551,254130\n71,282627,256837\n72,286708,261227\n73,311493,281632\n74,308504,277941\n75,233621,207744\n76,245200,216053\n77,224582,195462\n78,209044,178766\n79,179080,149225\n80,168748,137721\n81,171871,137720\n82,163822,128775\n83,152911,117553\n84,141192,105770\n85,128329,92262\n86,115296,80786\n87,102191,68638\n88,92689,59523\n89,82402,50372\n90+,339160,160653",
            "script_js": "const graphic = d3.select('#graphic');\nconst titles = d3.select('#titles');\nconst legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\ttitles.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tmargin.centre = config.optional.margin.centre;\n\n\t// calculate percentage if we have numbers\n\t// percentages are based of total populations as is common practice amongst pop pyramids\n\n\tif (config.essential.dataType == 'numbers') {\n\t\tpopTotal = d3.sum(graphic_data, (d) => d.maleBar + d.femaleBar);\n\n\t\tcomparisonPopTotal = d3.sum(\n\t\t\tcomparison_data,\n\t\t\t(d) => d.maleBar + d.femaleBar\n\t\t);\n\n\t\t// turn into tidy data\n\t\tgraphic_data_new = graphic_data\n\t\t\t.map(function (d) {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'female',\n\t\t\t\t\t\tvalue: d.femaleBar / popTotal\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'male',\n\t\t\t\t\t\tvalue: d.maleBar / popTotal\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t})\n\t\t\t.flatMap((d) => d);\n\n\t\tcomparison_data_new = comparison_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\tage: d.age,\n\t\t\t\tmalePercent: d.maleBar / comparisonPopTotal,\n\t\t\t\tfemalePercent: d.femaleBar / comparisonPopTotal\n\t\t\t};\n\t\t});\n\t} else {\n\t\t// turn into tidy data\n\t\tgraphic_data_new = graphic_data\n\t\t\t.map(function (d) {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tvalue: d.femaleBar,\n\t\t\t\t\t\tsex: 'female'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'male',\n\t\t\t\t\t\tvalue: d.maleBar\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t})\n\t\t\t.flatMap((d) => d);\n\n\t\tcomparison_data_new = comparison_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\tage: d.age,\n\t\t\t\tmalePercent: d.maleBar,\n\t\t\t\tfemalePercent: d.femaleBar\n\t\t\t};\n\t\t});\n\t}\n\n\tmaxPercentage = d3.max([\n\t\td3.max(graphic_data_new, (d) => d.value),\n\t\td3.max(comparison_data_new, (d) => d3.max([d.femaleBar, d.maleBar]))\n\t]);\n\n\t// set up widths\n\tfullwidth = parseInt(graphic.style('width'));\n\tchart_width = (parseInt(graphic.style('width')) - margin.centre - margin.left - margin.right) / 2;\n\theight = (graphic_data_new.length / 2) * config.optional.seriesHeight[size];\n\n\t// set up some scales, first the left scale\n\txLeft = d3\n\t\t.scaleLinear()\n\t\t.domain([0, maxPercentage])\n\t\t.rangeRound([chart_width, 0]);\n\n\t// right scale\n\txRight = d3\n\t\t.scaleLinear()\n\t\t.domain(xLeft.domain())\n\t\t.rangeRound([chart_width + margin.centre, chart_width * 2 + margin.centre]);\n\n\t// y scale\n\ty = d3\n\t\t.scaleBand()\n\t\t.domain([...new Set(graphic_data_new.map((d) => d.age))])\n\t\t.rangeRound([height, 0])\n\t\t.paddingInner(0.1);\n\n\t// create the svg\n\tsvg = graphic\n\t\t.append('svg')\n\t\t.attr('class', 'chart')\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('width', fullwidth)\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t// create line generators\n\tlineLeft = d3\n\t\t.line()\n\t\t.curve(d3.curveStepBefore)\n\t\t.x((d) => xLeft(d.femalePercent))\n\t\t.y((d) => y(d.age) + y.bandwidth());\n\n\tlineRight = d3\n\t\t.line()\n\t\t.curve(d3.curveStepBefore)\n\t\t.x((d) => xRight(d.malePercent))\n\t\t.y((d) => y(d.age) + y.bandwidth());\n\n\t//add x-axis left\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xLeft)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t//add x-axis right\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis right')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xRight)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t// add bars\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('rect')\n\t\t.data(graphic_data_new)\n\t\t.join('rect')\n\t\t.attr('fill', (d) =>\n\t\t\td.sex === 'female'\n\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t: config.essential.colour_palette[1]\n\t\t)\n\t\t.attr('x', (d) => (d.sex === 'female' ? xLeft(d.value) : xRight(0)))\n\t\t.attr('y', (d) => y(d.age))\n\t\t.attr('width', (d) =>\n\t\t\td.sex === 'female'\n\t\t\t\t? xLeft(0) - xLeft(d.value)\n\t\t\t\t: xRight(d.value) - xRight(0)\n\t\t)\n\t\t.attr('height', y.bandwidth());\n\n\t//add y-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2 - 3) + ',0)'\n\t\t)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisRight(y)\n\t\t\t\t.tickSize(0)\n\t\t\t\t.tickValues(y.domain().filter((d, i) => !(i % 10)))\n\t\t)\n\t\t.selectAll('text')\n\t\t.each(function () {\n\t\t\td3.select(this).attr('text-anchor', 'middle');\n\t\t});\n\n\t//draw comparison lines\n\tcomparisons = svg.append('g');\n\n\tcomparisons\n\t\t.append('path')\n\t\t.attr('class', 'line')\n\t\t.attr('d', lineLeft(comparison_data_new) + 'l 0 ' + -y.bandwidth())\n\t\t.attr('stroke', config.essential.comparison_colour_palette[0])\n\t\t.attr('stroke-width', '2px');\n\n\tcomparisons\n\t\t.append('path')\n\t\t.attr('class', 'line')\n\t\t.attr('d', lineRight(comparison_data_new) + 'l 0 ' + -y.bandwidth())\n\t\t.attr('stroke', config.essential.comparison_colour_palette[1])\n\t\t.attr('stroke-width', '2px');\n\n\t//add x-axis titles\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' +\n\t\t\t\t(fullwidth - margin.left) +\n\t\t\t\t',' +\n\t\t\t\t(height + 30) +\n\t\t\t\t')'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'end')\n\t\t.text(config.essential.xAxislabel);\n\n\t//add y-axis title\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2) + ',-15)'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'middle')\n\t\t.text(config.essential.yAxislabel);\n\n\twidths = [chart_width + margin.left, chart_width + margin.right];\n\n\tlegend\n\t\t.append('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data(['Females', 'Males'])\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'chartLabel')\n\t\t.append('p')\n\t\t.text((d) => d);\n\n\tdataForLegend = [\n\t\t['x', 'x'],\n\t\t['y', 'y']\n\t]; //dummy data\n\n\ttitleDivs = titles\n\t\t.selectAll('div')\n\t\t.data(dataForLegend)\n\t\t.join('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data((d) => d)\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.style('background-color', (d, i) =>\n\t\t\td == 'x'\n\t\t\t\t? config.essential.colour_palette[i]\n\t\t\t\t: config.essential.comparison_colour_palette[i]\n\t\t)\n\t\t.attr('class', (d) =>\n\t\t\td == 'x' ? 'legend--icon--circle' : 'legend--icon--refline'\n\t\t);\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html((d) =>\n\t\t\td == 'x' ? config.essential.legend[0] : config.essential.legend[1]\n\t\t);\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n} //end draw graphic\n\nPromise.all([\n\td3.csv(config.essential.graphic_data_url, d3.autoType),\n\td3.csv(config.essential.comparison_data, d3.autoType)\n]).then(([data, datab]) => {\n\t//load chart data\n\tgraphic_data = data;\n\tcomparison_data = datab;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n"
        },
        "population-pyramid-with-comparison-toggle": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"accessibleSummary\":\n\t\t\t\"This chart has been hidden from screen readers. The main message of the chart is summarised in the chart title.\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"comparison_data\": \"comparison.csv\",\n\t\t\"comparison_time_data\": \"comparison-time.csv\",\n\t\t\"buttonLabels\": [\"England and Wales\", \"2011\"],\n\t\t\"dataType\": \"numbers\",\n\t\t// dataType can be a 'percentage' or 'numbers' where it works out the percentage in the script\n\t\t\"colour_palette\": [\"#9A86E9\", \"#3fb0b3\"],\n\t\t// this is the lighter palette for reference lines [\"#9A86E9\", \"#3fb0b3\"]\n\t\t\"comparison_colour_palette\": [\"#5c5185\", \"#306970\"],\n\t\t\"legend\": [\"Area name\", \"Selected comparison\"],\n\t\t\"xAxislabel\": [\"Percentage\"],\n\t\t\"yAxislabel\": [\"Age\"]\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"centre\": 60\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 6,\n\t\t\t\"md\": 6,\n\t\t\t\"lg\": 6\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 3,\n\t\t\t\"md\": 3,\n\t\t\t\"lg\": 3\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 1, \"legend\": 1, \"titles\": 1 }\n};\n",
            "script_js": "const graphic = d3.select('#graphic');\nconst titles = d3.select('#titles');\nconst legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\ttitles.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\td3.select('#nav').selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\t// build buttons\n\tfieldset = d3.select('#nav').append('fieldset');\n\n\tfieldset\n\t\t.append('legend')\n\t\t.attr('class', 'visuallyhidden')\n\t\t.html('Choose a variable');\n\n\tfieldset\n\t\t.append('div')\n\t\t.attr('class', 'visuallyhidden')\n\t\t.attr('aria-live', 'polite')\n\t\t.append('span')\n\t\t.attr('id', 'selected');\n\n\tgrid = fieldset.append('div').attr('class', 'grid');\n\n\tcell = grid\n\t\t.selectAll('div.grid-cell')\n\t\t.data(config.essential.buttonLabels)\n\t\t.join('div')\n\t\t.attr('class', 'grid-cell');\n\n\tcell\n\t\t.append('input')\n\t\t.attr('type', 'radio')\n\t\t.attr('class', 'visuallyhidden')\n\t\t.attr('id', function (d, i) {\n\t\t\treturn 'button' + i;\n\t\t})\n\t\t.attr('value', function (d, i) {\n\t\t\treturn i;\n\t\t})\n\t\t.attr('name', 'button');\n\n\tcell\n\t\t.append('label')\n\t\t.attr('for', function (d, i) {\n\t\t\treturn 'button' + i;\n\t\t})\n\t\t.append('div')\n\t\t.html(function (d) {\n\t\t\treturn d;\n\t\t});\n\n\t// set first button to selected\n\td3.select('#button0').property('checked', true);\n\td3.select('#selected').text(\n\t\tconfig.essential.buttonLabels[\n\t\tdocument.querySelector('input[name=\"button\"]:checked').value\n\t\t] + ' is selected'\n\t);\n\n\t// button interactivity\n\td3.selectAll('input[type=\"radio\"]').on('change', function (d) {\n\t\tonchange(document.querySelector('input[name=\"button\"]:checked').value);\n\t\td3.select('#selected').text(\n\t\t\tconfig.essential.buttonLabels[\n\t\t\tdocument.querySelector('input[name=\"button\"]:checked').value\n\t\t\t] + ' is selected'\n\t\t);\n\t});\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tmargin.centre = config.optional.margin.centre;\n\n\t// calculate percentage if we have numbers\n\t// percentages are based of total populations as is common practice amongst pop pyramids\n\tif (config.essential.dataType == 'numbers') {\n\t\tpopTotal = d3.sum(graphic_data, (d) => d.maleBar + d.femaleBar);\n\n\t\tcomparisonPopTotal = d3.sum(\n\t\t\tcomparison_data,\n\t\t\t(d) => d.maleBar + d.femaleBar\n\t\t);\n\n\t\ttimeComparisonPopTotal = d3.sum(\n\t\t\ttime_comparison_data,\n\t\t\t(d) => d.maleBar + d.femaleBar\n\t\t);\n\n\t\t// turn into tidy data\n\t\tgraphic_data_new = graphic_data\n\t\t\t.map(function (d) {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'female',\n\t\t\t\t\t\tvalue: d.femaleBar / popTotal\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'male',\n\t\t\t\t\t\tvalue: d.maleBar / popTotal\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t})\n\t\t\t.flatMap((d) => d);\n\n\t\tcomparison_data_new = comparison_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\tage: d.age,\n\t\t\t\tmalePercent: d.maleBar / comparisonPopTotal,\n\t\t\t\tfemalePercent: d.femaleBar / comparisonPopTotal\n\t\t\t};\n\t\t});\n\n\t\ttime_comparison_data_new = time_comparison_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\tage: d.age,\n\t\t\t\tmalePercent: d.maleBar / timeComparisonPopTotal,\n\t\t\t\tfemalePercent: d.femaleBar / timeComparisonPopTotal\n\t\t\t};\n\t\t});\n\t} else {\n\t\t// turn into tidy data\n\t\tgraphic_data_new = graphic_data\n\t\t\t.map(function (d) {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tvalue: d.femaleBar,\n\t\t\t\t\t\tsex: 'female'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tage: d.age,\n\t\t\t\t\t\tsex: 'male',\n\t\t\t\t\t\tvalue: d.maleBar\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t})\n\t\t\t.flatMap((d) => d);\n\n\t\tcomparison_data_new = comparison_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\tage: d.age,\n\t\t\t\tmalePercent: d.maleBar,\n\t\t\t\tfemalePercent: d.femaleBar\n\t\t\t};\n\t\t});\n\n\t\ttime_comparison_data = time_comparison_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\tage: d.age,\n\t\t\t\tmalePercent: d.maleBar,\n\t\t\t\tfemalePercent: d.femaleBar\n\t\t\t};\n\t\t});\n\t}\n\n\tmaxPercentage = d3.max([\n\t\td3.max(graphic_data_new, (d) => d.value),\n\t\td3.max(comparison_data_new, (d) => d3.max([d.femaleBar, d.maleBar])),\n\t\td3.max(time_comparison_data_new, (d) => d3.max([d.femaleBar, d.maleBar]))\n\t]);\n\n\t// set up widths\n\tfullwidth = parseInt(graphic.style('width'));\n\tchart_width = (parseInt(graphic.style('width')) - margin.centre - margin.left - margin.right) / 2;\n\theight = (graphic_data_new.length / 2) * config.optional.seriesHeight[size];\n\n\t// set up some scales, first the left scale\n\txLeft = d3\n\t\t.scaleLinear()\n\t\t.domain([0, maxPercentage])\n\t\t.rangeRound([chart_width, 0]);\n\n\t// right scale\n\txRight = d3\n\t\t.scaleLinear()\n\t\t.domain(xLeft.domain())\n\t\t.rangeRound([chart_width + margin.centre, chart_width * 2 + margin.centre]);\n\n\t// y scale\n\ty = d3\n\t\t.scaleBand()\n\t\t.domain([...new Set(graphic_data.map((d) => d.age))])\n\t\t.rangeRound([height, 0])\n\t\t.paddingInner(0.1);\n\n\t// create the svg\n\tsvg = graphic\n\t\t.append('svg')\n\t\t.attr('class', 'chart')\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('width', fullwidth)\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t// create line generators\n\tlineLeft = d3\n\t\t.line()\n\t\t.curve(d3.curveStepBefore)\n\t\t.x((d) => xLeft(d.femalePercent))\n\t\t.y((d) => y(d.age) + y.bandwidth());\n\n\tlineRight = d3\n\t\t.line()\n\t\t.curve(d3.curveStepBefore)\n\t\t.x((d) => xRight(d.malePercent))\n\t\t.y((d) => y(d.age) + y.bandwidth());\n\n\t//add x-axis left\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xLeft)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t//add x-axis right\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis right')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xRight)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t// add bars\n\tsvg\n\t\t.append('g')\n\t\t.selectAll('rect')\n\t\t.data(graphic_data_new)\n\t\t.join('rect')\n\t\t.attr('fill', (d) =>\n\t\t\td.sex === 'female'\n\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t: config.essential.colour_palette[1]\n\t\t)\n\t\t.attr('x', (d) => (d.sex === 'female' ? xLeft(d.value) : xRight(0)))\n\t\t.attr('y', (d) => y(d.age))\n\t\t.attr('width', (d) =>\n\t\t\td.sex === 'female'\n\t\t\t\t? xLeft(0) - xLeft(d.value)\n\t\t\t\t: xRight(d.value) - xRight(0)\n\t\t)\n\t\t.attr('height', y.bandwidth());\n\n\t//add y-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2 - 3) + ',0)'\n\t\t)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisRight(y)\n\t\t\t\t.tickSize(0)\n\t\t\t\t.tickValues(y.domain().filter((d, i) => !(i % 10)))\n\t\t)\n\t\t.selectAll('text')\n\t\t.each(function () {\n\t\t\td3.select(this).attr('text-anchor', 'middle');\n\t\t});\n\n\t//draw comparison lines\n\tcomparisons = svg.append('g');\n\n\tcomparisons\n\t\t.append('path')\n\t\t.attr('class', 'line')\n\t\t.attr('id', 'comparisonLineLeft')\n\t\t.attr('d', lineLeft(comparison_data_new) + 'l 0 ' + -y.bandwidth())\n\t\t.attr('stroke', config.essential.comparison_colour_palette[0])\n\t\t.attr('stroke-width', '2px');\n\n\tcomparisons\n\t\t.append('path')\n\t\t.attr('class', 'line')\n\t\t.attr('id', 'comparisonLineRight')\n\t\t.attr('d', lineRight(comparison_data_new) + 'l 0 ' + -y.bandwidth())\n\t\t.attr('stroke', config.essential.comparison_colour_palette[1])\n\t\t.attr('stroke-width', '2px');\n\n\t//add x-axis titles\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' +\n\t\t\t(fullwidth - margin.left) +\n\t\t\t',' +\n\t\t\t(height + 30) +\n\t\t\t')'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'end')\n\t\t.text(config.essential.xAxislabel);\n\n\t//add y-axis title\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2) + ',-15)'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'middle')\n\t\t.text(config.essential.yAxislabel);\n\n\t// Set up the legend\n\twidths = [chart_width + margin.left, chart_width + margin.right];\n\n\tlegend\n\t\t.append('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data(['Females', 'Males'])\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'chartLabel')\n\t\t.append('p')\n\t\t.text((d) => d);\n\n\tdataForLegend = [\n\t\t['x', 'x'],\n\t\t['y', 'y']\n\t]; //dummy data\n\n\ttitleDivs = titles\n\t\t.selectAll('div')\n\t\t.data(dataForLegend)\n\t\t.join('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data((d) => d)\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.style('background-color', (d, i) =>\n\t\t\td == 'x'\n\t\t\t\t? config.essential.colour_palette[i]\n\t\t\t\t: config.essential.comparison_colour_palette[i]\n\t\t)\n\t\t.attr('class', (d) =>\n\t\t\td == 'x' ? 'legend--icon--circle' : 'legend--icon--refline'\n\t\t);\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', (d) => 'legend--text ' + 'item' + d)\n\t\t.html((d) =>\n\t\t\td == 'x' ? config.essential.legend[0] : config.essential.buttonLabels[0]\n\t\t);\n\n\tfunction onchange(value) {\n\t\td3.select('#comparisonLineLeft')\n\t\t\t.transition()\n\t\t\t.attr('d', () =>\n\t\t\t\tvalue == 0\n\t\t\t\t\t? lineLeft(comparison_data_new) + 'l 0 ' + -y.bandwidth()\n\t\t\t\t\t: lineLeft(time_comparison_data_new) + 'l 0 ' + -y.bandwidth()\n\t\t\t);\n\t\td3.select('#comparisonLineRight')\n\t\t\t.transition()\n\t\t\t.attr('d', () =>\n\t\t\t\tvalue == 0\n\t\t\t\t\t? lineRight(comparison_data_new) + 'l 0 ' + -y.bandwidth()\n\t\t\t\t\t: lineRight(time_comparison_data_new) + 'l 0 ' + -y.bandwidth()\n\t\t\t);\n\n\t\t//Updating the legend based on which button is selected\n\t\td3.selectAll(\"p.legend--text.itemy\").text(config.essential.buttonLabels[\n\t\t\tdocument.querySelector('input[name=\"button\"]:checked').value\n\t\t])\n\t}\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n} //end draw graphic\n\nPromise.all([\n\td3.csv(config.essential.graphic_data_url, d3.autoType),\n\td3.csv(config.essential.comparison_data, d3.autoType),\n\td3.csv(config.essential.comparison_time_data, d3.autoType)\n]).then(([data, datab, datac]) => {\n\t//load chart data\n\tgraphic_data = data;\n\tcomparison_data = datab;\n\ttime_comparison_data = datac;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "chart_css": "div.chartLabel>p {\n    font-size: 16px;\n    font-weight: 600;\n    margin-bottom: 10px;\n}\n\ndiv#titles {\n    display: flex;\n    flex-wrap: nowrap;\n    flex-direction: column;\n}\n\n.flex-row {\n    display: flex;\n    flex-direction: row;\n}\n\n/* buttons */\nfieldset {\n    border: none;\n    padding: 0 0 0 0;\n}\n\ninput[type=\"radio\"] {\n    opacity: 0;\n}\n\n.grid {\n    display: flex;\n    flex-wrap: wrap;\n    list-style: none;\n    margin: 0;\n}\n\n.grid-cell {\n    display: block;\n    border: 2px solid #206095;\n}\n\n.grid-cell label {\n    font-size: 16px;\n    padding-right: 17px;\n    padding-left: 17px;\n    display: block;\n    max-width: 240px;\n    min-height: 100%;\n    padding-top: 3px;\n    padding-bottom: 4px;\n    margin-right:-1px;\n    color: #206095;\n}\n\ninput[type=\"radio\"]:checked+label {\n    color: white;\n    background: #206095;\n}\n\ninput[type='radio']:not(:checked)+label:hover {\n    background-color: rgba(31, 95, 147, 0.2);\n    cursor: pointer;\n}\n\ninput[type='radio']:focus-visible+label {\n    position: relative;\n    box-shadow: 0 0 0px 3pt orange;\n    outline: 2px dotted transparent;\n    z-index: 10;\n}\n\n.legend--icon--circle{\n    margin-right: 8px;\n}",
            "data_csv": "age,femaleBar,maleBar\n<1,449,469\n1,458,496\n2,510,536\n3,476,510\n4,518,559\n5,551,558\n6,505,527\n7,528,569\n8,561,611\n9,592,580\n10,564,604\n11,596,642\n12,579,609\n13,568,622\n14,563,574\n15,571,597\n16,554,537\n17,542,543\n18,425,502\n19,431,478\n20,495,487\n21,514,500\n22,563,502\n23,535,464\n24,515,537\n25,554,510\n26,548,529\n27,601,513\n28,579,527\n29,606,529\n30,629,566\n31,617,512\n32,612,565\n33,646,539\n34,647,553\n35,574,532\n36,600,539\n37,560,520\n38,565,492\n39,583,498\n40,555,516\n41,581,529\n42,499,500\n43,501,447\n44,502,435\n45,501,519\n46,492,452\n47,560,498\n48,546,595\n49,633,622\n50,680,629\n51,664,589\n52,698,610\n53,705,646\n54,709,648\n55,759,677\n56,719,731\n57,753,680\n58,730,681\n59,740,662\n60,691,693\n61,633,633\n62,650,627\n63,590,596\n64,575,609\n65,572,548\n66,542,511\n67,489,521\n68,561,482\n69,507,513\n70,491,466\n71,534,496\n72,545,472\n73,543,524\n74,523,491\n75,371,391\n76,372,347\n77,341,275\n78,345,221\n79,322,236\n80,274,229\n81,302,213\n82,281,215\n83,310,199\n84,273,168\n85,209,169\n86,219,122\n87,166,122\n88,168,101\n89,135,81\n90+,511,217",
            "comparison_csv": "age,femaleBar,maleBar\n<1,282933,296055\n1,295634,310301\n2,301599,317434\n3,306032,320330\n4,315442,331189\n5,321107,337582\n6,317726,332834\n7,321907,336955\n8,334272,351858\n9,339456,355003\n10,337922,356597\n11,335465,352255\n12,334871,350387\n13,332212,350411\n14,323711,339496\n15,313590,330524\n16,315209,334252\n17,311182,330865\n18,308256,324799\n19,319917,330301\n20,319929,329370\n21,330231,338097\n22,342462,345066\n23,350317,347977\n24,358627,352375\n25,359798,352107\n26,370055,357353\n27,379832,363058\n28,388230,368108\n29,399459,377283\n30,410249,387679\n31,407064,381724\n32,409408,381229\n33,413828,385229\n34,403811,372364\n35,400036,376410\n36,395941,371338\n37,388142,365390\n38,385261,363598\n39,384105,365169\n40,393488,372710\n41,385950,368248\n42,363845,350507\n43,341802,330754\n44,341634,331468\n45,346214,336594\n46,354480,345229\n47,359914,350581\n48,374715,365326\n49,390222,379370\n50,399771,385521\n51,390018,378728\n52,399572,386717\n53,397200,384198\n54,398328,387701\n55,399263,384855\n56,398741,385216\n57,389462,375674\n58,380825,367810\n59,368413,356110\n60,354854,346541\n61,337895,328541\n62,332120,320308\n63,321213,311104\n64,307955,295467\n65,294275,281753\n66,288358,272253\n67,288286,271693\n68,279734,260946\n69,274921,255277\n70,275551,254130\n71,282627,256837\n72,286708,261227\n73,311493,281632\n74,308504,277941\n75,233621,207744\n76,245200,216053\n77,224582,195462\n78,209044,178766\n79,179080,149225\n80,168748,137721\n81,171871,137720\n82,163822,128775\n83,152911,117553\n84,141192,105770\n85,128329,92262\n86,115296,80786\n87,102191,68638\n88,92689,59523\n89,82402,50372\n90+,339160,160653"
        },
        "population-pyramid-with-dropdown": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"accessibleSummary\":\n\t\t\t\"This chart has been hidden from screen readers. The main message of the chart is summarised in the chart title.\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"comparison_data\": \"comparison.csv\",\n\t\t\"comparison_time_data\": \"comparison-time.csv\",\n\t\t\"dataType\": \"numbers\",\n\t\t// dataType can be a 'percentage' or 'numbers' where it works out the percentage in the script\n\t\t\"colour_palette\": [\"#9A86E9\", \"#3fb0b3\"],\n\t\t// this is the lighter palette for reference lines [\"#9A86E9\", \"#3fb0b3\"]\n\t\t\"comparison_colour_palette\": [\"#5c5185\", \"#306970\"],\n\t\t\"legend\": [\"Selected area\", \"England and Wales\"],\n\t\t\"xAxislabel\": [\"Percentage\"],\n\t\t\"yAxislabel\": [\"Age\"]\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"centre\": 60\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 6,\n\t\t\t\"md\": 6,\n\t\t\t\"lg\": 6\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 3,\n\t\t\t\"md\": 3,\n\t\t\t\"lg\": 3\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 1, \"nav\": 0, \"legend\": 1, \"titles\": 1 }\n};\n",
            "chart_css": "div.chartLabel>p {\n    font-size: 16px;\n    font-weight: 600;\n    margin-bottom: 10px;\n}\n\ndiv#titles {\n    display: flex;\n    flex-wrap: nowrap;\n    flex-direction: column;\n}\n\n.flex-row {\n    display: flex;\n    flex-direction: row;\n}\n\n/* dropdown */\ndiv#select{\n    margin-bottom: 20px;\n}\n\n.legend--icon--circle{\n    margin-right: 8px;\n}",
            "script_js": "const graphic = d3.select('#graphic');\nconst titles = d3.select('#titles');\nconst legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\ttitles.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\td3.select('#select').selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\t// build dropdown, first unique areas\n\t// https://stackoverflow.com/questions/38613654/javascript-find-unique-objects-in-array-based-on-multiple-properties\n\tdropdownData = graphic_data\n\t\t.map(function (d) {\n\t\t\treturn { nm: d.AREANM, cd: d.AREACD };\n\t\t})\n\t\t.filter(function (a) {\n\t\t\tlet key = a.nm + '|' + a.cd;\n\t\t\tif (!this[key]) {\n\t\t\t\tthis[key] = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}, Object.create(null))\n\t\t.sort((a, b) => d3.ascending(a.nm, b.nm)); //sorted alphabetically\n\n\t// // Build option menu\n\tconst optns = d3\n\t\t.select('#select')\n\t\t.append('div')\n\t\t.attr('id', 'sel')\n\t\t.append('select')\n\t\t.attr('id', 'areaselect')\n\t\t.attr('style', 'width:calc(100% - 6px)')\n\t\t.attr('class', 'chosen-select');\n\n\toptns.append('option');\n\n\t//join unique names and codes to build select\n\toptns\n\t\t.selectAll('p')\n\t\t.data(dropdownData)\n\t\t.join('option')\n\t\t.attr('value', function (d) {\n\t\t\treturn d.cd;\n\t\t})\n\t\t.text(function (d) {\n\t\t\treturn d.nm;\n\t\t});\n\n\t// start the chosen dropdown\n\t$('#areaselect').chosen({\n\t\tplaceholder_text_single: 'Select an area',\n\t\tallow_single_deselect: true\n\t});\n\n\t//add some more accessibility stuff\n\td3.select('input.chosen-search-input').attr('id', 'chosensearchinput');\n\td3.select('div.chosen-search')\n\t\t.insert('label', 'input.chosen-search-input')\n\t\t.attr('class', 'visuallyhidden')\n\t\t.attr('for', 'chosensearchinput')\n\t\t.html('Type to select an area');\n\n\t// draw the bars on change\n\t$('#areaselect').on('change', function () {\n\t\tif ($('#areaselect').val() != '') {\n\t\t\td3.select('#bars')\n\t\t\t\t.selectAll('rect')\n\t\t\t\t.data(\n\t\t\t\t\ttidydataPercentage.filter((d) => d.AREACD == $('#areaselect').val())\n\t\t\t\t)\n\t\t\t\t.join('rect')\n\t\t\t\t.attr('fill', (d) =>\n\t\t\t\t\td.sex === 'female'\n\t\t\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t\t\t: config.essential.colour_palette[1]\n\t\t\t\t)\n\t\t\t\t.attr('y', (d) => y(d.age))\n\t\t\t\t.attr('height', y.bandwidth())\n\t\t\t\t.transition()\n\t\t\t\t.attr('x', (d) =>\n\t\t\t\t\td.sex === 'female' ? xLeft(d.percentage) : xRight(0)\n\t\t\t\t)\n\t\t\t\t.attr('width', (d) =>\n\t\t\t\t\td.sex === 'female'\n\t\t\t\t\t\t? xLeft(0) - xLeft(d.percentage)\n\t\t\t\t\t\t: xRight(d.percentage) - xRight(0)\n\t\t\t\t);\n\n\t\t\t// clear the chart via keyboard\n\t\t\td3.select('button.abbr').on('keypress', function (evt) {\n\t\t\t\tif (evt.keyCode == 13 || evt.keyCode == 32) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tclear();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t//on clear\n\t\t\tclear();\n\t\t}\n\t});\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tmargin.centre = config.optional.margin.centre;\n\n\tallAges = graphic_data.columns.slice(3);\n\n\t// calculate percentage if we have numbers\n\tif (config.essential.dataType == 'numbers') {\n\t\t// turn into tidy data\n\t\ttidydata = pivot(\n\t\t\tgraphic_data,\n\t\t\tgraphic_data.columns.slice(3),\n\t\t\t'age',\n\t\t\t'value'\n\t\t);\n\n\t\t//rollup to work out totals\n\t\trolledUp = d3.rollup(\n\t\t\ttidydata,\n\t\t\t(v) => d3.sum(v, (d) => d.value),\n\t\t\t(d) => d.AREACD\n\t\t);\n\n\t\t// then use total to work out percentages\n\t\ttidydataPercentage = tidydata.map(function (d) {\n\t\t\treturn {\n\t\t\t\t...d,\n\t\t\t\tpercentage: d.value / rolledUp.get(d.AREACD)\n\t\t\t};\n\t\t});\n\n\t\t//work out percentages for comparison\n\t\tcomparisonPopTotal = d3.sum(\n\t\t\tcomparison_data,\n\t\t\t(d) => d.maleBar + d.femaleBar\n\t\t);\n\n\t\tcomparison_data_new = comparison_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\tage: d.age,\n\t\t\t\tmale: d.maleBar / comparisonPopTotal,\n\t\t\t\tfemale: d.femaleBar / comparisonPopTotal\n\t\t\t};\n\t\t});\n\t} else {\n\t\t// turn into tidy data\n\t\ttidydataPercentage = pivot(\n\t\t\tgraphic_data,\n\t\t\tgraphic_data.columns.slice(3),\n\t\t\t'age',\n\t\t\t'percentage'\n\t\t);\n\n\t\tcomparison_data_new = comparison_data.map(function (d) {\n\t\t\treturn {\n\t\t\t\tage: d.age,\n\t\t\t\tmale: d.maleBar,\n\t\t\t\tfemale: d.femaleBar\n\t\t\t};\n\t\t});\n\t}\n\n\tmaxPercentage = d3.max([\n\t\td3.max(tidydataPercentage, (d) => d.percentage),\n\t\td3.max(comparison_data_new, (d) => d3.max([d.female, d.male]))\n\t]);\n\n\t// set up widths\n\tfullwidth = parseInt(graphic.style('width'));\n\tchart_width = (parseInt(graphic.style('width')) - margin.centre - margin.left - margin.right) / 2;\n\theight = allAges.length * config.optional.seriesHeight[size];\n\n\t// set up some scales, first the left scale\n\txLeft = d3\n\t\t.scaleLinear()\n\t\t.domain([0, maxPercentage])\n\t\t.rangeRound([chart_width, 0]);\n\n\t// right scale\n\txRight = d3\n\t\t.scaleLinear()\n\t\t.domain(xLeft.domain())\n\t\t.rangeRound([chart_width + margin.centre, chart_width * 2 + margin.centre]);\n\n\t// y scale\n\ty = d3.scaleBand().domain(allAges).rangeRound([height, 0]).paddingInner(0.1);\n\n\t// create the svg\n\tsvg = graphic\n\t\t.append('svg')\n\t\t.attr('class', 'chart')\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('width', fullwidth)\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t// create line generators\n\tlineLeft = d3\n\t\t.line()\n\t\t.curve(d3.curveStepBefore)\n\t\t.x((d) => xLeft(d.female))\n\t\t.y((d) => y(d.age) + y.bandwidth());\n\n\tlineRight = d3\n\t\t.line()\n\t\t.curve(d3.curveStepBefore)\n\t\t.x((d) => xRight(d.male))\n\t\t.y((d) => y(d.age) + y.bandwidth());\n\n\t//add x-axis left\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xLeft)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t//add x-axis right\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis right')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xRight)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t// add bars\n\tsvg\n\t\t.append('g')\n\t\t.attr('id', 'bars')\n\t\t.selectAll('rect')\n\t\t.data(tidydataPercentage.filter((d) => d.AREACD == graphic_data[0].AREACD))\n\t\t.join('rect')\n\t\t.attr('fill', (d) =>\n\t\t\td.sex === 'female'\n\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t: config.essential.colour_palette[1]\n\t\t)\n\t\t.attr('y', (d) => y(d.age))\n\t\t.attr('height', y.bandwidth())\n\t\t.attr('x', (d) => (d.sex === 'female' ? xLeft(0) : xRight(0)))\n\t\t.attr('width', 0);\n\n\t//add y-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2 - 3) + ',0)'\n\t\t)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisRight(y)\n\t\t\t\t.tickSize(0)\n\t\t\t\t.tickValues(y.domain().filter((d, i) => !(i % 10)))\n\t\t)\n\t\t.selectAll('text')\n\t\t.each(function () {\n\t\t\td3.select(this).attr('text-anchor', 'middle');\n\t\t});\n\n\t//draw comparison lines\n\tcomparisons = svg.append('g');\n\n\tcomparisons\n\t\t.append('path')\n\t\t.attr('class', 'line')\n\t\t.attr('id', 'comparisonLineLeft')\n\t\t.attr('d', lineLeft(comparison_data_new) + 'l 0 ' + -y.bandwidth())\n\t\t.attr('stroke', config.essential.comparison_colour_palette[0])\n\t\t.attr('stroke-width', '2px');\n\n\tcomparisons\n\t\t.append('path')\n\t\t.attr('class', 'line')\n\t\t.attr('id', 'comparisonLineRight')\n\t\t.attr('d', lineRight(comparison_data_new) + 'l 0 ' + -y.bandwidth())\n\t\t.attr('stroke', config.essential.comparison_colour_palette[1])\n\t\t.attr('stroke-width', '2px');\n\n\t//add x-axis titles\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' +\n\t\t\t\t(fullwidth - margin.left) +\n\t\t\t\t',' +\n\t\t\t\t(height + 30) +\n\t\t\t\t')'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'end')\n\t\t.text(config.essential.xAxislabel);\n\n\t//add y-axis title\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2) + ',-15)'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'middle')\n\t\t.text(config.essential.yAxislabel);\n\n\t// Set up the legend\n\twidths = [chart_width + margin.left, chart_width + margin.right];\n\n\tlegend\n\t\t.append('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data(['Females', 'Males'])\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'chartLabel')\n\t\t.append('p')\n\t\t.text((d) => d);\n\n\tdataForLegend = [\n\t\t['x', 'x'],\n\t\t['y', 'y']\n\t]; //dummy data\n\n\ttitleDivs = titles\n\t\t.selectAll('div')\n\t\t.data(dataForLegend)\n\t\t.join('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data((d) => d)\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.style('background-color', (d, i) =>\n\t\t\td == 'x'\n\t\t\t\t? config.essential.colour_palette[i]\n\t\t\t\t: config.essential.comparison_colour_palette[i]\n\t\t)\n\t\t.attr('class', (d) =>\n\t\t\td == 'x' ? 'legend--icon--circle' : 'legend--icon--refline'\n\t\t);\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html((d) =>\n\t\t\td == 'x' ? config.essential.legend[0] : config.essential.legend[1]\n\t\t);\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n} //end draw graphic\n\nPromise.all([\n\td3.csv(config.essential.graphic_data_url, d3.autoType),\n\td3.csv(config.essential.comparison_data, d3.autoType)\n]).then(([data, datab]) => {\n\t//load chart data\n\tgraphic_data = data;\n\tcomparison_data = datab;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n\nfunction clear() {\n\td3.select('#bars')\n\t\t.selectAll('rect')\n\t\t.transition()\n\t\t.attr('x', (d) => (d.sex === 'female' ? xLeft(0) : xRight(0)))\n\t\t.attr('width', 0);\n\n\t$('#areaselect').val(null).trigger('chosen:updated');\n}\n\n// bostock pivot longer function from https://observablehq.com/d/3ea8d446f5ba96fe\nfunction pivot(data, columns, name, value) {\n\tconst keep = data.columns.filter((c) => !columns.includes(c));\n\treturn data.flatMap((d) => {\n\t\tconst base = keep.map((k) => [k, d[k]]);\n\t\treturn columns.map((c) => {\n\t\t\treturn Object.fromEntries([...base, [name, c], [value, d[c]]]);\n\t\t});\n\t});\n}\n",
            "comparison_csv": "age,femaleBar,maleBar\n<1,282933,296055\n1,295634,310301\n2,301599,317434\n3,306032,320330\n4,315442,331189\n5,321107,337582\n6,317726,332834\n7,321907,336955\n8,334272,351858\n9,339456,355003\n10,337922,356597\n11,335465,352255\n12,334871,350387\n13,332212,350411\n14,323711,339496\n15,313590,330524\n16,315209,334252\n17,311182,330865\n18,308256,324799\n19,319917,330301\n20,319929,329370\n21,330231,338097\n22,342462,345066\n23,350317,347977\n24,358627,352375\n25,359798,352107\n26,370055,357353\n27,379832,363058\n28,388230,368108\n29,399459,377283\n30,410249,387679\n31,407064,381724\n32,409408,381229\n33,413828,385229\n34,403811,372364\n35,400036,376410\n36,395941,371338\n37,388142,365390\n38,385261,363598\n39,384105,365169\n40,393488,372710\n41,385950,368248\n42,363845,350507\n43,341802,330754\n44,341634,331468\n45,346214,336594\n46,354480,345229\n47,359914,350581\n48,374715,365326\n49,390222,379370\n50,399771,385521\n51,390018,378728\n52,399572,386717\n53,397200,384198\n54,398328,387701\n55,399263,384855\n56,398741,385216\n57,389462,375674\n58,380825,367810\n59,368413,356110\n60,354854,346541\n61,337895,328541\n62,332120,320308\n63,321213,311104\n64,307955,295467\n65,294275,281753\n66,288358,272253\n67,288286,271693\n68,279734,260946\n69,274921,255277\n70,275551,254130\n71,282627,256837\n72,286708,261227\n73,311493,281632\n74,308504,277941\n75,233621,207744\n76,245200,216053\n77,224582,195462\n78,209044,178766\n79,179080,149225\n80,168748,137721\n81,171871,137720\n82,163822,128775\n83,152911,117553\n84,141192,105770\n85,128329,92262\n86,115296,80786\n87,102191,68638\n88,92689,59523\n89,82402,50372\n90+,339160,160653",
            "data_csv": "AREANM,AREACD,sex,<1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90+\nHartlepool,E06000001,female,449,458,510,476,518,551,505,528,561,592,564,596,579,568,563,571,554,542,425,431,495,514,563,535,515,554,548,601,579,606,629,617,612,646,647,574,600,560,565,583,555,581,499,501,502,501,492,560,546,633,680,664,698,705,709,759,719,753,730,740,691,633,650,590,575,572,542,489,561,507,491,534,545,543,523,371,372,341,345,322,274,302,281,310,273,209,219,166,168,135,511\nMiddlesbrough,E06000002,female,825,854,856,911,952,853,942,930,1011,988,1005,924,902,893,889,903,871,851,779,756,874,964,972,1048,986,971,1053,1067,1032,1067,1015,1021,1047,1073,1083,1028,1030,966,919,860,936,867,833,697,751,793,754,767,832,878,900,883,901,935,905,946,959,967,958,945,918,873,908,933,841,814,781,757,712,652,702,657,651,659,686,525,485,436,452,416,405,385,377,390,330,323,263,250,208,172,696\nRedcar and Cleveland,E06000003,female,566,691,674,716,736,712,725,756,806,817,797,762,768,770,797,734,719,731,604,589,581,623,675,697,729,712,755,729,790,866,868,833,825,839,854,870,839,786,753,803,860,800,778,683,676,722,739,788,892,934,995,1002,1017,1056,1121,1123,1088,1091,1096,1098,967,1002,1022,961,901,901,826,925,886,854,852,897,920,955,965,771,745,662,583,591,515,572,511,472,422,376,327,277,257,213,864\nStockton-on-Tees,E06000004,female,983,1046,1019,1073,1183,1153,1109,1168,1307,1271,1267,1259,1353,1249,1285,1180,1136,1166,919,730,831,826,916,976,1204,1118,1076,1283,1220,1371,1350,1278,1324,1452,1373,1313,1435,1303,1385,1213,1371,1278,1204,1098,1085,1176,1161,1243,1173,1391,1405,1385,1382,1384,1450,1414,1402,1527,1464,1448,1354,1347,1310,1279,1231,1159,1126,1104,1059,1070,1055,975,1036,1190,1068,795,786,736,670,664,603,619,593,511,460,441,374,350,314,290,957\nDarlington,E06000005,female,526,542,524,581,558,569,603,587,631,658,650,669,615,685,639,619,619,581,542,393,405,519,609,600,640,637,612,657,663,700,779,704,717,700,723,688,662,693,657,696,679,725,690,624,602,662,654,744,740,779,817,766,754,780,820,798,812,811,781,768,774,679,746,750,667,627,561,614,579,613,602,598,592,681,676,505,521,438,374,356,366,367,377,343,311,266,251,216,194,163,672\nCounty Durham,E06000047,female,2162,2365,2325,2513,2630,2677,2774,2713,2741,2868,2874,2920,2836,2955,2814,2729,2752,2563,3306,3990,3792,3534,3283,2850,2957,2821,2910,2943,3161,3173,3271,3182,3223,3194,3158,3283,3116,3047,3137,3184,3261,3184,3045,2751,2821,2885,2967,3141,3496,3722,3854,3665,3965,3817,4080,4086,4032,4119,3858,3885,3724,3582,3699,3602,3343,3297,3158,3104,3108,3006,3043,3127,3113,3350,3281,2496,2670,2319,2124,1835,1854,1681,1702,1597,1526,1372,1199,1008,880,745,2857\nNorthumberland,E06000057,female,1237,1309,1427,1396,1579,1535,1567,1552,1741,1680,1720,1665,1731,1652,1646,1593,1585,1623,1440,1200,1101,1264,1331,1461,1495,1456,1614,1563,1622,1774,1674,1715,1712,1763,1781,1807,1824,1774,1680,1915,1865,1988,1827,1599,1714,1800,1880,1890,2155,2403,2345,2343,2371,2445,2502,2597,2740,2662,2673,2696,2593,2581,2628,2564,2445,2391,2301,2288,2237,2232,2254,2299,2333,2614,2400,1802,1933,1650,1579,1290,1263,1237,1222,1155,1063,887,835,663,661,614,2270\nNewcastle upon Tyne,E08000021,female,1391,1550,1527,1592,1558,1684,1546,1667,1625,1611,1673,1595,1595,1619,1462,1420,1467,1529,2730,4881,4809,4306,3400,2857,2743,2482,2322,2307,2237,2221,2179,2147,2071,2299,2134,1985,2065,1893,1953,1886,1904,1816,1645,1580,1459,1639,1659,1558,1496,1664,1703,1596,1680,1789,1661,1766,1716,1758,1760,1735,1604,1684,1642,1428,1508,1405,1289,1317,1257,1237,1182,1175,1185,1259,1308,889,989,855,790,680,732,770,721,720,625,599,506,476,429,384,1557\nNorth Tyneside,E08000022,female,944,986,1158,1081,1157,1171,1109,1122,1180,1204,1166,1195,1137,1159,1129,1147,1117,1088,952,724,775,817,906,1084,1121,1194,1139,1259,1297,1410,1410,1365,1463,1563,1514,1478,1538,1526,1425,1499,1541,1543,1393,1255,1248,1331,1347,1378,1436,1500,1534,1492,1541,1474,1500,1508,1598,1550,1567,1526,1441,1444,1424,1454,1346,1319,1293,1294,1260,1148,1171,1234,1220,1291,1347,945,980,836,783,662,680,693,662,660,602,515,470,407,382,360,1343\nSouth Tyneside,E08000023,female,703,669,776,788,817,793,803,829,814,875,891,834,842,865,798,763,756,795,694,631,635,671,727,779,818,829,884,897,932,924,1045,965,1049,1042,1119,1072,1019,937,925,932,962,938,905,755,790,838,840,878,908,1026,1035,1014,1102,1072,1110,1182,1191,1160,1120,1132,1154,1089,1108,1027,964,980,871,959,917,798,827,909,832,919,833,673,688,632,577,473,525,481,528,475,436,356,354,328,294,232,928\nSunderland,E08000024,female,1226,1320,1272,1415,1441,1454,1378,1448,1469,1639,1531,1616,1551,1627,1574,1471,1546,1397,1392,1388,1358,1414,1547,1616,1665,1578,1709,1781,1801,1931,1891,1812,1818,1936,1897,1818,1771,1714,1796,1698,1768,1755,1644,1484,1509,1605,1570,1672,1829,2024,1992,1923,1967,1974,2079,2006,2075,2078,2087,2044,1963,1895,1937,1927,1858,1709,1727,1677,1643,1598,1593,1586,1556,1666,1743,1185,1283,1063,1041,938,928,948,900,851,741,722,635,532,477,460,1504\nGateshead,E08000037,female,963,960,1017,973,1077,1047,1044,1091,1110,1108,1164,1108,1115,1051,1112,989,1081,1032,967,894,839,867,1060,1134,1237,1163,1357,1268,1222,1395,1365,1271,1384,1333,1285,1378,1317,1290,1338,1240,1322,1345,1167,1081,1101,1141,1128,1229,1256,1392,1394,1359,1382,1414,1508,1455,1450,1458,1442,1374,1347,1263,1247,1276,1207,1107,1115,1058,1046,1043,1027,1098,1147,1164,1145,866,929,831,695,709,693,681,662,661,572,536,459,449,385,297,1199\nHalton,E06000006,female,601,691,638,692,717,745,758,752,778,815,789,845,770,782,793,783,706,707,607,633,601,627,638,694,731,766,786,824,847,886,872,882,870,971,963,814,928,920,848,827,907,850,812,745,771,749,813,889,888,898,963,861,902,953,923,899,930,847,993,967,866,881,826,865,827,772,796,757,722,738,746,710,724,805,708,500,465,477,404,377,322,379,329,283,280,254,233,209,169,137,525\nWarrington,E06000007,female,930,1028,1102,1014,1108,1181,1144,1207,1218,1225,1333,1180,1272,1305,1166,1182,1207,1187,993,807,780,972,1086,1083,1162,1264,1169,1207,1216,1357,1440,1356,1409,1423,1434,1422,1502,1388,1427,1462,1409,1522,1323,1249,1354,1332,1354,1378,1518,1520,1603,1680,1541,1563,1664,1685,1595,1583,1582,1538,1373,1342,1315,1301,1105,1119,1138,1115,1040,1056,1056,1019,1084,1214,1239,950,942,884,851,808,704,735,689,622,530,481,409,370,320,270,1105\nBlackburn with Darwen,E06000008,female,981,1002,1049,993,1019,1075,1099,1040,1088,1164,1137,1162,1145,1201,1183,1111,1103,1087,1009,923,870,832,965,970,1028,956,976,1032,1023,1076,1070,1063,1103,1175,1127,1140,1127,1168,1088,1103,1168,1071,977,929,847,919,991,965,1024,1060,1028,1029,1043,1026,990,927,949,922,952,909,888,803,768,739,765,698,698,637,700,613,605,623,647,630,655,478,472,434,428,354,315,345,354,292,272,231,226,209,163,168,638\nBlackpool,E06000009,female,698,701,739,705,803,724,798,753,755,828,780,789,774,750,697,750,797,759,625,614,660,674,742,782,893,871,846,855,954,986,1026,988,966,973,973,954,946,825,862,774,796,842,794,713,723,744,815,851,941,977,1002,1002,1091,1048,1061,1091,1124,1109,1051,1048,975,920,933,892,867,834,776,769,719,715,738,773,789,894,814,688,668,640,579,534,487,518,455,435,440,372,346,263,238,250,882\nCheshire East,E06000049,female,1714,1836,2008,2051,2046,2042,2095,2099,2244,2248,2220,2177,2252,2162,2225,2105,2227,2236,1733,1314,1281,1593,1799,1973,2098,1953,2291,2186,2207,2274,2563,2413,2491,2512,2385,2526,2611,2463,2513,2417,2456,2624,2374,2228,2378,2517,2595,2646,2808,2960,3003,3051,3127,3249,3081,3150,3164,3080,3078,2986,2816,2697,2553,2449,2404,2218,2291,2330,2239,2274,2458,2320,2504,2849,2649,1976,2192,2027,1810,1597,1470,1504,1432,1336,1225,1174,988,839,788,704,2945\nCheshire West and Chester,E06000050,female,1685,1680,1678,1753,1839,1909,1837,1902,1942,2052,2033,1983,1921,1980,1882,1956,1934,1853,1808,1759,1787,1992,2100,2114,2190,1965,2050,2129,2190,2304,2328,2207,2261,2403,2284,2266,2260,2279,2294,2274,2276,2244,2195,2019,1994,2105,2262,2377,2401,2655,2628,2635,2685,2612,2727,2887,2718,2668,2642,2627,2488,2307,2320,2273,2224,2094,1951,2009,2010,1972,2037,2054,2088,2360,2236,1702,1841,1570,1482,1292,1291,1322,1130,1176,1070,931,850,707,682,590,2362\nAllerdale,E07000026,female,421,415,390,447,452,469,476,500,495,533,554,523,511,535,525,468,487,456,420,355,341,421,454,450,488,484,510,505,503,555,561,523,547,514,490,558,545,528,524,536,564,545,473,473,488,543,527,606,660,730,768,757,746,807,824,739,778,751,802,755,734,721,745,708,682,657,605,681,679,609,666,686,669,756,666,486,519,500,441,404,338,376,372,357,310,285,241,213,220,182,748\nBarrow-in-Furness,E07000027,female,272,335,329,338,381,404,328,368,347,374,328,351,346,383,379,339,344,366,323,301,323,359,337,366,366,427,398,482,460,441,429,417,461,428,422,449,381,401,388,393,383,325,353,352,357,356,373,416,442,487,515,505,492,507,534,525,551,499,488,440,442,472,467,401,412,409,387,402,380,388,390,401,399,469,427,363,332,303,311,265,287,224,225,224,196,170,167,114,114,89,387\nCarlisle,E07000028,female,509,515,542,490,563,578,616,581,576,629,609,618,566,581,574,569,575,557,562,501,571,515,597,648,648,648,641,694,721,797,728,726,697,687,674,674,696,701,723,651,648,659,596,600,627,586,629,684,730,735,784,777,821,819,769,853,822,861,812,838,806,776,793,762,713,628,676,657,681,661,622,677,660,692,695,519,497,492,452,428,417,369,353,358,363,314,269,255,229,188,738\nCopeland,E07000029,female,288,289,285,327,350,338,325,363,343,379,370,363,335,347,320,337,329,341,281,246,237,265,323,346,356,335,363,353,385,405,427,406,397,405,402,347,406,350,404,357,400,374,366,334,327,393,380,425,414,470,501,507,511,504,555,563,585,576,537,535,502,479,499,495,485,455,444,409,417,407,454,418,424,464,428,302,335,309,292,288,248,263,255,218,218,161,161,138,107,110,368\nEden,E07000030,female,200,196,212,224,207,248,236,257,280,236,286,278,243,294,241,278,244,305,220,176,168,228,248,217,254,232,258,240,268,272,275,301,278,298,241,294,269,268,262,295,271,298,288,299,291,305,305,347,345,396,415,450,484,482,458,480,493,490,476,473,461,433,456,453,379,403,387,367,383,406,408,400,393,435,382,302,362,296,243,239,210,230,257,191,173,172,133,135,115,89,431\nSouth Lakeland,E07000031,female,354,381,432,410,424,384,399,419,445,477,476,469,511,506,560,590,519,549,433,358,320,380,385,449,428,446,463,472,488,530,537,484,519,512,565,542,545,529,549,591,586,566,515,543,534,583,612,656,652,785,769,820,815,838,929,800,918,961,928,834,879,872,865,772,769,734,743,754,699,716,792,845,805,855,846,679,688,658,611,482,440,501,476,459,398,346,309,275,300,237,1020\nBurnley,E07000117,female,493,598,580,561,563,601,588,595,645,589,603,599,669,583,552,639,541,566,452,436,414,452,587,546,568,576,591,655,681,674,716,700,666,722,700,678,623,651,617,587,649,575,562,527,558,542,582,599,569,609,590,638,635,619,642,668,658,635,644,613,635,554,547,550,477,516,485,487,474,476,483,455,533,524,532,371,400,363,324,310,241,258,242,219,217,203,154,154,109,109,489\nChorley,E07000118,female,533,564,583,630,670,674,671,641,685,717,686,700,687,679,661,620,650,607,537,388,428,469,543,570,562,624,656,606,724,702,729,738,772,837,803,834,787,717,803,790,725,762,729,710,708,766,705,757,829,906,931,884,889,913,855,863,916,902,858,811,744,766,675,735,716,696,646,697,609,620,674,645,712,825,707,529,600,492,488,409,423,380,354,331,288,224,232,195,177,139,623\nFylde,E07000119,female,270,313,327,336,367,355,354,395,409,441,385,389,408,421,413,392,421,376,307,246,265,262,325,357,353,373,380,355,362,402,426,440,448,395,431,449,431,436,463,443,470,447,418,380,431,418,431,505,477,612,600,568,608,636,634,674,701,646,705,704,732,621,591,640,617,578,530,562,582,495,580,598,630,627,686,503,536,476,485,396,383,413,373,346,331,298,273,245,194,169,835\nHyndburn,E07000120,female,400,514,460,487,505,511,531,518,537,575,523,547,530,549,512,502,462,505,424,419,387,392,458,518,537,558,491,592,530,568,612,534,608,575,574,552,538,505,503,566,548,521,512,466,411,481,462,507,534,618,576,601,587,542,549,575,574,573,538,511,493,533,461,488,502,420,396,409,415,396,393,385,456,469,417,361,375,327,278,271,238,255,230,206,206,173,148,141,122,106,401\nLancaster,E07000121,female,621,656,690,659,675,765,707,713,754,776,758,721,755,692,713,781,691,726,1308,1913,1823,1525,1082,897,850,783,781,846,800,841,781,830,914,894,830,833,849,856,927,812,839,851,771,706,727,747,737,751,857,900,946,944,974,1004,992,1019,1019,967,1042,963,973,950,924,900,805,806,775,830,801,788,770,782,777,895,850,667,689,618,545,529,469,492,445,432,404,375,321,306,257,240,997\nPendle,E07000122,female,547,590,566,565,631,688,617,663,584,689,663,656,679,652,615,625,624,601,502,503,453,496,464,527,547,550,541,534,642,660,643,637,644,715,679,647,684,722,637,676,674,597,588,564,541,595,563,540,592,607,672,613,613,657,638,569,627,622,611,627,583,580,547,563,587,526,507,466,467,428,511,485,463,524,529,371,397,349,315,272,273,282,222,207,206,183,196,147,132,121,489\nPreston,E07000123,female,873,849,914,842,923,897,897,913,914,953,888,948,864,840,882,841,809,834,1007,1337,1319,1336,1177,1226,1185,1083,1034,1067,1109,1115,1134,1112,1064,1164,1050,1074,1008,1029,960,952,1001,971,902,779,897,835,861,801,936,938,950,905,1000,936,884,894,888,927,957,912,840,798,736,721,747,689,629,634,592,579,588,557,551,631,586,445,449,457,421,344,341,371,361,327,268,274,232,217,196,205,717\nRibble Valley,E07000124,female,218,277,237,257,267,271,269,316,317,315,318,375,347,380,382,377,331,354,306,196,210,250,267,279,294,265,287,282,301,314,310,340,346,343,328,326,308,316,342,365,356,375,333,341,369,364,354,406,444,500,483,532,477,514,516,475,576,565,455,523,482,460,433,472,441,411,404,359,370,354,387,403,420,438,447,345,355,341,278,272,255,259,226,211,204,177,164,135,152,109,448\nRossendale,E07000125,female,338,324,361,376,407,425,425,421,422,444,442,460,438,451,443,419,443,371,334,256,261,316,352,364,324,369,371,465,443,486,499,489,468,514,459,472,450,434,472,482,482,475,422,442,440,454,481,476,506,520,568,547,581,543,573,500,539,502,563,500,490,419,478,406,440,380,424,424,417,360,390,393,387,464,405,269,327,304,260,226,187,202,164,167,151,142,135,122,104,91,367\nSouth Ribble,E07000126,female,486,510,542,570,590,627,586,584,665,608,607,623,649,658,595,613,632,613,501,448,433,467,494,587,554,562,585,647,696,686,722,707,730,761,718,701,706,669,704,669,695,747,645,590,664,705,700,749,764,854,817,798,889,881,849,849,882,868,881,829,752,746,713,710,667,659,650,665,645,642,653,680,692,749,773,518,570,535,495,428,385,418,382,355,291,282,276,244,170,182,656\nWest Lancashire,E07000127,female,457,521,518,530,501,576,553,578,657,629,603,642,622,657,621,615,655,653,1206,1814,1316,1048,748,658,598,584,541,572,607,619,680,616,660,668,645,661,685,685,644,598,647,676,627,621,615,614,656,721,824,830,895,875,876,823,866,932,889,913,906,878,819,770,791,780,765,739,670,729,653,668,674,691,722,816,805,592,604,578,566,517,412,412,435,371,387,292,291,236,205,168,720\nWyre,E07000128,female,451,471,476,479,502,520,516,529,568,525,569,561,587,565,620,594,616,606,432,415,384,433,480,459,481,533,551,568,603,608,602,584,599,619,588,602,639,582,618,551,634,575,552,558,517,559,600,647,717,759,824,789,815,823,880,909,926,881,886,889,925,877,829,862,847,788,751,792,778,782,796,806,939,901,1005,691,693,674,677,591,509,603,521,465,444,415,335,299,223,269,1004\nBolton,E08000001,female,1751,1838,1785,1854,1859,1914,1936,1984,2074,2068,2068,2112,1995,1964,1935,1877,1881,1859,1579,1486,1399,1570,1674,1671,1802,1721,1826,1797,1920,2021,2205,2121,2047,2253,2137,2190,2028,2070,2033,1993,2056,1989,1771,1787,1650,1753,1809,1815,1950,2008,2031,1954,1931,2093,2008,2019,2063,1919,1843,1857,1697,1656,1624,1553,1599,1378,1485,1421,1392,1340,1338,1476,1386,1644,1593,1128,1184,1072,1046,944,834,833,789,725,626,571,521,413,413,370,1398\nBury,E08000002,female,1044,973,1129,1101,1135,1179,1151,1195,1257,1273,1314,1265,1239,1252,1228,1140,1180,1145,1006,823,760,865,989,1011,1077,1045,1119,1178,1278,1322,1380,1379,1385,1478,1442,1401,1392,1369,1378,1382,1294,1272,1273,1152,1178,1171,1252,1199,1318,1352,1365,1381,1358,1357,1412,1369,1401,1372,1325,1308,1251,1185,1124,1057,1010,975,945,1027,995,952,909,957,1084,1116,1131,787,878,841,687,615,602,592,539,520,458,474,373,345,297,248,1006\nManchester,E08000003,female,3375,3414,3415,3409,3502,3484,3556,3597,3564,3693,3621,3557,3499,3589,3472,3320,3227,3179,4737,7035,7177,6811,6261,5910,5760,5359,5305,5349,5339,5127,5039,4959,4882,4680,4596,4565,4371,4191,4166,4008,3980,3784,3696,3264,3195,3065,3081,3012,3011,2994,3050,2927,3039,2854,2916,2814,2825,2628,2535,2470,2325,2330,2010,2044,2034,1827,1676,1567,1567,1500,1473,1436,1318,1409,1347,1089,1098,1046,932,876,903,813,742,750,655,627,473,442,432,405,1496\nOldham,E08000004,female,1349,1583,1639,1603,1637,1582,1803,1675,1852,1742,1780,1851,1739,1842,1737,1671,1749,1711,1403,1317,1396,1324,1455,1396,1496,1534,1512,1658,1543,1553,1802,1815,1801,1797,1820,1777,1698,1709,1735,1592,1726,1717,1597,1399,1370,1397,1457,1417,1585,1549,1727,1601,1523,1533,1500,1575,1666,1497,1421,1513,1383,1435,1179,1191,1169,1196,1114,1076,1071,1095,999,1090,1077,1257,1147,896,910,892,756,702,627,631,630,574,522,443,374,365,270,279,976\nRochdale,E08000005,female,1381,1432,1419,1382,1457,1503,1434,1521,1507,1550,1508,1547,1587,1530,1432,1452,1427,1375,1202,1002,1019,1141,1269,1325,1387,1330,1439,1462,1518,1579,1718,1709,1630,1745,1664,1695,1623,1577,1658,1542,1611,1644,1388,1357,1349,1345,1366,1332,1404,1534,1547,1430,1517,1482,1565,1507,1438,1396,1436,1421,1380,1300,1278,1268,1193,1169,1108,1080,1076,1013,1047,1068,1082,1117,1095,809,825,757,718,659,600,537,520,474,453,435,382,337,282,243,1001\nSalford,E08000006,female,1686,1716,1695,1668,1543,1729,1637,1594,1630,1596,1704,1507,1572,1535,1450,1510,1371,1332,1465,2008,2053,2053,2392,2453,2592,2694,2607,2664,2704,2614,2566,2450,2431,2336,2112,2083,2101,2016,1850,1794,1842,1725,1569,1494,1363,1446,1392,1507,1515,1531,1563,1480,1553,1539,1566,1499,1440,1574,1405,1377,1286,1298,1274,1246,1156,1012,943,1036,934,937,978,990,996,1141,1050,765,777,738,759,633,642,611,564,497,486,446,387,320,272,270,1049\nStockport,E08000007,female,1619,1552,1620,1598,1728,1788,1754,1807,1805,1770,1777,1758,1766,1707,1628,1529,1591,1529,1261,1016,998,1173,1433,1411,1585,1539,1610,1773,1837,2048,2124,2123,2080,2187,2046,2172,2176,2141,2120,2027,2144,2115,1967,1934,1792,1823,1871,1878,1990,2182,2002,1963,2214,2073,2171,2154,2156,2022,2037,2080,1934,1912,1797,1803,1644,1649,1564,1597,1554,1480,1527,1550,1548,1785,1833,1312,1431,1259,1238,1055,1024,1028,987,951,909,754,689,618,575,530,2064\nTameside,E08000008,female,1191,1278,1336,1380,1307,1401,1369,1482,1488,1494,1544,1527,1439,1386,1402,1312,1300,1283,1121,985,1033,1089,1190,1310,1414,1414,1522,1609,1637,1679,1862,1697,1748,1856,1673,1780,1702,1522,1609,1507,1629,1500,1398,1349,1426,1381,1410,1464,1501,1680,1615,1530,1699,1649,1731,1629,1728,1589,1634,1586,1577,1339,1396,1358,1235,1213,1098,1165,1118,1113,1171,1094,1172,1268,1301,884,960,895,823,757,651,639,641,617,495,460,409,351,301,274,1015\nTrafford,E08000009,female,1145,1267,1364,1343,1555,1502,1470,1546,1565,1628,1736,1574,1627,1577,1529,1435,1485,1403,1214,869,810,944,1035,1170,1192,1206,1168,1220,1314,1376,1548,1521,1605,1630,1669,1795,1779,1910,1747,1898,1944,1888,1868,1691,1679,1634,1629,1650,1660,1795,1753,1720,1639,1654,1621,1691,1700,1657,1588,1463,1446,1365,1325,1301,1150,1157,1146,1100,1077,1059,1074,1124,1122,1148,1181,892,1046,908,871,676,759,777,692,640,645,567,517,436,411,346,1391\nWigan,E08000010,female,1640,1682,1665,1863,1804,1782,1777,1936,1854,2019,1943,1895,1992,1844,1838,1861,1876,1751,1543,1355,1367,1551,1720,1747,1993,1970,2056,2150,2298,2357,2334,2315,2378,2306,2307,2223,2239,2241,2080,2157,2180,2045,1987,1869,1833,1890,1983,2059,2274,2424,2539,2493,2544,2474,2450,2391,2380,2314,2277,2199,2140,2036,2037,1901,1892,1716,1745,1809,1737,1665,1714,1832,1855,2126,2027,1500,1577,1419,1419,1152,1015,1022,928,901,767,675,640,503,417,415,1432\nKnowsley,E08000011,female,886,960,966,992,965,900,894,888,956,920,865,905,919,891,848,893,915,820,828,676,713,785,854,941,1137,1004,1116,1119,1141,1281,1294,1261,1208,1277,1281,1187,1101,1081,1044,1028,967,1010,931,835,809,842,880,890,920,1080,1130,1089,1155,1126,1209,1193,1324,1218,1218,1244,1170,1083,1033,1090,1041,912,881,851,857,770,760,732,694,725,702,579,507,493,441,436,388,455,417,402,385,360,297,254,247,211,683\nLiverpool,E08000012,female,2546,2545,2632,2575,2595,2581,2654,2575,2652,2584,2529,2443,2495,2470,2436,2258,2337,2400,3948,6514,6555,5929,4969,4062,4116,3867,3848,3948,3737,3896,3818,3847,3651,3767,3685,3728,3490,3183,3300,3147,3195,2994,2762,2602,2447,2541,2548,2620,2752,2817,3033,3035,2896,2829,3052,3184,3331,3108,3300,3230,3022,2972,2811,2808,2616,2502,2366,2363,2249,2071,2123,2131,2089,2062,2100,1508,1608,1464,1435,1217,1209,1202,1172,1113,1047,924,833,678,600,510,2065\nSt. Helens,E08000013,female,916,889,931,958,996,970,971,988,1039,1041,1046,1070,1028,1030,1050,996,1001,997,825,751,829,855,948,965,1038,1150,1085,1229,1313,1261,1261,1253,1336,1294,1194,1230,1202,1199,1203,1156,1176,1110,1098,1013,980,1028,1128,1119,1243,1413,1389,1329,1428,1342,1302,1384,1396,1374,1302,1262,1265,1178,1130,1079,1090,1086,1006,1081,950,1026,1044,1014,1104,1167,1173,859,879,811,783,672,621,640,628,558,479,460,386,365,304,255,935\nSefton,E08000014,female,1202,1290,1347,1344,1428,1460,1464,1519,1414,1480,1476,1481,1527,1442,1472,1437,1435,1576,1276,1093,1077,1165,1410,1416,1495,1422,1518,1525,1572,1696,1830,1855,1762,1726,1714,1841,1721,1683,1659,1728,1727,1689,1617,1438,1465,1570,1565,1757,1813,1917,1965,1981,2145,2088,2078,2139,2262,2336,2201,2273,2258,2008,2047,2018,1917,1800,1787,1838,1619,1679,1689,1574,1691,1832,1838,1495,1421,1364,1393,1179,1155,1149,1125,1105,1017,903,808,758,661,595,2269\nWirral,E08000015,female,1458,1625,1577,1583,1609,1782,1755,1725,1884,1915,1921,1857,1895,1990,1778,1793,1911,1760,1504,1227,1232,1348,1562,1630,1666,1683,1868,1872,1857,1907,2033,2046,2050,2177,2058,2107,2028,2049,1946,1933,1969,1999,1992,1741,1812,1931,1921,1991,2138,2275,2352,2302,2341,2472,2329,2430,2540,2583,2486,2415,2215,2280,2175,2177,2116,2000,1987,1998,1893,1989,1917,1903,1909,2117,2097,1495,1609,1485,1417,1204,1267,1264,1140,994,924,908,787,695,630,582,2328\n\"Kingston upon Hull, City of\",E06000010,female,1496,1633,1529,1570,1560,1668,1585,1691,1814,1739,1682,1676,1621,1703,1477,1566,1369,1458,1460,1611,1844,2018,1827,1951,2006,2010,2015,2000,2124,2162,2240,2121,2057,2116,2085,2015,1960,1900,1735,1688,1668,1694,1529,1378,1438,1423,1619,1683,1588,1654,1688,1638,1764,1685,1643,1671,1713,1785,1678,1705,1626,1509,1469,1435,1441,1283,1209,1225,1253,1154,1054,1214,1064,1259,1218,842,796,743,820,613,642,630,571,546,576,477,453,394,376,297,1174\nEast Riding of Yorkshire,E06000011,female,1264,1327,1398,1450,1480,1592,1643,1612,1732,1776,1752,1783,1877,1821,1700,1810,1813,1794,1510,1148,1175,1293,1433,1486,1553,1606,1597,1629,1694,1881,1825,1773,1777,1947,1840,1825,1931,1769,1799,1869,1916,1871,1937,1725,1803,1997,2082,2113,2417,2530,2502,2610,2629,2766,2665,2762,2755,2844,2757,2685,2602,2488,2496,2581,2427,2406,2420,2364,2329,2279,2374,2462,2525,2916,2875,2056,2089,1943,1848,1560,1482,1492,1398,1336,1257,1089,927,860,741,654,2740\nNorth East Lincolnshire,E06000012,female,755,783,877,853,876,909,950,911,980,953,946,984,941,892,840,891,899,884,716,679,676,708,774,865,903,858,937,980,1012,1005,1056,1078,1089,1070,1040,1036,995,985,954,973,969,911,803,826,816,829,877,910,935,1203,1061,1089,1195,1144,1169,1241,1182,1203,1256,1167,1109,1066,1084,1016,925,949,876,860,889,860,848,861,884,952,1012,754,744,691,612,519,550,582,538,500,508,414,390,322,326,236,980\nNorth Lincolnshire,E06000013,female,789,821,864,826,912,927,897,947,1013,1005,1046,967,986,989,949,971,933,950,763,655,681,739,776,807,893,876,957,970,999,1022,1040,1083,1120,1109,1077,1091,1045,1074,1028,956,1051,983,938,869,860,1002,969,1065,1081,1190,1174,1273,1336,1241,1292,1312,1302,1317,1289,1250,1218,1161,1142,1127,1060,1081,1050,1046,987,971,1030,1053,1012,1054,1079,812,909,770,726,645,613,619,554,489,485,425,426,328,354,296,1101\nYork,E06000014,female,824,810,831,845,892,927,948,953,970,1026,991,1045,966,1014,1025,981,959,941,1983,3234,3111,2718,1962,1691,1430,1347,1368,1305,1274,1343,1338,1286,1349,1279,1341,1282,1294,1240,1231,1320,1325,1259,1223,1125,1106,1127,1180,1196,1232,1321,1443,1359,1368,1350,1283,1309,1354,1390,1264,1274,1237,1217,1101,1122,1064,1032,1058,983,1058,971,1034,1025,1059,1250,1215,894,915,809,801,667,611,663,656,604,579,517,484,426,339,338,1404\nCraven,E07000163,female,179,235,258,295,223,250,237,268,279,311,285,297,290,288,286,289,253,246,245,173,169,202,254,243,248,223,265,250,294,270,262,289,298,305,242,285,265,286,297,316,332,313,287,290,293,287,368,365,368,452,430,484,423,478,501,522,501,463,499,491,483,462,453,451,463,408,433,423,417,384,414,458,403,474,440,368,371,351,304,254,252,271,235,206,191,209,165,172,138,131,526\nHambleton,E07000164,female,333,360,370,377,406,420,420,409,442,489,425,435,456,453,463,463,466,461,371,277,283,304,370,440,406,405,418,400,468,440,490,483,500,450,471,483,472,433,456,479,484,480,485,450,494,469,495,535,589,684,640,710,749,755,728,799,871,811,789,801,790,704,729,690,638,675,635,680,622,614,642,651,681,723,750,512,615,512,450,427,416,444,386,380,353,336,290,237,185,194,721\nHarrogate,E07000165,female,605,662,722,730,826,757,778,888,860,866,897,965,984,976,988,925,1002,1000,774,474,423,514,607,729,731,733,767,765,794,820,906,899,840,899,892,977,901,996,916,958,1051,1065,1008,957,947,1013,1012,1154,1159,1215,1325,1267,1357,1283,1379,1399,1403,1275,1351,1249,1166,1210,1179,1090,1053,1021,990,996,899,983,1040,986,1070,1128,1130,822,934,755,774,693,650,665,601,598,553,473,444,410,368,311,1398\nRichmondshire,E07000166,female,210,213,221,235,238,226,228,228,262,257,245,249,246,260,240,236,228,249,246,147,161,165,200,216,236,250,248,258,259,258,256,267,315,292,268,267,253,244,315,276,290,247,279,247,239,267,263,321,278,321,364,379,420,394,358,375,399,419,397,392,392,376,399,361,345,317,310,326,296,296,325,320,343,389,338,282,235,254,208,188,180,186,175,169,156,139,134,105,76,63,314\nRyedale,E07000167,female,200,251,239,237,240,245,236,237,259,290,249,289,283,253,279,305,318,278,237,178,159,172,218,252,260,244,271,248,266,261,289,297,278,288,295,289,281,297,267,274,323,264,275,271,258,281,289,333,372,421,412,444,432,427,449,471,474,467,457,483,431,440,393,419,435,471,394,401,373,398,370,429,387,437,435,325,376,307,272,239,235,279,268,212,204,162,170,154,117,124,457\nScarborough,E07000168,female,424,459,456,462,499,475,492,467,558,568,525,560,558,554,526,546,549,554,495,366,414,425,460,533,491,520,489,528,556,654,618,661,600,647,558,590,592,558,547,552,577,542,551,504,535,542,632,617,653,766,746,739,780,842,821,895,891,908,922,952,872,882,885,812,846,808,808,785,790,835,823,813,844,882,938,678,715,627,578,517,519,435,462,456,404,338,327,291,258,202,964\nSelby,E07000169,female,473,436,481,501,476,521,517,473,500,527,513,535,568,525,523,480,518,498,433,325,297,335,408,472,480,463,553,559,587,635,649,626,595,644,615,582,581,537,620,583,591,604,541,520,529,558,577,636,654,703,711,717,719,721,733,718,728,754,745,698,685,636,638,565,571,498,547,556,507,521,552,516,546,589,549,389,442,400,367,306,279,275,280,224,256,208,185,172,148,130,469\nBarnsley,E08000016,female,1229,1297,1311,1339,1377,1370,1395,1333,1525,1445,1409,1379,1425,1362,1366,1268,1306,1258,1101,1034,979,1125,1266,1431,1450,1587,1551,1693,1676,1772,1826,1727,1630,1760,1677,1597,1676,1631,1496,1483,1503,1548,1447,1286,1274,1375,1437,1493,1658,1803,1962,1802,1862,1867,1911,1858,1873,1846,1835,1693,1635,1591,1562,1583,1554,1417,1325,1468,1269,1315,1264,1279,1338,1392,1414,1100,1231,1014,906,776,802,746,683,688,607,560,458,457,404,324,1234\nDoncaster,E08000017,female,1504,1675,1616,1664,1610,1709,1681,1796,1811,1860,1882,1806,1845,1824,1776,1772,1677,1635,1475,1312,1228,1405,1749,1675,1837,1861,2046,2056,2038,2057,2231,2143,2285,2162,2239,2086,2045,1916,1960,1945,1898,1972,1670,1648,1671,1655,1720,1873,1990,2042,2230,2111,2243,2277,2256,2271,2284,2259,2129,2134,2082,2042,1995,1929,1893,1722,1669,1814,1559,1596,1693,1642,1643,1849,1715,1301,1402,1200,1120,999,961,959,927,892,808,765,631,588,527,474,1653\nRotherham,E08000018,female,1302,1368,1445,1460,1503,1585,1487,1638,1609,1657,1622,1662,1596,1594,1546,1552,1551,1437,1392,1109,1182,1348,1467,1482,1554,1521,1591,1717,1756,1842,1915,1892,1901,1822,1846,1783,1760,1729,1666,1713,1806,1663,1615,1386,1400,1531,1601,1726,1763,1887,1997,1940,1958,1943,1955,1896,1919,1869,1830,1775,1817,1669,1667,1694,1573,1486,1446,1436,1499,1276,1420,1426,1439,1574,1554,1231,1349,1086,1045,917,836,917,838,768,647,656,533,526,409,392,1359\nSheffield,E08000019,female,2886,2903,3019,3013,3117,3096,3019,3093,3106,3215,3198,3084,3155,3161,3003,2850,2941,3005,3889,5642,5507,5568,5058,4713,4411,4118,4167,4012,4113,4031,4097,3880,4056,3993,3818,3670,3741,3626,3404,3513,3416,3453,3205,3012,2952,2947,3115,3146,3438,3602,3846,3589,3652,3693,3547,3620,3485,3339,3449,3418,3151,3065,2975,2939,2713,2636,2511,2520,2488,2470,2373,2381,2549,2772,2735,2208,2438,2081,1876,1713,1637,1672,1635,1500,1330,1262,1084,1017,886,783,3117\nBradford,E08000032,female,3243,3661,3685,3550,3795,3849,3928,3908,3915,3979,3999,3979,4076,3980,4109,3882,3930,3917,3608,3087,3134,3342,3438,3336,3496,3241,3524,3574,3687,3779,3768,3910,4099,4264,4113,4042,3984,4008,3877,4053,3936,3854,3598,3399,3393,3292,3235,3471,3434,3537,3606,3454,3418,3290,3381,3250,3298,3352,3275,3115,3189,2930,2910,2871,2667,2565,2498,2412,2375,2275,2246,2274,2262,2552,2342,1674,1775,1619,1455,1356,1281,1368,1239,1311,1185,1085,960,920,772,642,2620\nCalderdale,E08000033,female,995,1037,1122,1142,1196,1177,1211,1170,1370,1302,1304,1294,1361,1304,1291,1278,1251,1204,1008,847,782,912,989,1153,1119,1203,1123,1233,1360,1290,1369,1381,1337,1423,1428,1323,1456,1372,1329,1388,1327,1387,1312,1119,1268,1302,1325,1427,1444,1527,1698,1643,1572,1626,1609,1539,1532,1599,1498,1465,1409,1326,1293,1307,1260,1224,1128,1109,1042,1045,1132,1155,1090,1236,1178,861,954,827,750,668,593,612,600,531,488,457,384,353,358,275,1204\nKirklees,E08000034,female,2354,2413,2455,2530,2597,2607,2643,2640,2694,2918,2777,2794,2780,2758,2771,2654,2742,2654,2540,2467,2510,2547,2654,2562,2695,2637,2540,2748,2764,2896,3018,2874,3051,3030,3048,2980,2919,2870,2912,2963,3033,2880,2873,2525,2591,2609,2728,2794,2936,3180,3168,3115,3185,3082,2937,2994,2968,2884,2866,2717,2529,2576,2530,2396,2349,2209,2115,2138,2103,2127,2086,2101,2221,2393,2378,1682,1762,1648,1542,1331,1194,1198,1200,1118,1041,830,803,735,580,562,2326\nLeeds,E08000035,female,4252,4505,4674,4672,4751,4859,4738,4709,4853,4948,4967,4901,4708,4493,4412,4339,4222,4089,5583,7823,8047,8270,7508,6723,6422,6049,6212,6228,6210,6292,6505,6061,6183,6219,6298,5972,5952,5621,5690,5683,5869,5527,5069,4893,4823,4931,4703,4652,4972,5181,5253,5095,5266,5058,5042,4976,5068,4951,4821,4676,4369,4118,4217,4124,3958,3539,3447,3541,3359,3347,3439,3463,3504,3946,3829,2751,2944,2598,2607,2058,2002,2238,1928,1968,1898,1686,1524,1257,1169,1021,4258\nWakefield,E08000036,female,1838,1900,1967,1971,2042,1958,2035,2030,2089,2087,2077,2048,2030,2049,1955,1879,1907,1875,1593,1397,1380,1671,1850,1950,2164,2260,2288,2416,2533,2657,2663,2562,2553,2666,2577,2517,2463,2398,2279,2322,2322,2308,2079,1863,1860,2120,2109,2161,2450,2603,2644,2609,2614,2703,2686,2598,2588,2521,2518,2361,2324,2155,2260,2165,2004,1955,1925,1939,1848,1794,1734,1956,1882,2056,2016,1526,1639,1397,1371,1097,1086,1097,1046,951,851,759,692,659,563,444,1725\nDerby,E06000015,female,1384,1469,1626,1481,1520,1588,1635,1672,1661,1807,1617,1704,1626,1734,1515,1508,1632,1415,1537,1671,1794,1891,1797,1823,1755,1761,1752,1868,1807,1875,2020,1870,1833,1814,1773,1870,1965,1849,1915,1738,1887,1803,1658,1547,1488,1548,1590,1569,1669,1760,1768,1712,1753,1673,1659,1711,1685,1642,1639,1506,1432,1354,1375,1322,1248,1178,1155,1197,1099,1095,1114,1100,1114,1341,1147,878,1034,925,827,714,766,768,714,675,599,582,538,477,423,339,1489\nLeicester,E06000016,female,1928,2150,2067,2259,2308,2353,2348,2390,2457,2537,2621,2425,2598,2478,2329,2275,2415,2245,3164,4184,4358,4132,3585,3159,3030,2753,2816,2758,2719,2745,2813,2823,2824,2905,2880,2850,2908,2866,2835,2578,2666,2633,2518,2278,2223,2327,2375,2150,2260,2248,2313,2246,2226,2119,2068,1962,1988,1934,2011,1919,1897,1786,1706,1611,1616,1505,1438,1472,1336,1322,1259,1241,1128,1176,1005,873,852,792,802,671,653,675,659,641,601,501,446,419,359,302,1390\nRutland,E06000017,female,141,120,176,186,197,174,188,188,190,170,193,229,199,256,291,279,303,302,220,132,102,142,157,151,160,173,153,175,182,175,204,189,187,188,213,200,219,182,212,228,232,243,210,223,204,210,237,249,263,274,298,324,287,335,297,290,309,300,277,292,269,282,312,277,231,277,252,255,257,252,274,289,292,308,298,217,270,221,251,155,192,172,159,154,125,136,127,100,78,78,339\nNottingham,E06000018,female,1435,1809,1747,1721,1930,1904,1759,1848,2005,1933,1862,1815,1861,1794,1768,1664,1678,1552,3725,7170,7331,5828,3883,2932,2486,2403,2471,2547,2508,2660,2561,2586,2472,2499,2515,2324,2198,2143,2104,2006,2061,1960,1875,1687,1658,1732,1707,1714,1734,1776,1875,1754,1842,1797,1802,1768,1774,1666,1686,1656,1504,1436,1448,1405,1248,1178,1169,1212,1069,953,990,966,989,1065,971,779,793,803,690,643,625,603,623,572,527,497,419,382,361,326,1420\nNorth Northamptonshire,E06000061,female,1784,1954,1986,2017,2071,2148,2015,2206,2330,2324,2317,2163,2279,2275,2285,2164,2131,2077,1637,1424,1490,1626,1780,1951,2009,2001,2229,2296,2443,2511,2471,2552,2669,2592,2476,2564,2543,2409,2529,2458,2510,2475,2374,2143,2319,2211,2373,2423,2536,2616,2586,2638,2711,2698,2604,2591,2624,2499,2413,2372,2206,2122,2058,2081,1843,1906,1845,1875,1898,1861,1755,1891,1967,2070,2007,1518,1534,1431,1303,1111,971,955,936,870,779,696,595,575,500,456,1932\nWest Northamptonshire,E06000062,female,2175,2343,2388,2424,2461,2595,2563,2559,2618,2607,2622,2608,2716,2631,2533,2540,2309,2421,2353,2269,2353,2276,2256,2441,2469,2543,2607,2775,2800,2885,3043,3111,3204,3152,3177,3028,3042,2993,3029,2992,3123,3030,2846,2646,2551,2735,2830,2814,2916,3192,3119,2868,3086,3050,3052,2922,3027,2879,2866,2774,2631,2426,2426,2287,2187,2069,2062,1992,2059,2035,1971,2063,2053,2324,2263,1613,1733,1600,1382,1129,1071,1071,1082,990,889,767,707,675,569,512,2184\nAmber Valley,E07000032,female,544,585,602,611,621,626,640,641,693,697,729,707,698,679,696,623,583,607,581,447,460,572,632,667,703,685,734,714,758,788,786,761,746,761,756,743,780,734,740,733,754,809,683,719,723,767,769,812,923,978,941,1007,1040,982,1033,1029,1028,1022,1016,881,911,858,883,798,815,743,748,825,789,701,778,824,836,926,850,635,684,692,565,490,420,436,430,395,361,313,256,283,223,176,816\nBolsover,E07000033,female,405,381,416,346,403,447,420,451,462,491,453,415,429,442,416,487,402,392,346,307,309,409,400,466,500,504,576,511,557,560,574,554,548,534,526,538,526,479,482,469,474,455,422,387,450,474,445,545,602,598,644,596,695,639,625,636,632,651,582,559,541,541,513,516,522,447,446,482,443,413,447,449,428,474,487,382,412,388,334,269,265,194,267,215,205,179,171,145,121,99,454\nChesterfield,E07000034,female,479,482,511,514,553,500,523,570,570,607,585,540,604,585,552,498,523,507,450,353,445,462,515,582,590,593,648,687,658,715,670,653,671,647,692,624,608,609,596,629,643,630,638,581,540,626,634,647,732,768,789,768,756,767,768,853,841,808,778,718,756,721,677,682,653,652,631,607,603,590,587,661,610,651,702,512,542,477,467,368,328,351,358,328,293,257,249,226,188,164,706\nDerbyshire Dales,E07000035,female,236,259,258,236,316,333,312,307,318,395,363,373,363,407,369,380,384,367,312,239,191,232,270,290,289,255,284,299,306,307,301,322,315,306,339,320,328,327,323,350,376,377,407,354,378,401,397,469,559,567,605,568,604,617,656,638,679,649,653,624,602,577,565,548,524,532,536,503,539,508,561,488,578,624,609,445,475,465,393,353,320,307,325,286,256,231,225,195,165,158,651\nErewash,E07000036,female,520,514,558,569,545,583,596,579,628,642,644,600,610,619,537,573,620,556,521,449,492,519,566,647,649,689,726,696,717,746,770,776,835,772,758,764,703,657,715,738,751,682,703,599,592,664,711,757,773,861,894,875,885,916,897,914,858,878,823,843,762,720,695,691,661,607,632,602,640,650,590,601,651,742,721,559,569,561,492,413,365,393,365,373,308,286,237,221,220,198,663\nHigh Peak,E07000037,female,404,404,412,463,469,459,457,449,479,531,488,501,500,505,511,484,477,474,389,335,317,405,439,421,427,430,478,464,494,591,539,556,536,528,580,535,577,549,525,551,602,537,563,518,479,528,577,575,680,643,723,724,723,767,764,788,803,803,737,689,742,697,682,646,596,555,534,572,518,593,499,523,581,617,596,464,451,455,391,366,328,293,296,239,261,213,212,177,149,128,523\nNorth East Derbyshire,E07000038,female,456,458,462,489,528,516,536,559,493,579,532,577,508,544,523,529,504,508,423,416,378,389,474,504,541,511,569,569,577,597,617,528,565,641,612,586,592,587,582,533,603,631,524,548,538,584,649,580,681,733,767,786,748,805,847,818,807,812,803,730,691,758,724,720,686,667,715,699,604,669,640,709,758,745,742,651,642,603,557,427,428,419,392,381,335,289,274,206,207,180,664\nSouth Derbyshire,E07000039,female,539,541,612,539,609,681,596,556,662,649,671,680,626,623,638,670,613,587,486,388,398,455,514,581,619,672,662,715,765,773,813,776,688,714,722,743,747,692,723,671,743,700,712,660,684,658,660,760,751,836,877,844,864,834,822,809,776,768,798,794,687,649,685,605,575,585,613,610,556,567,514,584,547,652,604,455,491,441,363,327,290,308,296,227,243,233,214,178,155,129,522\nBlaby,E07000129,female,531,542,547,534,604,590,572,563,607,631,657,605,605,586,566,557,581,557,448,393,384,419,516,502,541,562,608,634,649,663,677,704,721,786,692,720,693,745,666,692,711,660,662,612,603,647,673,647,748,684,731,701,778,761,751,706,774,767,705,718,709,684,627,613,563,545,533,579,570,536,513,615,629,649,629,454,531,477,422,366,336,364,368,329,286,268,242,234,185,134,602\nCharnwood,E07000130,female,806,927,873,926,931,960,952,872,995,1005,1068,992,1005,920,911,865,875,982,1463,1940,1710,1556,1530,1205,1084,1015,1109,1104,1118,1194,1228,1190,1159,1261,1209,1213,1206,1191,1163,1147,1211,1183,1086,997,917,1060,1043,1110,1160,1235,1273,1246,1218,1278,1217,1180,1230,1180,1211,1150,1117,1089,1107,1075,910,903,939,989,965,988,929,890,986,1042,965,765,875,839,675,550,542,539,506,479,437,404,370,358,306,279,1066\nHarborough,E07000131,female,423,431,483,454,481,519,493,541,508,555,550,568,533,583,600,553,547,625,460,348,335,378,409,450,491,480,500,477,531,490,596,541,533,570,569,597,549,573,588,625,574,663,608,565,584,611,666,725,721,732,779,752,828,742,795,813,829,778,731,689,665,636,636,620,594,615,569,561,549,523,546,629,587,635,656,460,547,488,431,316,327,348,340,302,327,262,222,192,158,170,637\nHinckley and Bosworth,E07000132,female,513,537,525,566,588,601,629,605,627,635,674,611,593,615,619,609,577,590,510,415,405,431,542,513,554,627,639,680,685,744,760,756,703,740,723,709,747,689,720,741,739,705,730,629,624,703,723,720,801,827,893,858,872,822,825,914,795,765,842,841,773,762,736,751,672,691,593,723,728,666,680,770,756,752,720,587,651,558,519,450,404,368,413,358,295,290,233,213,193,171,760\nMelton,E07000133,female,214,221,232,247,255,244,285,254,298,298,330,296,287,267,295,304,269,254,245,196,159,194,241,244,275,236,312,238,287,284,303,319,277,294,266,280,268,292,305,300,315,318,300,330,279,303,335,320,372,359,410,420,441,389,489,474,415,436,448,390,409,359,363,378,363,328,326,326,331,319,366,333,341,387,322,283,287,262,263,198,166,183,171,146,143,149,141,101,107,98,341\nNorth West Leicestershire,E07000134,female,498,484,556,537,545,563,575,586,600,587,606,606,570,596,559,542,561,594,453,483,544,610,650,621,595,537,599,650,651,699,746,666,687,702,678,646,642,680,712,658,724,651,631,600,614,627,662,734,774,847,847,774,788,797,840,789,766,771,737,756,702,637,647,632,604,550,540,590,571,562,563,626,594,663,659,517,519,480,413,323,308,327,286,252,264,222,210,178,147,131,549\nOadby and Wigston,E07000135,female,232,270,260,289,314,356,324,343,349,339,333,370,361,334,337,346,326,308,514,575,274,238,299,295,318,283,316,313,330,307,363,371,361,391,370,370,412,357,356,360,426,385,362,321,332,347,349,369,330,362,402,379,414,397,371,431,402,431,410,404,382,362,378,331,316,295,307,306,318,299,310,317,338,337,342,250,290,295,250,215,188,207,235,225,197,190,180,157,144,119,494\nBoston,E07000136,female,294,350,309,404,366,380,398,404,414,439,407,425,457,405,392,434,402,354,342,315,313,320,375,358,387,412,389,419,457,469,478,460,473,529,494,506,483,481,443,442,454,442,436,410,408,480,473,440,465,494,533,503,486,504,515,508,520,496,483,496,482,416,417,461,411,428,374,405,368,382,382,405,376,388,419,329,338,324,278,222,223,274,240,202,165,192,150,131,122,117,463\nEast Lindsey,E07000137,female,493,509,551,577,585,598,630,618,681,679,729,757,704,705,715,731,674,671,552,434,462,535,624,618,596,611,622,643,665,683,690,688,749,715,674,717,636,652,627,639,716,673,659,636,630,650,740,792,922,982,1042,1003,1128,1041,1135,1198,1184,1220,1236,1235,1183,1152,1210,1169,1192,1214,1104,1129,1153,1114,1149,1285,1223,1288,1335,1016,1064,980,820,760,687,672,643,556,518,432,398,320,337,292,1118\nLincoln,E07000138,female,509,458,499,513,479,564,511,528,553,471,514,523,516,461,481,456,480,462,1116,2173,2299,1930,1172,896,769,753,815,789,772,756,796,748,703,787,705,663,670,633,601,607,631,655,591,538,487,525,495,533,573,576,588,558,611,607,586,628,586,575,675,597,573,465,532,477,443,423,431,423,409,434,396,415,388,427,417,321,369,342,269,228,230,242,217,272,196,220,159,168,129,121,526\nNorth Kesteven,E07000139,female,476,552,525,568,579,648,628,613,709,671,685,662,696,667,650,633,600,664,529,388,435,454,548,547,566,622,587,688,652,725,779,674,744,746,701,717,717,693,715,715,697,706,698,631,630,685,683,759,811,916,936,961,915,938,926,903,967,905,908,872,870,785,778,718,744,629,684,681,694,686,720,809,778,901,813,607,709,645,578,531,489,513,449,375,372,343,262,277,208,189,768\nSouth Holland,E07000140,female,407,462,449,456,457,494,510,514,523,536,480,527,494,453,525,526,468,443,391,396,347,413,472,485,500,515,527,530,546,529,589,599,588,623,525,567,560,554,584,536,558,536,555,497,558,581,604,638,636,700,684,690,718,688,730,749,750,735,701,708,665,612,619,598,621,579,565,579,588,602,561,604,637,708,680,497,566,451,476,426,386,375,356,336,303,295,243,201,204,187,732\nSouth Kesteven,E07000141,female,610,626,632,697,707,797,803,706,822,830,908,856,870,918,878,818,790,797,676,527,462,551,650,691,669,751,730,790,762,821,857,858,816,807,842,885,837,869,866,851,999,923,866,822,831,845,939,950,1053,1137,1142,1181,1092,1060,1094,1158,1171,1109,1049,1068,1087,1004,1012,980,881,859,887,921,898,903,877,881,942,1060,1023,766,821,737,655,634,516,504,488,455,411,407,346,290,242,247,1035\nWest Lindsey,E07000142,female,336,394,424,461,459,508,509,526,522,539,529,510,484,525,520,511,501,474,397,304,313,363,386,443,458,473,470,456,549,528,521,533,554,532,502,537,541,528,566,533,562,540,528,455,502,520,561,568,639,653,702,726,755,716,784,788,816,750,761,796,723,737,699,706,661,686,675,658,632,602,639,655,675,684,756,560,571,555,513,404,368,353,333,326,319,273,247,194,171,141,605\nAshfield,E07000170,female,612,641,639,669,705,705,728,762,761,746,803,757,771,721,700,657,660,652,624,577,528,570,655,673,747,781,770,875,842,886,903,962,890,896,876,848,841,798,774,797,845,816,733,740,700,721,726,820,853,1003,989,962,987,937,933,946,1000,899,921,848,845,882,736,694,686,707,658,700,685,663,656,681,705,697,730,597,615,581,568,477,412,436,400,349,325,284,223,230,188,170,679\nBassetlaw,E07000171,female,587,557,578,596,634,612,642,587,642,725,666,653,642,639,625,598,584,613,533,448,418,452,607,613,649,651,673,700,692,750,727,710,700,731,696,674,723,699,657,676,713,673,653,631,663,666,711,752,816,866,879,845,924,920,918,961,958,922,893,882,836,814,812,765,719,701,691,704,696,672,655,767,739,852,741,603,645,573,514,461,423,419,393,368,338,288,266,258,178,174,726\nBroxtowe,E07000172,female,487,472,511,519,593,597,541,568,633,616,592,592,588,551,563,505,531,513,629,669,656,595,598,603,658,671,723,747,690,734,795,760,733,789,723,694,773,765,696,642,721,667,654,578,698,628,651,669,715,734,781,737,785,812,759,824,843,821,818,786,728,737,683,691,655,588,625,631,609,615,642,702,639,794,754,557,626,510,474,438,388,419,361,350,337,285,276,232,220,201,781\nGedling,E07000173,female,590,558,569,578,622,627,675,666,709,638,648,659,648,645,628,646,598,611,473,434,384,481,521,587,650,646,714,659,754,790,826,815,815,800,813,756,801,796,796,766,789,789,741,730,701,671,731,795,804,820,885,868,961,828,927,860,929,930,862,850,822,828,722,723,682,695,694,687,657,692,628,691,728,768,768,542,633,550,523,424,392,437,409,394,369,345,303,254,210,187,761\nMansfield,E07000174,female,545,548,571,612,642,639,594,638,658,698,757,628,665,595,584,615,573,526,465,419,427,498,560,617,664,643,655,822,703,793,803,796,791,837,814,779,791,739,739,775,728,701,659,562,625,644,673,663,695,710,762,764,810,810,868,828,811,877,798,847,739,769,710,685,652,640,641,589,568,565,563,584,610,572,598,504,557,466,441,352,348,344,338,306,259,250,238,190,175,156,623\nNewark and Sherwood,E07000175,female,580,578,575,590,640,664,631,661,638,707,688,679,700,681,679,661,675,634,565,564,586,538,595,604,657,663,678,678,781,774,747,793,725,777,740,771,744,720,709,702,718,739,685,672,629,703,704,781,849,886,905,907,915,929,952,961,991,954,920,885,894,852,844,813,804,753,770,724,733,717,718,750,778,902,815,641,687,610,573,490,424,474,446,380,319,316,276,254,223,190,824\nRushcliffe,E07000176,female,497,579,558,613,583,662,602,691,657,670,702,714,742,732,725,605,647,639,634,642,671,612,623,617,591,604,628,568,606,654,709,650,688,743,736,740,797,775,754,777,809,807,808,779,796,759,765,813,808,834,865,890,903,868,876,921,899,881,813,829,790,757,726,736,612,689,650,674,678,648,632,687,696,772,740,635,639,574,517,425,409,433,382,382,332,326,306,279,265,188,997\n\"Herefordshire, County of\",E06000019,female,750,786,830,838,885,820,835,912,992,956,1044,959,960,962,932,860,962,959,866,689,652,717,774,924,832,874,930,936,1018,1068,1082,1089,1114,1112,979,1120,977,1060,1023,1038,1092,1081,942,964,918,978,1121,1098,1163,1380,1341,1356,1447,1464,1427,1581,1512,1520,1473,1451,1461,1319,1338,1464,1387,1306,1319,1311,1291,1209,1228,1312,1306,1402,1410,1064,1190,1060,909,839,775,770,767,661,662,573,583,507,398,351,1580\nTelford and Wrekin,E06000020,female,950,1005,1059,1028,1084,1091,1098,1172,1161,1248,1208,1235,1168,1163,1142,1115,1149,1061,979,1051,994,1057,1149,1088,1129,1124,1176,1236,1228,1271,1296,1299,1388,1343,1307,1225,1233,1250,1256,1124,1263,1212,1180,1019,1109,1037,1143,1212,1273,1382,1370,1401,1351,1363,1316,1368,1347,1286,1204,1171,1158,1151,1091,994,936,939,988,936,911,911,921,929,972,957,1006,733,747,713,673,589,523,522,513,447,369,381,296,288,255,212,798\nStoke-on-Trent,E06000021,female,1524,1598,1561,1499,1543,1562,1660,1706,1694,1751,1754,1623,1712,1717,1519,1460,1499,1428,1322,1481,1544,1700,1645,1650,1668,1643,1701,1771,1796,1788,2007,1973,1989,1916,1894,1836,1832,1746,1727,1678,1749,1626,1579,1379,1319,1392,1454,1552,1592,1702,1770,1666,1637,1643,1590,1711,1738,1529,1542,1619,1561,1425,1420,1373,1419,1288,1267,1301,1145,1168,1150,1184,1266,1274,1284,914,1048,872,987,735,736,709,689,638,687,520,492,441,369,339,1287\nShropshire,E06000051,female,1286,1312,1419,1472,1531,1511,1535,1536,1582,1719,1634,1674,1645,1798,1655,1656,1777,1817,1544,1269,1193,1325,1445,1454,1590,1478,1605,1644,1700,1693,1843,1827,1756,1743,1807,1741,1885,1699,1612,1740,1754,1797,1747,1579,1573,1787,1964,1987,2122,2366,2445,2314,2528,2520,2709,2724,2615,2597,2534,2488,2486,2319,2398,2341,2134,2091,2163,2187,2113,2077,2106,2205,2215,2489,2346,1945,2037,1860,1686,1445,1373,1368,1252,1259,1075,960,826,750,760,621,2738\nCannock Chase,E07000192,female,563,564,529,535,531,516,540,558,616,556,572,533,564,559,599,545,509,520,429,400,410,452,554,571,627,650,616,709,752,736,726,694,738,736,675,718,607,647,684,608,694,579,575,491,527,535,588,689,688,731,755,807,798,743,764,774,760,749,737,734,650,613,633,591,585,560,551,550,532,545,502,566,531,612,579,454,434,432,416,376,300,335,322,315,261,193,184,178,151,136,560\nEast Staffordshire,E07000193,female,639,679,629,659,722,681,686,754,744,776,752,730,774,783,751,687,720,669,603,521,536,547,611,674,770,715,768,786,817,853,856,856,891,820,839,834,798,793,787,764,804,780,761,683,686,743,759,737,803,857,897,830,934,926,928,923,905,887,889,804,804,779,775,716,677,614,626,670,621,557,608,624,587,689,726,528,561,506,496,421,369,402,360,305,323,263,248,210,212,198,702\nLichfield,E07000194,female,494,513,508,546,572,544,527,553,584,595,604,540,563,530,570,554,549,559,463,384,354,395,464,517,514,565,577,627,616,648,602,599,622,614,635,606,636,635,613,623,651,653,622,610,577,656,642,700,711,777,822,807,790,822,831,809,853,785,788,750,702,685,720,658,629,662,634,670,617,627,644,644,687,821,802,668,715,626,582,526,480,419,420,355,331,300,245,227,203,157,669\nNewcastle-under-Lyme,E07000195,female,559,552,557,568,596,610,612,629,653,672,625,553,667,652,655,634,646,614,788,1119,1032,978,857,751,707,646,673,706,708,740,769,812,761,751,775,758,745,685,756,715,737,753,671,673,673,690,728,770,759,852,873,902,908,861,946,897,869,878,900,880,852,818,803,749,737,735,714,700,695,665,734,706,738,836,737,572,659,576,525,457,465,415,432,394,402,341,311,298,242,221,808\nSouth Staffordshire,E07000196,female,440,432,524,492,500,542,541,540,544,587,539,524,590,546,576,519,542,534,440,373,378,448,512,516,545,490,529,529,571,570,615,524,543,646,597,607,605,601,584,605,619,637,544,513,536,608,634,657,697,811,827,786,843,842,910,908,891,857,895,944,870,758,792,780,798,727,686,707,725,677,693,718,769,829,767,667,735,674,637,503,507,458,448,402,373,375,303,262,238,206,783\nStafford,E07000197,female,601,662,675,677,694,711,693,703,742,711,738,752,805,807,711,711,711,669,546,507,534,571,644,648,667,686,796,804,850,834,854,858,836,910,875,807,826,843,794,805,897,857,805,776,766,778,795,883,906,973,1014,1013,1041,1027,1100,993,1091,1073,993,960,961,947,881,893,823,780,823,805,792,806,785,843,879,910,914,716,788,756,722,570,512,508,536,459,404,370,301,285,259,210,983\nStaffordshire Moorlands,E07000198,female,407,383,399,400,436,440,435,440,490,491,508,491,507,520,478,459,551,491,445,328,325,386,375,405,443,450,480,457,449,514,508,444,538,533,524,519,499,476,516,487,552,514,481,504,512,515,597,582,643,717,779,758,806,787,792,764,858,756,708,759,731,663,673,707,665,648,611,661,636,636,637,745,691,784,768,567,608,565,506,473,416,387,413,367,333,297,267,210,188,180,727\nTamworth,E07000199,female,390,419,434,413,449,463,449,433,464,457,477,476,500,460,465,395,440,435,388,349,354,372,392,478,490,444,510,521,559,564,586,556,576,561,568,534,560,518,484,505,554,489,461,446,416,476,499,540,581,593,608,588,570,523,548,577,533,532,527,497,498,516,471,483,456,464,450,484,426,429,392,480,418,440,464,352,323,361,312,224,240,230,215,186,154,161,145,121,118,102,352\nNorth Warwickshire,E07000218,female,309,294,329,354,307,343,335,366,382,379,387,377,355,338,368,339,349,298,301,244,245,286,303,307,373,323,363,374,383,432,435,436,410,405,394,402,367,396,405,371,411,392,356,357,346,399,378,424,487,449,506,469,545,521,550,561,535,493,491,453,508,456,456,422,390,383,374,385,373,384,392,382,406,441,426,326,347,324,296,231,233,225,194,192,206,174,137,120,120,114,416\nNuneaton and Bedworth,E07000219,female,713,730,797,774,747,757,795,800,799,835,835,764,816,782,802,747,779,728,607,592,567,667,693,772,833,804,850,915,964,955,1052,1038,967,1010,957,911,955,865,873,884,937,867,837,738,756,792,770,816,870,910,899,948,1003,1030,970,1019,981,873,865,887,822,786,800,777,788,715,690,701,650,713,701,754,698,767,728,616,654,581,544,417,447,402,427,358,351,282,271,256,191,199,693\nRugby,E07000220,female,586,572,622,649,679,705,686,710,685,755,700,675,733,717,707,678,696,616,521,361,407,500,516,609,646,666,695,702,760,768,817,822,852,909,792,848,839,839,869,810,812,831,757,737,716,739,707,745,811,816,806,833,793,782,769,771,790,801,737,698,707,627,540,613,579,526,536,539,487,533,508,576,556,606,595,501,555,539,432,368,333,361,331,314,298,251,224,197,192,146,666\nStratford-on-Avon,E07000221,female,565,609,559,633,687,677,630,700,710,718,711,709,727,770,731,729,746,684,537,430,385,424,525,617,615,707,673,667,669,738,751,751,793,804,711,752,734,742,783,826,811,812,766,751,810,836,917,909,927,1037,1076,1049,1086,1068,1081,1152,1132,1081,1021,1083,1033,918,973,936,921,827,830,837,838,858,852,862,961,992,1039,832,861,857,713,578,532,556,532,516,467,435,402,340,303,279,1140\nWarwick,E07000222,female,649,721,711,728,740,773,810,783,798,847,849,804,804,766,761,756,703,750,944,1266,1275,1183,890,835,891,798,873,928,910,1039,1051,991,1079,1083,1022,1012,997,1011,1012,969,945,1050,1009,859,913,877,911,961,986,1009,1030,997,982,1026,996,997,980,1008,966,970,926,805,812,735,770,736,705,748,731,771,695,752,764,783,770,656,682,637,614,488,470,483,468,410,383,399,336,275,248,226,1045\nBromsgrove,E07000234,female,445,511,502,519,602,535,553,560,554,567,594,554,586,592,559,548,594,567,452,356,288,361,455,434,472,451,490,468,494,521,575,490,570,564,556,632,590,591,601,611,687,668,633,573,604,594,644,663,732,718,759,739,798,808,769,837,772,736,721,698,692,662,650,624,579,571,633,620,578,533,578,614,578,619,629,526,590,576,456,387,377,361,374,348,303,297,286,263,227,221,860\nMalvern Hills,E07000235,female,257,271,303,326,368,344,366,404,405,430,415,412,450,401,472,449,463,480,378,282,228,295,316,354,353,357,321,339,341,388,357,416,373,388,372,375,390,422,370,380,396,441,459,404,443,434,485,483,523,563,581,553,614,698,631,677,702,678,666,607,623,627,615,601,588,575,564,547,586,547,595,631,572,636,638,497,543,526,452,384,354,356,354,322,349,250,243,242,234,173,783\nRedditch,E07000236,female,467,481,488,479,523,495,525,482,565,540,547,484,478,509,558,496,525,444,415,351,367,416,432,510,550,516,588,572,586,692,641,694,660,630,627,622,618,625,608,649,658,676,544,521,482,511,513,519,598,625,568,574,589,566,591,576,591,550,554,561,512,511,518,549,528,509,488,543,507,497,477,443,500,477,474,364,390,337,266,250,222,207,223,191,205,155,115,139,102,105,422\nWorcester,E07000237,female,482,551,562,507,512,545,495,546,638,583,576,616,562,611,578,575,532,534,634,925,914,842,729,711,777,689,723,741,719,717,796,800,702,719,731,749,705,671,681,684,709,687,637,610,617,692,622,702,651,691,744,761,760,682,747,709,743,698,706,650,610,557,594,564,501,544,483,550,522,460,529,475,468,566,518,416,430,391,362,362,283,316,268,286,260,219,184,186,191,164,555\nWychavon,E07000238,female,589,539,614,612,676,704,600,632,734,729,711,697,690,686,662,725,724,708,562,469,453,506,561,633,650,651,679,654,698,740,711,773,816,780,803,745,751,736,718,764,796,780,799,711,712,738,803,853,895,997,1036,972,1039,1093,1049,1040,1076,1015,1050,1024,976,935,908,938,865,845,867,934,855,844,851,883,910,1002,989,750,799,717,648,534,555,580,515,459,427,348,331,255,280,266,1072\nWyre Forest,E07000239,female,425,422,481,486,518,539,515,528,568,535,551,495,517,556,550,509,496,493,442,420,388,396,505,517,499,507,525,527,563,627,628,615,624,654,621,565,571,545,552,544,619,559,536,522,547,581,637,625,698,707,737,789,768,790,810,800,824,768,743,689,692,663,613,672,604,652,656,695,649,674,669,744,739,839,728,630,670,648,555,449,412,410,384,380,324,292,247,260,203,187,676\nBirmingham,E08000025,female,7259,7227,7241,7481,7806,7702,7724,8024,8099,8028,8127,8050,8296,8112,7802,7876,7828,7784,8831,10848,10794,9955,9376,8902,8791,8580,8401,8415,8311,8536,8871,8830,8758,9009,8960,8582,8475,8425,8459,8276,8282,8223,7493,7128,7018,6772,6724,6584,6763,7144,7025,7146,6938,6933,6830,6647,6416,6343,6352,6139,5797,5496,5216,4966,4833,4513,4421,4369,4314,4049,3902,3967,3847,4064,4071,3059,3274,3172,3037,2622,2547,2495,2394,2291,2268,2101,1762,1566,1530,1382,5425\nCoventry,E08000026,female,1920,1931,2060,2044,2012,2041,2170,2094,2205,2181,2173,2217,2150,2137,2062,1858,2010,2002,2769,3792,3566,3201,3024,2622,2505,2509,2392,2421,2426,2523,2536,2718,2532,2783,2586,2617,2409,2480,2337,2312,2412,2342,2195,2028,2034,2032,1960,1942,2029,2086,2066,2067,2160,2164,2130,2022,1901,1961,1902,1884,1782,1547,1623,1635,1483,1406,1414,1406,1312,1261,1280,1269,1332,1386,1379,1096,1187,1173,1066,885,928,848,814,772,700,689,589,568,458,411,1790\nDudley,E08000027,female,1674,1737,1758,1786,1848,1894,1857,1999,1978,1962,1961,1892,1850,1893,1807,1814,1855,1851,1651,1419,1424,1539,1741,1851,1945,1968,1964,2088,2196,2243,2230,2187,2141,2265,2141,2093,2147,2043,2106,2040,1986,2068,1950,1751,1880,1764,1888,1960,2137,2350,2445,2261,2291,2286,2378,2190,2496,2219,2194,2060,1958,1892,1843,1822,1848,1815,1630,1717,1714,1688,1697,1786,1732,1838,1785,1456,1583,1648,1431,1296,1138,1123,1115,1035,955,881,807,686,617,530,2016\nSandwell,E08000028,female,2020,2098,2238,2134,2254,2374,2211,2254,2537,2528,2405,2408,2419,2371,2254,2288,2145,2185,2060,1864,1796,1851,2072,2068,2151,2112,2266,2334,2484,2451,2638,2621,2631,2577,2689,2610,2607,2679,2687,2513,2695,2506,2287,2091,2148,2178,2152,2184,2191,2265,2439,2351,2350,2205,2204,2252,2252,2130,2024,2014,1852,1776,1670,1639,1636,1480,1458,1400,1390,1339,1401,1305,1290,1326,1254,1033,1151,1165,1051,922,872,893,815,784,729,640,586,484,477,415,1539\nSolihull,E08000029,female,1037,1119,1137,1184,1227,1334,1298,1283,1299,1457,1311,1372,1279,1294,1275,1255,1283,1200,1019,793,855,930,1092,1139,1209,1230,1199,1224,1205,1310,1418,1366,1315,1397,1457,1397,1410,1348,1437,1365,1459,1430,1339,1243,1304,1370,1348,1359,1475,1593,1591,1582,1689,1554,1595,1617,1583,1538,1595,1563,1418,1440,1326,1237,1177,1077,1119,1238,1142,1144,1110,1210,1311,1330,1409,1061,1159,1059,994,859,731,734,810,681,690,623,563,491,450,428,1672\nWalsall,E08000030,female,1671,1906,1799,1868,1886,1893,1831,1845,1949,1955,1950,1982,1843,1868,1862,1804,1779,1709,1669,1415,1470,1510,1665,1791,1729,1801,1750,1883,2012,2041,2097,2019,2129,2167,2056,2028,2012,2006,2013,1862,1907,1998,1637,1652,1707,1588,1667,1764,1743,1896,1963,1847,2004,1987,1831,1871,1879,1796,1818,1755,1723,1594,1524,1531,1423,1403,1329,1338,1158,1243,1292,1275,1298,1378,1334,1054,1155,1084,1070,956,836,868,896,834,765,694,562,556,500,428,1528\nWolverhampton,E08000031,female,1384,1526,1493,1709,1698,1700,1693,1681,1765,1799,1814,1706,1746,1798,1786,1548,1559,1532,1360,1352,1358,1411,1638,1590,1746,1588,1663,1861,1848,1879,1999,1994,1932,1991,2049,1935,2000,1961,1983,1855,1890,1867,1757,1661,1635,1565,1548,1616,1765,1883,1905,1856,1737,1783,1714,1735,1726,1613,1676,1635,1505,1430,1384,1413,1411,1214,1263,1225,1164,1207,1163,1102,1080,1172,1022,852,924,994,902,745,726,770,724,658,669,579,539,486,428,382,1543\nPeterborough,E06000031,female,1295,1293,1343,1453,1488,1489,1456,1472,1584,1593,1522,1487,1533,1468,1405,1347,1347,1264,1087,912,913,1002,1245,1199,1386,1456,1425,1558,1630,1786,1767,1760,1787,1810,1793,1881,1832,1802,1680,1642,1696,1624,1523,1443,1419,1371,1348,1373,1371,1414,1418,1384,1431,1336,1373,1349,1343,1267,1253,1177,1151,1064,1083,1053,959,922,923,960,878,886,805,799,833,828,940,693,658,596,612,517,474,498,496,406,427,382,330,283,292,233,978\nLuton,E06000032,female,1588,1610,1510,1578,1577,1676,1574,1530,1639,1676,1626,1622,1689,1645,1604,1513,1539,1565,1381,1245,1382,1404,1520,1651,1671,1653,1689,1665,1732,1699,1752,1798,1848,1924,1894,1810,1910,1776,1826,1773,1806,1811,1600,1435,1418,1362,1359,1322,1339,1333,1350,1356,1375,1351,1221,1283,1252,1215,1188,1140,1005,1071,1014,865,894,891,765,755,800,701,690,673,637,669,677,581,590,515,507,444,411,478,436,416,425,379,318,279,243,204,818\nSouthend-on-Sea,E06000033,female,989,980,1003,1061,1064,1074,1073,1047,1074,1086,1093,1141,1121,998,1079,962,948,889,808,765,780,910,974,1031,1073,1070,1097,1190,1181,1186,1300,1271,1240,1221,1237,1347,1248,1267,1219,1270,1278,1375,1248,1107,1202,1189,1205,1232,1284,1285,1259,1224,1289,1286,1287,1328,1281,1299,1239,1143,1122,1116,1076,1000,949,930,932,927,923,870,906,945,951,1052,1030,802,865,784,725,607,493,599,581,530,447,420,422,338,364,309,1355\nThurrock,E06000034,female,1075,1191,1189,1265,1259,1282,1214,1237,1225,1207,1245,1175,1231,1268,1128,1114,1115,1080,909,836,826,867,998,977,1100,1104,1179,1297,1298,1374,1451,1476,1498,1536,1490,1497,1557,1419,1305,1442,1396,1368,1290,1171,1223,1160,1232,1175,1123,1204,1189,1105,1256,1143,1192,1133,1141,1104,993,1017,965,844,814,772,789,701,693,706,699,672,677,655,648,779,803,514,525,486,481,401,418,369,337,312,344,290,239,201,201,176,730\nBedford,E06000055,female,1050,1039,1130,1146,1100,1123,1085,1123,1185,1181,1149,1268,1201,1106,1108,1069,1021,1055,889,811,817,917,1012,1088,1146,1123,1198,1209,1278,1328,1356,1372,1406,1533,1382,1444,1403,1365,1281,1393,1434,1441,1246,1248,1196,1153,1243,1242,1314,1206,1323,1240,1332,1299,1272,1244,1273,1281,1198,1150,1069,1026,1021,1014,886,933,905,891,764,868,844,878,837,918,875,664,728,692,573,484,505,473,453,480,413,388,375,363,273,223,1056\nCentral Bedfordshire,E06000056,female,1591,1696,1761,1715,1867,1792,1792,1779,1841,1817,1851,1801,1721,1705,1686,1603,1578,1546,1289,1047,1026,1180,1428,1510,1539,1646,1747,1771,1976,2024,2113,2167,2218,2239,2227,2172,2125,2134,2118,2157,2141,2064,1985,1828,1898,1832,2015,1872,2063,2072,2178,2047,2150,2093,2186,2230,2134,2108,2049,2054,1906,1818,1787,1654,1570,1538,1571,1546,1427,1429,1436,1500,1488,1651,1585,1200,1278,1184,1095,844,768,860,784,702,671,657,565,442,405,359,1406\nCambridge,E07000008,female,578,612,627,599,644,639,677,607,661,650,679,677,667,616,615,590,690,646,1519,2579,2094,2045,2216,1837,1593,1627,1622,1767,1365,1427,1428,1407,1405,1349,1148,1138,1108,943,999,1007,1054,918,855,803,832,844,720,799,841,820,905,719,752,750,892,763,699,702,643,615,521,542,524,511,512,508,486,481,451,446,457,413,407,423,481,342,400,331,286,293,290,270,267,261,246,193,179,168,174,123,686\nEast Cambridgeshire,E07000009,female,432,459,425,479,462,488,520,506,562,542,530,559,532,533,491,500,457,470,385,282,316,277,360,409,433,460,444,494,481,500,511,525,594,582,549,581,606,599,611,670,640,673,603,539,594,585,640,611,655,658,666,670,645,660,665,629,648,609,597,595,590,580,510,542,508,487,488,501,518,475,469,489,519,549,569,376,467,387,362,288,274,290,273,269,244,223,195,181,146,137,608\nFenland,E07000010,female,485,511,478,502,551,551,540,566,580,543,599,555,570,523,521,514,483,550,483,403,412,458,540,546,539,567,577,637,636,700,661,673,665,653,648,647,640,628,613,644,605,610,540,562,545,567,597,628,676,717,766,747,726,757,824,742,798,765,795,738,758,670,654,650,648,624,670,654,630,614,605,640,662,710,674,546,528,479,463,401,374,351,384,336,305,273,265,234,201,194,770\nHuntingdonshire,E07000011,female,858,955,938,979,978,1052,1003,981,1081,1036,1015,1003,1081,981,962,902,929,927,791,649,666,705,802,906,963,929,1031,1088,1119,1210,1197,1245,1244,1297,1188,1215,1250,1287,1207,1167,1250,1230,1151,1096,1064,1135,1223,1191,1286,1331,1361,1320,1338,1306,1310,1410,1338,1277,1310,1253,1207,1148,1127,1097,1027,1006,1030,1004,973,984,1019,997,1056,1122,1138,830,898,779,769,627,604,611,572,502,438,380,333,300,279,265,1031\nSouth Cambridgeshire,E07000012,female,814,772,901,875,949,1052,925,1007,1122,1046,1014,1039,1041,1025,986,977,928,903,770,604,507,528,569,702,712,800,852,789,855,965,966,1001,1075,1053,1105,1120,1136,1128,1139,1208,1217,1260,1207,1181,1206,1157,1175,1236,1206,1263,1249,1254,1160,1224,1219,1128,1232,1173,1100,1010,1029,938,938,894,868,850,839,848,842,828,812,785,862,958,1039,734,731,676,664,530,482,574,510,455,434,374,305,294,298,247,1100\nBasildon,E07000066,female,1092,1228,1197,1212,1198,1197,1183,1269,1295,1204,1193,1211,1144,1149,1137,1059,1068,1035,924,827,752,848,989,1128,1137,1189,1196,1311,1349,1380,1438,1450,1524,1524,1406,1424,1404,1362,1333,1329,1294,1380,1188,1103,1218,1176,1183,1154,1249,1255,1391,1249,1346,1358,1289,1304,1272,1308,1202,1215,1187,1042,1057,1025,967,882,938,891,877,892,808,884,949,996,1071,743,753,677,662,547,522,535,512,517,440,437,371,342,314,267,976\nBraintree,E07000067,female,712,785,889,868,842,881,817,803,896,914,915,963,875,926,894,942,881,903,676,578,606,626,720,796,885,888,888,939,940,1013,1012,1020,1013,1063,1026,1021,1008,1014,954,975,1064,996,940,950,915,982,1091,1042,1117,1098,1185,1116,1213,1247,1247,1216,1161,1152,1150,1005,991,943,954,983,905,832,909,882,861,814,832,897,900,1035,1103,700,791,686,639,505,492,511,464,428,367,364,308,263,253,261,1022\nBrentwood,E07000068,female,388,422,425,369,456,449,403,454,428,434,419,419,448,436,456,435,423,462,347,254,273,294,374,433,444,411,446,474,511,537,546,492,518,509,547,520,543,526,516,574,546,501,510,476,540,483,508,521,523,539,540,559,535,603,616,580,605,571,585,553,496,448,461,463,426,423,407,378,381,346,374,376,366,480,493,350,404,305,314,234,233,279,285,257,259,233,209,193,161,168,680\nCastle Point,E07000069,female,400,417,392,435,435,463,443,490,484,464,532,500,535,483,482,471,496,469,438,357,361,395,467,495,447,428,470,507,484,521,525,513,560,476,524,515,527,533,483,533,571,533,489,469,465,537,547,537,577,572,648,658,663,668,641,682,653,678,643,597,591,565,588,568,574,524,565,586,539,597,611,631,676,782,786,562,581,535,482,467,415,396,384,384,303,292,230,227,191,173,639\nChelmsford,E07000070,female,875,878,978,1050,1077,974,1012,1042,1047,1086,1082,1094,1059,1081,1046,1025,1037,984,913,779,775,855,882,980,1013,1077,1118,1190,1251,1245,1309,1272,1272,1343,1249,1267,1246,1222,1251,1342,1308,1322,1246,1166,1188,1187,1202,1230,1315,1265,1336,1293,1252,1389,1255,1303,1183,1217,1181,1200,1133,997,1001,1041,959,978,914,861,889,867,908,949,991,1122,1195,824,821,753,695,611,555,576,563,533,502,462,405,349,295,290,1134\nColchester,E07000071,female,986,1017,1072,1082,1112,1124,1145,1158,1171,1176,1139,1180,1138,1102,1113,1037,1016,1016,1110,1393,1598,1457,1361,1273,1115,1179,1218,1328,1304,1372,1393,1338,1501,1445,1333,1399,1323,1287,1349,1353,1355,1361,1296,1216,1190,1191,1211,1247,1286,1257,1359,1265,1388,1275,1344,1332,1281,1265,1194,1053,1114,1035,1040,974,980,883,922,957,915,815,921,1000,1038,1075,1140,745,894,756,716,597,572,574,512,454,442,401,359,325,299,256,1159\nEpping Forest,E07000072,female,747,776,734,778,782,800,749,742,744,792,751,776,789,746,742,738,725,770,611,511,560,608,654,748,714,700,754,772,818,827,899,954,953,944,917,967,957,916,980,943,998,961,906,912,899,853,915,884,952,963,1062,1020,1056,1023,1047,1063,1132,1003,972,944,953,806,813,752,757,716,717,730,704,677,675,642,711,781,833,586,647,522,573,443,403,421,434,411,357,324,269,278,229,276,996\nHarlow,E07000073,female,571,617,594,622,654,586,654,672,633,647,640,667,600,632,537,511,527,501,448,429,385,434,485,511,601,592,636,701,671,837,800,845,800,853,840,733,807,790,765,767,702,711,689,611,574,586,594,523,569,595,623,616,620,592,647,572,615,591,554,578,553,522,493,510,470,444,427,426,400,356,381,335,336,410,360,285,326,277,297,209,221,210,238,213,182,186,186,157,134,141,474\nMaldon,E07000074,female,279,296,316,320,298,329,305,335,369,316,349,360,376,332,354,315,359,337,342,246,216,287,338,345,313,335,329,320,363,343,366,340,358,360,343,328,343,362,325,370,379,392,382,316,340,400,420,454,453,489,521,532,554,575,591,579,521,515,524,487,490,494,473,505,443,447,421,448,380,419,404,468,468,532,556,392,427,362,319,279,246,269,256,244,199,203,147,136,127,135,484\nRochford,E07000075,female,421,443,429,420,437,402,480,473,442,446,512,512,490,473,491,462,496,469,384,346,336,403,409,445,406,450,439,430,451,496,479,466,456,515,531,483,495,516,521,497,548,553,532,459,540,542,498,578,611,637,656,671,693,654,728,614,667,629,654,673,574,580,560,519,535,507,494,502,496,490,506,547,566,648,696,509,488,466,427,369,311,337,329,310,281,279,249,194,191,171,641\nTendring,E07000076,female,575,663,643,667,710,723,658,730,794,769,784,727,799,784,749,697,697,708,673,507,585,624,678,736,681,673,701,771,750,842,775,797,764,770,793,740,782,697,666,707,834,727,696,745,680,762,817,833,917,920,960,967,1070,1116,1057,1118,1159,1216,1160,1150,1135,1079,1091,1171,1057,1053,1070,1122,1090,1077,1147,1193,1205,1430,1433,1052,1070,1043,923,805,715,722,704,636,584,538,507,444,388,328,1511\nUttlesford,E07000077,female,400,476,484,509,553,562,598,522,586,558,568,610,540,554,584,572,558,584,433,297,300,380,352,453,399,424,390,437,452,521,520,539,563,602,557,602,584,557,607,660,634,631,626,608,576,584,640,657,671,708,718,717,748,681,757,721,728,740,683,649,624,622,568,594,528,512,475,494,480,480,491,464,528,544,545,410,418,410,351,307,280,307,276,233,208,227,200,181,170,157,688\nBroxbourne,E07000095,female,569,543,596,621,627,605,616,616,624,614,629,635,580,611,600,572,574,553,475,398,400,445,519,543,590,563,617,632,648,641,735,728,721,727,795,782,789,772,722,740,793,754,663,595,637,650,659,606,684,769,740,701,751,734,769,752,694,666,734,615,627,546,582,531,500,497,436,453,466,443,424,440,457,530,581,375,418,379,377,309,305,329,326,264,238,252,242,171,175,151,571\nDacorum,E07000096,female,893,930,928,923,1005,987,959,1013,939,986,1001,1001,991,952,891,889,861,895,700,515,534,606,712,792,816,828,872,936,983,1031,1052,1089,1081,1205,1164,1126,1104,1117,1171,1161,1226,1207,1163,1065,1005,1065,1029,1007,1123,1171,1114,1070,1105,1143,1093,1154,1061,1048,1090,1058,983,908,950,894,862,825,725,749,726,651,700,720,761,777,803,579,593,570,518,442,418,444,427,416,384,332,309,304,272,262,1018\nHertsmere,E07000098,female,593,624,610,624,624,707,631,699,649,701,682,720,667,697,688,695,675,692,544,384,390,462,582,681,653,648,659,613,636,630,702,693,691,725,756,768,831,776,822,860,892,870,792,788,740,775,789,772,757,779,801,789,812,817,790,813,836,775,721,701,715,624,626,542,527,554,559,500,446,478,511,526,534,548,587,442,474,399,400,325,301,327,313,331,257,275,239,218,202,185,773\nNorth Hertfordshire,E07000099,female,697,725,752,773,717,767,747,826,798,849,851,822,811,801,748,763,755,706,595,450,426,516,607,692,707,681,734,746,818,851,873,887,912,927,952,916,899,985,925,967,1082,1038,987,904,915,910,1003,965,961,1094,983,910,994,920,1002,1081,991,944,916,862,834,802,775,717,749,686,703,652,692,649,669,689,710,758,768,523,603,572,506,466,409,430,448,393,402,350,335,293,256,243,956\nThree Rivers,E07000102,female,477,494,525,488,547,556,567,547,631,626,681,635,632,607,623,594,626,625,450,345,318,317,461,480,482,457,455,478,532,549,555,547,573,600,601,626,636,726,672,725,778,767,726,679,635,687,727,695,675,741,687,684,737,701,730,697,720,674,660,645,613,553,579,520,515,511,471,445,439,427,425,449,449,519,506,371,408,341,343,281,283,272,262,258,244,225,205,175,193,161,576\nWatford,E07000103,female,633,626,633,614,648,652,714,631,673,725,683,669,683,617,613,591,599,586,470,373,381,397,541,638,686,729,725,804,880,908,909,849,891,973,946,954,943,902,944,897,924,903,848,786,815,734,715,693,719,744,736,687,672,709,615,658,577,556,543,540,511,493,483,424,393,392,419,373,344,328,361,341,329,371,338,273,283,271,268,226,191,199,230,178,203,168,148,127,134,101,493\nBreckland,E07000143,female,578,661,700,639,703,702,702,754,787,789,764,732,749,738,715,718,676,651,598,553,563,539,656,679,738,785,776,767,732,919,839,807,848,821,860,781,783,760,810,799,803,802,826,693,739,776,799,890,900,1001,983,1017,1025,1018,1055,1115,1051,1078,1080,1021,990,942,912,948,957,898,861,907,927,931,925,932,1023,1069,1133,793,846,741,682,609,550,558,520,517,488,436,374,372,266,273,1132\nBroadland,E07000144,female,470,545,624,576,635,691,621,667,699,690,694,652,710,683,684,635,651,702,577,518,459,462,569,576,599,629,657,665,663,689,692,719,760,743,739,767,736,764,772,814,818,811,818,740,724,767,845,910,917,955,974,989,1050,1012,1002,1061,1050,994,1005,960,967,885,936,851,893,878,856,873,848,835,884,887,939,1040,1073,779,862,710,711,511,586,573,554,506,469,447,401,344,313,285,1159\nGreat Yarmouth,E07000145,female,449,468,456,482,528,525,525,509,547,487,546,580,551,546,539,512,507,538,493,436,408,468,531,520,562,551,544,564,633,633,630,608,609,618,611,581,567,538,603,582,564,556,526,493,544,564,572,613,660,672,712,706,757,744,760,749,807,824,745,708,689,656,710,661,682,617,612,607,657,581,649,611,657,668,790,569,591,549,493,430,381,335,364,309,305,262,235,216,199,190,710\nKing's Lynn and West Norfolk,E07000146,female,667,718,686,706,741,821,815,808,838,803,867,874,827,792,764,721,657,749,683,585,596,631,713,753,768,839,838,848,848,911,924,980,954,986,901,903,945,850,855,841,885,799,750,812,806,835,860,987,967,1088,1089,1062,1139,1116,1024,1124,1205,1183,1170,1146,1162,1049,1109,1083,1048,1098,999,1007,1040,1008,996,1078,1121,1206,1232,922,936,884,842,734,686,660,628,586,507,528,444,389,340,316,1279\nNorth Norfolk,E07000147,female,298,295,352,412,378,396,417,426,406,477,487,470,451,452,457,437,449,452,371,344,303,334,381,424,425,421,420,435,434,449,469,437,468,458,462,480,456,487,441,455,472,466,444,438,494,489,493,547,655,676,673,685,693,761,810,801,839,922,841,857,898,907,929,876,850,842,849,890,892,871,852,915,918,1034,1108,823,764,737,703,575,550,539,513,540,456,447,381,314,362,262,1162\nNorwich,E07000148,female,639,597,701,673,721,729,728,687,780,788,730,755,722,723,678,660,602,592,1186,2175,2315,2046,1626,1412,1371,1210,1195,1232,1264,1197,1182,1157,1142,1206,1084,1079,992,1109,932,964,937,909,899,798,775,777,810,839,783,747,821,779,833,757,843,755,814,747,729,770,678,662,659,628,661,636,630,577,653,564,576,545,558,650,638,481,492,463,427,339,361,336,322,313,264,267,239,239,221,194,876\nSouth Norfolk,E07000149,female,618,639,665,696,750,754,779,789,857,852,782,789,803,774,781,729,730,778,583,469,470,509,629,625,659,746,734,777,750,789,847,849,866,830,927,928,827,878,821,918,931,862,837,794,827,868,906,934,978,1124,1020,994,1011,1091,1034,1086,1158,1033,1031,1067,995,988,935,944,912,870,895,840,931,836,835,894,970,1082,1112,759,880,779,681,593,539,515,541,479,452,428,385,333,308,288,1129\nBabergh,E07000200,female,365,401,362,396,418,513,423,469,463,485,490,481,502,538,482,541,538,535,421,340,307,363,394,426,445,422,415,444,423,445,502,496,465,521,489,454,510,503,475,505,550,567,521,500,520,511,548,604,636,662,693,700,735,733,783,760,748,774,677,711,729,605,616,652,637,690,608,590,645,600,628,686,681,815,772,580,597,575,484,459,407,364,370,327,338,280,278,205,198,195,817\nIpswich,E07000202,female,761,825,809,837,889,899,870,886,927,892,862,925,846,846,796,790,813,798,696,668,687,734,774,822,939,929,1013,1037,1044,1117,1174,1091,1117,1102,1081,999,1009,1006,961,1029,1035,999,874,846,869,829,868,926,874,921,969,907,897,886,848,873,948,888,862,793,759,750,761,761,690,618,680,655,630,613,650,592,565,607,689,472,505,437,416,374,360,353,386,358,328,303,262,252,220,207,854\nMid Suffolk,E07000203,female,420,411,450,443,464,448,485,507,513,546,549,532,555,570,552,522,567,541,447,368,332,410,476,511,508,535,543,523,512,538,608,598,601,588,544,589,548,544,563,551,582,602,553,533,538,555,617,682,697,729,730,752,808,793,853,889,852,860,788,732,770,720,762,749,700,667,700,704,656,718,679,737,735,795,786,585,628,536,489,453,424,396,370,360,304,265,294,238,219,183,781\nSt Albans,E07000240,female,723,850,841,863,925,1030,943,995,1043,1113,1036,1104,1127,1095,1021,977,929,973,681,408,360,508,622,715,713,689,756,759,760,774,832,867,912,952,976,987,1030,1049,1067,1127,1226,1265,1225,1175,1158,1218,1194,1203,1235,1157,1194,1135,1102,1103,1131,1088,1073,1021,972,930,891,812,788,775,715,712,644,654,649,639,669,707,668,734,798,572,584,539,521,389,416,417,430,390,399,340,302,287,257,218,1012\nWelwyn Hatfield,E07000241,female,574,639,644,665,658,719,685,697,746,710,741,695,743,700,641,656,613,689,855,1268,1218,1125,1090,914,790,772,779,717,807,790,785,873,857,876,878,866,889,857,876,868,920,824,775,751,739,767,738,697,812,809,785,740,724,784,768,833,826,738,775,732,680,672,633,581,563,548,531,494,437,494,449,457,466,506,563,395,437,404,371,330,314,346,314,299,292,266,247,220,191,174,758\nEast Hertfordshire,E07000242,female,744,760,813,798,867,837,824,847,863,955,1008,962,918,1001,950,950,909,914,708,479,501,601,751,747,827,854,841,882,979,968,990,993,1016,1015,1013,968,1021,985,994,1081,1089,1092,1055,1002,1013,1066,1087,1064,1199,1161,1174,1145,1203,1187,1158,1161,1151,1090,1065,1086,1007,894,891,852,780,762,729,754,725,656,729,752,769,857,852,586,655,570,550,448,423,449,421,421,353,359,335,300,288,230,887\nStevenage,E07000243,female,527,490,577,518,565,573,564,570,601,625,560,585,538,505,497,512,457,487,409,350,383,395,495,481,544,547,567,625,707,732,787,764,786,735,776,727,718,731,668,656,671,634,589,546,547,558,531,550,561,609,653,597,635,646,625,646,625,637,628,574,543,523,517,444,453,401,408,353,346,343,339,361,333,412,396,309,305,269,272,235,218,232,199,251,207,193,190,141,143,126,480\nEast Suffolk,E07000244,female,934,1027,1061,1113,1115,1190,1184,1184,1269,1288,1293,1335,1364,1336,1340,1297,1284,1324,1123,896,878,946,1103,1154,1089,1171,1177,1170,1259,1199,1282,1229,1327,1310,1290,1223,1267,1215,1292,1283,1349,1355,1256,1269,1181,1294,1467,1533,1612,1716,1817,1684,1880,1836,1863,1981,1958,1929,1857,1861,1903,1809,1780,1818,1737,1733,1649,1729,1711,1785,1738,1839,1845,2111,2185,1603,1604,1496,1387,1254,1027,1086,1029,983,940,831,741,699,613,572,2475\nWest Suffolk,E07000245,female,832,879,1030,955,1000,948,994,1031,1006,1055,948,948,1034,964,903,882,880,917,795,720,723,825,1005,1035,1036,1125,1161,1253,1228,1259,1264,1338,1248,1308,1202,1183,1237,1126,1093,1120,1136,1088,1068,990,998,1003,1055,1146,1140,1161,1209,1142,1254,1321,1248,1256,1174,1350,1119,1159,1071,1062,1070,955,957,948,940,998,932,929,913,985,1048,1212,1210,883,897,894,802,683,630,598,596,571,499,494,384,346,309,265,1245\nCity of London,E09000001,female,16,30,19,26,23,13,16,20,12,16,21,23,19,8,12,11,20,23,29,27,54,68,92,158,117,109,112,122,104,117,105,92,104,86,74,73,69,55,58,48,45,47,46,42,40,49,37,32,40,37,54,38,52,61,34,49,43,48,41,44,39,33,37,37,30,45,45,33,30,38,26,35,32,44,26,25,21,23,17,16,27,23,12,12,9,12,8,12,5,10,20\nBarking and Dagenham,E09000002,female,1534,1758,1633,1708,1772,1775,1762,1747,1756,1886,1830,1722,1778,1757,1765,1666,1588,1450,1380,1192,1231,1177,1344,1471,1443,1470,1569,1571,1703,1748,1787,1912,2128,2009,1989,2039,2062,1902,2000,1888,1942,1873,1899,1662,1598,1645,1581,1473,1416,1504,1469,1461,1400,1417,1222,1318,1260,1098,1125,993,990,893,884,723,808,715,659,601,600,529,521,514,500,562,485,408,384,362,407,326,313,337,340,301,270,236,206,179,172,156,655\nBarnet,E09000003,female,2146,2347,2358,2388,2421,2420,2371,2331,2621,2475,2561,2525,2513,2543,2382,2337,2394,2195,1895,1561,1767,2121,2338,2643,2762,2877,2752,2930,3023,3104,3002,3003,3164,3294,3210,3156,3274,3155,3279,3260,3325,3200,3166,3070,2891,2804,2861,2771,2854,2791,2714,2704,2674,2627,2488,2531,2511,2411,2263,2255,2093,2009,2064,1899,1826,1702,1671,1565,1535,1549,1523,1545,1572,1526,1591,1319,1215,1247,1071,927,867,886,911,765,742,716,682,571,596,487,2325\nBexley,E09000004,female,1424,1407,1527,1533,1550,1510,1558,1502,1617,1691,1596,1628,1605,1638,1588,1473,1417,1463,1346,1170,1231,1303,1393,1407,1438,1433,1480,1547,1593,1738,1824,1768,1918,1803,1867,1868,1994,1817,1954,1933,1935,1915,1713,1666,1687,1617,1616,1666,1679,1708,1773,1762,1814,1702,1827,1843,1771,1751,1606,1612,1556,1390,1359,1328,1311,1156,1129,1086,1068,1051,1073,1072,1104,1211,1175,933,965,848,903,739,720,755,748,664,612,563,521,481,403,358,1472\nBrent,E09000005,female,2007,2101,1857,2005,1850,1954,1808,1910,1983,2013,2052,2048,2115,1997,1974,1939,2069,2038,2050,1963,1975,2253,2477,2778,2906,2871,2846,3065,3053,3040,3029,3124,3018,2975,3001,2951,2864,2818,2668,2714,2769,2846,2506,2436,2353,2371,2516,2250,2287,2209,2300,2410,2573,2244,2225,2101,2206,2062,1975,2087,1843,1862,1916,1528,1462,1378,1320,1177,1279,1114,1153,1129,1007,960,918,809,830,725,845,682,621,707,610,597,600,493,450,362,349,291,1221\nBromley,E09000006,female,1765,1964,1809,1971,1985,2046,1972,1955,2004,2093,2152,2016,1982,1986,1943,1855,1936,1842,1609,1136,1092,1268,1495,1595,1836,1716,1772,1959,2031,2194,2229,2406,2434,2655,2537,2594,2526,2668,2651,2769,2730,2778,2789,2517,2431,2419,2406,2450,2490,2409,2547,2450,2499,2516,2436,2408,2407,2409,2226,2145,2124,1983,1823,1740,1682,1595,1516,1478,1514,1502,1535,1555,1659,1766,1803,1341,1357,1209,1197,1049,940,996,967,937,847,794,729,665,678,563,2278\nCamden,E09000007,female,1003,1032,996,965,944,988,899,976,995,1043,1016,1048,1095,993,1000,918,1115,1089,1782,2354,2311,2131,2150,2338,2317,2374,2420,2358,2317,2280,2213,2295,2219,2051,1984,1807,1819,1739,1670,1592,1568,1530,1568,1452,1431,1439,1447,1344,1367,1336,1438,1364,1368,1373,1340,1368,1279,1153,1137,1087,1010,973,927,911,848,791,794,735,790,709,717,733,718,693,724,622,590,525,534,434,417,409,417,365,308,285,257,227,206,160,794\nCroydon,E09000008,female,2638,2463,2445,2478,2477,2422,2455,2399,2461,2602,2421,2604,2461,2564,2395,2209,2455,2347,1909,1690,1636,1956,2195,2437,2541,2720,2781,2760,2966,3302,3334,3290,3492,3439,3480,3432,3191,3281,3329,3376,3240,3124,3025,2762,2856,2897,2754,2500,2621,2814,2894,2815,2843,2837,2956,2843,2769,2791,2706,2396,2314,2247,2127,1938,1893,1782,1679,1593,1519,1476,1499,1412,1343,1496,1495,1175,1188,1162,1047,859,871,869,861,827,719,680,561,533,471,435,1739\nEaling,E09000009,female,2034,2038,2167,2131,2180,2042,2143,2067,2310,2308,2271,2248,2390,2345,2221,2116,2141,2110,2201,2049,1813,1944,2341,2604,2630,2763,2951,3023,3008,3015,3200,3159,3104,3264,3130,3300,3174,3259,3119,3095,3276,3077,3033,2733,2804,2705,2706,2689,2617,2448,2450,2620,2532,2468,2316,2454,2257,2110,2167,2049,1882,1895,1788,1718,1683,1516,1482,1381,1400,1311,1199,1227,1239,1209,1187,918,979,887,842,791,740,734,651,652,601,568,417,412,343,346,1291\nEnfield,E09000010,female,1796,2141,2142,2164,2206,2285,2122,2159,2305,2318,2433,2276,2397,2416,2224,2312,2245,2326,1953,1479,1536,1635,2054,2197,2183,2168,2148,2249,2228,2298,2382,2582,2565,2686,2556,2761,2645,2478,2623,2730,2808,2678,2790,2536,2542,2356,2458,2282,2492,2385,2536,2466,2390,2275,2205,2407,2395,2213,2117,1878,2024,1840,1700,1691,1503,1485,1388,1386,1300,1258,1216,1181,1185,1230,1173,1035,945,893,851,797,793,836,745,754,617,587,554,497,408,374,1619\nGreenwich,E09000011,female,1903,1879,1939,1862,1896,1873,1762,1878,1882,1807,1837,1857,1770,1693,1724,1647,1612,1611,1460,1525,1603,1628,1880,2039,2229,2386,2327,2516,2771,2829,2899,3001,2986,3048,2798,2816,2595,2768,2664,2544,2741,2527,2313,2178,2115,2079,2081,2075,1911,1979,2065,1941,1960,1784,1823,1672,1760,1731,1476,1518,1482,1418,1238,1180,1041,1093,1051,966,913,879,848,820,791,922,846,719,692,638,557,520,482,491,452,410,341,349,324,277,233,223,903\nHackney,E09000012,female,1748,1561,1617,1526,1578,1494,1463,1417,1461,1494,1551,1510,1569,1544,1511,1479,1389,1439,1385,1283,1542,1561,1855,2327,2734,3115,3369,3468,3615,3572,3706,3620,3346,3130,2957,2779,2569,2313,2446,2147,2094,2069,1873,1857,1827,1679,1621,1578,1636,1499,1509,1507,1537,1630,1452,1573,1573,1305,1325,1297,1211,1187,985,927,981,868,795,756,685,574,640,624,605,574,559,442,391,390,370,343,277,298,301,250,257,228,220,140,155,108,531\nHammersmith and Fulham,E09000013,female,951,971,860,865,888,877,824,865,871,933,864,953,913,879,880,799,880,853,797,869,1148,1427,1678,2326,2413,2594,2731,2522,2478,2388,2252,2155,2033,1949,1777,1639,1650,1565,1470,1415,1482,1458,1386,1350,1315,1256,1256,1325,1358,1265,1338,1315,1247,1258,1247,1180,1178,1080,1005,985,873,795,812,777,717,700,650,637,567,566,544,541,528,567,518,457,413,412,411,349,348,351,315,254,248,208,203,163,155,107,541\nHaringey,E09000014,female,1514,1433,1482,1455,1429,1547,1334,1414,1437,1504,1504,1521,1606,1548,1491,1464,1587,1490,1369,1409,1248,1429,1612,2023,2114,2348,2553,2599,2710,2523,2767,2584,2713,2747,2562,2536,2604,2398,2350,2339,2266,2255,2257,2067,2019,2024,2051,1922,1941,1923,2103,1890,1936,1950,1823,1874,1811,1677,1620,1438,1426,1378,1210,1164,1115,1046,963,896,915,873,890,850,788,705,714,610,616,578,490,472,447,444,429,401,376,342,309,242,222,202,741\nHarrow,E09000015,female,1470,1561,1542,1503,1550,1613,1612,1605,1608,1616,1605,1582,1555,1602,1533,1516,1534,1554,1260,1026,1062,1224,1527,1743,1842,1864,1836,1852,1818,1881,1890,2078,2092,2149,2134,2258,2227,2139,2138,2167,2123,2090,2097,1881,1838,1758,1751,1611,1565,1725,1698,1729,1682,1695,1597,1623,1519,1631,1518,1639,1562,1421,1502,1335,1318,1332,1291,1192,1101,1083,1071,1130,1037,1055,1051,880,939,850,739,641,677,702,678,624,547,529,513,426,363,302,1371\nHavering,E09000016,female,1489,1520,1669,1610,1699,1723,1618,1699,1604,1629,1551,1521,1593,1561,1543,1507,1570,1510,1360,1100,1122,1309,1478,1492,1608,1652,1668,1724,1881,1936,1932,2004,2139,2169,2096,2138,2051,2017,1925,1928,2010,1889,1771,1613,1704,1640,1686,1626,1622,1694,1810,1782,1804,1742,1894,1862,1786,1825,1685,1568,1705,1513,1457,1506,1365,1267,1234,1264,1171,1230,1205,1224,1241,1393,1407,1092,1024,1044,956,778,761,826,746,730,703,664,608,524,490,437,1745\nHillingdon,E09000017,female,1921,1955,1910,1947,2006,1978,1976,1943,2001,2014,1998,2030,1976,1998,1884,1748,1798,1759,1615,1726,1649,1897,2000,1906,1939,1981,2110,2022,2142,2383,2402,2420,2497,2588,2618,2604,2643,2672,2579,2499,2576,2637,2402,2253,2071,2098,2060,2005,1944,1961,2014,2087,1908,2110,1894,1912,1871,1796,1821,1729,1623,1510,1539,1400,1318,1315,1260,1172,1100,1059,1023,1059,1098,1175,1175,847,885,836,803,684,724,690,645,664,614,601,530,455,413,350,1412\nHounslow,E09000018,female,1661,1815,1713,1788,1846,1860,1827,1785,1908,1983,1848,1784,1863,1730,1727,1730,1668,1668,1446,1230,1332,1357,1519,1835,1948,2082,1976,2119,2199,2322,2399,2548,2724,2799,2571,2687,2706,2611,2720,2590,2673,2587,2314,2359,2088,2080,2110,2064,2030,1914,2115,1878,1914,1836,1712,1739,1680,1646,1596,1497,1396,1495,1392,1229,1220,1165,1119,1070,1123,1002,978,971,902,980,912,738,748,666,592,622,562,518,496,466,436,358,332,274,274,238,944\nIslington,E09000019,female,1209,1134,1046,1017,1041,1027,903,1004,1068,945,988,1045,980,947,930,938,843,873,1266,1625,1701,1813,2013,2268,2457,2844,3039,3171,3232,3221,3294,3150,2830,2603,2492,2276,2132,1942,1775,1586,1710,1598,1435,1446,1399,1347,1361,1279,1255,1189,1409,1322,1278,1269,1277,1337,1267,1238,1238,1064,1102,963,954,805,807,762,673,639,652,628,523,590,621,586,568,482,459,409,395,312,320,308,317,278,248,245,224,179,153,144,560\nKensington and Chelsea,E09000020,female,601,551,660,524,673,617,574,643,605,670,629,620,667,625,649,637,631,684,691,677,1045,1107,1284,1427,1484,1478,1421,1426,1385,1391,1318,1335,1346,1337,1239,1210,1179,1123,1137,1125,1042,1065,959,1018,1024,1135,1073,1009,1097,1120,1298,1073,1299,1198,1172,1163,1071,1142,1161,1083,933,821,892,695,821,694,709,678,592,549,609,556,639,598,568,489,547,402,438,346,348,367,326,259,261,204,194,166,129,143,705\nKingston upon Thames,E09000021,female,876,885,909,994,964,1040,1006,1005,1028,1131,1040,1051,1120,1079,983,1000,976,958,880,1019,1182,1287,1242,1258,1142,1054,1098,1141,1161,1249,1247,1276,1327,1336,1271,1343,1362,1354,1445,1350,1524,1477,1400,1324,1289,1343,1301,1293,1321,1242,1268,1161,1196,1128,1123,1071,1070,1020,1024,929,952,862,841,745,811,708,747,722,678,621,674,675,712,713,742,555,526,499,445,383,390,379,393,313,321,262,260,233,192,210,909\nLambeth,E09000022,female,1514,1549,1440,1478,1507,1388,1436,1425,1615,1460,1577,1559,1465,1520,1425,1488,1485,1565,1502,1500,1628,1841,2623,3738,4685,5043,5211,4717,4652,4350,4332,3926,3682,3469,3155,3046,2620,2628,2444,2510,2420,2427,2303,2135,2136,2132,2146,2006,1950,2032,2038,1997,2162,2164,2020,2106,1919,1835,1873,1728,1592,1422,1420,1262,1164,1182,991,893,874,818,773,754,698,708,669,600,524,549,514,445,468,458,426,394,353,331,261,214,223,195,817\nLewisham,E09000023,female,1874,1995,1871,1893,1771,1727,1813,1756,1836,1697,1719,1781,1858,1687,1724,1635,1560,1628,1509,1488,1536,1897,1898,2281,2421,2668,2827,2977,3270,3216,3299,3391,3383,3247,3307,3287,2967,2850,2753,2679,2786,2647,2477,2439,2195,2201,2230,2166,2107,2013,2326,2041,2054,1972,2055,2076,2156,1993,2020,1769,1679,1483,1373,1308,1196,1086,977,940,849,885,796,736,763,771,767,600,575,583,586,500,473,513,510,457,400,377,336,282,237,199,882\nMerton,E09000024,female,1337,1346,1342,1303,1274,1332,1164,1274,1333,1290,1292,1286,1286,1292,1172,1250,1190,1127,945,738,808,959,1158,1328,1508,1604,1787,1749,1942,1922,1923,2037,1971,2050,1994,1942,1969,1956,1881,2018,1994,1938,1855,1745,1747,1576,1569,1493,1655,1564,1451,1494,1476,1511,1451,1439,1307,1313,1268,1196,1190,1104,1069,964,996,937,875,835,818,745,810,785,738,765,671,617,569,536,459,466,463,461,411,392,394,331,296,253,267,195,996\nNewham,E09000025,female,2475,2428,2363,2420,2295,2294,2171,2304,2321,2352,2221,2524,2204,2388,2205,2152,2310,2146,2294,2203,2157,2416,2885,3091,3419,3585,3620,3549,3788,3659,3703,3707,3635,3676,3615,3501,3362,3364,3023,2924,2954,2916,2607,2361,2427,2358,2269,2222,2030,2106,2081,2254,1964,1894,1778,1819,1672,1769,1589,1477,1535,1364,1279,1188,1153,1086,953,850,958,836,697,741,662,732,657,479,456,481,477,429,424,377,369,353,319,251,234,186,180,143,573\nRedbridge,E09000026,female,1947,2130,2082,2122,2111,2189,2131,2063,2083,2182,2118,2113,2233,2027,2012,1851,1967,1990,1733,1613,1498,1714,1928,2071,2182,2203,2134,2250,2244,2392,2434,2557,2617,2562,2619,2713,2784,2711,2688,2624,2753,2674,2412,2289,2355,2282,2052,2106,2025,1990,2112,2027,1949,1871,1831,1773,1955,1718,1590,1560,1565,1482,1398,1414,1397,1226,1232,1160,1127,1081,1055,1020,950,1061,1047,779,816,760,731,597,556,622,571,573,489,450,440,414,357,311,1304\nRichmond upon Thames,E09000027,female,976,1070,1057,1110,1187,1209,1253,1280,1245,1295,1338,1312,1309,1234,1259,1149,1135,1087,920,693,626,720,897,973,947,989,954,1065,1074,1134,1205,1238,1262,1336,1442,1457,1478,1529,1638,1650,1750,1848,1753,1694,1659,1611,1689,1678,1743,1601,1732,1561,1573,1521,1534,1576,1464,1385,1337,1244,1142,1084,1069,989,1007,898,897,906,851,849,912,877,923,1020,965,757,712,727,651,492,495,537,481,427,346,391,314,258,267,240,1147\nSouthwark,E09000028,female,1574,1649,1603,1590,1568,1568,1527,1548,1632,1568,1663,1525,1587,1610,1564,1493,1524,1478,1712,2062,2130,2697,2665,3111,3377,3784,3849,4118,4055,4047,3849,3886,3716,3298,3001,2981,2757,2717,2521,2538,2360,2340,2197,2176,2251,2095,2086,1984,2067,1974,2116,1901,2007,1969,1933,1882,1864,1892,1841,1532,1637,1389,1300,1257,1118,1061,907,937,813,700,694,784,705,684,685,596,505,472,438,419,433,428,418,323,325,305,251,238,208,203,796\nSutton,E09000029,female,1121,1201,1276,1236,1411,1314,1329,1334,1386,1459,1419,1472,1419,1342,1296,1242,1235,1247,1014,717,793,846,983,1167,1189,1176,1260,1311,1317,1404,1556,1548,1589,1651,1675,1696,1776,1762,1904,1863,1876,1866,1830,1640,1593,1489,1599,1521,1521,1526,1565,1475,1493,1512,1512,1524,1521,1411,1309,1248,1230,1158,1049,1000,976,1002,929,899,865,827,842,815,858,913,1041,672,776,652,663,546,484,538,546,492,462,425,395,334,329,295,1179\nTower Hamlets,E09000030,female,1920,1951,1678,1831,1921,1614,1740,1734,1810,1726,1698,1750,1733,1698,1699,1626,1714,1669,1855,2431,2644,2815,3232,3834,4331,4479,4464,4437,4597,4647,4443,4251,4159,3890,3512,3407,3152,3007,2740,2678,2578,2310,2065,2056,1902,1730,1713,1656,1453,1365,1308,1250,1297,1208,1174,1096,1008,1080,1017,931,838,874,740,766,751,713,638,621,626,583,589,534,453,425,387,381,324,302,324,266,321,281,253,211,223,218,171,158,142,114,492\nWaltham Forest,E09000031,female,2010,1862,1777,1845,1814,1768,1661,1687,1669,1697,1654,1753,1647,1611,1523,1563,1476,1548,1409,1319,1213,1463,1556,1682,1789,1954,2146,2401,2524,2594,2989,2823,2910,3029,3079,2804,2908,2739,2794,2651,2556,2545,2230,2242,2067,1980,2034,1901,1926,1845,1871,1852,1878,1792,1848,1708,1680,1697,1567,1460,1398,1364,1310,1107,1055,974,1045,916,908,812,826,771,777,758,795,599,586,579,613,458,453,441,455,412,379,326,293,256,238,202,825\nWandsworth,E09000032,female,1948,1897,1856,1718,1690,1689,1753,1645,1660,1614,1623,1469,1505,1570,1458,1263,1379,1363,1281,1328,1423,1797,2364,3289,4383,5170,5428,5447,5037,4998,4702,4324,3944,3779,3599,3384,3179,3049,2957,2808,2803,2737,2554,2357,2292,2157,2171,2116,2129,2010,2141,1971,1974,1970,1749,1886,1776,1616,1619,1527,1352,1342,1198,1135,1191,1011,989,1051,976,925,948,890,868,912,909,678,747,604,695,527,512,519,503,429,416,403,367,280,250,255,1043\nWestminster,E09000033,female,967,836,779,768,817,783,760,685,783,859,853,829,803,820,874,857,881,985,1206,1292,1690,1712,1953,2414,2571,2409,2445,2465,2377,2350,2342,2237,2270,2069,1881,1827,1704,1583,1506,1567,1418,1467,1357,1371,1505,1434,1406,1442,1421,1440,1346,1421,1601,1664,1476,1379,1311,1190,1241,1109,1212,1019,951,934,817,812,746,751,718,747,731,662,720,632,651,635,512,514,484,459,395,393,389,374,362,315,253,219,201,176,735\nMedway,E06000035,female,1594,1639,1723,1690,1810,1870,1732,1704,1819,1843,1854,1756,1761,1746,1699,1662,1665,1635,1547,1420,1339,1491,1567,1693,1695,1712,1890,1884,1999,2050,2201,2144,2193,2092,2087,2072,1984,1967,1973,2012,1955,2053,1906,1794,1789,1735,1805,1737,1737,1872,1894,1899,1924,1939,1927,1946,1971,1898,1880,1812,1709,1688,1585,1493,1477,1376,1344,1338,1278,1280,1263,1271,1379,1466,1473,1047,1114,934,899,803,673,737,726,672,582,553,479,383,360,314,1264\nBracknell Forest,E06000036,female,644,712,721,695,680,728,714,736,782,826,740,793,832,831,795,788,786,774,622,421,430,521,623,701,774,775,767,861,828,936,901,972,997,931,996,985,969,961,977,947,1055,1005,963,903,813,860,849,942,883,898,973,881,912,902,928,874,860,862,814,817,764,748,722,676,611,592,611,526,556,502,504,467,536,575,556,485,446,388,347,293,271,291,287,273,226,243,204,162,161,126,555\nWest Berkshire,E06000037,female,719,770,815,859,884,876,961,919,935,1023,1051,985,1025,1092,1133,979,979,1061,841,551,496,669,740,757,842,815,888,851,862,911,929,993,1011,972,1071,972,1047,1090,1013,1071,1088,1073,1051,1051,1099,1092,1156,1187,1220,1290,1287,1191,1289,1225,1269,1196,1218,1185,1164,1125,1048,972,1000,1022,943,920,862,839,853,852,881,840,871,955,958,717,766,686,643,539,518,446,489,417,358,365,329,275,263,239,965\nReading,E06000038,female,970,972,976,1016,1057,1053,990,1040,1046,974,1031,999,1009,1043,972,925,863,850,1143,1623,1677,1685,1457,1333,1326,1337,1427,1475,1518,1622,1568,1627,1575,1589,1613,1579,1458,1493,1381,1339,1362,1363,1185,1149,1179,1118,1131,1046,1085,1102,1153,1047,1029,1061,1047,1030,978,931,937,850,772,712,729,698,650,647,639,594,555,544,523,588,561,601,571,428,505,480,372,337,371,341,335,324,276,251,250,215,191,177,734\nSlough,E06000039,female,1091,1114,1166,1188,1298,1221,1137,1231,1287,1276,1274,1370,1258,1273,1159,1127,1026,1004,886,751,775,780,896,976,1044,948,1113,1137,1144,1251,1271,1247,1359,1467,1499,1556,1597,1498,1593,1468,1599,1479,1293,1278,1188,1172,1144,992,993,1057,939,951,958,918,889,826,821,740,765,782,726,694,648,659,607,559,547,488,479,436,397,438,369,403,358,315,265,258,300,231,245,267,201,190,199,176,177,158,131,101,442\nWindsor and Maidenhead,E06000040,female,740,726,772,833,861,876,883,870,939,940,964,974,1015,1020,997,923,987,953,710,470,461,500,665,836,811,796,802,814,777,812,958,929,937,1035,972,1068,1051,1117,1162,1119,1224,1199,1142,1093,1121,1143,1193,1164,1168,1187,1236,1197,1219,1171,1138,1142,1122,1072,1101,994,1000,963,918,818,774,759,768,777,716,746,703,718,762,849,823,606,673,659,570,498,444,505,457,438,409,355,361,301,286,231,1086\nWokingham,E06000041,female,824,873,936,1013,1074,1134,1112,1148,1253,1312,1261,1184,1215,1172,1171,1061,1125,1002,1000,784,631,775,843,927,898,899,936,947,976,1025,1024,1115,1114,1191,1234,1241,1257,1367,1350,1418,1450,1483,1367,1412,1378,1274,1325,1318,1338,1347,1268,1244,1215,1291,1250,1233,1263,1285,1132,1148,1082,981,1009,946,884,809,814,774,759,818,787,839,809,894,958,716,705,702,616,518,486,498,528,438,394,395,355,340,308,265,1011\nMilton Keynes,E06000042,female,1566,1679,1733,1821,1902,2002,1821,2017,1985,2058,2024,2012,2038,1984,1896,1714,1776,1745,1414,1109,1122,1252,1526,1643,1700,1747,1747,1914,2034,2228,2216,2237,2325,2306,2301,2448,2413,2301,2382,2374,2471,2382,2244,2126,2143,2035,2150,1950,2069,1947,2071,1970,1952,1828,1955,1811,1802,1802,1673,1615,1604,1483,1513,1415,1346,1331,1332,1305,1240,1201,1181,1238,1124,1179,1198,852,881,752,744,647,544,580,528,482,469,417,351,313,310,247,1173\nBrighton and Hove,E06000043,female,1059,1165,1143,1122,1178,1278,1271,1179,1318,1347,1344,1503,1327,1437,1408,1369,1359,1439,1967,3130,3654,3524,2940,2634,2259,2142,2053,2099,2076,2227,2202,2063,2025,2076,2010,1953,2012,1956,1930,1987,2084,2018,1943,1843,1956,1906,1855,2067,2082,2254,2082,2047,2308,1955,2017,2037,1868,1824,1688,1597,1531,1405,1303,1274,1196,1154,1185,1089,1008,1094,1024,1000,1096,1088,1054,852,885,784,769,646,625,622,568,576,557,474,456,417,413,324,1478\nPortsmouth,E06000044,female,1081,1106,1148,1083,1155,1167,1206,1157,1208,1224,1130,1180,1115,1111,1079,1043,1060,1038,1504,2315,2464,2293,1785,1542,1465,1454,1544,1590,1584,1647,1633,1610,1733,1683,1654,1626,1561,1484,1466,1392,1377,1284,1274,1192,1123,1168,1146,1178,1225,1255,1388,1308,1293,1383,1326,1412,1318,1259,1265,1166,1203,1051,1027,977,976,915,916,866,799,808,780,815,838,903,918,726,690,617,627,522,497,529,495,513,413,417,369,331,289,265,1089\nSouthampton,E06000045,female,1325,1377,1373,1354,1365,1368,1353,1377,1420,1424,1414,1383,1392,1311,1255,1208,1197,1213,1741,2697,2901,2841,2558,2267,2093,2057,2146,1999,2181,1998,2086,2094,2080,2020,1979,1960,1795,1802,1737,1740,1801,1729,1607,1501,1511,1481,1353,1416,1360,1401,1421,1336,1352,1380,1425,1354,1373,1369,1375,1279,1219,1165,1224,1151,1081,952,961,1008,915,892,936,911,884,997,955,775,791,674,727,605,517,526,508,521,420,423,360,301,350,311,1191\nIsle of Wight,E06000046,female,469,518,511,587,588,619,670,653,685,708,682,728,642,661,684,686,705,623,566,470,479,523,624,594,611,643,700,657,684,714,773,711,739,729,724,679,736,701,669,680,759,771,717,675,707,730,768,832,865,971,1025,983,1125,1089,1212,1122,1174,1123,1154,1181,1123,1145,1073,1073,1083,1098,1098,1104,1077,1119,1041,1091,1158,1290,1248,954,1033,928,890,725,581,662,598,562,516,477,427,375,351,320,1338\nBuckinghamshire,E06000060,female,2689,2808,3057,3148,3234,3429,3319,3321,3488,3726,3706,3580,3635,3625,3486,3328,3475,3329,2715,2081,1903,2213,2630,2755,2970,2983,2945,3013,3161,3219,3604,3468,3536,3718,3572,3674,3702,3827,3886,3929,4176,3980,3939,3822,3748,3734,3712,3815,4171,4165,4228,3942,4129,4274,4342,3997,4153,4094,3854,3723,3582,3385,3351,3148,3008,2915,2776,2654,2740,2629,2736,2694,2796,3042,3068,2267,2446,2353,2156,1745,1727,1812,1687,1548,1395,1347,1223,1073,913,885,3698\nEastbourne,E07000061,female,438,435,455,472,499,554,546,545,567,562,574,572,522,487,524,537,545,595,474,471,489,450,544,573,554,577,559,563,592,642,610,606,597,648,675,667,588,642,623,646,665,644,628,600,548,618,629,614,629,738,674,688,695,733,778,730,773,762,742,736,668,674,653,650,623,653,634,641,596,605,629,654,643,752,811,613,629,507,502,416,428,416,452,416,407,353,323,289,266,250,1157\nHastings,E07000062,female,443,469,477,465,492,486,491,511,530,527,528,527,518,514,482,451,485,456,433,359,380,400,456,490,465,529,532,578,575,598,598,647,652,645,642,656,554,580,582,645,600,604,572,544,534,524,598,594,638,659,753,672,707,757,763,734,723,709,668,606,634,596,599,582,586,543,527,602,501,528,484,484,551,574,564,430,412,373,362,294,307,270,274,245,227,209,175,188,151,132,627\nLewes,E07000063,female,367,423,452,467,467,455,521,525,481,577,565,576,570,509,520,530,559,510,516,351,360,335,412,427,420,385,406,445,479,476,569,557,542,550,583,552,536,558,567,592,612,593,591,535,581,620,629,638,686,762,751,791,735,809,781,727,851,762,772,767,712,684,714,666,676,681,697,644,704,676,645,722,700,800,848,646,605,631,543,453,425,454,436,404,387,349,345,279,245,241,1093\nRother,E07000064,female,315,373,345,352,388,367,359,396,453,435,472,463,475,490,486,444,455,444,396,316,277,342,376,436,405,378,354,388,390,434,440,465,451,418,428,378,439,422,420,438,452,483,446,420,444,476,459,556,595,627,666,663,671,712,749,773,760,775,771,752,742,688,753,727,764,768,729,712,712,725,788,811,847,971,1022,653,760,699,661,567,488,530,520,412,445,375,379,296,311,290,1194\nWealden,E07000065,female,628,677,711,715,777,823,794,822,837,869,890,849,859,884,880,932,894,858,752,504,526,528,721,737,699,733,760,713,730,812,835,822,849,876,810,826,873,818,860,850,884,885,859,913,896,895,990,1024,1095,1188,1215,1154,1223,1303,1374,1293,1396,1373,1308,1291,1226,1220,1217,1156,1115,1077,1108,1115,1094,1071,1090,1140,1210,1368,1414,998,1056,1014,893,750,624,695,668,623,569,511,469,415,385,349,1482\nBasingstoke and Deane,E07000084,female,985,983,1041,1063,1104,1113,1053,1097,1162,1146,1146,1119,1063,1057,1031,999,961,979,793,662,663,806,920,1054,1106,1105,1176,1248,1242,1320,1345,1419,1397,1478,1396,1416,1268,1323,1380,1323,1333,1354,1291,1177,1216,1255,1295,1248,1354,1351,1375,1287,1367,1380,1295,1329,1353,1360,1260,1213,1117,1090,1069,979,976,837,876,898,906,851,844,884,926,1034,1028,784,749,702,645,547,490,515,516,450,391,380,331,248,248,229,911\nEast Hampshire,E07000085,female,510,558,586,626,654,647,620,667,723,705,709,727,739,763,759,714,755,753,595,482,374,465,531,634,669,562,630,605,657,682,656,650,719,713,706,726,650,707,714,743,812,812,782,722,826,808,811,924,833,962,1019,940,1042,1056,991,1047,1066,1063,1026,954,952,895,837,897,817,796,791,711,740,693,700,797,801,880,907,681,697,623,585,531,495,533,504,424,398,345,336,300,266,261,974\nEastleigh,E07000086,female,693,747,803,746,784,803,832,813,845,868,844,883,792,823,783,736,716,685,593,492,490,563,614,688,747,775,897,839,894,938,1053,955,1003,984,986,916,983,996,922,955,1020,946,922,870,874,890,855,882,914,923,929,998,948,955,961,977,1040,928,945,905,887,837,835,780,792,716,724,766,689,693,710,720,742,840,746,590,619,555,523,466,414,446,435,406,390,312,294,283,228,217,927\nFareham,E07000087,female,444,467,504,554,526,614,592,600,658,620,668,623,646,634,576,556,613,599,469,379,440,413,502,491,507,528,523,534,584,613,619,659,680,763,732,716,648,637,652,708,711,700,628,660,690,691,731,737,756,833,905,787,837,902,881,964,945,912,881,903,864,826,815,750,733,684,687,691,692,682,696,739,772,815,888,654,713,640,624,505,484,499,491,419,390,398,340,324,295,255,1014\nGosport,E07000088,female,405,365,398,404,457,473,412,472,444,427,457,479,462,506,440,427,428,426,378,352,358,393,409,412,429,474,493,486,504,502,542,539,548,487,579,525,541,526,509,531,510,526,484,453,432,442,495,527,550,565,608,601,604,589,625,586,625,640,588,637,569,557,614,533,508,466,464,497,458,482,413,496,519,549,549,415,442,368,357,304,252,266,260,247,255,217,205,185,185,150,574\nHart,E07000089,female,453,485,507,535,530,595,577,597,658,621,684,611,637,620,607,602,601,564,438,325,294,307,418,488,467,460,460,470,571,529,589,591,573,637,609,634,660,658,678,714,720,705,683,716,646,717,694,736,792,816,793,678,741,804,750,714,809,774,689,602,631,597,612,600,508,485,490,525,496,480,500,491,538,601,620,483,530,466,436,357,350,351,324,313,268,240,217,190,179,131,626\nHavant,E07000090,female,584,565,593,627,604,652,674,637,695,713,676,728,633,709,656,657,667,680,550,529,511,524,608,647,687,674,633,685,742,743,768,798,792,779,798,774,761,712,721,685,738,727,651,630,615,634,722,717,779,831,851,890,935,938,955,920,974,1018,946,968,948,910,906,855,831,777,820,753,726,719,720,809,863,848,947,778,755,641,606,504,530,520,528,482,457,357,381,344,282,267,1056\nNew Forest,E07000091,female,631,671,776,739,754,757,813,827,865,924,931,883,911,914,906,868,882,840,787,583,592,613,663,764,708,754,747,779,827,845,862,851,884,931,893,932,927,856,933,906,985,968,932,871,938,903,1014,1129,1115,1237,1270,1199,1364,1377,1419,1453,1480,1465,1512,1388,1352,1282,1377,1310,1233,1261,1232,1259,1301,1298,1346,1321,1323,1564,1607,1165,1222,1149,1084,867,826,901,787,835,790,690,637,573,505,465,2133\nRushmoor,E07000092,female,645,570,601,605,557,608,590,555,592,572,574,567,488,530,554,503,517,517,376,373,382,460,593,600,638,708,710,753,848,784,934,873,900,860,926,784,799,790,743,729,700,757,644,656,648,612,647,662,676,670,705,710,759,690,688,738,678,666,635,557,566,523,493,448,441,439,455,441,437,451,432,412,451,446,465,336,331,321,296,275,243,221,220,212,176,176,160,131,113,98,448\nTest Valley,E07000093,female,587,709,662,680,728,766,708,754,825,793,813,730,794,767,685,708,663,688,577,467,410,467,577,652,651,700,667,740,829,804,849,873,860,855,784,814,833,869,862,880,847,873,841,835,778,852,859,871,929,927,1031,963,973,959,1054,950,1048,1009,946,915,899,887,827,791,717,712,715,738,700,684,713,777,751,881,885,643,666,642,599,489,407,428,405,440,373,337,291,262,274,240,893\nWinchester,E07000094,female,501,564,596,606,663,691,677,728,715,783,720,764,750,741,709,726,745,735,969,1332,1260,972,816,704,632,595,601,664,565,630,666,657,690,745,748,765,699,763,756,758,808,847,835,838,815,786,833,854,850,964,934,899,906,903,969,939,985,930,914,850,829,771,738,774,770,677,626,644,676,697,725,671,702,780,772,618,634,596,546,453,439,448,452,410,346,325,322,275,291,228,1087\nAshford,E07000105,female,681,738,746,784,773,809,808,741,850,838,845,881,855,840,834,710,753,807,687,539,449,582,659,749,763,688,838,856,855,856,924,940,968,942,919,919,885,862,872,859,850,806,887,819,850,806,892,851,889,1006,1002,1046,992,1050,981,975,998,906,949,861,821,752,751,755,709,710,739,682,657,668,690,700,765,840,856,614,661,591,549,458,412,415,402,333,342,291,254,232,220,198,772\nCanterbury,E07000106,female,572,666,685,690,681,713,735,706,747,837,797,784,851,813,755,801,852,828,1486,2378,2417,2182,1520,1158,996,880,914,854,880,824,837,843,911,847,879,864,882,879,917,853,872,922,875,804,824,887,862,967,998,987,989,1087,1028,1011,1046,1077,1063,1044,1091,1013,973,989,974,912,903,938,918,894,867,874,899,936,966,1077,1101,843,866,744,701,643,541,575,539,508,449,427,371,338,315,275,1324\nDartford,E07000107,female,794,789,777,827,780,797,830,836,818,779,838,827,778,742,751,706,675,674,529,387,445,474,575,663,692,794,759,817,918,980,1005,1070,1077,1048,1077,1095,1003,984,980,1031,1034,885,859,824,762,750,790,779,751,787,719,793,777,818,770,739,793,655,657,658,616,582,566,543,485,460,450,456,422,429,408,426,435,508,495,315,383,349,309,253,269,282,266,260,223,207,178,173,161,149,514\nDover,E07000108,female,505,521,564,571,582,641,605,589,662,664,652,657,651,724,633,636,652,580,539,434,413,469,595,594,591,602,638,680,710,756,762,691,691,720,677,721,680,660,657,695,674,665,660,591,636,653,623,688,769,790,849,747,798,884,885,932,885,927,862,907,901,812,848,824,783,806,764,743,752,727,754,726,773,869,865,634,719,626,512,485,436,449,392,415,345,301,267,282,233,202,870\nGravesham,E07000109,female,615,648,601,672,697,697,684,756,687,683,692,751,693,727,686,721,625,611,506,474,429,495,567,645,615,616,647,692,692,736,818,808,780,769,838,797,819,805,780,789,778,748,721,652,636,670,685,660,710,727,789,759,781,713,769,744,683,691,722,721,638,577,593,545,527,508,513,509,485,491,454,453,481,575,625,424,405,385,375,341,308,322,307,294,281,237,225,203,191,131,551\nMaidstone,E07000110,female,920,940,1081,1046,1048,1030,1038,1002,1074,1049,1011,1042,1019,1052,943,951,901,964,803,651,644,738,864,1021,1059,1041,1088,1138,1144,1133,1208,1297,1299,1286,1190,1270,1262,1193,1199,1152,1271,1194,1088,1055,1081,1146,1119,1186,1264,1239,1257,1266,1285,1177,1232,1287,1251,1190,1187,1072,1093,985,1046,976,913,917,937,890,859,874,835,920,978,1044,1111,753,765,740,666,548,554,570,528,485,462,405,363,341,297,266,1058\nSevenoaks,E07000111,female,602,595,663,696,711,767,739,704,754,789,802,800,740,759,800,777,775,739,574,403,347,440,487,581,559,560,537,620,597,668,650,671,718,753,749,723,798,739,823,827,821,916,796,768,798,806,796,896,827,864,914,909,930,945,898,995,926,909,838,781,816,775,777,750,689,651,666,647,655,662,679,718,698,774,812,637,584,570,542,407,429,413,416,385,395,337,283,279,264,223,1005\nFolkestone and Hythe,E07000112,female,431,510,476,526,518,554,554,568,573,583,618,598,622,575,605,557,522,531,483,368,374,446,522,560,559,540,579,590,603,626,644,673,666,626,651,605,614,591,625,655,711,677,671,585,600,642,644,685,728,765,772,790,858,803,835,877,845,820,859,847,822,759,742,778,751,696,701,763,729,760,704,714,816,851,895,651,639,616,577,485,408,456,430,370,362,291,283,235,246,201,917\nSwale,E07000113,female,794,877,907,896,924,913,910,875,933,934,962,967,922,921,869,853,843,827,762,648,653,705,801,843,859,867,875,930,1035,949,1038,1118,1051,1030,1033,1037,982,999,960,1036,1001,1006,913,826,894,865,897,964,1001,1002,1068,1061,1075,1053,1096,1137,1094,1126,1012,1032,936,964,909,819,831,805,776,769,746,775,754,881,829,951,929,690,722,651,555,465,487,440,426,402,348,316,262,244,228,196,801\nThanet,E07000114,female,678,653,713,734,703,736,744,765,761,800,806,796,831,810,784,763,713,685,612,558,553,594,687,749,755,762,805,787,893,869,951,884,877,936,950,872,925,842,836,854,884,862,858,763,799,848,873,829,982,928,1049,980,1065,1041,1060,981,1036,1015,1071,991,976,950,914,921,907,891,889,946,894,900,897,914,941,1067,1076,780,824,737,702,612,510,546,522,484,451,400,344,313,288,263,1132\nTonbridge and Malling,E07000115,female,699,686,713,808,842,826,777,804,876,856,845,800,881,859,823,825,801,795,650,472,460,555,602,670,607,671,733,745,824,806,846,860,888,838,853,853,906,912,886,872,992,941,876,899,882,896,930,939,1024,1028,1017,924,1012,1011,1037,1039,1000,960,929,895,804,820,748,749,726,676,657,606,655,653,606,685,686,805,828,570,634,607,558,438,444,430,408,399,346,314,292,244,231,181,796\nTunbridge Wells,E07000116,female,549,589,592,642,626,643,658,678,723,756,750,802,788,795,826,762,778,776,588,359,351,394,511,586,558,567,574,659,622,663,699,704,706,767,695,720,729,794,792,799,792,845,845,764,779,800,851,867,869,1000,929,863,906,911,959,826,947,813,776,722,705,705,756,657,631,543,622,557,550,587,585,575,610,683,639,485,569,517,449,407,386,383,347,351,302,295,280,269,214,210,866\nCherwell,E07000177,female,839,918,855,945,943,928,888,861,907,944,938,942,954,971,952,937,901,886,760,587,581,664,775,853,927,976,990,1097,1113,1130,1235,1198,1220,1228,1268,1230,1285,1212,1198,1147,1189,1133,1112,1013,1004,1015,1061,1063,1120,1108,1127,1147,1198,1146,1190,1226,1159,1081,1089,1036,993,983,898,851,868,765,765,792,712,800,739,826,795,807,810,561,654,605,577,470,443,436,450,419,376,344,335,243,249,210,939\nOxford,E07000178,female,657,732,752,609,691,727,715,755,770,821,848,793,778,848,885,793,852,842,1913,3666,2990,2676,2167,1726,1625,1682,1529,1555,1536,1402,1427,1380,1250,1354,1270,1208,1139,1113,1003,1079,1019,1024,1029,871,908,829,858,943,888,967,860,912,969,911,846,827,893,897,783,844,741,719,610,670,584,551,531,561,592,502,518,536,504,478,507,378,424,400,404,349,312,342,313,282,250,216,205,206,194,162,736\nSouth Oxfordshire,E07000179,female,697,743,776,816,817,827,841,837,876,874,899,889,862,917,895,831,849,848,684,469,415,464,626,671,753,785,793,825,832,919,903,946,910,935,980,999,949,1040,974,995,1049,1017,958,978,933,952,1045,1046,1079,1091,1154,1192,1121,1194,1171,1208,1135,1053,1093,996,1000,921,895,876,861,789,814,804,773,750,791,780,796,861,896,743,769,747,665,544,529,536,496,469,423,399,353,313,267,225,1017\nVale of White Horse,E07000180,female,673,766,757,745,838,781,849,826,815,819,805,790,861,832,769,752,777,744,613,461,438,502,605,711,707,773,782,814,889,891,974,927,981,1000,1014,974,991,990,941,949,1000,974,888,884,892,855,922,931,949,948,967,969,1006,1001,958,978,973,967,995,872,908,828,933,804,753,736,682,759,667,673,700,691,740,793,786,607,675,622,559,466,446,458,409,400,391,354,329,283,250,241,957\nWest Oxfordshire,E07000181,female,512,570,564,552,630,580,625,577,682,674,702,704,679,622,664,613,603,610,512,403,365,361,523,610,538,585,613,651,666,706,716,717,723,703,718,686,720,723,717,711,746,767,716,717,679,699,726,763,790,883,895,809,849,815,931,876,857,931,843,800,808,752,718,719,672,672,639,662,646,630,641,677,680,740,703,583,630,561,509,403,419,428,389,355,305,315,288,269,240,212,913\nElmbridge,E07000207,female,749,729,817,844,876,962,923,965,1007,1070,1032,978,928,979,907,891,901,864,607,336,315,441,526,623,607,618,607,597,613,658,756,760,810,791,858,891,926,993,1113,1092,1198,1236,1185,1104,1176,1164,1160,1150,1175,1104,1174,1106,1101,1097,1013,1016,1025,994,991,939,902,824,789,722,639,643,645,637,674,653,621,625,669,708,701,528,566,543,508,429,419,412,440,391,389,353,326,276,233,269,1135\nEpsom and Ewell,E07000208,female,412,404,451,468,489,503,501,510,545,559,528,515,547,506,479,493,507,479,433,364,343,419,443,405,408,424,382,454,427,419,496,494,503,525,502,527,593,600,620,658,658,685,680,632,602,591,613,605,660,591,637,553,605,606,594,607,523,528,548,529,502,485,450,393,413,365,409,376,380,385,373,419,410,435,446,311,370,319,323,274,255,270,238,224,193,185,168,153,142,136,544\nGuildford,E07000209,female,627,628,652,633,738,719,716,753,788,800,801,802,802,820,766,813,829,799,1180,1646,1553,1379,1520,1122,949,859,789,816,877,819,858,881,935,881,865,842,897,895,928,919,954,961,945,968,854,953,978,956,1014,1004,1007,978,945,978,953,1058,1027,988,928,920,839,842,816,722,748,697,694,656,622,597,643,678,740,699,722,546,592,544,487,418,393,427,442,375,363,323,300,255,241,235,999\nMole Valley,E07000210,female,374,379,402,440,417,437,449,454,431,530,498,519,538,527,518,526,515,590,438,258,230,292,406,398,389,350,434,422,386,396,438,429,426,423,438,494,480,490,501,528,513,579,545,604,627,616,609,590,655,687,717,645,680,689,734,743,695,731,711,661,648,634,572,560,544,567,528,525,528,501,447,526,521,614,599,507,479,461,422,363,355,364,354,361,267,256,274,246,244,189,809\nReigate and Banstead,E07000211,female,815,855,919,911,980,972,962,985,985,1004,1037,963,935,929,957,885,803,877,685,491,417,535,696,728,774,787,811,824,877,1006,996,1155,1128,1083,1086,1121,1140,1078,1087,1233,1206,1127,1154,1082,1080,1078,1055,1039,1043,1137,1069,1065,1053,1093,1100,1120,1118,1052,1036,959,890,872,890,825,746,682,728,678,644,729,674,727,747,792,763,567,604,582,511,464,401,438,430,372,382,332,339,301,319,277,1132\nRunnymede,E07000212,female,440,485,476,467,499,470,504,478,452,485,476,446,491,481,463,472,449,428,781,1253,1302,985,636,569,495,463,494,525,541,533,550,577,567,614,633,600,623,573,563,610,614,600,547,574,588,612,609,631,625,596,576,638,599,617,606,591,609,613,597,526,557,503,481,451,382,397,402,391,381,362,369,374,397,396,470,348,363,284,304,258,260,275,257,229,213,226,205,191,154,119,634\nSpelthorne,E07000213,female,551,616,603,569,597,672,623,598,635,604,600,592,552,577,598,541,530,538,461,328,381,428,575,515,545,563,585,623,621,702,728,678,810,843,820,761,754,762,816,770,812,806,777,709,704,668,718,673,721,727,754,790,711,740,759,744,742,697,748,662,600,582,601,514,558,477,472,482,453,458,452,468,505,505,542,417,437,425,400,338,345,354,280,290,306,257,204,206,220,167,697\nSurrey Heath,E07000214,female,394,438,429,442,458,513,489,469,533,568,572,580,587,555,553,523,521,572,425,284,286,341,445,495,490,479,445,517,482,543,570,538,536,574,536,560,560,602,590,662,654,686,615,539,582,663,688,627,744,690,751,676,700,706,734,714,688,681,620,633,596,577,530,548,488,476,454,461,431,453,434,453,458,534,540,430,407,400,366,293,288,307,285,253,260,270,222,211,219,165,650\nTandridge,E07000215,female,445,460,504,480,517,494,487,498,549,531,528,549,546,659,647,572,624,526,404,284,286,326,420,419,442,393,418,403,410,492,453,497,542,578,536,584,600,628,578,582,656,663,559,574,539,577,614,570,657,654,672,608,699,723,753,637,648,711,626,643,593,565,586,529,538,485,466,505,487,464,453,460,480,571,531,427,432,443,372,326,313,325,274,266,249,238,219,230,187,162,688\nWaverley,E07000216,female,546,614,620,669,675,752,701,736,804,833,817,838,835,828,856,780,909,985,688,468,462,525,608,617,572,540,510,510,573,537,655,645,661,729,747,762,750,790,824,767,901,908,857,854,932,906,954,964,1010,1080,1010,974,956,1002,934,985,975,950,884,831,839,811,773,783,754,684,670,701,629,688,709,714,739,816,805,641,689,659,609,491,475,432,461,458,414,408,389,337,312,294,1238\nWoking,E07000217,female,586,591,610,592,609,669,656,593,696,649,682,674,658,620,645,555,626,571,445,343,341,390,485,538,593,600,603,638,635,707,741,677,740,800,796,806,784,801,843,841,896,892,801,763,769,744,788,771,741,737,723,675,722,696,722,757,730,667,641,603,603,539,528,549,508,472,442,450,468,402,422,491,469,480,474,374,398,343,316,318,268,280,271,275,239,223,191,194,179,178,694\nAdur,E07000223,female,265,302,347,326,354,371,374,341,408,376,382,384,362,346,332,322,367,299,268,235,227,259,231,256,273,299,317,323,327,352,331,374,395,441,391,411,398,405,419,437,443,438,426,443,398,481,427,431,490,469,489,457,470,498,477,447,472,423,460,445,434,402,380,463,378,371,373,360,406,390,397,413,441,486,518,371,379,334,330,267,269,288,281,260,221,185,204,158,146,128,575\nArun,E07000224,female,699,681,737,698,759,820,757,772,821,860,805,803,825,733,798,729,726,765,738,703,686,730,735,735,809,835,802,828,842,905,948,947,993,963,893,922,905,904,856,883,933,975,852,868,815,869,950,1011,994,1103,1173,1076,1213,1208,1141,1272,1254,1218,1219,1245,1216,1116,1179,1174,1156,1102,1161,1092,1149,1174,1176,1247,1337,1447,1533,1160,1145,1076,1006,798,787,837,779,749,652,625,551,457,435,445,1929\nChichester,E07000225,female,452,558,524,566,527,547,604,604,586,631,663,641,693,645,626,638,593,568,715,805,748,674,683,640,573,569,595,587,635,616,689,651,646,693,598,573,687,611,641,673,738,694,641,633,675,662,730,786,777,816,873,765,862,968,947,965,963,1017,1003,963,956,969,910,976,883,830,838,834,819,776,863,897,914,1085,1004,761,830,760,718,611,561,623,560,486,478,399,444,359,357,309,1303\nCrawley,E07000226,female,714,739,744,753,744,774,746,771,731,815,794,790,727,746,725,657,700,667,571,459,536,607,633,691,774,768,837,922,904,977,1042,996,1037,1051,1014,982,1014,953,956,1023,982,941,918,825,824,780,752,730,770,773,793,762,758,767,729,725,718,748,670,670,631,628,649,607,548,535,499,488,441,432,446,410,443,463,505,299,333,284,279,222,240,252,223,215,203,186,169,178,176,137,651\nHorsham,E07000227,female,635,714,722,750,753,716,762,759,798,841,831,882,854,933,852,847,916,847,706,457,441,502,634,685,701,737,720,742,823,798,815,817,903,869,864,951,853,878,877,876,979,960,993,826,888,893,963,976,1037,1077,1104,1103,1123,1149,1168,1208,1178,1180,1097,1076,1063,959,1005,944,913,893,884,826,849,862,894,877,892,996,1000,755,815,765,732,576,515,601,528,482,428,463,374,336,306,294,1278\nMid Sussex,E07000228,female,741,802,794,851,913,911,869,918,913,965,1019,951,968,921,943,877,888,891,695,474,460,576,638,656,700,724,803,790,781,844,902,982,995,986,974,1043,996,995,1044,1091,1115,1172,1112,983,1003,1037,1171,1132,1174,1131,1216,1154,1155,1131,1129,1109,1102,1140,1078,1028,955,912,990,879,817,877,836,805,813,807,782,808,870,963,981,743,819,762,634,524,509,534,494,447,435,409,347,338,301,313,1241\nWorthing,E07000229,female,504,519,546,542,537,621,557,598,589,643,620,597,620,610,598,538,565,520,499,417,428,468,530,594,578,603,601,613,668,714,749,704,726,772,730,723,728,697,734,748,767,792,739,707,687,702,688,785,836,818,834,784,871,831,841,830,842,854,793,741,744,694,705,620,642,607,635,609,600,644,627,672,704,752,796,579,600,535,531,420,426,461,392,407,432,322,327,316,230,234,1157\nBath and North East Somerset,E06000022,female,842,833,813,868,966,958,967,924,1030,1017,1019,969,1038,1041,1081,1025,936,1010,1713,2739,2436,2186,1936,1449,1203,1155,1119,1168,1195,1201,1200,1240,1178,1228,1235,1086,1142,1125,1084,1090,1125,1156,1107,1082,1027,1102,1148,1135,1240,1387,1298,1271,1282,1343,1353,1335,1317,1325,1253,1268,1222,1108,1057,1105,1025,1037,948,1018,940,998,938,1049,1006,1048,1092,833,893,843,772,634,625,662,602,584,540,505,444,357,352,360,1423\n\"Bristol, City of\",E06000023,female,2547,2566,2462,2497,2485,2620,2604,2646,2650,2642,2623,2492,2483,2509,2459,2268,2220,2198,3232,4952,5461,5146,4714,4523,4227,4234,4580,4505,4396,4466,4542,4513,4466,4362,4221,4106,3923,3770,3480,3448,3495,3433,3023,2795,2752,2770,2758,2662,2603,2697,2639,2632,2636,2447,2605,2682,2553,2531,2465,2321,2233,2108,2077,2123,1825,1821,1751,1777,1695,1549,1591,1616,1623,1774,1623,1226,1312,1283,1231,998,965,993,943,876,831,774,698,606,575,531,2183\nNorth Somerset,E06000024,female,965,997,1074,1053,1126,1162,1197,1096,1238,1243,1308,1284,1225,1164,1192,1181,1164,1136,981,800,761,905,1068,1028,1086,1032,1120,1064,1118,1193,1281,1226,1297,1351,1262,1353,1294,1365,1381,1383,1442,1462,1417,1311,1339,1318,1425,1386,1442,1560,1614,1536,1505,1615,1606,1693,1616,1567,1528,1536,1445,1456,1458,1410,1261,1320,1249,1336,1336,1323,1304,1364,1500,1563,1597,1283,1347,1151,1082,920,850,896,794,773,710,626,612,532,498,485,1876\nSouth Gloucestershire,E06000025,female,1536,1481,1613,1565,1598,1631,1691,1621,1721,1699,1674,1635,1663,1652,1536,1510,1558,1436,1591,1684,1626,1697,1678,1761,1839,1885,1883,1951,1983,2085,2086,2075,2140,2159,2016,2118,2030,2011,1908,1910,1940,1916,1803,1762,1695,1692,1788,1741,1913,1930,2074,2024,2055,2055,2091,2134,2075,2055,1929,1788,1720,1655,1630,1542,1491,1411,1424,1399,1362,1329,1365,1400,1443,1640,1542,1276,1362,1237,1154,995,908,952,878,798,764,721,597,570,525,437,1731\nPlymouth,E06000026,female,1176,1329,1304,1299,1268,1382,1443,1405,1608,1519,1496,1531,1396,1505,1483,1270,1382,1364,1647,2307,2425,2432,2218,1968,1803,1733,1819,1791,1743,1874,1817,1923,1860,1870,1855,1808,1728,1809,1679,1693,1744,1663,1602,1420,1354,1535,1506,1572,1646,1730,1776,1772,1732,1736,1941,1723,1852,1756,1662,1697,1633,1544,1509,1506,1575,1346,1266,1362,1304,1327,1328,1296,1311,1475,1461,1218,1139,1016,1016,805,780,825,841,681,700,606,576,481,451,397,1624\nTorbay,E06000027,female,525,525,619,654,641,704,693,729,725,731,741,738,743,711,731,665,751,709,601,484,496,526,659,685,673,667,715,737,758,802,816,801,732,793,781,759,776,735,711,776,785,808,712,725,759,775,809,799,856,917,1019,1013,1062,1042,1053,1121,1144,1088,1126,1002,1043,1031,1016,990,947,960,905,999,958,885,989,949,989,1068,1183,791,881,852,761,672,564,630,588,542,534,471,415,404,320,326,1400\nSwindon,E06000030,female,1194,1315,1339,1393,1460,1369,1508,1421,1536,1523,1515,1454,1449,1450,1315,1287,1283,1239,1108,990,939,1052,1204,1321,1390,1434,1515,1644,1614,1678,1715,1731,1788,1824,1867,1749,1859,1753,1782,1707,1796,1603,1617,1521,1555,1491,1534,1635,1682,1670,1710,1605,1639,1684,1692,1606,1596,1568,1588,1423,1430,1323,1303,1263,1153,1119,1124,1167,1043,961,998,989,996,1127,1034,808,854,773,690,609,561,597,574,496,472,420,426,352,300,299,1155\nCornwall,E06000052,female,2415,2328,2504,2510,2641,2861,2831,2978,3033,3110,3087,3058,2992,3012,2985,2898,2896,2902,2795,2847,2865,2873,2773,2836,2744,2711,2750,2838,3080,3098,3215,3214,3241,3478,3092,3077,3242,3168,3209,3232,3367,3398,3178,2998,3112,3129,3472,3612,3780,4162,4134,4175,4266,4298,4388,4549,4495,4554,4384,4349,4293,4137,4152,4177,4121,3900,3863,3949,3830,3939,3757,4074,4090,4616,4444,3417,3479,3340,2912,2458,2241,2170,2031,1949,1882,1597,1523,1301,1196,1053,4571\nIsles of Scilly,E06000053,female,7,12,17,5,8,12,14,14,4,7,7,12,10,13,9,3,0,2,4,7,9,8,7,2,14,10,14,8,11,19,12,8,9,11,10,15,15,11,14,18,14,23,9,9,13,13,6,16,14,13,21,19,13,22,11,14,21,20,11,15,9,13,12,11,14,7,16,9,14,15,17,9,18,17,23,10,15,12,10,9,9,15,10,7,9,5,9,2,3,4,28\nWiltshire,E06000054,female,2286,2423,2537,2618,2737,2780,2810,2849,2818,2971,3036,2976,2979,2967,3002,2839,2873,2945,2422,1676,1712,1938,2266,2481,2639,2566,2741,2810,2847,2930,3210,3088,3126,3149,3209,3064,3070,3051,3058,3206,3229,3073,2893,2924,2891,3098,3250,3474,3654,3761,3765,3836,3843,3831,3965,4064,3991,3883,3859,3620,3606,3399,3480,3206,3104,3070,2892,2970,3032,2956,2884,2909,3179,3363,3261,2551,2712,2493,2224,1944,1845,1818,1734,1587,1463,1341,1236,1040,1032,897,3800\n\"Bournemouth, Christchurch and Poole\",E06000058,female,1798,1745,1833,1852,1964,2070,2065,1954,2122,2164,2134,2078,2066,2058,2064,1849,1986,1904,2371,2957,3043,2888,2749,2451,2377,2294,2382,2402,2515,2461,2684,2684,2687,2771,2631,2740,2666,2670,2688,2683,2810,2622,2627,2367,2348,2338,2436,2434,2551,2614,2704,2705,2679,2682,2689,2747,2808,2658,2660,2603,2478,2393,2409,2342,2305,2114,2229,2238,2074,2226,2184,2253,2332,2597,2622,1897,2113,1891,1724,1479,1310,1436,1434,1301,1273,1080,1100,966,966,812,3663\nDorset,E06000059,female,1214,1340,1479,1639,1623,1645,1685,1774,1809,1956,1933,2029,2060,2013,1957,2071,1924,1997,1743,1265,1172,1260,1484,1584,1621,1562,1615,1683,1702,1736,1805,1827,1860,1968,1805,1807,1951,1846,1908,1988,1958,2012,1922,1853,1907,1953,2059,2280,2389,2634,2689,2681,2812,2925,2946,3080,3024,3140,3145,3037,3017,2969,3067,3003,2890,2726,2916,2922,2766,2752,2863,3201,3052,3354,3456,2580,2779,2453,2212,1996,1823,1830,1768,1665,1475,1366,1247,1110,1064,969,4095\nEast Devon,E07000040,female,595,606,610,647,737,743,699,744,738,789,751,782,764,763,703,736,716,748,672,508,467,500,572,637,643,638,650,696,713,770,761,777,778,761,770,786,746,765,796,806,872,828,774,687,804,806,836,868,979,1062,1042,1106,1080,1114,1160,1134,1197,1171,1152,1117,1105,1124,1131,1147,1118,1090,1079,1146,1131,1101,1084,1162,1256,1322,1384,1062,1179,977,961,777,814,760,706,690,649,633,521,478,466,397,1886\nExeter,E07000041,female,558,560,584,568,605,631,593,558,621,587,581,619,602,633,536,590,572,535,1594,2785,2607,2280,1517,1130,934,925,838,902,899,940,896,939,874,876,897,857,857,851,840,849,735,859,779,689,682,682,702,741,712,770,760,744,821,779,808,820,785,752,732,695,703,682,662,614,569,574,617,603,538,580,547,561,619,643,649,501,521,457,434,431,406,379,352,330,328,287,257,253,225,206,853\nMid Devon,E07000042,female,360,387,370,402,437,430,406,437,447,478,485,507,470,470,498,470,446,488,401,287,284,333,388,339,421,403,420,415,445,426,456,492,446,505,475,480,506,526,497,471,494,454,510,477,483,454,494,520,561,592,644,604,662,623,638,622,730,668,674,624,609,578,580,585,539,563,556,525,494,534,531,517,544,594,590,437,455,416,410,329,340,288,287,311,265,210,188,197,166,162,661\nNorth Devon,E07000043,female,398,423,441,473,487,505,467,486,519,570,548,591,529,562,552,538,510,514,433,333,373,345,417,448,451,488,524,491,540,497,544,570,577,558,530,535,562,508,530,549,586,567,538,490,481,582,550,596,664,707,714,718,698,739,799,796,796,779,814,784,766,712,712,720,735,655,644,676,634,645,649,702,686,775,737,586,635,576,565,447,424,445,367,343,332,307,269,223,236,227,862\nSouth Hams,E07000044,female,272,340,345,374,379,408,434,436,465,495,459,446,463,477,474,464,452,445,383,307,251,274,343,355,330,360,338,369,365,415,425,458,468,443,460,450,459,459,472,490,464,509,521,478,483,500,502,546,575,620,645,638,696,713,765,755,778,761,806,782,770,780,694,727,748,675,667,682,703,658,690,712,638,765,782,609,584,548,485,406,384,394,345,312,329,287,275,238,209,204,834\nTeignbridge,E07000045,female,460,570,638,566,623,638,620,669,719,692,716,693,707,667,681,664,669,689,601,440,436,454,518,575,592,601,637,641,638,744,716,760,743,765,699,725,728,720,788,707,746,781,750,669,745,709,759,835,927,951,982,992,1023,1044,1072,1119,1117,1146,1166,1121,1109,1026,999,998,1009,929,974,1027,994,951,934,966,1047,1098,1127,865,868,816,760,647,551,609,530,498,458,456,380,387,334,278,1281\nTorridge,E07000046,female,269,267,272,270,283,304,301,353,303,381,381,344,317,327,344,340,322,314,322,226,225,243,272,249,293,293,318,296,294,315,361,360,347,349,360,305,341,341,298,345,366,400,326,318,345,403,374,375,456,484,537,517,504,517,567,550,504,612,597,547,552,585,603,590,522,500,495,558,497,520,530,575,501,594,599,425,494,416,354,363,282,281,251,254,220,209,201,169,151,135,596\nWest Devon,E07000047,female,201,187,225,229,252,239,269,271,278,281,307,300,327,330,345,295,300,298,238,224,150,194,203,207,218,228,257,253,245,245,263,264,272,267,258,252,283,295,255,313,341,293,274,281,273,306,323,314,408,383,391,427,466,467,447,517,525,516,506,500,492,446,473,428,433,445,429,415,402,438,435,464,454,526,485,373,400,328,327,276,233,257,236,248,183,178,173,150,145,113,501\nCheltenham,E07000078,female,506,621,551,599,578,570,637,626,645,637,664,643,740,726,741,651,677,688,733,703,773,780,789,787,829,794,789,737,790,798,885,826,815,853,829,860,843,838,776,814,806,820,788,691,693,738,764,752,759,795,754,765,795,847,821,796,874,849,774,779,733,674,624,614,606,595,591,630,558,588,523,616,580,691,646,525,515,518,453,427,390,397,390,341,329,328,315,265,268,241,983\nCotswold,E07000079,female,342,367,403,400,427,438,420,482,450,510,476,498,492,507,489,474,450,499,412,372,395,337,413,358,402,370,430,404,420,416,448,469,473,494,517,484,524,480,463,575,522,571,540,525,506,553,593,612,639,696,720,712,704,748,738,777,817,776,713,763,708,723,656,652,622,580,634,629,640,615,584,634,644,697,712,541,570,547,473,428,355,411,388,352,270,276,262,272,242,173,772\nForest of Dean,E07000080,female,368,379,382,389,405,445,455,419,429,475,490,483,466,480,419,428,551,657,540,390,340,360,386,386,429,457,398,440,436,455,503,472,479,492,479,487,470,467,474,466,502,466,460,415,417,465,472,518,576,652,624,653,669,711,717,718,735,685,689,673,704,620,627,641,588,596,612,555,617,582,599,593,632,636,633,475,537,487,419,372,338,330,305,281,278,233,236,181,168,149,671\nGloucester,E07000081,female,695,712,724,763,725,837,768,792,818,847,835,836,826,782,731,706,764,763,720,801,866,806,906,829,858,812,870,922,921,941,1004,963,1034,1023,996,927,932,877,938,911,903,916,827,755,750,731,800,871,819,852,912,946,933,925,952,994,950,883,848,829,814,841,728,708,669,640,616,610,568,611,573,556,610,624,611,531,499,508,487,389,325,402,339,332,280,252,243,225,206,178,764\nStroud,E07000082,female,475,485,567,590,592,634,635,654,671,663,716,725,753,665,666,667,675,663,597,430,366,432,488,520,611,562,561,624,639,669,654,665,664,727,691,679,683,668,734,693,752,747,730,721,722,736,801,863,911,929,952,941,962,955,1024,952,969,943,986,967,932,891,854,887,769,746,757,769,725,770,766,827,813,860,803,625,666,600,557,472,429,445,428,386,358,336,338,273,223,238,911\nTewkesbury,E07000083,female,481,460,529,563,524,571,560,559,556,532,521,571,512,544,531,453,510,517,405,308,313,378,400,466,465,526,541,536,559,561,624,670,676,677,640,605,611,672,605,624,678,593,605,585,536,579,550,628,564,670,673,638,656,715,756,707,742,696,691,684,659,659,626,612,565,537,547,559,602,583,543,572,529,627,661,467,484,507,412,392,375,347,328,321,279,247,223,178,183,180,686\nMendip,E07000187,female,480,518,585,557,562,645,556,550,675,641,678,658,647,688,694,686,712,741,615,389,366,403,454,508,543,527,575,569,580,592,616,701,713,663,681,652,654,677,632,645,708,700,679,646,648,670,732,739,838,936,896,937,921,964,980,961,966,944,892,877,833,799,895,782,779,714,777,771,760,741,735,787,804,833,793,640,614,595,577,472,467,419,420,378,377,324,299,271,237,206,939\nSedgemoor,E07000188,female,537,573,526,600,635,621,650,688,692,732,723,755,691,688,690,649,648,673,583,468,508,520,639,664,662,628,685,688,721,753,746,756,779,754,702,690,678,704,675,694,712,682,686,680,629,690,736,730,841,830,909,881,992,916,909,1033,967,950,976,910,916,820,832,815,811,748,812,835,781,820,749,833,860,912,856,643,723,645,605,516,464,479,448,433,366,321,294,270,272,235,1025\nSouth Somerset,E07000189,female,752,751,788,871,841,865,891,883,902,944,924,962,975,922,936,917,965,894,792,648,668,720,806,853,833,824,933,981,951,992,1010,1082,1073,990,989,960,953,917,906,899,1023,894,874,912,900,969,1055,1064,1072,1155,1240,1224,1246,1290,1259,1341,1267,1351,1374,1318,1231,1242,1223,1177,1108,1046,1139,1208,1155,1138,1166,1172,1268,1384,1363,945,1076,952,928,804,671,683,641,638,573,518,444,417,374,314,1569\nSomerset West and Taunton,E07000246,female,695,703,756,746,766,779,761,784,796,866,868,881,843,832,908,813,893,829,750,554,536,629,667,745,755,760,849,903,868,918,933,954,955,924,939,916,945,886,924,924,962,919,902,778,792,859,913,911,1025,1108,1093,1106,1153,1150,1145,1174,1210,1228,1201,1202,1136,1125,1076,1103,1125,1034,1060,1075,1053,1067,1026,1076,1066,1158,1153,949,969,873,813,710,684,615,616,556,531,488,467,448,338,350,1647\nIsle of Anglesey,W06000001,female,270,266,316,341,350,358,381,361,427,429,395,369,367,435,339,319,351,383,302,274,238,263,279,366,366,320,332,294,337,358,388,379,416,364,362,360,381,346,348,354,366,418,354,349,342,331,355,422,452,470,523,509,506,539,525,527,520,565,521,512,526,508,506,488,519,479,511,494,433,479,512,502,502,532,547,414,453,416,386,314,292,300,253,266,230,194,181,162,145,115,566\nGwynedd,W06000002,female,463,504,526,533,577,573,574,578,636,677,631,598,649,626,668,642,611,576,671,982,1045,953,887,765,703,640,646,667,640,674,720,656,670,643,639,607,602,579,645,586,654,639,608,571,562,579,683,709,755,763,785,888,811,810,843,818,881,862,835,859,896,831,782,808,809,737,684,734,728,712,692,705,699,770,767,587,619,634,571,475,435,408,430,364,373,328,323,267,252,247,1028\nConwy,W06000003,female,456,485,459,508,521,573,525,577,609,589,597,628,667,617,596,557,556,547,515,407,379,449,491,509,569,514,561,584,569,639,658,616,671,605,625,572,607,611,603,659,630,582,567,579,564,553,644,662,735,815,860,816,872,854,911,902,983,968,944,886,896,891,916,894,817,775,799,895,842,789,823,827,866,951,925,673,727,601,636,599,520,521,484,446,452,392,351,330,296,261,1151\nDenbighshire,W06000004,female,404,462,435,490,473,505,531,503,526,571,542,564,574,550,539,550,502,519,436,387,334,385,474,470,494,512,489,560,536,510,562,537,520,524,534,523,491,498,540,495,511,581,497,514,517,557,608,548,616,698,647,708,768,693,772,740,730,782,776,727,741,664,709,639,658,584,617,672,646,595,662,636,673,734,688,521,555,576,492,415,399,388,336,355,321,270,265,205,208,179,759\nFlintshire,W06000005,female,664,721,716,776,831,782,782,834,895,890,875,894,900,925,906,871,894,851,727,603,615,619,735,784,823,843,907,896,920,998,1067,939,991,956,1005,946,1021,976,960,993,947,1031,870,837,882,920,989,968,1144,1155,1231,1242,1222,1183,1165,1217,1267,1190,1187,1084,1083,1048,981,984,951,871,890,952,868,918,980,924,1000,1054,1071,784,842,704,674,577,566,515,542,511,405,350,306,277,256,224,890\nWrexham,W06000006,female,615,672,661,747,707,747,765,794,818,863,836,783,829,806,761,766,799,705,608,614,599,654,652,758,756,724,699,815,818,862,883,876,858,878,876,865,936,862,889,902,842,868,733,734,798,772,775,874,927,1007,1063,1046,1020,1033,1009,933,986,1011,952,907,813,879,842,862,803,764,794,814,754,748,765,782,779,822,789,626,630,584,514,529,470,392,384,341,357,320,259,242,231,216,786\nCeredigion,W06000008,female,254,258,261,279,274,340,333,325,347,308,366,383,282,352,331,306,327,315,557,838,835,757,617,486,410,343,363,365,360,371,342,371,318,339,331,333,338,311,341,334,332,333,309,356,322,327,352,354,419,471,486,450,513,489,514,529,597,580,562,547,587,520,516,509,507,492,537,509,491,493,484,520,491,515,504,420,447,411,376,296,327,271,242,253,224,229,211,148,160,115,570\nPembrokeshire,W06000009,female,475,515,513,566,615,627,666,602,692,741,716,714,676,690,689,651,658,665,545,486,441,479,560,533,580,569,617,642,679,686,704,693,706,687,637,650,690,661,610,667,703,609,668,619,635,577,656,746,832,852,883,852,959,883,974,948,1006,988,1032,1018,969,957,905,908,885,869,901,803,875,871,912,895,887,908,953,767,802,728,659,553,519,517,434,452,414,372,354,304,302,234,943\nCarmarthenshire,W06000010,female,809,876,896,934,964,951,930,976,1043,1075,1061,1073,1004,1166,1053,986,1089,1007,902,720,733,756,873,935,961,1045,978,982,1025,1084,1052,1003,1117,1176,1087,1080,1073,1125,1081,1068,1192,1108,1036,1016,943,1017,1095,1096,1214,1294,1308,1335,1410,1418,1455,1494,1488,1537,1454,1476,1470,1389,1412,1366,1300,1360,1275,1288,1195,1252,1187,1204,1219,1363,1257,1045,1030,995,956,803,749,657,682,559,593,494,482,387,381,338,1392\nSwansea,W06000011,female,1019,1105,1168,1195,1152,1295,1208,1145,1275,1338,1235,1403,1344,1380,1186,1210,1189,1266,1267,1937,1936,1976,1727,1639,1455,1464,1382,1395,1440,1489,1548,1544,1484,1646,1480,1630,1444,1440,1462,1459,1589,1443,1471,1286,1219,1299,1369,1434,1522,1519,1629,1554,1619,1541,1568,1666,1704,1664,1585,1567,1486,1562,1455,1506,1582,1359,1366,1398,1288,1216,1257,1315,1353,1521,1467,1133,1155,998,1032,845,844,821,807,736,687,633,589,511,473,394,1571\nNeath Port Talbot,W06000012,female,634,641,685,748,768,765,767,763,779,810,826,832,767,827,797,822,824,756,804,855,656,612,745,817,826,765,803,842,876,953,946,881,906,957,972,919,878,908,885,899,885,905,787,772,810,846,800,867,899,929,958,960,1038,1018,1060,1007,1113,1139,1087,970,1025,1029,976,916,933,838,848,843,847,898,816,832,822,884,892,678,656,657,592,502,501,450,460,422,392,352,317,237,273,229,929\nBridgend,W06000013,female,680,640,766,754,754,798,764,810,836,922,842,816,823,829,801,777,842,822,671,532,567,626,689,795,819,758,879,830,920,975,997,969,1049,1035,961,922,919,915,876,858,972,891,819,803,782,859,948,886,984,1077,1063,1079,1098,1060,1113,1088,1150,1074,1085,1067,984,950,949,906,882,803,838,806,873,863,831,765,853,925,891,678,701,675,633,524,537,492,474,455,422,347,337,234,260,228,780\nVale of Glamorgan,W06000014,female,598,632,637,744,791,763,759,743,784,848,792,791,774,877,758,720,770,809,619,458,446,551,544,637,763,703,719,757,725,777,744,811,837,895,886,857,842,806,889,848,898,883,909,756,788,796,799,904,819,991,957,925,943,1012,947,996,983,1064,959,951,939,911,889,928,857,876,773,811,838,758,788,741,808,925,877,626,743,612,624,524,460,493,458,401,374,337,310,296,244,219,923\nCardiff,W06000015,female,1734,1870,1868,1881,2003,2104,2002,2029,2209,2143,2161,2159,2103,2184,1957,1924,1885,1942,3069,4749,4709,4370,3748,3636,3245,3007,2958,2873,2851,2906,2847,2742,2721,2686,2774,2567,2669,2451,2573,2449,2444,2356,2171,2057,2202,2050,1990,2009,2045,2084,2194,2213,2038,2141,2130,2253,2145,2150,2093,2039,1945,1845,1790,1881,1703,1601,1467,1635,1498,1399,1486,1440,1389,1492,1501,1068,1221,1021,1009,900,884,804,811,793,719,661,594,568,499,432,1844\nRhondda Cynon Taff,W06000016,female,1081,1232,1216,1216,1302,1414,1254,1420,1467,1408,1465,1515,1406,1428,1305,1337,1420,1354,1236,1204,1186,1405,1475,1461,1509,1387,1452,1527,1517,1615,1719,1674,1626,1716,1634,1614,1606,1542,1532,1584,1574,1455,1371,1269,1238,1364,1414,1472,1610,1715,1767,1612,1686,1688,1709,1766,1656,1750,1691,1626,1623,1490,1455,1510,1297,1341,1353,1326,1327,1274,1304,1234,1426,1470,1381,1031,1037,921,1029,851,760,710,722,676,604,516,455,427,338,300,1241\nCaerphilly,W06000018,female,813,882,915,970,974,1027,1033,993,1045,1034,1112,1037,1063,1052,1028,968,976,985,814,776,720,786,902,924,1047,985,1067,1163,1162,1215,1154,1177,1267,1241,1166,1212,1244,1177,1148,1113,1205,1155,1102,1024,986,976,1048,1078,1265,1271,1252,1275,1350,1305,1273,1277,1323,1294,1256,1261,1161,1085,1105,1099,1123,1063,1013,1064,1077,918,975,1055,1040,1073,1088,802,874,719,712,642,572,548,510,481,418,388,373,332,272,237,822\nBlaenau Gwent,W06000019,female,312,352,336,363,362,346,346,360,410,341,368,378,396,350,382,366,333,319,311,300,267,328,377,375,400,410,448,483,476,490,504,459,482,492,475,440,368,410,390,409,433,401,405,299,359,380,349,430,427,467,508,502,540,514,570,546,530,520,517,493,495,445,442,446,398,343,363,389,351,386,380,360,403,398,418,296,322,274,310,249,211,222,210,177,179,160,114,112,96,85,327\nTorfaen,W06000020,female,440,450,507,488,524,540,471,513,567,544,583,549,533,537,536,539,493,509,434,376,316,394,471,583,544,522,626,621,623,647,670,667,665,694,645,607,614,636,532,550,612,599,520,508,473,497,536,569,567,599,635,662,694,648,661,708,714,668,689,683,655,572,614,606,526,544,539,570,583,535,548,495,542,574,531,430,438,391,395,389,318,296,280,268,260,239,222,181,154,165,539\nMonmouthshire,W06000021,female,368,352,397,387,393,429,417,422,468,479,479,504,500,491,539,460,485,488,415,315,311,315,365,406,446,394,455,458,464,439,463,462,470,467,514,486,500,536,519,539,546,532,509,511,482,524,546,549,648,711,744,697,736,771,820,860,776,881,791,747,706,722,619,641,662,629,646,631,666,617,651,640,652,656,704,580,568,482,506,471,409,370,361,327,314,311,255,218,203,173,847\nNewport,W06000022,female,890,926,931,1026,1020,980,1063,981,953,1000,1037,1124,971,988,893,925,923,893,782,679,682,778,916,919,1022,989,1135,1131,1205,1268,1386,1222,1242,1338,1262,1209,1173,1151,1069,1121,1113,982,995,926,938,936,875,1001,1022,1059,1057,1020,1075,1195,1136,1103,1145,1098,1083,1025,968,966,932,832,810,726,762,782,749,690,659,774,762,777,797,600,662,556,561,521,481,452,424,383,405,335,268,272,224,229,823\nPowys,W06000023,female,510,541,537,570,617,636,579,639,643,675,678,665,661,728,675,670,702,683,575,439,427,461,556,599,578,589,684,648,597,633,718,632,680,696,636,642,643,637,679,688,654,647,671,653,631,692,730,782,784,979,1013,970,997,1009,1098,1096,1102,1069,1141,1044,1094,1089,1065,1049,1026,965,1039,1046,995,939,969,1025,972,1049,1016,827,861,807,754,654,601,597,549,488,478,434,349,343,319,278,1186\nMerthyr Tydfil,W06000024,female,268,336,331,318,338,346,367,340,348,389,325,363,355,333,336,306,320,325,304,236,293,289,323,334,374,349,368,369,405,440,426,431,435,445,465,463,421,411,407,402,409,357,310,318,294,331,337,352,381,414,416,419,422,414,477,406,482,452,432,430,431,370,357,400,323,346,335,304,312,316,349,319,315,334,331,222,264,225,211,178,177,175,128,176,130,130,93,108,81,74,282\nHartlepool,E06000001,male,469,496,536,510,559,558,527,569,611,580,604,642,609,622,574,597,537,543,502,478,487,500,502,464,537,510,529,513,527,529,566,512,565,539,553,532,539,520,492,498,516,529,500,447,435,519,452,498,595,622,629,589,610,646,648,677,731,680,681,662,693,633,627,596,609,548,511,521,482,513,466,496,472,524,491,391,347,275,221,236,229,213,215,199,168,169,122,122,101,81,217\nMiddlesbrough,E06000002,male,796,866,907,997,961,1010,978,1017,1068,996,1028,1045,922,939,921,895,892,867,875,882,1024,1013,1034,1158,1096,1101,1005,1003,1013,1010,1002,1018,1058,1011,992,1022,928,954,829,841,825,869,819,748,696,773,749,823,754,807,813,817,787,882,913,924,951,884,928,905,869,843,849,853,833,715,742,678,694,663,604,609,605,632,657,437,453,387,364,346,302,282,281,249,235,198,169,142,127,112,316\nRedcar and Cleveland,E06000003,male,610,656,680,713,773,748,778,757,851,923,804,834,794,829,838,774,834,782,686,671,577,658,691,624,722,747,662,722,710,768,766,723,720,754,724,711,740,710,707,685,756,748,654,663,633,730,708,775,805,858,932,922,964,931,1074,1047,980,1094,1012,1026,989,924,954,952,891,861,828,826,771,819,746,780,825,876,859,651,720,583,561,477,482,405,424,358,314,281,229,211,152,130,443\nStockton-on-Tees,E06000004,male,933,1032,1131,1105,1228,1191,1205,1291,1415,1319,1421,1324,1321,1298,1240,1222,1185,1193,980,906,869,987,967,1023,1089,1021,1136,1194,1279,1220,1289,1235,1284,1243,1307,1389,1244,1309,1210,1251,1317,1240,1311,1070,992,1097,1146,1198,1219,1371,1379,1334,1391,1413,1409,1369,1352,1336,1387,1309,1316,1224,1250,1159,1264,1160,1014,1089,1043,968,973,963,1019,999,975,687,803,619,546,566,500,418,457,417,376,312,236,185,195,170,488\nDarlington,E06000005,male,514,505,585,586,572,651,626,670,674,660,695,671,735,621,646,624,684,657,608,458,410,518,514,598,613,591,590,652,621,655,703,659,650,682,651,674,632,637,633,591,679,675,719,628,623,594,658,653,676,758,761,761,760,742,809,797,809,736,807,739,756,677,693,665,598,658,565,610,590,542,519,547,613,604,548,437,474,386,342,316,313,291,301,244,210,194,174,146,119,116,321\nCounty Durham,E06000047,male,2461,2444,2644,2477,2731,2857,2694,2937,3022,3074,3060,3002,2878,3109,3053,2771,2879,2756,3257,4230,3756,3691,3429,2977,2786,2801,2738,2774,2948,2937,3075,2839,2823,2936,2978,2984,2932,2990,2952,2995,2985,2974,2913,2713,2538,2806,2816,2960,3353,3485,3652,3606,3703,3783,3809,4024,3970,3878,3794,3810,3582,3398,3489,3409,3297,3212,3132,3056,3001,2966,2885,2910,2879,3036,3091,2318,2440,2114,1799,1617,1456,1504,1379,1223,1135,884,778,688,567,428,1385\nNorthumberland,E06000057,male,1338,1322,1478,1589,1560,1696,1624,1728,1809,1754,1887,1789,1750,1814,1752,1798,1748,1741,1592,1358,1330,1359,1449,1545,1571,1565,1517,1617,1559,1640,1677,1562,1644,1748,1658,1663,1730,1647,1718,1650,1680,1829,1701,1591,1620,1689,1835,1888,1989,2140,2185,2035,2231,2339,2417,2385,2568,2473,2418,2564,2429,2439,2437,2318,2324,2314,2184,2353,2133,2152,2095,2153,2148,2402,2278,1689,1751,1586,1391,1143,1079,1011,931,859,773,700,621,498,419,349,1067\nNewcastle upon Tyne,E08000021,male,1581,1511,1601,1639,1700,1706,1667,1679,1730,1789,1799,1706,1698,1639,1618,1496,1474,1442,2576,4340,4514,4445,3712,3093,2766,2465,2573,2319,2258,2208,2134,2186,1991,2130,1975,2095,1986,1900,1944,1887,1817,1844,1743,1562,1574,1585,1621,1463,1674,1701,1785,1636,1623,1579,1712,1700,1865,1729,1638,1693,1556,1577,1500,1570,1428,1281,1310,1265,1202,1112,1059,1160,1112,1177,1171,844,824,739,664,589,504,577,517,414,395,428,351,320,249,232,688\nNorth Tyneside,E08000022,male,1034,1135,1140,1162,1194,1245,1209,1241,1262,1196,1276,1282,1291,1298,1220,1226,1159,1106,1022,829,871,868,968,1064,1036,1078,1143,1161,1254,1277,1305,1267,1327,1319,1324,1439,1331,1339,1399,1348,1416,1536,1351,1184,1177,1200,1310,1276,1371,1477,1481,1396,1344,1395,1479,1488,1508,1543,1525,1407,1343,1320,1278,1308,1238,1178,1174,1212,1152,1122,1019,1080,1138,1199,1120,865,862,712,652,540,507,501,511,441,388,365,329,266,216,187,605\nSouth Tyneside,E08000023,male,752,798,768,859,894,906,842,857,891,858,910,890,915,813,874,798,790,833,748,672,690,716,686,784,781,827,776,809,851,941,906,865,942,949,974,1014,882,861,851,881,942,905,852,721,693,786,778,848,889,961,984,945,1061,1042,1063,1073,1103,1119,1094,1054,1070,1075,1030,991,968,918,888,858,836,753,806,789,792,840,827,584,573,483,470,401,399,377,386,347,344,253,214,185,156,131,403\nSunderland,E08000024,male,1391,1306,1420,1515,1543,1550,1476,1581,1558,1687,1673,1604,1617,1652,1588,1509,1535,1504,1522,1377,1419,1487,1495,1555,1585,1574,1584,1620,1695,1750,1835,1741,1730,1719,1665,1732,1671,1602,1602,1651,1582,1639,1524,1403,1346,1441,1536,1554,1714,1884,1954,1826,1918,1919,1895,1878,2016,1962,1978,1910,1914,1836,1884,1904,1795,1589,1614,1576,1468,1502,1461,1394,1451,1586,1457,1093,1043,971,878,728,717,719,683,637,582,411,402,348,308,264,677\nGateshead,E08000037,male,920,1020,966,1068,1089,1119,1165,1098,1114,1174,1249,1209,1109,1074,1042,1057,1020,990,1007,1037,983,920,1064,1127,1180,1266,1224,1255,1303,1280,1278,1325,1254,1327,1320,1346,1270,1304,1266,1226,1300,1243,1174,1105,1061,1117,1113,1139,1168,1377,1347,1351,1363,1393,1425,1409,1437,1385,1408,1425,1273,1281,1241,1263,1157,1104,1126,1051,993,976,964,1017,1018,1110,1053,759,772,686,580,531,568,557,563,483,406,322,301,270,242,215,538\nHalton,E06000006,male,660,725,729,716,785,781,763,784,840,876,802,783,820,860,819,836,805,771,680,622,601,734,722,661,695,714,745,786,772,837,827,749,773,851,757,814,837,858,803,889,775,812,772,746,802,823,796,768,807,897,933,943,864,873,869,880,914,917,892,905,801,785,830,776,727,704,701,699,704,661,688,701,673,696,654,492,432,402,410,334,301,276,252,241,204,181,167,132,109,79,245\nWarrington,E06000007,male,1016,1090,1106,1089,1148,1232,1260,1250,1321,1327,1255,1389,1336,1333,1250,1261,1264,1211,1093,922,933,1035,1048,1114,1287,1201,1219,1242,1296,1340,1383,1372,1346,1386,1380,1411,1449,1405,1371,1364,1445,1417,1368,1288,1280,1318,1412,1414,1499,1573,1587,1547,1597,1637,1655,1665,1614,1561,1585,1473,1391,1336,1275,1197,1168,1140,1064,1049,1048,950,958,1040,1017,1051,1045,873,858,741,745,553,554,591,543,447,393,330,317,249,211,143,497\nBlackburn with Darwen,E06000008,male,944,1012,1035,950,1071,1137,1095,1092,1195,1178,1205,1201,1184,1206,1112,1169,1170,1202,1101,983,927,914,980,986,981,983,1005,1008,967,1037,1053,1011,1034,1014,993,1045,1048,989,1040,1044,1064,999,1010,1020,937,950,976,968,1018,1018,1018,1022,1092,1058,994,953,976,938,925,909,864,858,807,750,762,744,668,612,686,622,587,595,594,656,611,429,402,387,385,315,291,273,272,242,192,196,152,128,118,90,268\nBlackpool,E06000009,male,711,721,765,788,732,822,797,796,834,798,758,822,863,821,810,818,834,805,718,670,689,644,730,791,840,735,761,821,830,910,914,944,889,914,909,868,834,842,820,800,812,829,757,707,747,769,766,831,895,1030,1007,1066,1058,1068,1135,1124,1133,1124,1123,1066,1046,1020,960,922,883,896,768,776,722,699,745,681,771,834,828,603,611,569,512,414,395,392,396,325,293,242,215,172,152,127,430\nCheshire East,E06000049,male,1934,2014,1934,2224,2169,2343,2027,2247,2393,2357,2409,2387,2433,2361,2255,2287,2347,2135,1885,1431,1462,1593,1932,1883,2005,2061,2108,2174,2255,2234,2464,2404,2275,2456,2380,2489,2418,2307,2367,2423,2441,2467,2331,2314,2260,2274,2552,2493,2700,2885,2879,2863,3021,3113,2892,3053,3077,2983,2961,2939,2795,2637,2538,2450,2307,2237,2249,2222,2136,2139,2154,2227,2253,2444,2495,1788,2015,1772,1554,1304,1229,1188,1135,1027,898,819,725,571,529,444,1538\nCheshire West and Chester,E06000050,male,1595,1755,1824,1872,1934,1956,1944,2081,2123,2100,2105,2106,2120,2110,2115,2017,1949,2000,1759,1693,1713,1843,1888,1997,2057,1948,2122,2169,2076,2283,2298,2305,2173,2180,2027,2222,2287,2142,2108,2219,2135,2165,2100,1849,1885,2061,1990,2178,2434,2471,2557,2577,2532,2616,2476,2611,2588,2690,2686,2455,2407,2224,2215,2168,2080,2014,1941,2077,1921,1835,1874,1846,1936,2088,2036,1553,1657,1482,1309,1094,1079,1034,988,827,744,631,567,459,409,359,1181\nAllerdale,E07000026,male,420,406,444,463,483,482,476,455,508,489,553,566,589,540,538,513,537,516,434,417,367,426,482,471,486,434,528,515,549,559,578,511,492,495,471,533,486,499,497,498,528,523,481,484,462,443,518,549,628,619,745,673,737,726,837,761,786,774,727,730,736,713,720,691,642,621,609,599,620,619,613,613,678,682,670,495,492,422,416,357,364,340,281,262,259,216,182,150,138,132,315\nBarrow-in-Furness,E07000027,male,362,350,394,341,383,372,364,375,379,363,362,383,409,361,376,398,384,369,312,371,349,323,430,393,416,412,445,490,432,459,451,435,466,456,413,401,395,423,418,354,358,370,350,338,317,357,366,370,401,454,483,448,478,523,529,515,519,524,522,493,496,478,402,456,380,377,357,379,386,359,360,353,392,430,439,297,304,269,292,222,222,205,194,161,134,124,80,81,70,58,180\nCarlisle,E07000028,male,486,580,533,573,586,606,629,596,603,686,622,670,612,625,563,598,612,613,544,472,512,509,576,578,649,620,642,704,649,729,679,669,669,692,670,683,702,672,658,671,656,609,606,588,560,569,659,655,740,784,775,743,800,757,770,812,828,835,833,773,835,789,799,725,653,626,653,663,633,590,651,626,629,615,664,459,445,441,420,347,314,319,283,270,220,228,158,158,152,120,300\nCopeland,E07000029,male,311,276,319,328,362,335,348,358,407,417,378,371,375,362,384,382,349,343,351,274,284,322,333,354,368,382,386,412,402,401,339,367,407,383,359,411,346,357,401,393,345,348,322,316,335,352,346,411,413,468,439,491,497,483,547,576,588,538,602,548,539,550,528,492,500,482,443,454,378,419,423,418,440,459,445,287,382,282,252,268,198,224,154,181,155,139,110,84,80,75,200\nEden,E07000030,male,203,247,228,199,236,242,253,259,292,273,278,304,300,274,294,301,307,324,242,193,227,232,227,254,281,266,258,240,283,271,299,270,272,266,289,249,286,288,265,295,308,293,271,239,272,319,308,291,372,372,395,385,431,451,452,419,525,497,457,462,435,496,417,447,399,365,410,398,342,405,420,361,374,412,392,314,298,290,254,205,206,206,198,167,145,128,107,83,91,92,198\nSouth Lakeland,E07000031,male,350,344,394,376,452,461,444,481,485,452,477,529,558,559,594,552,609,614,534,465,368,444,475,493,487,502,486,485,544,504,566,578,521,507,489,516,517,542,521,517,539,529,509,491,542,519,597,637,600,728,730,784,753,760,772,842,815,872,851,826,815,833,807,781,736,690,769,738,704,677,665,732,789,864,834,647,618,602,509,457,413,418,365,366,290,294,215,217,174,153,489\nBurnley,E07000117,male,557,594,585,569,660,657,591,623,641,645,658,645,650,683,638,599,617,570,550,502,509,499,471,589,538,545,549,594,615,667,701,596,659,666,627,678,657,638,603,582,558,588,544,566,571,537,554,551,548,637,626,628,685,647,619,590,644,617,620,652,580,554,624,560,508,481,462,456,480,417,424,414,481,506,466,357,342,326,290,235,251,202,193,183,143,123,114,66,85,63,211\nChorley,E07000118,male,575,553,600,641,713,705,687,690,740,762,773,701,719,675,706,722,690,635,538,487,466,512,576,609,604,616,638,644,672,723,762,710,739,783,786,754,792,779,736,813,819,808,712,693,690,770,805,773,834,875,960,893,895,879,889,886,914,886,791,830,819,733,710,738,661,578,622,699,630,599,616,653,685,723,759,535,560,478,491,369,306,340,272,279,222,179,177,133,131,106,264\nFylde,E07000119,male,311,328,360,350,351,354,382,387,414,429,426,421,398,394,418,428,440,426,346,322,285,338,325,363,377,351,382,409,370,392,425,415,428,426,431,404,465,446,475,450,427,445,421,395,374,388,438,439,490,546,553,542,617,599,668,600,624,667,653,686,640,638,607,641,598,560,596,594,534,543,539,506,594,635,600,524,495,483,443,328,287,293,278,264,234,222,172,174,123,125,369\nHyndburn,E07000120,male,491,497,526,518,527,463,514,532,544,556,570,554,536,486,529,562,617,555,478,426,426,442,442,436,499,512,491,519,544,551,532,561,532,561,564,537,523,509,473,483,486,472,448,421,451,472,473,507,467,543,597,596,633,622,616,551,558,532,564,533,499,468,467,430,436,430,388,378,393,429,398,392,426,468,428,315,313,273,281,233,183,192,152,168,147,140,100,76,62,70,177\nLancaster,E07000121,male,614,707,709,687,723,704,695,764,788,794,789,792,763,801,772,756,747,716,1230,1837,1851,1625,1250,969,906,755,805,765,801,801,853,754,821,833,740,781,915,891,787,782,835,807,755,725,677,697,771,787,788,863,904,927,947,884,981,913,1050,950,935,925,911,877,877,815,767,749,778,739,725,731,725,727,792,776,861,608,540,573,528,445,393,378,337,377,291,245,216,197,173,146,435\nPendle,E07000122,male,558,658,593,602,642,660,664,614,734,640,721,713,701,679,686,639,646,581,540,508,498,549,570,544,574,487,479,565,538,598,590,619,638,608,657,601,635,604,650,659,610,641,548,568,530,587,554,576,617,656,594,632,614,642,597,631,611,589,647,613,555,529,548,545,510,472,450,526,490,471,448,511,456,540,483,350,361,336,305,247,233,197,190,172,183,121,134,107,88,55,253\nPreston,E07000123,male,883,919,870,875,972,981,898,920,933,935,987,963,961,961,937,934,957,898,997,1164,1156,1208,1312,1386,1295,1165,1157,1092,1056,1135,1074,1032,1004,1042,1051,1007,987,1020,960,939,987,1015,882,854,852,861,868,949,961,984,958,1005,905,924,990,952,979,916,951,935,903,775,776,699,693,671,631,591,604,559,569,544,616,543,517,425,389,382,361,330,274,292,268,272,208,219,180,149,106,108,335\nRibble Valley,E07000124,male,246,268,265,307,293,291,292,314,320,341,352,359,419,353,388,369,401,389,309,221,265,257,287,302,300,285,296,294,272,295,322,286,331,326,313,297,348,288,351,293,316,323,317,278,323,326,370,394,395,428,486,464,530,503,476,509,518,481,518,514,507,445,439,460,449,377,371,399,376,339,332,374,402,431,411,358,352,274,264,193,237,193,177,166,152,131,126,123,76,79,210\nRossendale,E07000125,male,350,374,418,411,420,419,445,427,465,462,466,475,451,459,485,438,413,405,403,317,294,329,317,350,340,363,422,387,400,395,434,427,438,455,423,428,414,430,415,405,435,439,394,407,384,425,433,476,486,487,536,546,577,553,527,568,517,527,529,528,454,484,448,438,398,402,362,408,380,334,362,382,395,443,370,304,258,249,236,184,178,165,148,148,123,102,89,71,70,47,179\nSouth Ribble,E07000126,male,539,532,547,572,613,622,670,645,672,670,674,689,686,654,632,608,676,566,572,453,504,475,527,584,566,585,529,614,615,640,714,684,644,720,672,639,653,705,649,595,688,656,652,625,652,622,729,712,712,851,838,772,829,807,835,855,879,840,831,758,773,710,680,677,672,652,584,630,578,613,596,606,615,699,677,475,491,485,435,330,315,342,307,273,245,203,198,147,115,97,334\nWest Lancashire,E07000127,male,473,518,547,580,602,567,585,599,647,630,674,645,700,703,672,676,634,663,886,1095,950,836,661,656,631,555,602,613,593,597,706,617,601,636,660,598,602,583,620,594,601,628,557,580,588,596,631,686,710,791,836,808,806,847,855,916,962,878,856,801,788,752,752,753,675,651,617,675,611,643,639,683,653,696,671,518,539,504,457,395,393,325,320,317,289,228,198,150,132,117,349\nWyre,E07000128,male,481,475,505,526,524,603,605,555,572,585,632,645,585,632,582,557,709,696,556,473,489,459,487,494,590,485,524,529,533,547,578,574,572,553,584,522,587,551,524,590,591,600,504,476,483,522,592,613,645,702,736,735,817,789,798,850,879,874,856,833,828,839,768,777,809,719,764,769,709,703,755,767,794,848,808,623,684,612,583,478,456,449,425,378,313,315,268,203,189,151,481\nBolton,E08000001,male,1790,1893,1820,1832,2034,1926,2099,2085,2146,2202,2149,2137,2204,2168,2085,2088,2021,2039,1835,1654,1622,1655,1699,1802,1744,1625,1645,1721,1723,1771,1880,1804,1996,1857,1742,2012,2017,1876,1959,1764,1931,2008,1794,1749,1773,1719,1782,1915,1953,2064,1994,2058,2082,1927,2047,2060,1924,1928,1830,1768,1780,1629,1569,1623,1480,1391,1354,1390,1378,1342,1270,1353,1337,1419,1374,1011,1052,984,904,758,672,651,627,593,433,394,331,280,248,200,654\nBury,E08000002,male,1079,1207,1205,1100,1184,1268,1275,1242,1331,1320,1323,1295,1377,1324,1232,1338,1330,1246,1093,931,888,911,995,1020,1033,1017,1060,1105,1201,1209,1301,1274,1296,1244,1298,1296,1291,1265,1218,1367,1274,1245,1219,1085,1085,1131,1231,1190,1330,1313,1295,1252,1341,1321,1362,1362,1385,1360,1346,1232,1178,1216,1107,1118,1041,923,889,943,919,860,912,930,928,1030,976,719,734,671,593,486,461,507,418,394,323,303,242,199,171,129,439\nManchester,E08000003,male,3206,3643,3404,3373,3637,3649,3685,3714,3841,3779,3808,3801,3770,3671,3555,3376,3418,3149,4551,6426,6661,6242,5882,5655,5534,5378,5368,5238,5019,5101,5239,4851,4611,4859,4283,4449,4336,3996,4043,3924,3970,3869,3441,3371,3207,3320,3201,3163,3077,3142,3156,3148,3204,3033,3043,2876,2887,2604,2653,2401,2356,2235,2151,2146,2009,1824,1831,1597,1620,1474,1509,1337,1406,1359,1223,894,966,830,731,746,660,582,583,528,472,391,369,273,244,211,614\nOldham,E08000004,male,1631,1547,1609,1665,1742,1823,1706,1665,1863,1734,1802,1941,1751,1814,1811,1864,1743,1709,1565,1522,1293,1397,1482,1398,1496,1393,1387,1393,1520,1482,1500,1532,1599,1601,1455,1574,1637,1511,1468,1496,1598,1546,1376,1416,1348,1489,1417,1462,1490,1583,1641,1644,1674,1563,1632,1580,1481,1502,1401,1421,1447,1296,1224,1205,1117,1037,1098,1108,1033,991,970,962,1011,1093,1032,699,733,812,636,552,501,542,483,476,367,284,256,218,158,145,449\nRochdale,E08000005,male,1407,1466,1506,1502,1687,1539,1529,1595,1636,1661,1631,1622,1635,1664,1572,1532,1565,1432,1322,1149,1202,1204,1217,1169,1269,1236,1362,1372,1372,1408,1472,1489,1500,1541,1446,1479,1512,1403,1409,1419,1394,1466,1350,1290,1283,1296,1366,1358,1469,1508,1526,1451,1523,1490,1579,1463,1477,1412,1473,1355,1310,1259,1214,1171,1120,1116,1046,1137,1085,1026,976,956,961,1022,1009,689,733,664,629,499,430,464,431,354,328,273,217,193,164,134,445\nSalford,E08000006,male,1857,1807,1792,1661,1832,1719,1618,1711,1720,1759,1770,1678,1640,1649,1557,1461,1463,1475,1556,1853,2130,2013,2293,2277,2399,2548,2540,2542,2773,2746,2638,2587,2670,2389,2262,2344,2234,2036,2155,1859,1796,1802,1611,1492,1650,1556,1507,1431,1447,1648,1579,1443,1622,1544,1547,1602,1547,1581,1595,1427,1384,1320,1288,1261,1153,1060,974,1005,946,830,923,935,924,991,1044,716,704,640,603,552,452,502,476,418,359,330,280,230,188,152,453\nStockport,E08000007,male,1564,1623,1755,1747,1769,1837,1698,1909,1912,1774,1914,1836,1831,1834,1876,1758,1842,1627,1469,1138,1158,1209,1330,1547,1523,1541,1580,1658,1587,1771,1875,1784,1881,2067,1891,1996,1943,1911,2024,1889,2038,2080,1906,1728,1793,1822,1833,1805,1908,2076,2131,1954,2022,1970,2062,2005,2125,1993,2004,1881,1847,1730,1700,1659,1675,1625,1496,1557,1408,1368,1444,1368,1480,1607,1513,1125,1167,1016,1053,827,823,810,709,710,628,556,519,398,367,291,901\nTameside,E08000008,male,1337,1430,1458,1413,1540,1399,1444,1469,1567,1588,1578,1533,1523,1493,1448,1384,1382,1294,1286,1104,1004,1047,1278,1191,1353,1365,1308,1412,1403,1606,1535,1586,1558,1576,1474,1666,1542,1543,1498,1372,1480,1432,1426,1306,1430,1327,1381,1418,1504,1601,1690,1698,1632,1610,1750,1700,1717,1610,1611,1489,1566,1365,1355,1361,1205,1219,1013,1080,1111,1121,965,1098,1111,1212,1164,771,854,761,732,535,519,525,453,418,373,355,261,182,197,157,441\nTrafford,E08000009,male,1236,1279,1376,1411,1486,1617,1576,1664,1656,1785,1736,1739,1679,1625,1608,1560,1522,1490,1277,955,865,984,1140,1177,1214,1153,1236,1221,1305,1368,1327,1344,1374,1458,1424,1617,1629,1690,1626,1647,1782,1803,1605,1598,1521,1569,1605,1589,1600,1763,1658,1623,1635,1582,1580,1600,1656,1613,1553,1398,1369,1347,1310,1266,1173,1159,1086,1071,977,991,988,968,995,1093,970,752,786,744,684,561,508,553,552,494,429,400,348,293,296,183,649\nWigan,E08000010,male,1716,1749,1777,1921,1965,1977,1954,1960,1939,2048,2107,2152,2031,2067,1917,1960,1961,1901,1751,1486,1654,1692,1705,1763,1865,1839,1897,2035,2089,2144,2291,2250,2227,2251,2196,2127,2228,2157,2099,2123,2090,2067,1929,1781,1864,1876,2087,2039,2210,2593,2498,2414,2498,2490,2582,2401,2523,2305,2228,2230,2174,1904,2008,1885,1757,1713,1640,1696,1575,1611,1655,1698,1721,1918,1794,1417,1393,1288,1252,1065,916,883,788,630,608,477,408,311,254,244,634\nKnowsley,E08000011,male,907,990,1051,1015,1006,1016,964,963,985,1003,983,954,894,946,957,941,937,841,808,732,787,783,829,843,909,919,977,991,989,1082,1080,1154,1044,1046,1043,993,1057,1023,906,898,849,886,796,731,722,746,801,853,882,893,1006,958,1009,989,1056,1069,1131,1150,1114,1078,1094,1079,970,1022,927,876,838,784,787,657,679,673,666,628,640,439,438,407,346,322,320,318,304,281,239,242,162,185,131,116,316\nLiverpool,E08000012,male,2468,2671,2786,2750,2804,2826,2742,2620,2771,2721,2702,2550,2563,2502,2551,2460,2464,2465,3523,5477,5665,5524,4660,3981,3878,3751,3724,3755,3764,3792,3939,3693,3735,3757,3422,3462,3458,3222,3083,3064,3078,3059,2714,2486,2435,2623,2499,2552,2678,2949,2860,2813,2953,2800,2884,2694,2940,2927,3037,2908,2877,2762,2633,2619,2422,2385,2120,2202,2134,2029,2001,1836,1853,1875,1924,1368,1287,1281,1069,1023,948,961,851,771,717,585,484,436,416,288,836\nSt. Helens,E08000013,male,910,965,1029,983,1081,1052,1033,1052,1071,1129,1097,1088,1085,1120,1008,1054,1015,1065,870,816,857,886,975,977,1039,991,1025,1122,1125,1221,1271,1182,1153,1196,1117,1204,1080,1163,1107,1172,1111,1127,1110,960,1017,1071,1152,1145,1254,1265,1385,1274,1351,1300,1333,1326,1372,1313,1288,1273,1239,1198,1133,1144,1030,1011,944,954,964,947,989,928,1011,1078,1022,781,807,707,683,568,488,504,478,436,377,359,288,212,206,168,449\nSefton,E08000014,male,1249,1410,1317,1444,1475,1508,1540,1532,1618,1535,1647,1596,1552,1590,1515,1531,1585,1559,1320,1218,1284,1317,1390,1535,1411,1455,1437,1444,1492,1673,1690,1601,1614,1660,1689,1689,1704,1534,1595,1679,1628,1658,1569,1414,1349,1415,1496,1551,1748,1869,1941,1882,1984,1980,2066,1926,2139,2155,2185,2064,2124,1981,1850,1827,1786,1650,1728,1649,1532,1608,1407,1518,1493,1698,1758,1170,1266,1189,1045,916,908,836,846,759,689,648,567,454,399,310,979\nWirral,E08000015,male,1520,1584,1747,1776,1837,1906,1896,1849,1973,2113,1922,2021,1962,1950,1955,1930,1904,1901,1631,1436,1423,1345,1572,1592,1706,1678,1635,1750,1802,1812,1983,1857,1821,1929,1804,1765,1796,1852,1798,1950,1864,1843,1763,1619,1767,1739,1731,1788,2029,2214,2261,2102,2166,2311,2309,2249,2300,2311,2222,2397,2273,2141,2132,2062,1948,1840,1783,1920,1718,1789,1860,1862,1739,1896,1803,1320,1403,1345,1153,945,936,951,831,750,658,619,516,444,394,330,1046\n\"Kingston upon Hull, City of\",E06000010,male,1592,1574,1614,1621,1765,1725,1714,1701,1883,1825,1789,1653,1724,1657,1754,1538,1715,1486,1564,1720,1950,2014,1900,2073,1842,1807,1965,2034,2059,2044,2111,2012,2083,2017,1976,2040,1876,1836,1721,1935,1716,1655,1596,1539,1589,1693,1570,1534,1765,1775,1793,1707,1755,1757,1823,1773,1821,1697,1637,1737,1589,1499,1525,1465,1370,1265,1220,1288,1190,1133,1130,1012,1103,1150,1178,730,770,604,670,509,458,504,517,412,377,336,309,203,199,153,522\nEast Riding of Yorkshire,E06000011,male,1358,1512,1540,1616,1740,1686,1786,1762,1850,1930,1920,1878,1854,1922,1892,1811,1861,1979,1647,1409,1322,1432,1542,1623,1577,1606,1649,1689,1719,1760,1794,1718,1723,1864,1751,1749,1722,1783,1789,1791,1756,1835,1746,1673,1740,1811,1936,2005,2204,2436,2413,2417,2466,2552,2569,2619,2661,2737,2711,2605,2567,2490,2489,2460,2320,2339,2240,2292,2216,2198,2328,2308,2300,2549,2712,1920,1892,1749,1556,1329,1231,1219,1195,1091,956,817,665,640,548,440,1343\nNorth East Lincolnshire,E06000012,male,779,883,832,876,941,919,964,945,957,1030,1029,998,966,970,1006,1010,936,874,834,681,722,795,836,831,858,859,882,865,946,972,1026,999,1015,1043,994,988,926,843,887,929,867,862,815,779,768,852,879,944,942,1087,1055,1086,1044,1125,1112,1087,1176,1151,1150,1190,1101,1039,951,981,946,907,887,884,807,830,832,814,808,883,962,610,657,572,562,501,431,432,392,384,343,286,307,250,216,147,477\nNorth Lincolnshire,E06000013,male,773,824,821,890,925,930,916,964,1005,1044,986,1078,1056,1038,1022,1032,1043,937,878,737,800,829,846,904,851,992,915,906,1016,1029,1048,1054,991,1069,1034,1052,1092,1032,959,958,994,946,895,849,897,919,967,946,1083,1155,1191,1220,1255,1280,1255,1280,1378,1297,1359,1206,1216,1174,1145,1113,1054,1025,961,986,935,982,937,976,977,1081,1027,729,784,715,659,546,482,499,456,438,367,336,334,234,215,156,518\nYork,E06000014,male,864,843,916,864,923,998,999,1001,1056,1021,1101,1051,1067,1035,1025,919,1094,1002,1611,2493,2366,2316,1826,1539,1395,1284,1319,1280,1245,1201,1300,1274,1244,1237,1226,1195,1257,1220,1205,1308,1209,1199,1202,1127,1096,1037,1124,1178,1211,1323,1334,1270,1319,1259,1276,1289,1301,1314,1248,1221,1170,1081,1111,1139,1014,978,934,958,917,896,957,939,950,999,1054,795,770,677,625,511,539,496,499,457,418,385,282,263,228,181,633\nCraven,E07000163,male,210,215,241,259,232,272,289,256,282,278,290,311,328,319,289,302,302,297,303,203,212,209,252,276,244,232,250,239,272,266,287,268,306,272,259,272,246,263,276,264,363,321,262,260,282,310,291,309,374,402,422,402,441,463,444,415,478,459,446,453,462,442,408,440,399,408,417,446,414,361,356,386,396,455,430,291,335,305,322,236,193,199,183,176,164,142,139,92,88,81,209\nHambleton,E07000164,male,322,365,424,410,453,418,452,425,491,462,468,498,460,469,401,464,490,476,389,392,356,416,386,460,479,464,427,456,471,458,463,465,450,445,413,445,437,378,406,472,492,456,443,402,438,441,463,485,521,530,619,628,683,694,723,772,753,756,720,709,760,716,688,645,626,605,599,619,628,614,641,616,665,698,670,513,568,535,456,357,286,353,317,331,242,246,199,182,148,121,391\nHarrogate,E07000165,male,691,682,762,765,842,880,817,794,844,910,1037,918,1002,1012,964,1017,1351,1656,865,610,585,608,717,754,799,754,765,837,805,862,858,883,797,853,858,888,908,870,874,983,975,983,904,911,916,942,956,1037,1063,1174,1218,1172,1226,1209,1262,1269,1239,1280,1208,1249,1168,1125,1122,1009,1039,1014,967,920,858,820,824,927,916,1105,1101,731,817,735,647,535,525,519,517,449,407,369,279,280,242,202,628\nRichmondshire,E07000166,male,223,189,295,248,251,254,273,292,248,270,299,314,284,267,274,261,259,257,356,660,460,327,316,313,331,379,373,383,340,356,261,279,288,271,282,286,275,253,292,272,248,265,234,227,213,213,255,274,289,336,334,332,328,360,346,345,358,366,366,363,398,333,331,362,340,333,318,313,310,322,286,282,303,349,328,238,250,238,212,181,175,149,176,113,131,99,73,78,60,54,158\nRyedale,E07000167,male,216,213,227,213,260,285,277,261,266,298,287,311,271,303,299,302,301,299,254,206,177,192,262,247,241,264,230,254,243,253,292,253,257,273,236,282,255,247,263,300,269,310,267,257,232,281,296,324,329,335,401,344,367,405,417,438,431,482,442,459,453,432,398,417,384,392,397,382,377,373,413,395,400,422,411,323,339,321,288,214,202,205,186,175,137,149,117,122,89,76,246\nScarborough,E07000168,male,464,480,454,483,534,538,544,536,540,533,552,556,599,571,554,561,604,567,529,457,435,447,464,511,480,535,505,554,584,559,608,624,555,547,617,576,544,522,527,518,569,540,521,445,453,525,570,619,643,711,702,722,749,784,817,798,869,868,850,785,887,866,831,817,755,730,778,796,747,737,726,783,738,903,846,627,649,622,513,389,355,420,398,314,279,250,252,187,152,139,442\nSelby,E07000169,male,470,487,531,532,564,566,491,553,550,545,558,528,531,528,547,522,472,526,437,387,321,397,420,444,450,467,487,547,492,560,575,604,590,585,565,592,586,560,522,542,537,629,535,490,498,525,554,566,643,635,685,670,705,679,703,735,741,712,673,612,704,622,667,591,569,535,545,516,481,473,510,500,512,555,556,415,393,352,353,279,223,245,199,220,180,153,137,126,99,86,224\nBarnsley,E08000016,male,1282,1421,1327,1417,1463,1413,1394,1423,1505,1563,1536,1491,1434,1495,1455,1335,1388,1332,1179,1055,1060,1076,1272,1347,1442,1384,1507,1501,1675,1783,1720,1625,1631,1634,1586,1577,1566,1540,1566,1554,1484,1496,1314,1231,1240,1337,1433,1469,1601,1739,1845,1729,1950,1951,1841,1789,1852,1732,1755,1729,1602,1560,1580,1499,1439,1396,1284,1385,1299,1240,1257,1267,1228,1365,1259,991,1056,935,815,716,647,577,539,521,413,378,338,287,232,163,537\nDoncaster,E08000017,male,1779,1828,1731,1747,1786,1872,1751,1835,1881,1923,1892,2024,1909,1841,1823,1726,1787,1769,1543,1440,1474,1511,1634,1801,1900,1827,1818,2058,2101,2329,2226,2160,2070,2254,2081,2043,2139,1968,2008,2003,2037,1876,1819,1713,1678,1768,1707,1933,1940,2076,2091,2211,2133,2099,2154,2164,2194,2240,2238,2090,2084,2062,1853,1863,1774,1850,1599,1620,1566,1546,1561,1485,1569,1661,1498,1214,1235,1160,1008,873,793,777,690,640,580,531,446,376,346,314,801\nRotherham,E08000018,male,1454,1454,1477,1545,1637,1547,1484,1589,1672,1713,1732,1645,1759,1752,1631,1517,1583,1562,1475,1293,1272,1335,1388,1485,1586,1488,1539,1579,1652,1720,1804,1724,1678,1758,1687,1647,1731,1669,1644,1657,1600,1594,1418,1394,1403,1413,1515,1536,1808,1880,1930,1892,1934,1949,1968,1904,1884,1869,1837,1820,1760,1611,1528,1610,1479,1380,1422,1411,1340,1335,1314,1343,1340,1447,1354,1092,1309,957,871,769,709,738,647,599,537,437,376,317,285,204,631\nSheffield,E08000019,male,2832,3057,3014,3131,3207,3272,3244,3173,3437,3363,3337,3288,3332,3389,3102,3177,3140,3160,4031,5620,5533,5846,5123,4803,4310,4144,4027,3970,3890,4066,4001,3798,3809,3730,3685,3640,3435,3509,3335,3161,3416,3460,3181,3008,3040,3063,3115,3101,3385,3326,3522,3570,3710,3692,3501,3585,3499,3337,3470,3286,3177,2970,2912,2927,2680,2583,2404,2579,2380,2224,2220,2312,2294,2515,2468,1712,2025,1816,1643,1369,1294,1310,1202,1131,1038,828,765,651,468,435,1480\nBradford,E08000032,male,3379,3652,3673,3633,3825,3957,3805,4071,4003,4139,4175,4390,4276,4258,4110,3953,4191,4027,3782,3402,3118,3247,3449,3229,3346,3198,3265,3352,3442,3487,3521,3586,3559,3593,3598,3708,3614,3658,3700,3595,3731,3681,3578,3213,3266,3205,3296,3363,3381,3600,3455,3446,3396,3453,3377,3150,3347,3071,3235,3092,2992,3011,2775,2755,2675,2641,2371,2415,2385,2187,2125,2074,2134,2232,2131,1373,1468,1360,1279,1044,1049,1037,993,910,818,684,641,507,452,404,1223\nCalderdale,E08000033,male,1111,1139,1167,1172,1235,1276,1289,1292,1388,1326,1398,1349,1366,1340,1306,1286,1364,1309,1108,947,874,1008,1083,1108,1097,1123,1111,1200,1214,1133,1200,1225,1135,1233,1201,1215,1254,1249,1241,1206,1301,1292,1276,1207,1163,1216,1196,1298,1495,1557,1485,1518,1621,1488,1499,1583,1574,1485,1462,1345,1343,1267,1240,1279,1206,1112,1056,1102,1047,1006,1033,1001,1091,1126,1046,777,851,751,703,517,519,484,412,411,382,295,258,252,184,143,499\nKirklees,E08000034,male,2405,2492,2602,2555,2744,2702,2750,2826,2963,2901,3008,3026,2975,2905,2820,2885,2830,2859,2692,2544,2593,2498,2651,2586,2548,2659,2471,2479,2615,2636,2706,2624,2615,2786,2675,2804,2702,2731,2647,2629,2775,2843,2719,2463,2493,2555,2594,2752,2843,3066,3132,3043,3113,3099,2986,3025,2922,2788,2747,2712,2596,2434,2403,2452,2263,2147,2058,2093,2005,2037,2008,1996,2009,2154,2082,1554,1634,1394,1220,1090,975,981,984,870,728,682,551,435,388,313,1001\nLeeds,E08000035,male,4564,4655,4911,4846,4970,5194,4983,4907,5300,5124,5124,5049,5011,4706,4784,4571,4464,4383,5243,7106,7125,7291,6679,6403,5991,6029,5914,5958,5892,5835,6322,5742,5816,5754,5746,5716,5465,5617,5392,5492,5594,5387,5047,4752,4687,4939,4635,4893,5099,5118,5298,5036,4979,4814,4966,5020,4966,4704,4657,4348,4268,4053,4017,3886,3691,3454,3228,3405,3220,3150,3111,3137,3232,3379,3269,2381,2480,2297,2101,1744,1578,1623,1578,1451,1336,1213,981,864,740,588,1907\nWakefield,E08000036,male,2018,2071,2081,2016,2167,2130,2091,2163,2219,2188,2234,2160,2137,2124,2019,2054,1972,2044,1658,1486,1596,1689,1722,1872,2108,2102,2196,2283,2429,2500,2499,2482,2433,2433,2438,2472,2413,2312,2276,2198,2262,2239,1927,1936,1930,2078,2140,2156,2386,2563,2643,2637,2605,2611,2579,2609,2532,2478,2459,2335,2281,2195,2135,2129,1902,1934,1775,1850,1697,1684,1727,1720,1802,1843,1790,1390,1422,1338,1156,904,858,836,796,721,628,529,453,394,326,259,767\nDerby,E06000015,male,1547,1457,1596,1491,1652,1616,1752,1674,1748,1745,1764,1812,1701,1814,1691,1571,1669,1741,1645,1964,1810,2085,1944,1837,1792,1951,1893,1793,1820,1910,1913,1862,1736,1811,1675,1830,1728,1715,1807,1815,1872,1542,1520,1515,1664,1502,1645,1737,1620,1776,1786,1673,1771,1808,1637,1587,1695,1616,1538,1531,1464,1464,1285,1254,1139,1179,1049,1187,1098,1076,1019,1067,1009,1089,1122,823,893,738,663,628,513,594,548,521,437,378,365,307,289,217,683\nLeicester,E06000016,male,2275,2326,2250,2309,2427,2426,2594,2480,2584,2639,2550,2597,2716,2708,2600,2550,2609,2301,2913,3676,4187,4034,3526,3069,3034,2721,2735,2682,2704,2655,2732,2647,2620,2589,2665,2540,2679,2649,2606,2737,2698,2532,2472,2275,2394,2330,2197,2144,2268,2240,2264,2303,2213,2122,2019,2033,1972,1910,1955,1791,1854,1909,1716,1651,1525,1485,1421,1470,1274,1252,1194,1122,1101,1096,966,757,713,702,664,500,498,504,484,425,381,333,327,235,212,224,647\nRutland,E06000017,male,134,176,145,192,172,202,197,223,211,229,217,251,228,314,362,317,346,388,301,173,167,211,258,217,287,234,230,258,289,266,248,219,285,221,227,233,190,242,228,278,249,277,239,233,235,248,210,225,251,287,308,270,278,276,293,308,262,306,301,261,277,280,273,242,255,239,215,257,260,234,259,268,257,280,311,203,246,189,215,162,155,133,145,134,101,109,96,73,72,57,192\nNottingham,E06000018,male,1731,1812,1829,1856,1950,1952,1964,1920,1986,1980,2022,1953,1912,2045,1775,1768,1663,1771,3737,6965,6517,5612,3705,2846,2495,2312,2289,2343,2444,2297,2435,2407,2304,2323,2111,2268,2293,1964,2013,1874,1934,1943,1816,1674,1764,1753,1770,1709,1842,1863,1849,1720,1706,1763,1752,1866,1702,1640,1706,1568,1547,1434,1381,1244,1278,1159,1130,1037,1011,966,1024,1002,916,962,913,725,711,640,590,490,480,460,438,436,351,331,294,253,222,180,617\nNorth Northamptonshire,E06000061,male,1931,2101,2091,2023,2245,2206,2237,2294,2327,2372,2382,2378,2430,2381,2346,2274,2259,2303,1924,1568,1657,1633,1764,1913,1965,1949,2119,2066,2338,2413,2373,2425,2460,2443,2402,2416,2336,2396,2413,2311,2494,2447,2226,2181,2159,2219,2272,2275,2387,2630,2630,2599,2685,2592,2718,2666,2594,2486,2386,2279,2235,2079,2014,1979,1854,1762,1755,1815,1643,1657,1657,1640,1714,1852,1837,1386,1404,1270,1135,977,842,794,807,717,585,560,454,372,334,303,844\nWest Northamptonshire,E06000062,male,2288,2356,2461,2504,2567,2601,2600,2633,2769,2834,2788,2797,2758,2799,2614,2473,2485,2463,2299,2232,2349,2438,2446,2550,2577,2552,2700,2675,2816,2989,3027,2997,2946,3221,2912,3029,2904,2878,2965,2871,3110,2988,2876,2679,2667,2637,2852,2904,2895,3021,3027,3033,3056,3033,2918,3033,2970,2917,2757,2748,2455,2390,2319,2242,2165,1980,1948,1949,1856,1811,1801,1919,1846,2183,2076,1545,1546,1423,1264,1109,963,862,873,804,681,588,528,443,415,356,1043\nAmber Valley,E07000032,male,554,592,608,614,742,670,633,700,705,706,739,728,685,702,679,694,708,634,601,567,536,573,601,636,669,671,707,676,735,758,821,718,717,753,699,715,653,746,709,687,695,759,721,616,696,693,812,805,913,964,977,941,974,1039,996,937,1047,957,998,937,868,836,839,801,832,797,701,743,682,763,739,786,790,803,829,606,650,561,556,441,372,349,378,277,248,222,201,139,173,132,343\nBolsover,E07000033,male,411,421,447,466,403,449,427,439,437,469,455,456,457,493,459,440,423,416,369,338,360,388,441,423,480,464,506,528,519,574,561,538,526,500,509,521,491,493,529,423,429,477,439,388,432,481,479,447,563,573,636,589,669,685,618,618,629,603,604,538,554,542,551,494,503,454,453,424,410,415,428,453,420,432,426,385,414,322,316,254,224,208,177,182,144,114,112,102,92,51,182\nChesterfield,E07000034,male,472,485,540,519,527,534,530,582,588,604,628,571,601,595,540,577,514,558,511,427,395,505,639,578,601,586,632,680,666,702,668,576,612,618,686,562,613,612,604,667,644,675,575,572,541,572,626,631,710,751,756,759,800,740,796,826,790,795,769,751,734,691,688,658,652,638,566,606,596,557,563,560,522,610,564,481,474,435,400,327,337,301,255,246,196,162,187,149,117,108,323\nDerbyshire Dales,E07000035,male,242,263,254,261,312,284,365,276,330,384,372,350,376,411,394,384,399,418,342,288,247,281,325,332,317,303,275,285,326,335,311,325,318,330,294,309,325,289,312,325,355,372,335,365,352,411,433,417,481,511,514,528,603,581,607,652,643,606,624,570,627,557,564,549,531,519,462,519,481,506,511,521,507,570,566,425,448,421,368,312,263,259,247,238,207,179,146,122,106,111,278\nErewash,E07000036,male,463,559,547,591,626,646,655,689,699,658,673,682,658,666,625,624,640,643,533,531,493,567,602,593,616,650,650,707,675,724,733,733,720,751,713,687,685,674,670,677,700,703,653,575,582,644,702,750,737,830,845,843,842,883,878,886,808,836,855,829,769,720,683,712,619,589,596,590,577,585,576,601,614,671,654,483,552,457,390,359,309,324,274,268,228,217,170,171,132,115,331\nHigh Peak,E07000037,male,379,456,423,452,467,453,485,448,522,522,525,521,532,574,500,499,529,509,446,307,364,393,464,498,466,426,466,450,492,519,577,496,477,550,526,510,509,507,500,519,550,485,511,467,492,465,579,544,640,675,714,696,720,771,762,733,744,775,744,760,699,630,686,658,617,583,514,568,545,534,521,544,524,590,585,439,423,390,331,286,253,264,232,193,185,150,136,97,84,93,242\nNorth East Derbyshire,E07000038,male,454,463,475,489,565,518,503,499,589,591,569,578,562,547,540,499,536,505,512,395,392,417,518,460,497,554,589,531,576,555,546,566,551,540,541,511,541,551,557,548,604,632,479,530,513,580,543,611,689,699,740,719,755,719,854,780,786,742,794,752,748,716,699,720,671,616,641,664,587,576,622,630,641,687,707,545,626,568,475,373,362,338,378,283,241,217,189,168,143,105,347\nSouth Derbyshire,E07000039,male,556,556,635,592,585,662,638,609,679,713,680,642,701,721,695,700,629,630,548,469,436,484,559,579,577,605,633,660,683,727,721,736,666,678,641,666,623,722,646,683,682,652,616,588,638,655,688,698,781,842,812,775,797,863,917,841,806,725,717,722,687,625,628,628,563,551,530,550,575,537,543,519,491,549,579,396,470,415,381,254,248,245,240,185,158,154,113,111,90,95,253\nBlaby,E07000129,male,500,559,606,626,661,626,645,641,671,680,592,605,631,684,603,631,613,589,522,435,425,453,512,528,516,569,571,565,625,661,665,658,653,717,640,654,688,665,657,650,693,660,571,608,580,592,645,608,690,681,764,691,711,727,744,686,725,674,681,706,685,627,639,600,592,531,517,529,526,512,514,532,512,611,566,410,483,419,383,297,266,275,283,226,238,207,158,152,142,96,289\nCharnwood,E07000130,male,858,863,973,1002,1014,1042,968,963,1029,1074,1070,996,987,1022,942,1061,966,1045,1804,2738,2289,2125,1972,1424,1153,1072,1059,1090,1091,1102,1201,1185,1115,1116,1119,1158,1206,1129,1052,1158,1157,1090,1039,998,990,993,1076,1057,1100,1202,1223,1238,1214,1162,1202,1189,1216,1167,1127,1086,1159,999,1054,976,1045,942,892,905,931,870,908,843,919,929,930,720,695,685,628,503,460,444,417,381,345,323,243,233,201,173,529\nHarborough,E07000131,male,448,482,499,510,507,559,528,583,528,556,586,604,649,647,582,652,663,645,524,388,399,431,433,513,504,491,545,452,505,530,536,534,545,576,485,563,556,507,540,564,643,602,590,540,563,589,624,617,701,754,788,690,773,741,803,744,750,732,709,745,763,632,645,612,551,617,507,532,531,540,528,529,550,604,622,455,482,452,414,319,277,304,283,237,227,194,175,156,123,110,331\nHinckley and Bosworth,E07000132,male,510,592,593,617,645,628,615,618,695,696,659,662,683,659,680,623,666,592,549,448,449,473,574,524,572,609,636,670,634,687,727,739,675,712,662,752,697,667,676,715,699,689,649,604,663,689,670,715,726,810,826,832,845,871,892,855,823,830,777,819,799,765,697,669,667,641,629,663,640,643,698,622,734,741,685,545,578,513,454,330,378,338,295,309,235,209,200,153,151,111,373\nMelton,E07000133,male,221,262,229,265,267,260,279,290,299,319,299,293,312,319,287,272,291,303,241,176,212,204,239,238,243,281,232,260,245,258,273,300,294,300,244,285,259,255,274,271,297,294,270,284,252,245,304,307,318,370,369,381,443,422,400,427,458,441,435,385,377,346,342,344,341,307,326,325,348,316,309,326,332,365,341,248,283,255,213,162,159,187,154,126,106,100,85,77,72,42,178\nNorth West Leicestershire,E07000134,male,554,547,581,588,564,589,578,549,618,627,619,648,603,624,627,615,617,597,499,477,462,525,596,587,598,603,567,634,640,673,689,656,659,629,621,608,672,619,613,649,645,652,587,560,625,620,650,707,748,812,798,790,801,834,802,771,792,786,723,735,693,666,666,606,589,572,561,572,540,586,577,558,573,597,659,462,516,428,383,314,277,289,249,227,177,155,148,104,102,85,246\nOadby and Wigston,E07000135,male,261,265,301,323,352,334,362,333,367,400,367,343,340,370,325,342,366,336,514,600,309,272,318,291,313,307,354,310,327,321,317,326,323,318,345,382,320,319,335,334,366,372,308,310,314,333,327,346,354,332,417,333,393,376,379,357,371,366,374,369,375,364,342,375,297,310,286,309,294,264,262,284,301,288,272,225,259,220,201,177,166,172,152,153,154,129,113,108,95,68,238\nBoston,E07000136,male,350,393,377,428,377,413,423,415,428,448,438,483,445,455,391,380,430,385,397,320,311,363,395,385,407,381,403,435,431,444,465,462,506,463,474,466,473,468,445,477,425,425,430,416,379,398,392,444,492,508,430,444,481,476,470,500,526,483,446,449,473,430,412,428,402,379,383,366,355,381,351,369,366,376,384,314,309,262,253,247,198,186,187,149,135,133,118,87,98,68,257\nEast Lindsey,E07000137,male,554,583,572,618,595,661,622,673,644,722,744,743,724,777,673,713,667,717,659,548,556,616,622,671,625,663,712,669,660,654,696,645,657,688,647,577,601,592,610,639,643,613,624,540,599,612,678,691,815,863,955,932,984,994,1018,1095,1104,1145,1147,1147,1113,1140,1090,1148,1104,1037,1091,1086,1134,1052,1145,1111,1098,1285,1324,1060,1022,943,834,701,633,569,521,521,466,401,305,280,239,211,655\nLincoln,E07000138,male,526,511,547,513,565,574,534,508,571,577,539,570,620,541,507,505,492,560,946,1645,1984,1652,1141,896,859,814,850,842,785,767,766,797,829,788,744,746,696,665,653,596,662,606,597,541,523,545,597,550,585,633,617,582,604,607,606,595,587,591,606,579,584,526,486,433,502,396,397,409,398,404,374,383,403,392,404,299,269,298,234,180,218,204,169,142,139,133,107,103,78,78,228\nNorth Kesteven,E07000139,male,508,507,538,606,671,663,660,634,640,747,662,675,692,624,628,642,651,690,581,523,506,539,604,635,663,660,688,631,677,685,701,696,686,723,631,633,731,690,674,639,660,734,651,574,561,612,681,685,781,858,818,821,892,887,889,887,894,932,919,867,809,754,741,712,695,644,710,666,600,671,644,708,631,828,793,596,646,553,494,465,427,409,396,383,278,249,237,198,137,137,399\nSouth Holland,E07000140,male,490,468,498,520,524,516,485,495,554,513,538,548,557,554,516,532,450,502,459,378,397,445,479,487,522,475,552,513,569,490,570,596,592,598,562,595,545,503,545,524,524,565,536,491,518,508,558,562,631,638,721,653,667,669,712,711,732,697,717,661,658,588,614,612,590,530,569,557,508,538,561,556,601,657,664,454,452,460,428,336,295,344,281,287,270,218,178,166,147,117,386\nSouth Kesteven,E07000141,male,654,653,669,741,762,834,831,815,812,881,892,870,893,928,839,838,832,825,675,590,521,558,645,649,714,725,719,754,744,720,719,754,823,811,768,715,753,755,794,822,872,845,777,762,748,860,825,890,944,1068,1047,1061,1075,1057,1046,1055,1138,1091,1084,977,1035,918,946,897,877,820,855,801,819,826,813,841,809,925,938,758,673,681,613,516,445,472,409,355,349,295,243,201,190,146,524\nWest Lindsey,E07000142,male,444,464,445,503,470,498,532,536,530,573,547,543,568,552,530,542,581,535,432,392,370,404,427,455,470,471,439,469,451,492,543,497,444,480,483,474,522,458,495,492,505,476,506,481,430,498,536,568,558,632,636,691,688,720,765,738,724,713,735,739,774,683,673,631,639,619,624,599,623,605,600,636,644,662,717,506,565,521,478,376,355,308,314,274,242,240,207,151,118,95,313\nAshfield,E07000170,male,628,712,664,772,738,784,734,793,828,862,814,752,762,725,759,753,747,685,644,548,603,610,667,667,731,674,703,724,782,815,810,832,846,869,746,870,756,759,783,753,793,757,709,697,687,727,691,805,831,878,931,893,955,959,922,947,948,911,965,864,819,839,744,705,715,648,634,618,640,664,632,648,649,672,633,492,557,524,506,383,346,360,305,271,223,206,172,150,120,97,325\nBassetlaw,E07000171,male,529,611,564,639,672,714,620,660,687,673,723,651,682,689,648,692,672,629,554,449,515,557,612,631,676,642,725,693,692,734,761,703,738,707,746,722,648,696,675,637,727,689,658,609,627,705,635,729,757,813,879,825,935,903,893,895,990,912,920,894,856,771,759,793,731,677,718,692,647,616,669,638,732,737,737,534,623,537,502,381,367,337,324,283,254,205,215,167,125,134,389\nBroxtowe,E07000172,male,470,549,560,547,584,574,616,597,630,677,636,662,589,641,584,556,520,491,578,671,677,650,677,641,612,665,699,724,700,727,772,715,729,705,753,733,712,691,643,662,634,666,643,592,614,627,656,668,693,712,823,738,771,832,813,802,771,789,749,673,728,675,658,642,635,627,589,593,596,568,598,582,630,684,713,473,542,488,448,340,369,306,305,289,238,187,191,178,153,126,358\nGedling,E07000173,male,551,585,626,664,638,691,658,648,707,706,742,722,699,716,717,630,685,633,557,467,448,507,528,588,602,603,645,691,666,698,688,676,709,746,690,733,664,735,722,713,727,758,726,668,682,672,678,734,784,813,863,785,886,867,836,860,874,832,833,784,821,696,723,675,667,644,619,606,653,651,630,642,670,702,708,488,514,439,438,374,328,310,337,307,261,216,204,185,136,126,356\nMansfield,E07000174,male,558,622,629,604,628,618,672,704,676,692,645,624,723,713,628,588,614,584,531,437,488,496,543,618,595,653,690,687,755,786,785,817,732,775,765,788,815,782,718,730,705,728,653,583,612,590,612,641,739,799,766,778,770,789,831,842,820,758,789,789,773,685,700,686,629,604,589,599,565,547,590,564,525,576,534,441,475,417,359,310,255,266,228,242,195,188,154,117,104,89,291\nNewark and Sherwood,E07000175,male,621,579,597,652,651,624,646,635,751,723,690,744,658,693,708,664,667,698,625,518,603,575,649,621,668,717,703,729,758,749,765,740,733,774,712,707,720,719,716,664,751,730,712,644,650,703,702,719,836,878,877,862,959,969,917,923,872,949,960,854,839,824,813,771,745,747,681,753,650,700,715,737,671,801,799,579,594,573,490,416,398,356,338,301,300,224,179,181,160,132,400\nRushcliffe,E07000176,male,543,586,599,645,645,683,698,705,724,770,762,761,727,748,709,713,734,669,595,516,658,661,598,641,637,639,553,630,611,630,654,617,629,683,680,709,639,703,723,747,818,723,761,719,748,685,829,783,824,892,857,823,902,842,859,841,874,892,820,815,814,736,758,700,664,617,614,605,612,663,640,656,617,696,732,500,556,514,454,365,351,333,312,282,296,227,210,190,160,165,418\n\"Herefordshire, County of\",E06000019,male,766,867,871,922,913,982,958,997,1028,1028,1076,1034,1034,1054,1036,1013,1036,987,910,781,751,827,878,909,910,962,954,930,948,1032,1036,1015,1029,1076,1002,984,999,1008,983,1059,1046,989,938,894,940,981,1067,1089,1129,1220,1236,1273,1306,1332,1439,1416,1378,1365,1398,1486,1360,1405,1317,1321,1251,1267,1166,1243,1192,1176,1206,1239,1276,1334,1300,1015,1023,1005,877,753,695,664,618,561,523,449,385,348,295,261,816\nTelford and Wrekin,E06000020,male,1036,1099,1083,1086,1133,1184,1113,1251,1257,1294,1221,1266,1302,1239,1198,1179,1164,1153,1024,1018,1095,1141,1144,1090,1085,1126,1081,1174,1150,1243,1285,1194,1216,1210,1183,1252,1238,1195,1158,1175,1120,1135,1091,1034,1041,1104,1187,1160,1234,1350,1369,1320,1334,1313,1339,1333,1245,1306,1147,1193,1109,1021,1046,983,898,914,920,882,900,909,827,929,873,846,843,620,714,666,576,507,442,422,379,357,315,245,215,208,149,131,400\nStoke-on-Trent,E06000021,male,1512,1559,1625,1546,1658,1711,1656,1729,1767,1751,1733,1737,1664,1762,1612,1564,1662,1427,1593,1680,1771,1776,1713,1745,1734,1536,1655,1655,1753,1845,1841,1856,1928,1872,1799,1837,1738,1766,1738,1718,1731,1607,1630,1410,1441,1503,1565,1494,1669,1693,1713,1750,1813,1666,1688,1700,1622,1623,1644,1613,1525,1445,1483,1354,1391,1303,1301,1201,1228,1130,1055,1149,1150,1251,1160,909,905,837,820,648,586,560,524,476,397,362,303,240,221,196,560\nShropshire,E06000051,male,1370,1435,1463,1482,1653,1696,1621,1637,1793,1619,1761,1853,1769,1715,1743,1786,1812,1894,1884,1480,1468,1598,1577,1784,1692,1707,1830,1770,1716,1729,1826,1772,1775,1856,1748,1776,1709,1799,1702,1602,1792,1701,1632,1543,1566,1711,1731,1859,2051,2400,2284,2255,2344,2327,2584,2472,2532,2488,2558,2530,2486,2258,2277,2151,2114,2076,2051,2178,1906,1975,1991,2041,2187,2215,2153,1777,1778,1745,1495,1244,1153,1170,1060,895,883,742,676,551,486,431,1285\nCannock Chase,E07000192,male,532,584,567,585,576,543,589,569,631,578,593,569,587,528,577,552,555,598,501,485,432,483,555,547,614,595,621,665,647,717,762,690,680,712,671,658,660,641,610,600,619,580,608,460,513,556,613,560,727,758,728,802,811,791,794,773,766,774,740,677,647,580,669,569,559,534,554,566,473,457,490,507,522,514,522,444,439,373,339,286,248,258,224,225,183,177,125,116,84,81,242\nEast Staffordshire,E07000193,male,702,719,704,740,775,776,755,725,811,765,795,805,803,756,682,759,757,767,651,617,587,644,692,708,740,790,803,798,844,924,958,869,899,936,772,883,850,801,810,799,869,839,780,692,700,715,739,769,877,866,920,854,904,915,893,873,896,785,866,853,809,796,741,756,699,679,625,598,614,577,597,591,603,616,571,450,468,529,371,358,304,307,263,263,231,172,191,138,120,95,327\nLichfield,E07000194,male,469,535,479,581,532,559,546,546,595,603,576,598,619,610,588,607,601,598,532,525,499,571,561,584,596,574,563,600,571,626,637,628,573,589,561,620,582,566,545,598,620,642,606,530,573,608,668,653,730,791,835,789,812,789,796,803,822,771,765,776,751,634,635,650,650,593,554,627,611,567,581,652,665,767,687,541,602,585,524,455,395,353,319,327,259,227,165,162,137,105,338\nNewcastle-under-Lyme,E07000195,male,557,576,569,618,643,625,684,675,635,714,647,702,714,662,632,671,758,697,730,988,947,969,856,754,727,646,677,652,676,736,732,708,756,734,759,741,727,689,680,681,711,710,634,677,647,676,714,709,768,867,895,878,872,831,881,868,885,872,831,875,871,765,767,808,743,650,675,722,639,646,658,665,734,732,739,543,588,542,468,393,369,348,344,307,297,248,216,154,166,141,377\nSouth Staffordshire,E07000196,male,491,459,477,530,578,547,512,546,568,583,558,581,544,589,539,564,626,586,513,531,517,569,622,699,627,655,632,619,646,630,655,604,676,650,681,653,619,677,631,634,624,694,614,520,571,571,629,686,724,755,798,809,836,860,902,858,903,850,813,905,826,823,767,737,744,640,722,665,672,626,686,710,692,750,729,554,583,608,539,482,403,451,388,364,293,283,228,158,155,124,368\nStafford,E07000197,male,624,711,698,631,745,737,729,745,831,805,782,739,777,791,765,748,696,722,633,488,546,572,694,685,770,739,710,828,765,810,842,857,837,887,782,821,882,805,819,818,861,874,771,757,739,734,877,881,959,979,1026,989,1036,1055,1025,1018,1060,990,961,1000,950,905,907,881,796,823,758,792,785,759,788,812,805,827,847,681,665,637,620,511,485,433,449,385,330,281,269,205,180,126,482\nStaffordshire Moorlands,E07000198,male,386,396,391,429,446,460,511,483,502,539,530,534,554,553,498,496,535,523,504,416,373,423,493,464,431,460,440,428,455,469,500,492,506,484,464,506,493,494,472,530,507,448,452,459,477,487,572,601,684,694,746,794,750,793,786,722,743,810,787,702,714,697,708,666,615,612,625,633,642,627,585,672,671,770,679,554,568,525,466,408,358,340,335,288,276,194,228,155,132,117,337\nTamworth,E07000199,male,464,451,434,487,499,476,420,479,518,507,506,534,523,501,429,482,500,454,401,392,374,414,410,478,446,444,501,494,504,558,576,565,533,567,544,509,507,551,509,473,516,494,467,422,420,443,447,482,508,586,615,569,633,567,566,562,518,485,483,442,475,471,415,424,441,423,419,431,415,386,359,408,437,431,414,301,344,302,242,229,161,195,164,147,146,117,83,81,52,38,147\nNorth Warwickshire,E07000218,male,287,333,315,337,338,368,331,363,397,371,373,348,369,350,367,325,389,357,323,298,287,323,298,356,359,345,366,354,386,399,428,369,396,419,373,419,381,376,350,328,349,339,358,300,346,364,401,400,432,471,475,492,552,461,528,556,508,469,516,484,442,453,441,437,412,394,346,397,345,359,367,368,366,421,389,298,321,317,269,219,182,196,183,161,142,118,104,93,80,64,172\nNuneaton and Bedworth,E07000219,male,761,785,811,799,835,863,802,810,857,847,880,846,832,832,785,771,724,744,639,606,604,637,765,761,772,854,799,844,829,922,1004,916,959,917,898,900,883,902,857,824,885,846,804,724,715,793,831,818,894,927,926,964,962,900,952,974,989,907,843,872,863,809,761,742,747,697,690,695,674,643,630,735,599,645,707,517,597,513,450,414,322,328,327,274,247,200,162,177,118,109,317\nRugby,E07000220,male,602,651,673,664,670,695,688,713,743,734,782,695,777,718,720,793,754,722,596,467,503,536,561,639,653,686,693,704,751,817,816,849,850,778,866,791,840,751,778,836,790,817,759,712,721,749,760,714,777,848,830,852,815,777,813,787,781,782,774,761,686,682,619,605,558,524,497,508,466,486,514,473,511,534,558,452,458,441,378,347,365,281,288,251,216,210,164,131,101,106,372\nStratford-on-Avon,E07000221,male,636,584,640,666,672,724,689,658,716,722,753,753,790,790,762,670,757,697,636,484,486,484,602,628,638,596,644,615,650,737,748,735,690,749,738,657,709,703,703,748,769,781,766,720,715,773,789,804,845,996,930,1003,965,996,1049,1053,1079,1061,994,990,990,971,901,885,820,813,806,815,809,821,780,795,836,934,917,771,779,736,644,476,459,478,483,390,379,331,281,208,212,155,568\nWarwick,E07000222,male,723,807,798,781,780,781,848,787,862,871,831,817,863,816,787,750,886,748,996,1439,1494,1355,975,980,862,1000,958,990,1011,1040,1029,1076,1101,1060,1042,993,1051,909,964,1030,1045,924,956,914,893,897,996,934,983,963,965,984,1064,1007,972,997,955,982,918,933,822,839,797,736,731,710,695,692,662,606,670,699,689,696,727,587,594,541,531,407,372,378,367,341,303,283,177,207,168,160,484\nBromsgrove,E07000234,male,443,470,564,543,559,541,568,579,608,623,682,614,626,645,650,587,624,624,499,402,403,407,473,492,505,511,453,484,481,497,522,550,533,538,582,560,579,542,560,581,620,589,558,503,568,626,600,643,698,665,674,694,728,770,776,753,739,726,686,705,650,609,630,629,573,550,543,600,536,554,493,549,581,577,554,471,483,414,403,342,302,328,312,269,258,203,193,163,131,125,408\nMalvern Hills,E07000235,male,292,307,326,314,351,353,401,403,420,420,433,434,445,439,484,472,509,498,435,289,275,312,366,412,378,344,330,326,349,363,381,361,347,346,388,349,356,356,323,393,410,414,397,373,371,393,425,436,472,543,583,529,561,590,636,614,665,624,661,629,622,621,571,582,548,523,488,550,535,523,534,553,585,593,641,427,493,442,379,359,325,327,302,258,236,223,214,162,140,124,355\nRedditch,E07000236,male,489,501,498,525,541,551,560,533,568,582,570,553,548,583,543,522,550,492,432,397,382,421,431,478,500,533,509,564,569,610,655,659,651,608,592,576,577,617,583,561,626,629,577,578,560,572,557,533,541,575,612,585,580,560,577,582,554,536,554,498,524,475,452,497,490,434,444,457,452,473,447,509,479,452,425,362,358,332,281,225,197,176,170,138,157,92,97,69,63,54,203\nWorcester,E07000237,male,502,533,548,541,541,593,588,586,619,643,619,613,645,576,582,595,613,599,601,685,724,692,668,681,701,653,684,722,758,731,764,777,703,756,690,690,720,655,683,639,720,674,655,626,575,580,618,650,714,734,760,726,802,682,700,722,760,727,673,686,632,603,616,508,511,517,483,483,477,466,418,450,473,498,486,349,365,329,313,259,239,231,219,205,190,171,141,123,86,88,246\nWychavon,E07000238,male,573,658,627,664,703,724,654,664,792,697,738,684,766,767,731,735,709,743,643,488,497,517,616,642,652,672,707,665,664,738,679,722,749,774,791,755,760,757,728,694,749,738,727,677,669,728,780,793,892,879,924,937,957,1038,1064,1008,1008,1081,967,1012,951,869,897,870,822,809,802,810,825,800,825,839,880,887,930,684,757,701,584,513,469,442,419,409,363,304,246,225,197,169,529\nWyre Forest,E07000239,male,458,445,514,512,545,584,535,561,595,581,621,589,584,581,563,580,588,514,541,430,400,455,484,506,518,535,515,503,540,589,563,560,570,523,522,589,549,568,544,537,541,583,523,519,510,552,607,659,657,651,744,751,736,759,804,749,770,750,745,698,657,623,620,660,571,579,553,621,612,598,634,645,712,756,740,589,601,569,499,400,362,344,352,303,239,217,187,175,130,120,350\nBirmingham,E08000025,male,7013,7524,7748,7640,8084,8014,8298,8218,8638,8525,8672,8474,8638,8558,8331,8070,8157,8398,8787,9863,9534,9835,9289,8397,8370,8031,8133,8035,8026,8125,8356,8119,7972,8051,7920,7827,7868,7635,7583,7498,7611,7304,7205,6849,6884,6736,6682,6811,6987,6851,7207,7023,7101,7016,6735,6371,6386,6169,6075,5787,5667,5428,5217,5245,4775,4358,4324,4203,4106,3927,3674,3503,3448,3507,3364,2687,2956,2667,2450,2150,1865,2072,1857,1620,1550,1365,1260,948,953,741,2491\nCoventry,E08000026,male,2006,2064,2131,2025,2249,2125,2183,2227,2320,2416,2356,2323,2261,2211,2216,2080,2027,2061,2893,3914,4190,3770,3292,2764,2649,2598,2406,2439,2369,2402,2421,2603,2395,2512,2460,2490,2446,2276,2190,2518,2273,2307,2105,2187,1884,1995,1974,1990,2101,2151,2169,2176,2271,2170,2072,1982,2081,1921,2038,1918,1794,1707,1746,1553,1447,1381,1412,1325,1325,1143,1220,1191,1210,1181,1214,1061,984,999,821,702,647,694,690,596,528,478,380,325,292,240,853\nDudley,E08000027,male,1789,1755,1905,1922,2002,1930,1944,1987,2159,2065,2039,2066,2000,1911,1888,1928,1915,1956,1740,1643,1630,1617,1639,1806,1819,1970,1895,2032,1933,2157,2201,2007,2070,2115,2004,1951,1903,1979,1985,1964,2092,1851,1887,1710,1702,1864,1858,2001,2133,2192,2345,2359,2457,2315,2334,2289,2240,2236,2190,2121,1998,1823,1789,1914,1751,1658,1692,1615,1675,1614,1536,1611,1579,1679,1762,1318,1443,1312,1268,1058,944,943,891,808,703,634,513,446,399,315,925\nSandwell,E08000028,male,2224,2252,2252,2295,2407,2469,2420,2469,2631,2670,2533,2559,2539,2558,2310,2418,2540,2448,2091,1965,2056,1956,2101,2229,2090,2145,2039,2137,2203,2345,2375,2482,2287,2363,2256,2358,2355,2217,2313,2198,2332,2386,2364,2180,2240,2111,2304,2219,2361,2335,2298,2261,2306,2395,2265,2187,2041,2039,1983,1928,1980,1674,1759,1655,1595,1439,1422,1418,1240,1271,1193,1222,1226,1249,1191,885,919,974,864,713,692,643,616,597,510,438,375,315,261,216,617\nSolihull,E08000029,male,1037,1176,1203,1299,1275,1342,1364,1456,1449,1488,1438,1392,1377,1471,1395,1415,1374,1332,1187,949,962,1034,1141,1216,1177,1123,1182,1187,1158,1163,1237,1160,1245,1234,1203,1241,1288,1217,1214,1224,1355,1351,1212,1173,1187,1235,1186,1330,1376,1494,1560,1509,1637,1458,1454,1635,1584,1458,1428,1434,1343,1268,1329,1241,1198,1106,1042,1079,1008,993,1095,988,1150,1211,1255,924,1007,864,816,668,621,625,589,517,475,407,388,331,300,230,817\nWalsall,E08000030,male,1666,1767,1910,1845,1876,1986,1955,1996,2100,2039,2026,1973,2020,2069,1972,1912,1913,1848,1688,1557,1511,1532,1643,1687,1622,1740,1686,1583,1704,1767,1887,1785,1722,1881,1905,1832,1925,1806,1809,1716,1750,1931,1666,1545,1577,1663,1590,1701,1755,1933,2034,1854,1874,1910,1862,1827,1800,1715,1754,1790,1656,1621,1475,1436,1453,1306,1328,1242,1290,1256,1131,1145,1191,1275,1194,927,1004,1005,856,778,754,706,656,591,543,451,414,329,279,256,718\nWolverhampton,E08000031,male,1706,1694,1751,1673,1690,1823,1714,1904,1787,1862,1938,1898,1779,1855,1677,1688,1787,1655,1487,1387,1417,1620,1692,1631,1687,1543,1551,1792,1675,1682,1835,1833,1712,1746,1784,1749,1767,1723,1716,1665,1923,1740,1709,1580,1621,1600,1729,1781,1700,1779,1885,1722,1811,1825,1874,1723,1600,1591,1616,1520,1489,1395,1330,1437,1249,1176,1182,1203,1117,1094,1115,1031,1023,1079,975,809,758,787,737,626,614,591,554,491,463,404,359,300,261,228,771\nPeterborough,E06000031,male,1405,1471,1453,1481,1481,1624,1596,1644,1670,1602,1696,1677,1621,1607,1487,1358,1426,1445,1230,1124,1066,1115,1205,1255,1292,1392,1456,1493,1565,1564,1670,1665,1677,1711,1658,1733,1662,1599,1758,1660,1686,1589,1498,1407,1407,1385,1390,1347,1432,1419,1325,1360,1339,1424,1310,1244,1213,1221,1147,1137,1132,1044,1014,988,914,894,806,831,756,769,785,789,788,759,790,601,583,556,455,415,406,426,343,322,308,270,253,191,165,162,516\nLuton,E06000032,male,1545,1580,1676,1557,1736,1689,1727,1806,1732,1682,1732,1724,1704,1734,1666,1616,1698,1583,1500,1432,1387,1519,1541,1703,1804,1655,1591,1583,1627,1619,1704,1706,1779,1732,1719,1738,1656,1763,1771,1642,1841,1751,1710,1580,1557,1518,1468,1458,1466,1466,1464,1476,1421,1442,1373,1282,1329,1287,1267,1138,1164,1095,1038,912,903,927,788,681,761,704,617,608,644,590,579,456,486,428,443,317,364,323,321,350,313,240,230,210,142,118,420\nSouthend-on-Sea,E06000033,male,971,990,1054,1069,1061,1137,1059,1106,1136,1107,1165,1184,1081,1157,1135,1019,989,1071,911,818,746,863,924,1041,1014,1026,1096,1128,1126,1124,1112,1157,1159,1148,1090,1181,1106,1136,1197,1224,1194,1276,1244,1123,1116,1116,1136,1249,1286,1340,1252,1216,1267,1257,1201,1287,1280,1264,1193,1182,1163,1116,1013,1017,850,897,848,806,869,814,748,804,895,953,923,676,703,637,564,479,436,459,453,365,354,285,264,256,213,190,564\nThurrock,E06000034,male,1212,1251,1263,1261,1295,1378,1257,1232,1301,1334,1347,1188,1304,1314,1201,1197,1176,1154,998,879,856,880,978,991,1055,1048,1020,1127,1184,1167,1265,1316,1364,1347,1360,1351,1375,1304,1313,1286,1224,1276,1221,1138,1168,1134,1116,1146,1202,1157,1199,1192,1210,1157,1189,1190,1090,1087,1028,976,896,879,872,771,770,711,666,675,626,564,645,631,653,681,650,442,474,412,383,295,266,307,256,242,222,178,155,139,102,105,320\nBedford,E06000055,male,1113,1091,1113,1168,1213,1225,1209,1171,1215,1226,1254,1247,1233,1253,1154,1160,1211,1162,1034,910,900,930,947,1146,1095,1133,1097,1198,1112,1206,1297,1299,1324,1311,1269,1293,1249,1321,1273,1289,1400,1336,1254,1205,1192,1222,1186,1252,1138,1311,1326,1248,1316,1332,1347,1279,1186,1162,1163,1100,1060,1069,994,924,907,875,803,810,789,740,778,765,771,863,807,624,598,610,462,432,387,379,405,342,331,257,260,197,176,156,550\nCentral Bedfordshire,E06000056,male,1718,1866,1904,1852,1835,1946,1868,1857,1888,1941,1885,1830,1837,1798,1744,1705,1600,1686,1480,1244,1225,1315,1415,1649,1698,1577,1692,1757,1787,1980,1969,2005,2029,2170,2066,2060,2032,1961,2064,1951,2081,2008,1896,1736,1873,1807,1826,1869,1934,2075,2146,1979,2070,2070,2153,2151,2162,2080,2070,1924,1937,1744,1720,1746,1635,1433,1494,1376,1332,1267,1340,1352,1349,1493,1496,1100,1130,1065,946,736,699,663,642,601,571,471,380,338,288,238,754\nCambridge,E07000008,male,646,680,647,648,666,637,680,726,680,746,697,666,669,718,641,625,596,619,1387,2279,2026,2388,2395,1865,1852,1827,1827,1694,1686,1430,1659,1476,1244,1215,1217,1276,1019,1046,1000,971,1069,886,1089,828,808,846,781,805,740,809,841,725,818,748,646,731,714,642,720,693,557,504,584,559,521,469,459,463,388,407,403,387,428,364,377,322,352,258,289,244,238,210,237,192,163,139,158,127,97,87,298\nEast Cambridgeshire,E07000009,male,362,442,471,516,472,542,470,504,574,563,656,548,587,541,548,517,525,514,447,350,295,363,397,419,395,455,447,491,460,482,501,525,564,557,548,543,526,560,523,595,587,609,581,506,592,571,598,657,619,658,626,651,621,612,639,685,613,594,640,554,554,527,505,543,481,475,433,452,450,433,434,485,452,507,511,390,390,333,294,283,264,277,202,212,203,177,165,120,110,102,285\nFenland,E07000010,male,483,528,547,569,516,624,577,576,588,614,557,551,565,573,594,578,505,548,514,446,474,460,546,584,555,580,586,612,617,654,695,613,641,643,646,682,589,622,563,556,634,537,626,536,524,571,590,601,605,671,689,725,709,745,734,741,759,742,761,684,704,646,599,646,632,607,547,643,574,603,558,579,595,664,627,512,535,449,430,378,282,295,289,288,271,184,172,137,137,117,346\nHuntingdonshire,E07000011,male,894,986,1024,1016,1031,1074,1053,1068,1126,1136,1114,1096,1046,1060,1032,1012,1055,1000,864,720,716,787,925,1006,1029,1001,1024,999,1109,1142,1166,1162,1193,1317,1176,1216,1230,1178,1189,1176,1219,1168,1164,1067,1138,1120,1215,1209,1206,1253,1359,1304,1315,1347,1291,1412,1302,1290,1328,1210,1227,1151,1176,1098,976,959,1006,904,847,857,914,937,973,1071,1017,818,856,720,663,557,524,442,458,428,370,320,262,248,173,148,519\nSouth Cambridgeshire,E07000012,male,775,885,899,944,957,1058,989,1014,1079,1090,1155,1080,1119,1129,1044,990,1059,945,859,655,578,545,670,738,740,776,895,773,822,794,1010,922,1019,980,976,1010,1074,989,1029,1245,1172,1128,1220,1125,1123,1125,1164,1173,1197,1207,1259,1093,1121,1152,1094,1120,1157,1093,1115,1042,976,928,953,957,818,803,792,754,767,756,768,770,748,845,918,650,726,642,558,479,408,411,409,391,349,295,275,226,186,190,613\nBasildon,E07000066,male,1158,1221,1340,1250,1300,1313,1243,1221,1297,1260,1276,1232,1227,1241,1217,1148,1113,1150,1015,855,854,952,964,978,1038,1048,1163,1183,1233,1212,1296,1300,1350,1347,1356,1351,1302,1228,1223,1190,1281,1187,1182,1109,1115,1103,1175,1186,1199,1224,1298,1238,1275,1292,1298,1231,1202,1214,1200,1142,1132,1080,1082,964,920,843,822,747,733,740,744,810,740,884,899,666,618,524,531,433,406,388,355,353,320,267,273,211,175,166,449\nBraintree,E07000067,male,733,881,852,934,957,907,919,917,949,978,976,1017,948,964,900,945,860,876,804,716,709,713,825,815,841,849,839,884,971,950,938,975,979,971,938,966,905,957,878,973,978,923,921,892,874,905,1002,1056,1086,1130,1163,1203,1124,1128,1234,1085,1123,1037,1065,1079,989,909,896,913,867,854,833,845,786,769,795,759,859,917,920,654,672,642,615,445,454,375,433,315,310,248,227,183,167,139,417\nBrentwood,E07000068,male,413,436,454,474,443,454,500,475,503,477,459,444,473,463,444,427,452,463,379,285,286,347,355,392,435,400,453,449,553,474,546,493,522,505,482,496,483,463,460,446,523,494,465,483,454,455,558,460,503,494,530,536,549,533,566,547,570,532,526,562,493,461,425,451,387,382,415,372,355,333,345,330,371,424,412,282,327,259,270,185,177,206,185,185,170,169,133,123,98,94,344\nCastle Point,E07000069,male,401,430,463,462,480,498,482,494,514,505,513,482,492,552,489,492,521,530,446,387,397,454,504,504,522,445,500,482,512,485,454,505,465,503,463,536,485,456,443,496,480,492,486,437,468,466,519,506,530,580,575,597,647,655,682,670,643,612,629,605,619,557,531,532,557,484,482,504,492,485,476,551,574,669,680,470,517,444,449,323,299,313,242,256,243,216,182,152,128,88,320\nChelmsford,E07000070,male,930,1004,974,1007,1109,1143,1116,1102,1102,1168,1133,1119,1129,1161,1048,1134,1105,1040,959,794,815,814,923,1003,1049,1022,1057,1191,1153,1207,1207,1151,1153,1183,1187,1138,1151,1192,1243,1242,1244,1240,1166,1135,1132,1219,1233,1201,1236,1355,1328,1262,1280,1235,1266,1234,1217,1224,1140,1169,1055,1070,1001,929,984,933,835,846,870,787,820,831,836,1006,997,782,735,667,657,459,445,447,431,431,402,317,331,235,215,187,615\nColchester,E07000071,male,1020,1092,1123,1166,1160,1174,1204,1209,1249,1183,1274,1236,1177,1187,1067,1100,1104,1046,1087,1353,1606,1611,1396,1248,1211,1164,1178,1236,1275,1317,1323,1239,1331,1352,1257,1249,1236,1244,1207,1258,1284,1262,1236,1145,1233,1078,1280,1246,1261,1358,1323,1280,1221,1294,1284,1237,1201,1140,1114,1177,1099,972,987,936,885,828,781,793,844,854,819,803,886,1037,985,702,747,663,599,514,386,457,422,425,322,302,269,250,217,167,515\nEpping Forest,E07000072,male,764,888,883,809,761,807,696,745,812,800,803,850,786,859,801,800,787,780,700,609,631,633,730,751,813,742,752,715,742,754,800,838,855,850,848,802,812,856,866,895,948,933,845,853,834,809,851,859,910,906,972,925,950,914,996,964,1001,931,893,941,919,855,781,729,736,688,694,631,606,571,610,631,640,724,744,495,581,497,465,360,342,328,338,298,271,252,213,161,166,137,466\nHarlow,E07000073,male,619,606,655,647,666,683,672,651,690,676,656,664,655,683,603,562,579,551,477,475,446,493,489,508,544,547,556,654,612,630,686,695,727,731,764,739,735,695,701,715,701,668,645,598,602,512,570,542,572,564,596,546,572,578,640,592,604,586,573,580,523,505,487,486,426,462,433,367,373,338,315,299,318,320,332,219,248,209,202,166,157,167,139,135,138,96,92,93,82,63,239\nMaldon,E07000074,male,277,278,294,348,334,367,333,347,357,360,381,376,360,366,377,373,391,373,334,306,299,316,343,334,337,363,339,346,307,309,334,332,348,301,302,363,323,312,304,345,352,338,316,305,327,383,394,360,393,437,480,479,501,518,544,550,570,505,486,486,525,503,461,466,438,437,406,428,390,407,411,434,430,499,483,376,407,345,269,244,214,230,217,197,172,159,137,104,101,69,222\nRochford,E07000075,male,372,397,401,474,468,472,412,465,508,514,521,530,538,527,548,474,493,522,423,384,374,399,436,517,472,442,428,438,441,458,454,418,463,455,431,495,466,459,480,472,511,461,499,454,472,506,515,533,530,623,593,645,644,606,665,656,649,597,602,603,534,575,551,520,519,468,436,450,467,440,403,475,502,563,640,406,425,394,340,287,251,277,258,245,239,170,172,160,134,120,279\nTendring,E07000076,male,684,661,640,754,693,710,821,750,763,812,798,851,749,764,755,726,776,780,698,622,653,653,687,715,755,730,691,720,668,690,729,762,713,744,710,681,650,641,670,667,726,671,623,620,652,700,733,707,850,908,907,909,986,1009,1124,1079,1080,1033,1023,1087,1085,1043,1054,1049,998,933,986,948,1092,947,961,1029,1113,1235,1333,925,979,942,848,644,625,652,590,526,485,438,373,292,248,231,707\nUttlesford,E07000077,male,433,533,550,505,583,580,553,564,595,600,708,556,565,604,625,593,553,570,492,348,349,372,428,457,424,392,459,430,420,473,455,434,495,507,488,522,544,512,572,587,600,606,608,548,548,560,548,626,641,676,676,658,702,709,707,660,679,657,692,622,617,615,599,539,540,510,459,488,479,444,433,474,485,498,520,403,424,375,297,277,225,267,196,226,171,145,148,137,104,101,303\nBroxbourne,E07000095,male,547,572,654,620,596,602,616,597,640,642,681,617,648,629,652,602,613,591,558,549,495,513,542,596,552,574,588,560,592,673,605,640,675,701,677,665,676,601,674,695,673,678,691,594,608,563,642,609,619,637,691,700,670,683,703,667,698,642,632,657,594,538,522,498,516,421,411,410,411,364,400,373,397,422,479,332,369,310,299,229,220,188,243,209,226,157,136,124,94,105,300\nDacorum,E07000096,male,893,944,991,1048,1028,1035,994,994,1012,1009,1078,1057,1039,995,963,934,902,959,773,609,597,633,711,826,877,836,897,830,947,951,1016,1025,1039,1134,1058,1107,1048,1084,1080,1106,1089,1110,1109,982,1073,1052,1061,1024,1084,1115,1122,1034,1093,1019,1054,1075,1079,1106,1066,1001,950,934,904,846,845,787,736,745,634,692,648,634,634,699,650,504,540,505,453,319,325,337,347,268,269,247,230,181,178,168,511\nHertsmere,E07000098,male,599,668,632,676,646,708,677,688,685,705,728,727,760,751,677,697,732,700,569,420,450,489,555,600,583,601,627,587,574,584,635,616,636,670,631,719,704,722,738,704,757,747,791,713,723,731,687,755,712,747,731,668,726,741,688,772,739,707,718,680,634,626,606,548,547,485,477,476,460,434,433,421,450,468,492,349,394,345,318,224,217,246,222,237,207,188,170,130,113,107,367\nNorth Hertfordshire,E07000099,male,712,793,755,741,801,856,793,840,895,866,877,876,836,851,796,729,771,766,598,521,476,485,564,655,711,729,709,737,812,814,815,819,798,868,827,861,829,878,831,922,902,959,881,908,824,852,936,938,931,942,904,922,954,955,923,997,925,940,904,867,852,805,825,729,674,690,637,644,606,585,619,634,581,677,643,481,549,453,501,359,358,295,313,325,290,257,227,194,166,135,454\nThree Rivers,E07000102,male,500,498,532,524,535,575,598,614,638,619,675,652,683,656,614,624,599,605,483,389,391,408,485,544,530,508,441,472,459,476,511,509,467,552,547,513,532,583,585,693,656,689,635,663,676,652,698,660,680,711,687,660,710,687,642,709,669,703,628,640,556,555,543,507,479,445,476,414,398,405,395,407,412,446,457,330,365,321,294,233,185,218,188,176,181,178,148,146,114,94,310\nWatford,E07000103,male,638,661,702,691,683,688,707,683,716,647,714,683,662,738,649,617,648,617,591,451,433,490,518,607,641,636,688,737,775,815,829,821,915,799,886,889,877,842,838,889,860,811,812,790,789,769,767,787,688,693,704,721,662,652,639,615,569,612,592,572,506,502,485,438,400,377,373,351,338,319,310,285,292,334,317,262,247,215,212,175,151,154,167,151,143,95,99,91,72,82,192\nBreckland,E07000143,male,646,657,699,757,745,793,753,800,811,780,809,791,814,804,804,730,759,735,660,580,607,661,707,773,814,831,800,820,851,824,902,883,846,852,839,767,826,752,756,774,866,848,706,720,732,672,850,866,879,933,986,971,1032,940,1042,1056,1045,1047,1041,995,996,927,917,891,817,851,883,872,823,829,858,849,884,999,1030,804,788,750,679,559,489,483,458,446,382,335,302,246,203,188,546\nBroadland,E07000144,male,545,567,630,666,676,660,661,653,755,740,760,765,733,739,738,648,740,685,659,509,554,520,576,592,626,591,665,587,673,668,677,696,698,724,703,730,727,708,652,740,750,773,688,743,704,713,818,856,905,922,917,958,991,1012,982,985,979,1022,939,964,928,848,829,810,839,792,777,769,781,753,776,836,887,955,964,709,756,654,606,568,489,485,454,463,389,311,291,247,237,180,618\nGreat Yarmouth,E07000145,male,473,483,525,535,551,495,562,544,558,611,606,595,546,613,552,523,545,557,536,461,448,504,531,524,529,568,546,508,601,563,563,583,586,563,611,581,529,603,484,527,522,587,576,470,482,559,516,549,616,646,667,696,691,685,711,666,744,721,705,680,665,664,651,650,599,620,648,612,575,630,569,613,648,712,696,520,535,489,456,387,323,329,332,286,219,189,172,150,136,126,379\nKing's Lynn and West Norfolk,E07000146,male,697,685,795,755,810,853,829,833,901,865,819,819,828,829,840,828,847,771,738,637,662,683,763,821,788,877,763,897,962,840,897,861,845,875,896,925,861,808,777,782,831,829,797,749,783,785,820,910,903,985,1002,1017,1091,1063,1077,1162,1116,1184,1049,1102,1069,1029,993,988,998,947,911,922,915,941,946,968,991,1120,1149,870,895,786,731,635,526,581,544,482,461,371,319,312,281,213,653\nNorth Norfolk,E07000147,male,331,400,378,377,447,445,441,449,464,504,490,476,538,505,488,497,534,491,480,351,345,383,384,444,460,396,458,427,428,441,449,490,424,501,470,454,470,429,465,438,477,408,392,424,483,463,490,518,532,672,668,690,682,667,738,743,771,778,750,819,821,767,835,869,804,788,804,773,795,839,849,904,889,973,1008,724,785,741,635,532,439,454,434,433,405,355,310,286,205,205,636\nNorwich,E07000148,male,701,742,714,716,727,759,764,769,832,762,803,750,745,743,695,627,647,720,1165,1889,2011,1760,1465,1250,1215,1184,1106,1231,1212,1230,1253,1242,1169,1144,1101,1104,1070,1082,1045,1040,1002,971,962,887,836,784,834,911,877,863,847,821,863,807,881,792,888,771,769,737,716,660,599,577,581,546,598,555,515,555,552,507,549,544,521,417,405,389,355,313,287,279,231,227,223,175,180,148,119,101,361\nSouth Norfolk,E07000149,male,641,668,733,754,823,830,797,749,848,853,827,824,870,796,831,827,808,807,650,521,537,588,606,648,704,637,703,720,716,730,738,754,788,828,742,841,821,818,808,825,866,854,808,790,754,835,807,917,885,993,1005,963,1016,985,993,1080,1014,1049,965,1008,948,911,872,912,837,842,820,847,791,771,811,850,858,986,1044,739,776,706,695,518,455,513,490,428,385,341,271,240,218,160,603\nBabergh,E07000200,male,348,414,398,474,396,496,448,435,501,519,523,506,557,559,538,523,544,534,440,346,345,386,414,474,456,408,438,441,386,465,471,461,464,462,450,429,416,467,477,451,538,477,502,458,484,501,554,542,626,614,651,637,643,625,726,713,719,732,683,672,660,597,649,619,582,579,537,580,539,581,606,644,576,745,682,539,585,474,465,384,383,348,340,299,259,213,184,162,141,106,393\nIpswich,E07000202,male,768,852,852,836,895,952,896,880,905,942,921,905,918,875,903,848,882,952,851,759,730,772,782,883,846,911,926,951,953,1008,1027,1031,1042,1076,1078,1062,1041,1047,978,1034,992,1047,901,904,945,856,889,896,921,940,962,964,949,945,909,867,888,817,904,766,746,708,745,741,719,668,606,613,547,642,559,572,546,610,600,480,478,387,374,337,277,297,266,274,251,225,197,157,143,102,413\nMid Suffolk,E07000203,male,446,467,438,483,476,516,533,534,544,565,565,555,589,580,540,592,582,592,501,514,435,442,497,496,521,566,583,581,539,530,548,540,552,605,556,516,572,514,543,584,585,526,556,511,487,575,519,638,683,746,705,742,744,708,793,792,800,753,789,789,763,729,724,708,662,647,640,724,647,636,626,669,713,779,775,524,609,513,480,411,378,375,321,285,245,245,195,173,156,94,411\nSt Albans,E07000240,male,770,839,942,906,1000,984,995,1033,1046,1144,1164,1130,1179,1116,1109,1032,1055,1008,760,436,472,511,610,708,724,744,751,702,712,784,787,813,826,854,849,839,843,958,910,1014,1022,1110,1127,1111,1133,1191,1123,1139,1145,1161,1168,1112,1079,1135,1088,1108,1012,991,915,867,916,797,758,732,752,684,618,672,621,542,595,598,533,610,646,531,499,481,430,326,305,378,335,290,305,248,230,219,183,182,483\nWelwyn Hatfield,E07000241,male,663,665,677,719,722,726,733,726,747,790,706,725,733,724,679,704,677,665,818,1125,1174,1161,1168,989,948,803,822,790,783,733,791,790,762,775,784,729,797,771,828,792,853,867,800,735,747,743,717,739,707,770,834,745,795,747,792,737,777,745,721,714,706,663,675,597,560,544,478,493,444,428,444,418,413,477,498,321,386,323,300,244,240,241,249,220,214,186,172,149,138,112,374\nEast Hertfordshire,E07000242,male,816,861,884,869,903,886,940,875,947,957,1003,1070,995,896,1005,1001,916,978,753,585,554,647,750,824,771,828,831,884,868,931,901,897,959,906,908,941,906,909,893,959,1004,1043,992,946,889,986,1006,1160,1090,1162,1101,1067,1118,1139,1100,1167,1120,1116,1013,1020,948,917,896,912,844,759,740,686,710,616,678,665,681,763,725,504,580,503,465,361,345,376,326,319,292,250,207,217,173,148,448\nStevenage,E07000243,male,529,572,599,615,626,584,564,609,632,602,641,597,565,620,587,510,533,564,501,418,432,471,484,519,588,586,548,645,615,664,659,691,676,725,703,669,686,631,651,648,637,653,541,561,574,506,514,568,536,563,598,561,620,611,667,597,660,653,627,567,537,498,517,500,452,452,406,365,370,305,280,330,318,362,333,243,217,252,231,166,155,179,156,130,142,121,109,91,70,74,228\nEast Suffolk,E07000244,male,938,1011,1089,1164,1180,1192,1282,1191,1326,1398,1397,1365,1382,1386,1360,1346,1346,1355,1277,1011,977,1048,1092,1221,1209,1180,1202,1204,1177,1210,1134,1254,1259,1298,1187,1208,1197,1171,1135,1273,1301,1315,1267,1152,1186,1283,1261,1426,1557,1563,1585,1724,1669,1768,1819,1828,1862,1832,1805,1757,1763,1719,1734,1747,1633,1567,1546,1683,1594,1584,1601,1645,1784,2000,1925,1540,1483,1321,1273,1022,907,943,883,846,701,652,578,490,443,343,1291\nWest Suffolk,E07000245,male,1014,1074,988,1011,1046,1041,1009,1031,1071,1119,1082,1038,998,1009,919,962,881,946,915,882,975,1175,1298,1246,1223,1216,1289,1453,1246,1357,1479,1288,1259,1222,1285,1173,1114,1291,1164,1103,1181,1144,1127,919,1069,998,1033,1051,1167,1195,1225,1224,1289,1147,1230,1258,1196,1210,1169,1137,1102,1094,964,1044,895,824,847,924,864,910,901,900,893,1033,1034,796,784,731,662,585,501,567,551,496,425,351,301,231,232,205,601\nCity of London,E09000001,male,28,27,15,13,17,14,12,20,19,23,29,19,15,14,14,21,15,14,31,23,59,63,101,149,104,136,150,118,123,124,138,109,107,102,85,102,83,74,80,86,68,61,57,75,66,59,60,73,60,96,69,99,90,80,62,64,55,63,55,54,63,62,46,64,47,44,36,34,45,44,30,29,28,33,35,24,32,23,17,12,19,19,16,15,13,6,10,1,6,7,20\nBarking and Dagenham,E09000002,male,1622,1669,1754,1909,1892,1925,1765,1847,1978,1893,1884,1878,1911,1881,1825,1646,1733,1613,1576,1280,1162,1228,1358,1375,1451,1449,1432,1398,1460,1416,1465,1638,1618,1759,1748,1733,1807,1765,1758,1684,1828,1614,1625,1481,1553,1456,1528,1557,1391,1378,1429,1400,1405,1383,1251,1192,1152,1106,1129,955,1039,886,835,801,729,658,637,556,526,462,456,438,410,433,461,350,284,264,267,184,233,226,188,204,171,163,143,107,100,91,282\nBarnet,E09000003,male,2465,2466,2460,2523,2532,2505,2586,2628,2621,2694,2701,2653,2686,2679,2565,2488,2503,2308,2112,1670,1529,1965,2239,2459,2575,2616,2748,2596,2586,2812,2950,2901,2984,2822,2845,2979,2946,2780,2944,3016,3018,2897,2983,2847,2691,2659,2638,2807,2634,2650,2582,2614,2519,2306,2417,2274,2230,2362,2034,2003,2047,1843,1818,1913,1628,1681,1514,1411,1443,1376,1354,1385,1322,1284,1259,1084,1086,992,829,691,666,706,668,567,563,551,467,433,360,256,1047\nBexley,E09000004,male,1391,1562,1526,1548,1567,1714,1605,1629,1655,1714,1716,1708,1643,1681,1636,1507,1583,1598,1325,1231,1231,1375,1380,1385,1362,1395,1361,1431,1413,1487,1537,1600,1634,1600,1558,1580,1640,1642,1636,1647,1758,1733,1668,1505,1552,1510,1565,1490,1600,1562,1681,1674,1702,1636,1691,1656,1682,1632,1569,1485,1498,1366,1365,1240,1163,1132,1067,1008,965,993,950,934,903,1044,1073,723,757,681,669,535,486,566,541,481,438,388,331,280,274,172,687\nBrent,E09000005,male,1967,2166,1947,2019,2051,2211,1889,1942,2023,2103,2144,2077,2103,2111,2250,2060,2156,2119,2074,2153,2214,2209,2393,2611,2773,2811,2925,2967,2830,2903,2960,3050,2942,2901,2847,2730,2724,2630,2674,2914,2607,2674,2479,2369,2319,2414,2436,2197,2258,2181,2227,2265,2303,2251,1984,2017,2065,1861,1797,1709,1728,1580,1546,1533,1391,1353,1304,1159,1129,1086,954,944,899,847,799,679,659,648,545,566,497,490,494,438,424,361,329,279,225,217,604\nBromley,E09000006,male,1892,1871,2082,2026,2126,2068,2085,2068,2177,2160,2271,2279,2137,2056,2103,2006,2005,1952,1621,1253,1189,1307,1551,1689,1654,1650,1653,1780,1796,1770,1820,2050,2044,2143,2108,2218,2259,2323,2322,2460,2395,2358,2468,2321,2254,2202,2425,2246,2270,2384,2299,2185,2315,2251,2430,2308,2182,2323,2003,1936,2064,1822,1725,1698,1596,1513,1413,1345,1307,1300,1332,1300,1366,1514,1538,1112,1158,1010,969,830,705,763,719,658,607,544,486,425,385,352,1120\nCamden,E09000007,male,1033,994,1044,1001,1020,999,979,971,1002,1020,1056,1064,1044,1028,1044,1014,1080,997,1446,1945,1864,1759,1651,1770,1874,1927,2062,2150,2049,2065,2050,2101,2011,1845,1772,1731,1663,1535,1466,1526,1498,1458,1421,1281,1295,1256,1359,1304,1220,1288,1327,1267,1322,1195,1275,1255,1137,1188,1074,1068,1026,931,885,846,784,764,657,656,636,590,608,574,581,608,587,504,486,444,380,310,303,317,267,243,222,197,171,139,114,114,399\nCroydon,E09000008,male,2447,2592,2562,2532,2537,2551,2501,2509,2497,2598,2661,2562,2568,2646,2544,2523,2554,2566,2200,1893,1789,1967,2210,2348,2541,2448,2504,2726,2619,2704,2957,2904,2965,2884,2866,2980,2895,2982,2824,2863,2896,2845,2736,2563,2574,2534,2607,2336,2469,2429,2487,2456,2590,2629,2606,2553,2535,2553,2349,2278,2241,2014,1945,1879,1735,1545,1537,1483,1303,1335,1270,1276,1288,1372,1314,1012,941,822,841,694,658,665,610,574,552,485,416,396,298,279,817\nEaling,E09000009,male,2113,2342,2068,2222,2222,2178,2195,2325,2280,2398,2425,2530,2362,2452,2404,2220,2321,2139,2308,2194,1979,2112,2266,2363,2575,2644,2728,3061,2853,2853,2872,3010,3009,3131,2894,2998,3021,2910,2948,2946,3195,3135,2830,2723,2857,2842,2729,2551,2586,2509,2650,2559,2398,2516,2236,2300,2358,2134,2078,2026,1939,1829,1795,1583,1535,1444,1407,1304,1141,1200,1113,1099,1092,1036,995,774,778,694,681,625,576,568,574,485,417,404,345,294,264,185,652\nEnfield,E09000010,male,1925,2179,2161,2239,2306,2316,2239,2178,2335,2493,2470,2459,2529,2502,2401,2374,2449,2338,2066,1799,1686,1885,1955,1915,2070,2082,1889,2066,2012,2037,2004,1998,2058,2184,2112,2121,2224,2087,2065,2245,2445,2340,2159,2177,2096,2134,2074,2168,2229,2152,2162,2118,2192,2262,2042,2159,2139,2033,1963,1806,1732,1847,1687,1566,1469,1369,1300,1167,1091,1045,1041,1043,1064,1002,1023,800,816,778,682,556,578,634,548,503,482,427,388,321,266,223,759\nGreenwich,E09000011,male,1868,1990,1896,1874,1920,1902,1953,1875,1958,1895,1857,1870,1924,1871,1804,1659,1667,1628,1607,1479,1526,1729,1841,1868,2020,2255,2134,2361,2472,2665,2603,2589,2678,2735,2531,2520,2615,2512,2546,2198,2452,2295,2264,2075,1999,1961,2005,1798,1834,1845,1965,1836,1952,1858,1842,1786,1581,1555,1555,1493,1511,1351,1191,1122,996,1064,960,861,803,734,795,740,705,786,721,566,582,530,449,375,350,364,340,284,261,240,194,163,145,110,361\nHackney,E09000012,male,1643,1734,1647,1527,1554,1625,1607,1450,1639,1511,1570,1561,1540,1525,1538,1486,1644,1511,1300,1208,1323,1412,1542,2064,2231,2557,2796,2903,2993,3144,3271,3204,3190,2875,2650,2417,2327,2364,2079,2171,1946,1897,1737,1670,1666,1575,1544,1442,1431,1459,1430,1433,1427,1304,1341,1356,1390,1319,1195,1013,1106,1005,1013,863,826,862,642,647,635,552,546,516,503,468,420,342,315,290,261,274,230,229,208,167,166,155,151,122,92,72,254\nHammersmith and Fulham,E09000013,male,932,911,894,881,921,903,838,910,916,887,924,968,877,878,868,825,785,793,726,878,1198,1318,1526,1758,2168,2132,2116,2212,2091,2137,2008,1912,1883,1760,1658,1587,1469,1383,1341,1280,1209,1206,1214,1153,1075,1141,1180,1130,1146,1117,1120,1085,1071,1092,1124,997,1048,918,980,872,730,713,684,647,606,595,518,560,456,482,488,446,455,457,441,342,338,315,267,232,238,243,212,186,146,156,108,116,100,97,236\nHaringey,E09000014,male,1517,1661,1507,1444,1492,1531,1495,1467,1504,1510,1652,1548,1558,1567,1578,1527,1532,1577,1401,1215,1343,1351,1531,1738,1973,2007,2170,2284,2310,2498,2467,2690,2490,2486,2394,2424,2372,2239,2216,2128,2217,2235,2053,1941,1845,1889,1955,1799,1798,1870,1935,1695,1754,1777,1660,1707,1570,1522,1485,1393,1281,1189,1068,1089,977,963,871,812,781,701,700,646,643,616,595,448,488,474,365,345,329,329,321,278,286,220,181,177,138,125,319\nHarrow,E09000015,male,1565,1622,1600,1696,1593,1551,1632,1566,1706,1621,1759,1627,1726,1631,1861,1753,1858,1836,1516,1187,1265,1313,1609,1790,1760,1784,1827,1790,1925,1890,1982,2006,2074,2089,1961,2080,2010,2033,1970,2111,2085,1936,1991,2001,1885,1767,1815,1738,1671,1604,1554,1662,1711,1476,1540,1536,1566,1468,1481,1372,1497,1382,1300,1228,1305,1165,1228,1060,1075,988,961,915,877,923,873,749,696,682,651,534,512,558,513,465,454,375,337,295,227,196,745\nHavering,E09000016,male,1607,1723,1761,1698,1714,1838,1655,1669,1694,1732,1689,1614,1622,1675,1596,1497,1597,1553,1393,1280,1246,1324,1474,1501,1549,1528,1656,1570,1625,1698,1772,1745,1777,1842,1815,1833,1841,1817,1854,1786,1847,1828,1644,1558,1576,1584,1595,1533,1614,1619,1645,1653,1672,1709,1659,1663,1678,1675,1623,1592,1468,1508,1532,1411,1288,1195,1194,1161,1075,1081,1095,1094,1051,1218,1198,872,854,792,705,608,572,541,534,529,477,433,377,301,313,266,814\nHillingdon,E09000017,male,1890,1965,2029,2100,2157,2079,2111,2043,2142,2182,2074,1995,2051,2101,1886,1938,1879,1903,1990,2198,2160,2173,2074,2083,1931,1946,1999,2017,2081,2089,2164,2238,2291,2187,2276,2366,2380,2355,2482,2345,2521,2422,2356,2082,2138,2109,2006,2147,1957,1999,1980,2043,1904,1911,2043,1974,1825,1772,1747,1677,1715,1628,1442,1363,1344,1274,1230,1130,1145,976,998,996,927,1013,988,735,744,711,599,544,525,532,492,468,413,358,308,292,269,212,709\nHounslow,E09000018,male,1871,1839,1874,1908,1907,1962,1895,1913,1939,2035,1999,1973,1856,1994,1882,1783,1763,1731,1663,1491,1569,1526,1788,1874,2008,1921,1979,2004,2130,2076,2250,2311,2442,2411,2454,2638,2450,2518,2445,2537,2528,2561,2445,2244,2361,2304,2058,2074,2072,2198,1893,1973,1953,1869,1799,1821,1704,1687,1546,1455,1528,1399,1259,1147,1254,1108,1001,978,1037,963,873,916,808,781,783,616,637,550,487,474,399,445,383,346,306,287,255,226,193,179,430\nIslington,E09000019,male,1247,1138,1176,1107,1095,993,1020,949,977,1089,1039,1029,1025,998,977,882,915,935,1143,1215,1345,1463,1511,1808,2095,2374,2538,2673,2844,2813,2773,2782,2532,2460,2397,2179,1989,1848,1705,1573,1625,1658,1429,1207,1295,1236,1229,1191,1271,1248,1263,1326,1210,1268,1275,1311,1156,1070,1083,1064,919,979,827,777,682,685,658,632,558,545,531,483,491,541,459,301,335,338,291,268,257,258,216,180,172,153,136,100,110,78,264\nKensington and Chelsea,E09000020,male,669,607,640,575,672,567,681,677,665,666,683,659,680,663,607,630,546,846,627,739,1081,884,1318,1262,1305,1270,1184,1164,1195,1151,1057,1194,1058,1168,1025,1141,928,907,920,898,989,970,884,874,760,912,864,1062,956,968,983,994,1030,1000,1035,1009,1066,993,933,819,844,797,669,758,597,583,537,544,518,450,538,488,507,485,482,372,387,387,371,280,309,273,220,236,195,155,144,133,109,89,288\nKingston upon Thames,E09000021,male,926,984,982,1020,1019,1090,1087,972,1116,1035,1121,1076,1055,1074,989,942,1001,984,861,830,893,973,1022,1077,1079,1050,1053,1023,1049,1107,1120,1141,1246,1160,1161,1165,1272,1181,1268,1239,1320,1336,1301,1286,1235,1213,1257,1245,1235,1240,1228,1184,1164,1103,1080,1124,1058,1045,943,901,867,872,815,744,715,695,623,698,609,628,601,605,590,632,657,489,452,453,421,328,323,306,265,237,254,196,188,159,128,108,420\nLambeth,E09000022,male,1633,1652,1569,1481,1442,1554,1521,1527,1543,1474,1509,1552,1613,1638,1628,1532,1475,1484,1476,1427,1463,1613,2329,3050,3785,4195,4400,4369,4231,4169,4183,3730,3630,3377,3078,2900,2644,2581,2535,2524,2443,2302,2127,2053,2097,2138,2015,1927,2014,2055,1983,2178,2032,2031,1863,1968,1852,1789,1632,1484,1425,1320,1211,1229,1126,957,1003,814,746,699,715,690,646,631,574,436,428,393,421,329,352,343,290,262,276,202,153,158,144,118,348\nLewisham,E09000023,male,1968,2012,1940,1919,1884,2020,1755,1841,1859,1868,1887,1851,1691,1706,1676,1628,1796,1614,1493,1319,1506,1615,1633,1906,2117,2224,2320,2531,2700,2850,2895,2830,3014,2815,2668,2821,2553,2566,2499,2531,2363,2331,2281,2151,2079,1992,2116,1940,1981,2035,1931,1878,1929,1838,1967,1802,1848,1635,1696,1591,1405,1324,1349,1239,1148,1063,868,880,740,720,747,661,609,650,584,459,506,427,442,367,347,323,322,320,253,220,199,189,148,129,389\nMerton,E09000024,male,1403,1392,1400,1364,1371,1468,1413,1300,1331,1396,1393,1403,1325,1383,1336,1164,1240,1175,1008,841,831,903,1129,1232,1311,1510,1598,1533,1782,1784,1812,1869,1775,1830,1881,1872,1810,1828,1854,1821,1860,1809,1793,1653,1725,1563,1628,1526,1512,1437,1467,1426,1434,1413,1357,1338,1239,1227,1176,1083,1092,1047,941,923,926,798,758,746,682,685,686,622,671,678,678,465,497,398,423,329,360,351,350,314,245,203,207,163,159,128,389\nNewham,E09000025,male,2315,2454,2402,2382,2320,2408,2348,2392,2366,2370,2365,2361,2358,2348,2319,2236,2236,2179,2210,2188,2402,2466,2834,3289,3326,3536,3523,3612,3669,3491,3772,3742,3632,3751,3468,3453,3492,3150,3173,3087,3021,3009,2966,2650,2485,2575,2502,2374,2221,2110,2378,2230,2100,1974,1807,1741,1651,1615,1548,1420,1412,1346,1235,1161,1095,1023,973,860,833,731,707,550,577,497,473,390,352,318,345,273,307,281,283,234,236,175,166,131,128,92,325\nRedbridge,E09000026,male,2115,2108,2244,2134,2204,2234,2159,2200,2268,2224,2197,2182,2086,2252,2206,2039,2137,2258,1942,1785,1731,1793,1864,2004,2182,2071,2039,1995,2250,2157,2370,2261,2467,2529,2488,2372,2709,2492,2606,2528,2614,2503,2369,2516,2299,2183,2226,2203,2143,1903,2004,1884,1992,1996,1754,1756,1746,1650,1667,1592,1528,1551,1380,1458,1330,1249,1152,1075,974,999,936,900,898,870,897,703,647,588,530,494,501,558,492,406,392,331,296,270,203,203,639\nRichmond upon Thames,E09000027,male,1049,1083,1157,1179,1237,1232,1267,1288,1356,1387,1424,1423,1381,1323,1224,1152,1187,1143,998,686,622,729,852,962,899,877,903,948,970,1039,1054,1165,1084,1200,1111,1244,1253,1318,1419,1356,1480,1538,1489,1548,1601,1528,1628,1534,1539,1697,1548,1511,1435,1504,1488,1451,1383,1341,1284,1190,1104,1028,998,932,895,838,770,785,763,797,772,795,758,860,850,638,678,594,489,420,405,362,389,350,272,249,209,211,183,139,531\nSouthwark,E09000028,male,1656,1754,1673,1588,1707,1666,1619,1621,1563,1581,1708,1671,1701,1553,1642,1530,1594,1471,1621,1716,1640,1939,2271,2657,2991,3413,3500,3779,3885,3837,3743,3756,3666,3233,2811,2938,2699,2585,2443,2357,2314,2238,2153,1886,1939,2089,1955,1895,1994,1779,1864,2044,1923,1818,1983,1804,1822,1668,1641,1622,1475,1444,1276,1121,1130,927,889,807,709,649,654,610,581,610,663,434,424,362,362,336,311,296,286,254,199,182,162,121,115,92,315\nSutton,E09000029,male,1182,1314,1291,1336,1428,1457,1492,1475,1467,1537,1547,1533,1470,1480,1391,1325,1334,1259,1119,849,809,972,994,1114,1076,1121,1166,1206,1228,1285,1266,1303,1362,1388,1389,1479,1454,1447,1607,1661,1680,1771,1660,1618,1592,1544,1571,1491,1492,1509,1466,1423,1415,1394,1463,1387,1420,1309,1301,1167,1146,1083,1079,987,941,925,841,854,776,695,732,737,743,799,876,592,594,540,479,387,369,422,376,304,311,299,238,222,177,153,519\nTower Hamlets,E09000030,male,2050,1929,2024,1852,1934,1888,1691,1746,1809,1900,1776,1863,1714,1783,1681,1654,1653,1734,1773,2258,2369,2578,2834,3336,4015,4188,4545,4488,4188,4444,4615,4268,4087,3888,3591,3335,3113,2900,2726,2718,2599,2462,2331,2092,2242,2115,2019,2037,1825,1628,1649,1586,1536,1530,1380,1205,1189,1222,1076,1011,958,956,910,880,771,670,656,497,562,479,450,350,399,357,391,268,259,233,221,217,196,209,165,209,159,116,127,102,88,79,260\nWaltham Forest,E09000031,male,1907,2109,2124,1733,1805,1837,1787,1755,1803,1777,1788,1649,1693,1655,1640,1642,1658,1711,1459,1357,1391,1373,1525,1666,1917,1887,2162,2092,2296,2485,2566,2707,2755,2876,2803,2754,2631,2728,2573,2503,2456,2310,2310,2298,2089,2243,1886,1760,1867,1900,2019,1763,1718,1837,1553,1578,1601,1526,1339,1300,1364,1271,1118,1072,1018,927,859,826,740,789,670,627,642,680,656,539,483,413,431,388,341,387,348,328,331,233,198,176,147,154,386\nWandsworth,E09000032,male,2076,1955,1930,1830,1804,1712,1726,1643,1771,1695,1661,1688,1669,1552,1483,1395,1348,1298,1234,1192,1292,1318,1862,2586,3530,4009,4321,4469,4391,4389,4306,3668,3664,3420,3058,3006,2940,2771,2615,2582,2563,2409,2362,2333,2178,2195,2043,2040,2046,1909,1817,1832,1888,1679,1779,1715,1585,1594,1490,1414,1456,1207,1152,1052,1027,886,854,800,836,771,757,765,755,752,726,573,562,483,465,390,441,400,358,329,301,259,220,193,171,111,470\nWestminster,E09000033,male,894,876,897,831,837,790,779,762,784,889,877,863,904,1007,807,896,976,1005,1175,1376,1388,1582,1837,2013,2170,2236,2289,2156,2286,2240,2281,2102,2063,1898,1769,1745,1658,1443,1514,1543,1370,1589,1305,1364,1315,1178,1320,1384,1417,1313,1427,1344,1332,1348,1422,1340,1305,1227,1152,1173,1037,979,873,913,845,833,716,692,638,656,605,593,590,604,547,458,500,414,405,362,287,301,292,263,220,187,179,168,138,112,436\nMedway,E06000035,male,1680,1706,1780,1876,1810,1883,1799,1858,1865,1963,1881,1858,1876,1818,1771,1690,1721,1724,1622,1541,1536,1616,1684,1646,1668,1662,1698,1825,1752,1869,1882,1954,1953,1944,1919,2035,1912,1817,1803,1903,1939,1878,1823,1642,1685,1671,1779,1663,1822,1833,1904,1877,1954,1876,1954,1985,1921,1830,1830,1701,1702,1539,1523,1514,1436,1288,1304,1281,1285,1153,1088,1221,1225,1309,1313,935,954,816,764,666,602,554,552,496,429,356,268,258,221,194,512\nBracknell Forest,E06000036,male,708,701,723,778,758,780,796,821,830,849,788,835,808,826,832,827,803,806,681,564,519,617,701,722,771,844,778,836,767,808,846,884,960,907,920,900,859,933,922,947,943,953,878,814,828,823,853,895,880,918,923,876,881,852,921,844,863,858,804,764,802,693,691,631,607,628,539,546,516,508,489,452,446,520,483,348,374,322,278,252,200,254,206,212,192,162,138,135,110,90,288\nWest Berkshire,E06000037,male,790,829,838,861,945,924,924,986,1047,1102,1043,1091,1110,1108,1006,1078,951,1075,964,662,690,712,753,817,877,840,869,780,912,959,934,898,932,969,923,1004,944,1003,932,995,1060,1036,1053,1011,1014,1102,1032,1133,1144,1193,1306,1252,1277,1270,1230,1200,1168,1211,1165,1118,1058,1048,1052,939,888,869,825,817,840,795,793,735,782,894,875,708,662,634,532,426,458,427,398,356,303,276,240,200,159,147,516\nReading,E06000038,male,1010,1070,1057,1015,1095,1118,1037,1045,1146,1037,1021,1075,1085,1040,972,969,970,891,1116,1638,1660,1557,1385,1282,1329,1416,1418,1455,1389,1515,1543,1502,1543,1598,1481,1535,1480,1460,1467,1400,1479,1417,1291,1168,1226,1208,1149,1150,1201,1123,1129,1121,1069,1024,1061,985,1017,953,909,902,884,800,790,735,660,628,588,581,558,510,464,443,469,575,507,380,426,407,357,316,259,313,243,236,231,187,171,132,113,121,355\nSlough,E06000039,male,1075,1191,1208,1203,1238,1355,1265,1343,1303,1271,1377,1328,1228,1341,1215,1154,1109,1095,994,773,849,900,855,905,969,959,1014,1056,967,1067,1145,1171,1164,1247,1283,1273,1341,1371,1471,1322,1492,1454,1378,1324,1268,1165,1227,1153,1158,1028,1084,975,1044,953,889,902,896,732,756,724,759,695,627,633,589,560,582,520,497,450,450,395,374,331,311,210,248,236,231,195,210,209,165,139,153,122,126,100,106,62,209\nWindsor and Maidenhead,E06000040,male,722,806,856,814,887,874,905,929,990,1020,1053,1060,1074,1095,1233,1167,1152,1168,885,566,533,674,697,781,808,790,777,769,825,822,872,873,941,860,930,945,923,963,1028,1014,1133,1120,1101,1038,1059,1080,1134,1096,1156,1135,1188,1120,1140,1114,1185,1129,1090,1042,1066,1038,1003,868,848,823,813,710,726,670,657,670,668,639,675,750,729,561,584,551,463,385,370,383,381,355,281,288,234,211,179,151,549\nWokingham,E06000041,male,896,987,1030,1116,1100,1195,1180,1167,1332,1354,1347,1359,1315,1296,1143,1116,1149,1136,951,772,731,778,865,893,898,913,888,943,943,978,891,1011,1002,1043,1053,1116,1138,1101,1229,1255,1339,1457,1325,1293,1358,1320,1298,1398,1359,1361,1336,1287,1274,1169,1265,1199,1222,1173,1150,1118,1057,997,980,1008,852,849,785,732,751,719,674,698,738,870,785,582,650,606,491,507,416,409,385,360,356,290,255,207,201,173,527\nMilton Keynes,E06000042,male,1690,1727,1797,1884,1934,1912,2033,2090,2112,2235,2263,2170,2127,2101,2000,1903,1943,1849,1571,1330,1298,1469,1540,1706,1733,1850,1797,1812,1890,2022,2076,2086,2121,2178,2157,2228,2195,2143,2304,2232,2341,2237,2306,2044,2107,2043,2069,1973,2002,1936,2025,1944,1883,1905,1768,1801,1790,1726,1585,1482,1522,1496,1472,1347,1292,1206,1242,1131,1171,1067,1081,1058,1015,1098,1004,779,707,738,614,535,461,458,448,359,319,276,233,192,155,143,479\nBrighton and Hove,E06000043,male,1140,1158,1247,1281,1258,1237,1351,1307,1373,1390,1421,1456,1420,1502,1361,1386,1367,1474,1810,2462,2891,2849,2742,2229,2202,2105,2068,2006,2123,2061,2133,2046,1936,1964,2055,1890,1890,2055,1849,1931,1944,1912,1890,1816,1851,1829,1833,2180,2147,2225,2123,2046,2096,2127,2090,2051,2139,1823,1741,1618,1519,1516,1415,1281,1191,1192,1093,1101,1000,998,970,928,1019,1075,1016,727,760,653,554,487,483,527,411,393,367,319,298,266,220,181,701\nPortsmouth,E06000044,male,1153,1155,1084,1133,1182,1212,1233,1293,1246,1181,1212,1262,1226,1166,1174,1077,1067,1052,1712,2625,2764,2518,1990,1688,1533,1462,1571,1484,1520,1514,1555,1496,1506,1565,1523,1556,1531,1469,1416,1408,1356,1344,1264,1180,1159,1194,1178,1185,1290,1340,1360,1334,1321,1311,1324,1275,1291,1319,1261,1235,1178,1086,1068,999,955,867,825,809,750,788,734,766,784,819,847,641,599,550,500,408,352,393,336,323,287,255,246,216,150,145,452\nSouthampton,E06000045,male,1389,1381,1431,1404,1396,1473,1485,1475,1510,1568,1492,1418,1459,1421,1290,1262,1205,1239,2030,2959,3040,3117,2817,2401,2106,2095,2169,2004,2121,1948,2063,1995,1981,1938,1929,1934,1919,1834,1833,1779,1778,1735,1601,1589,1552,1560,1503,1538,1496,1496,1538,1411,1378,1351,1417,1459,1474,1403,1358,1332,1239,1179,1212,1154,1062,1143,945,998,924,877,882,883,839,840,867,733,673,618,547,497,434,455,415,319,312,282,233,211,189,157,570\nIsle of Wight,E06000046,male,522,535,616,593,613,683,685,713,711,736,730,682,727,763,750,723,721,719,644,535,596,548,597,668,719,648,659,668,693,626,712,656,739,747,692,742,671,697,679,628,712,711,661,664,636,666,745,777,753,792,912,935,940,1007,1036,1109,1066,1073,1074,1039,1020,1029,1045,983,962,950,1064,1069,912,964,927,1011,1083,1173,1211,940,930,834,794,632,535,583,495,466,358,358,308,292,218,199,654\nBuckinghamshire,E06000060,male,2957,3078,3174,3420,3323,3474,3494,3479,3665,3759,3856,3776,3837,3688,3616,3505,3540,3488,2971,2375,2314,2341,2720,2939,2861,2877,2913,3058,2920,3151,3139,3201,3222,3421,3282,3341,3356,3442,3571,3650,3741,3931,3758,3561,3553,3552,3652,3770,3952,3958,3913,3832,3925,3954,4126,4048,4089,3972,3773,3558,3565,3328,3249,3113,2934,2836,2698,2591,2550,2450,2305,2503,2501,2735,2681,2058,2141,1936,1709,1579,1395,1355,1367,1230,1175,1025,865,748,654,607,1694\nEastbourne,E07000061,male,449,455,505,512,496,508,491,534,608,614,599,620,632,602,653,543,554,579,537,505,499,512,541,539,524,514,551,564,509,566,596,571,629,618,552,536,553,566,536,586,594,589,588,532,482,562,577,592,640,644,641,634,669,691,696,624,682,704,692,667,666,633,634,577,579,555,496,547,507,555,540,572,584,676,668,504,494,433,394,385,343,302,338,299,281,228,191,170,165,160,494\nHastings,E07000062,male,457,520,506,483,508,523,509,502,572,514,569,510,536,568,538,564,542,491,495,395,412,440,471,467,500,510,506,510,497,526,560,547,562,587,571,574,509,516,512,537,601,538,529,509,467,543,568,527,624,626,658,633,669,666,701,716,711,696,680,643,616,634,528,543,528,528,484,529,473,478,509,446,509,509,509,330,447,310,279,251,236,204,195,180,173,151,121,123,85,68,249\nLewes,E07000063,male,431,456,444,500,534,515,498,536,580,624,599,604,617,579,608,553,591,606,519,453,396,422,434,481,454,400,400,404,439,440,465,476,494,518,478,476,510,507,570,534,563,556,534,485,562,529,551,547,667,717,653,691,706,726,767,733,754,709,704,707,717,672,670,645,593,599,593,559,623,617,625,601,643,696,714,507,528,526,472,356,343,399,353,282,263,249,230,201,167,149,508\nRother,E07000064,male,362,369,403,404,419,398,444,434,458,484,497,466,450,481,481,454,514,477,429,367,331,345,395,415,431,415,377,380,388,422,354,388,368,404,404,323,405,404,373,387,408,401,392,351,386,408,413,491,498,536,568,584,617,588,698,664,721,744,693,695,654,701,677,641,661,611,658,669,676,606,662,760,689,852,920,653,637,654,525,439,393,422,362,348,338,283,260,221,185,156,553\nWealden,E07000065,male,670,664,777,769,793,858,845,850,866,900,907,908,960,952,949,886,893,909,804,649,603,659,736,754,702,725,709,710,728,765,769,733,762,780,773,715,762,713,813,795,824,871,833,695,762,738,948,958,1020,1152,1079,1173,1164,1184,1240,1186,1249,1263,1176,1200,1121,1125,1175,1114,1073,1009,949,1025,973,933,952,956,1027,1222,1162,893,968,853,842,647,555,587,540,497,463,394,340,303,247,232,733\nBasingstoke and Deane,E07000084,male,1004,1076,1078,1017,1203,1130,1155,1139,1272,1280,1239,1190,1107,1191,1081,1019,1032,980,895,769,738,905,1039,987,1013,1163,1191,1147,1165,1170,1285,1349,1397,1368,1287,1315,1296,1290,1290,1300,1309,1297,1259,1218,1221,1218,1307,1256,1300,1352,1396,1400,1406,1366,1425,1321,1326,1308,1257,1231,1158,1056,996,1004,932,872,837,843,803,796,782,856,808,897,880,656,671,619,583,429,451,437,384,373,302,290,222,185,197,152,468\nEast Hampshire,E07000085,male,575,616,591,667,628,655,649,699,792,786,798,732,751,753,766,748,757,794,676,497,467,480,519,616,647,570,608,649,641,582,697,631,637,667,684,665,679,651,716,721,732,717,712,686,721,698,771,781,933,884,923,935,888,908,928,923,963,925,956,937,916,895,840,851,826,752,728,705,667,720,624,677,738,767,840,587,638,577,528,426,368,378,366,331,315,272,252,216,184,147,496\nEastleigh,E07000086,male,689,734,756,819,820,831,841,909,887,901,917,901,839,844,791,838,828,761,701,560,594,570,663,756,730,769,746,790,801,881,923,920,927,888,866,911,934,879,881,898,932,947,869,804,843,850,840,876,898,903,971,967,925,936,942,912,920,992,865,856,826,839,831,760,721,714,673,688,667,619,589,645,662,722,697,530,562,491,439,372,394,374,323,303,283,241,218,177,163,142,495\nFareham,E07000087,male,454,484,530,577,618,638,600,629,616,638,677,616,677,631,603,606,629,694,566,482,515,530,578,651,618,561,566,549,532,564,609,675,636,665,641,672,677,665,618,637,661,664,592,606,623,609,633,680,789,728,812,813,800,838,836,835,867,897,873,866,818,781,836,741,756,741,629,601,620,598,604,628,695,771,831,600,592,566,488,389,372,402,341,360,295,290,242,221,190,157,491\nGosport,E07000088,male,418,472,446,446,430,467,467,455,535,525,519,539,500,493,530,469,474,458,418,382,398,440,491,443,477,474,486,478,517,474,488,527,504,505,467,492,508,485,509,480,452,486,453,452,438,413,449,480,486,568,586,502,562,571,586,590,606,600,590,572,584,565,532,516,450,469,431,448,380,419,425,429,446,530,491,405,371,284,287,222,216,238,221,198,190,147,113,102,109,91,275\nHart,E07000089,male,476,489,579,496,610,658,656,576,640,690,701,656,656,642,600,634,637,710,634,559,446,454,496,540,510,558,532,506,506,545,575,516,563,562,563,594,552,591,620,621,664,679,654,618,647,681,729,743,773,771,801,674,720,728,763,749,743,700,739,703,643,590,552,524,515,482,450,441,440,421,416,475,465,544,547,392,403,389,332,326,286,278,256,237,225,194,182,143,111,112,339\nHavant,E07000090,male,545,635,621,625,724,701,647,711,728,746,742,687,773,668,715,673,696,679,593,519,556,557,611,591,654,631,641,663,705,672,723,753,676,705,688,725,662,736,665,662,661,645,646,571,571,628,615,649,752,780,799,818,901,834,910,878,925,904,911,910,891,843,852,836,795,758,776,735,718,700,678,658,728,821,844,618,651,563,530,423,405,402,386,326,301,301,262,234,231,184,516\nNew Forest,E07000091,male,662,682,738,736,846,869,860,814,985,931,985,950,984,953,976,900,923,940,792,749,673,671,801,804,767,786,698,748,722,834,839,789,769,834,816,758,805,804,857,868,934,889,868,831,808,844,898,955,1016,1098,1154,1179,1222,1186,1275,1333,1372,1364,1303,1349,1339,1156,1373,1214,1164,1131,1163,1224,1158,1136,1137,1214,1221,1392,1405,1047,1167,1051,854,775,731,723,642,622,594,520,449,404,376,287,1076\nRushmoor,E07000092,male,620,690,661,625,623,621,684,600,621,651,592,575,531,593,550,536,560,565,568,557,505,575,586,609,643,731,773,758,765,800,844,830,849,908,844,857,751,776,762,762,759,766,659,645,643,660,623,650,659,655,698,689,654,673,688,740,651,644,638,640,604,513,470,486,490,392,387,374,338,341,336,346,414,447,469,291,345,352,282,236,243,229,190,162,151,118,95,86,63,66,186\nTest Valley,E07000093,male,630,691,713,733,807,795,785,773,810,792,787,746,823,792,667,686,749,688,595,530,464,546,545,657,730,688,676,736,719,766,827,783,867,804,769,800,824,746,779,821,831,858,819,763,771,845,895,858,886,916,929,907,934,977,1007,1021,970,941,912,932,847,838,792,766,799,700,720,671,606,617,666,663,695,747,802,550,642,546,489,422,342,366,385,334,319,271,267,188,146,140,429\nWinchester,E07000094,male,584,597,591,623,718,679,718,777,745,818,787,779,764,831,897,851,829,917,1043,1067,890,850,674,738,631,692,670,660,594,654,692,632,651,670,682,727,708,689,722,705,759,751,724,753,762,793,784,806,877,864,885,821,851,901,924,876,881,878,856,847,814,755,742,801,676,632,639,647,600,640,619,616,633,669,745,581,581,508,451,394,366,377,348,304,284,247,219,206,149,158,528\nAshford,E07000105,male,727,726,755,870,808,820,831,856,894,867,838,893,871,845,857,785,836,868,727,594,582,588,688,683,728,755,768,728,791,822,834,831,801,863,830,805,783,830,791,734,801,812,768,772,802,768,804,804,824,843,929,991,1024,984,956,946,954,954,852,896,839,782,710,677,653,690,636,609,629,634,584,670,658,732,743,561,594,526,461,386,362,372,319,292,256,236,213,147,138,132,365\nCanterbury,E07000106,male,665,669,714,729,752,804,762,784,788,869,851,872,862,829,944,924,898,972,1389,2072,1946,1928,1506,1120,1015,884,896,861,860,812,811,835,803,838,809,799,839,758,769,775,869,826,757,751,736,780,844,830,902,931,936,896,966,919,1001,1023,1067,936,957,945,923,862,881,858,851,844,820,779,835,762,807,853,871,940,932,706,702,588,628,486,452,504,427,391,345,293,269,203,180,154,545\nDartford,E07000107,male,805,858,908,876,867,815,830,816,863,884,859,873,825,799,739,768,747,660,613,469,465,516,574,620,606,653,715,695,794,797,894,900,926,918,946,913,947,917,858,901,957,911,890,822,799,839,797,813,746,786,761,732,752,781,752,795,758,677,704,625,589,616,538,504,526,455,452,450,386,388,412,361,373,437,394,299,313,265,250,236,218,200,174,184,177,146,122,119,94,78,273\nDover,E07000108,male,555,567,572,624,608,657,634,688,677,677,736,696,723,655,650,701,648,669,580,529,482,517,564,583,601,585,620,609,655,689,636,613,722,677,687,689,647,655,615,614,683,603,622,607,586,603,581,637,690,699,812,739,749,794,864,880,900,864,863,809,819,761,818,786,770,707,744,778,677,684,674,638,745,816,810,617,634,529,477,440,388,376,357,304,269,252,204,150,163,138,380\nGravesham,E07000109,male,654,699,645,693,676,726,724,704,724,772,749,753,675,734,680,729,657,705,613,507,517,559,593,630,616,584,585,656,645,675,710,700,705,759,733,728,719,697,685,716,730,695,714,610,647,668,683,634,702,686,758,739,722,709,721,789,683,751,697,657,591,601,603,571,498,530,489,461,426,418,451,421,441,503,475,342,372,363,313,268,243,263,229,197,184,166,160,136,107,104,277\nMaidstone,E07000110,male,1010,1048,1086,1147,1066,1143,1126,1073,1185,1154,1104,1048,1094,1039,1047,1032,1043,1033,830,712,710,856,989,1012,965,1081,1067,1171,1179,1163,1207,1165,1168,1264,1147,1216,1211,1148,1192,1168,1213,1185,1134,1023,1084,1075,1106,1112,1210,1208,1262,1297,1269,1301,1231,1272,1205,1185,1132,1096,1029,1084,1005,929,859,870,811,783,825,769,792,822,805,1000,992,725,737,658,557,513,429,456,415,380,350,338,273,213,172,182,492\nSevenoaks,E07000111,male,641,651,707,681,778,708,765,725,802,834,838,862,796,845,818,767,751,737,594,422,419,499,558,537,533,526,541,547,561,549,593,593,623,666,654,638,696,654,713,724,723,777,758,750,715,734,839,773,836,856,827,842,783,849,949,909,860,826,864,846,788,716,705,688,655,634,609,668,622,596,577,586,632,724,732,543,585,480,446,360,350,330,318,297,273,256,212,197,163,152,456\nFolkestone and Hythe,E07000112,male,518,508,541,523,564,575,557,548,645,625,638,666,639,603,606,577,583,574,543,496,505,530,556,629,571,575,553,562,573,636,573,577,588,613,583,555,559,584,548,593,632,645,561,596,526,570,622,645,610,762,791,754,828,806,775,883,818,807,870,747,816,775,758,684,669,643,651,632,696,649,693,674,701,871,851,555,635,534,484,387,417,353,327,298,279,233,218,176,148,123,404\nSwale,E07000113,male,793,865,962,932,946,975,877,979,1045,998,1012,943,1020,969,959,947,917,885,813,690,695,801,817,899,889,882,912,977,1020,970,1026,1071,1047,992,1071,1004,992,966,983,998,960,1051,935,830,837,862,891,886,998,1033,1019,1044,1033,1082,1058,1085,1099,1130,1008,980,951,897,897,886,853,805,778,789,699,702,762,775,766,866,818,602,649,581,502,422,403,411,356,308,259,233,217,159,126,123,356\nThanet,E07000114,male,721,777,768,795,796,812,781,784,860,926,845,836,894,889,810,804,864,835,703,606,622,634,685,744,721,675,724,712,733,786,843,756,770,829,740,826,757,815,735,789,830,816,751,781,740,721,789,779,857,881,928,841,927,894,977,939,982,986,991,983,882,825,891,912,819,789,793,810,761,800,845,816,853,958,914,694,733,649,567,466,472,427,369,366,324,258,241,204,174,146,504\nTonbridge and Malling,E07000115,male,657,773,858,795,852,837,828,883,955,890,922,889,895,902,903,918,887,916,761,522,491,537,633,626,653,636,649,665,665,733,732,721,800,795,731,746,759,789,763,822,842,854,813,817,782,843,927,921,933,1004,965,997,942,1000,952,930,935,938,896,885,854,760,779,736,697,612,662,635,619,571,570,619,597,733,697,465,529,504,467,356,350,328,360,287,298,248,219,194,151,114,377\nTunbridge Wells,E07000116,male,582,592,647,687,663,712,667,718,753,790,821,817,853,804,880,748,728,761,599,408,370,386,517,582,576,541,591,551,644,596,620,626,668,677,674,718,659,671,682,702,754,791,755,733,727,755,795,831,864,854,849,863,883,875,946,821,867,829,785,708,708,687,666,633,598,529,576,523,469,493,519,528,561,596,586,470,461,422,391,316,322,293,287,270,217,210,178,175,156,115,428\nCherwell,E07000177,male,936,970,1008,962,979,969,984,956,971,1010,1050,1042,978,976,986,931,943,908,812,652,673,776,841,886,941,968,1060,1061,1141,1144,1163,1183,1230,1276,1234,1196,1190,1146,1206,1093,1180,1170,1066,1051,1007,1017,1024,1042,1129,1077,1069,1130,1117,1196,1185,1160,1141,1158,1115,1030,1013,920,839,862,867,827,741,709,709,712,670,687,722,764,732,539,571,530,472,399,370,374,340,320,290,239,239,210,156,145,446\nOxford,E07000178,male,725,744,706,725,796,811,741,793,823,893,866,849,949,973,861,890,867,947,1835,3269,2570,2552,2256,1825,1599,1542,1626,1532,1485,1473,1445,1378,1338,1248,1219,1227,1089,1079,1054,1006,1044,1048,938,911,851,839,888,826,881,888,842,927,846,871,823,848,784,788,801,734,602,657,607,660,593,579,518,489,427,474,476,468,454,480,444,324,360,323,305,276,212,232,242,201,182,177,163,133,126,118,333\nSouth Oxfordshire,E07000179,male,781,763,855,855,879,923,867,900,916,928,978,950,880,941,883,900,867,885,722,584,555,598,735,818,818,803,783,834,827,905,980,904,938,908,926,924,980,936,935,904,1002,1002,925,935,944,938,1023,1009,1020,1081,1129,1056,1106,1126,1173,1069,1132,1088,1065,1009,1010,927,876,851,770,756,760,770,739,673,722,704,711,778,836,651,674,562,540,444,451,428,426,388,322,283,293,221,208,172,518\nVale of White Horse,E07000180,male,724,811,807,823,856,864,808,846,834,926,926,901,889,904,964,927,881,877,765,549,531,569,685,741,761,818,800,839,873,910,887,917,948,950,898,938,897,944,969,883,917,956,884,866,852,904,885,908,936,918,887,937,970,951,954,1002,1014,939,943,900,864,814,789,817,716,729,711,668,665,674,679,679,727,749,721,537,625,497,451,426,360,403,357,312,309,262,248,192,168,125,514\nWest Oxfordshire,E07000181,male,565,569,624,543,592,669,625,680,739,729,699,725,680,726,672,642,679,662,595,455,469,547,570,652,686,671,654,663,684,731,681,687,683,747,692,652,675,664,706,748,744,658,690,634,646,666,621,748,752,794,838,800,767,845,814,817,842,853,842,838,770,736,696,690,664,604,627,573,603,548,604,570,604,679,587,523,535,453,470,367,313,348,310,274,276,263,192,179,138,145,454\nElmbridge,E07000207,male,776,860,837,915,944,932,909,1018,1004,1073,1088,1032,1024,1003,967,942,911,888,682,412,382,456,586,585,612,576,582,583,547,627,659,681,701,736,731,756,751,790,923,952,972,1083,1062,1099,1132,1050,1112,1135,1136,1103,1068,1023,1043,1001,983,1009,1026,898,923,921,860,764,756,738,657,631,620,609,556,592,562,546,589,627,648,476,478,449,434,308,306,304,284,280,255,242,212,180,197,140,503\nEpsom and Ewell,E07000208,male,456,447,448,513,539,511,525,543,552,574,540,560,538,572,553,548,534,523,428,307,366,379,392,399,411,358,397,364,384,411,418,467,428,460,481,453,496,489,571,585,581,618,575,585,605,638,615,598,572,639,553,572,549,590,580,578,546,579,538,486,474,427,424,427,414,380,325,313,341,331,339,362,358,392,411,293,285,260,249,213,202,189,166,158,153,148,110,100,100,91,241\nGuildford,E07000209,male,614,652,749,693,696,777,761,771,844,880,913,801,883,875,806,718,816,994,1269,1702,1605,1433,1500,1148,938,928,932,825,872,864,809,890,847,844,835,838,847,833,829,833,916,878,886,876,891,887,899,978,992,972,992,940,986,979,966,961,998,967,917,898,844,815,719,758,673,661,672,611,621,601,556,609,578,693,678,505,493,477,412,347,328,350,284,268,263,256,219,190,175,138,488\nMole Valley,E07000210,male,357,383,424,409,423,447,446,461,513,513,591,505,539,565,522,515,555,526,453,291,291,347,427,449,433,432,435,363,399,413,405,413,419,408,409,424,449,473,453,490,556,507,527,498,502,541,582,594,582,691,664,612,655,703,739,718,711,684,618,633,618,611,623,567,546,518,469,517,511,464,448,523,451,492,583,429,447,398,389,264,276,269,265,254,248,220,180,167,138,140,390\nReigate and Banstead,E07000211,male,866,928,894,955,922,1022,987,1007,1033,1064,1026,1015,1068,1012,934,891,872,916,709,538,528,591,721,763,786,762,858,786,824,901,926,1034,1025,1048,966,1019,1040,1027,1064,1116,1116,1134,1086,1080,1000,1055,1097,1078,1041,1109,1052,1022,1011,1026,1078,1108,1044,1009,990,928,921,921,839,793,755,733,676,665,646,631,617,622,665,739,717,539,528,464,468,372,347,321,333,300,246,230,213,187,168,139,530\nRunnymede,E07000212,male,445,481,515,452,520,467,519,464,436,514,490,521,505,514,470,461,455,449,740,1066,953,831,608,559,506,494,459,478,519,496,548,489,523,552,576,522,559,492,594,538,558,629,526,552,536,556,571,554,603,621,558,567,607,592,589,587,603,599,583,511,503,500,471,454,417,401,384,380,339,338,318,321,359,397,410,311,296,309,281,223,196,204,172,169,155,161,135,142,108,93,306\nSpelthorne,E07000213,male,592,629,595,594,664,623,631,639,669,680,667,602,638,627,634,580,609,598,501,428,431,439,489,540,581,552,598,590,599,601,672,668,697,791,714,662,788,710,750,835,748,725,750,721,690,668,683,596,702,753,730,697,758,657,752,793,702,771,722,729,712,605,598,523,494,509,471,418,450,415,431,411,412,449,495,378,352,323,330,252,272,284,226,249,231,194,156,125,129,117,355\nSurrey Heath,E07000214,male,438,406,473,491,512,562,536,552,560,565,581,592,618,563,560,561,614,568,463,333,324,363,456,498,534,470,507,452,503,494,499,574,534,574,510,486,557,554,562,630,591,595,597,593,631,606,656,657,599,683,744,679,672,668,703,681,670,656,708,643,602,513,551,533,493,461,433,433,426,400,376,374,429,496,474,331,349,378,341,265,246,251,231,198,205,173,157,144,120,104,296\nTandridge,E07000215,male,468,491,550,524,536,570,497,523,588,551,546,559,564,532,554,530,544,557,466,338,340,385,447,422,463,423,411,381,348,400,444,457,470,485,456,489,524,538,507,554,523,537,544,546,514,509,601,566,599,612,630,624,590,660,641,669,652,659,615,641,631,549,502,535,474,458,425,454,451,420,392,425,445,510,483,379,357,339,321,234,227,238,239,225,202,165,124,134,131,107,394\nWaverley,E07000216,male,556,627,684,730,745,786,755,762,868,832,831,812,869,935,980,917,891,974,780,564,516,536,622,636,530,545,505,521,557,584,561,558,577,611,636,696,699,696,719,774,786,817,783,790,827,903,917,915,929,983,1008,970,938,949,929,966,910,875,890,801,825,782,766,735,684,648,647,662,623,600,587,658,642,713,698,527,603,597,505,380,378,394,356,342,284,292,262,199,195,179,570\nWoking,E07000217,male,592,612,691,664,668,676,685,679,693,748,709,686,733,713,667,659,592,596,539,388,443,417,534,551,600,619,637,607,716,635,662,697,754,737,717,754,730,737,751,836,843,867,777,765,806,806,786,761,739,775,743,723,712,740,686,673,702,715,648,597,590,554,556,539,508,459,466,410,459,457,433,416,393,446,428,329,347,302,271,236,215,226,187,192,201,196,133,132,112,105,346\nAdur,E07000223,male,274,281,351,349,344,394,362,410,434,436,409,408,373,421,395,358,381,368,344,253,221,287,298,298,317,306,306,277,321,323,339,331,329,366,367,385,348,361,369,406,388,412,399,388,398,393,416,397,485,505,456,469,473,412,456,484,493,452,451,400,416,375,368,384,362,343,348,318,362,324,298,343,354,395,378,290,339,289,302,217,212,226,184,173,182,145,127,98,94,85,259\nArun,E07000224,male,648,717,741,775,799,827,818,769,883,905,837,900,894,862,835,831,851,861,737,712,697,673,772,761,812,844,819,841,806,902,907,936,900,912,914,919,923,881,896,858,886,879,881,767,804,784,826,906,976,1014,1083,1096,1160,1114,1174,1118,1232,1183,1099,1108,1053,1043,1010,1021,1032,984,996,1018,976,1031,1041,1095,1190,1277,1258,945,1067,927,868,711,673,614,613,605,526,449,411,341,281,270,873\nChichester,E07000225,male,480,531,549,576,546,575,615,616,686,677,689,643,672,692,659,645,627,661,642,633,645,654,656,651,613,690,638,592,618,622,659,618,615,681,542,667,696,618,643,597,632,618,616,619,583,595,622,677,754,803,739,808,859,802,865,861,875,930,924,855,821,870,862,810,770,808,800,804,783,690,721,754,793,848,897,701,710,669,631,539,446,488,418,431,364,332,297,274,199,178,640\nCrawley,E07000226,male,786,799,798,769,793,860,850,872,840,817,897,830,813,766,741,722,744,737,616,627,592,630,633,723,737,750,801,828,888,943,977,958,1001,974,946,978,926,1035,942,972,970,979,896,844,793,776,844,799,819,799,830,803,764,758,765,750,763,741,689,666,666,630,622,584,493,537,450,451,417,383,414,377,369,393,390,278,283,260,224,197,189,160,162,151,129,134,122,123,93,65,295\nHorsham,E07000227,male,687,715,755,769,865,830,783,812,887,825,892,967,944,923,918,892,896,841,746,523,554,603,657,691,717,718,723,725,752,800,848,781,822,848,852,845,818,797,839,886,924,900,908,824,811,818,912,924,994,986,1041,1004,1081,1110,1111,1162,1115,1095,1091,1054,1080,977,970,917,864,878,758,816,806,770,783,797,833,860,955,682,673,619,583,494,488,421,409,433,351,287,281,231,207,185,620\nMid Sussex,E07000228,male,767,762,870,862,953,968,927,989,952,970,1032,1003,971,965,973,935,959,948,797,550,546,605,673,761,758,702,750,785,720,766,831,844,850,964,855,907,923,994,956,966,993,1075,1007,1030,1003,998,1053,1091,1122,1132,1143,1084,1121,1169,1076,1092,1097,1067,990,996,909,871,872,829,841,770,855,698,716,698,694,711,713,874,835,628,669,644,585,411,398,383,392,357,324,316,252,216,207,165,590\nWorthing,E07000229,male,521,548,567,577,586,563,633,614,643,654,670,699,636,620,627,586,631,676,529,477,472,477,534,540,573,560,610,633,645,589,695,689,674,723,656,652,722,656,701,659,747,666,648,701,678,700,703,764,757,837,773,740,809,815,853,777,850,780,740,713,698,712,682,629,604,560,571,576,527,517,547,532,605,695,697,509,487,445,446,299,329,336,297,300,250,218,212,175,152,129,524\nBath and North East Somerset,E06000022,male,926,898,918,1015,940,1026,953,1071,1013,1088,1109,1134,1036,1149,1070,1053,990,1063,1718,2525,2376,2093,2061,1546,1263,1133,1120,1152,1089,1130,1129,1091,1161,1169,1084,1130,1093,1063,1002,1078,1083,1100,1102,1030,968,1041,1039,1161,1236,1242,1211,1221,1231,1193,1305,1264,1286,1256,1227,1223,1127,1055,1084,1059,968,944,903,874,878,880,852,882,975,994,1010,752,795,673,620,570,488,493,478,465,401,360,312,264,243,207,705\n\"Bristol, City of\",E06000023,male,2619,2612,2721,2674,2759,2658,2716,2718,2747,2763,2758,2655,2598,2571,2428,2209,2390,2327,3131,4692,5148,5065,4693,4253,4308,4339,4401,4460,4483,4534,4492,4442,4373,4320,4128,4176,3968,3769,3635,3492,3546,3319,3091,2911,2876,2723,2771,2630,2704,2753,2770,2598,2685,2661,2681,2590,2726,2443,2389,2343,2189,2055,2091,1933,1904,1793,1728,1688,1545,1547,1562,1544,1519,1598,1529,1177,1138,1093,1017,840,767,814,724,676,577,491,449,404,362,326,1010\nNorth Somerset,E06000024,male,977,1070,1128,1104,1167,1207,1195,1211,1328,1373,1340,1364,1327,1383,1240,1243,1203,1181,1069,876,929,925,987,1048,1047,1014,972,1093,1063,1126,1157,1111,1209,1264,1172,1236,1200,1232,1291,1342,1395,1272,1281,1219,1269,1251,1350,1438,1441,1518,1510,1546,1554,1544,1460,1680,1553,1578,1551,1472,1357,1282,1335,1270,1227,1214,1203,1203,1179,1165,1226,1241,1295,1400,1459,1046,1207,1006,942,768,757,725,666,580,538,467,470,354,274,283,881\nSouth Gloucestershire,E06000025,male,1529,1670,1691,1750,1688,1802,1655,1726,1786,1795,1761,1751,1720,1705,1630,1574,1552,1603,1732,1959,1929,1850,1908,1935,1877,1854,1944,1915,1962,1958,1951,1993,2054,2033,1958,2002,1942,1977,1871,1913,1868,1880,1793,1685,1729,1718,1690,1886,1813,1887,2014,1960,1984,1988,2067,2030,2003,1967,2000,1878,1792,1641,1628,1502,1487,1355,1313,1336,1320,1259,1221,1334,1267,1433,1414,1062,1281,1066,1066,833,743,751,705,667,591,513,469,387,353,266,967\nPlymouth,E06000026,male,1274,1258,1420,1414,1463,1563,1471,1511,1622,1601,1596,1539,1557,1515,1417,1436,1440,1381,1635,2056,2091,2254,2237,1892,1853,1874,1795,1783,1744,1782,1917,1833,1811,1775,1734,1724,1719,1737,1691,1781,1688,1603,1584,1450,1469,1491,1428,1585,1628,1653,1685,1692,1751,1776,1757,1779,1764,1695,1770,1616,1670,1525,1472,1512,1338,1312,1324,1274,1206,1170,1158,1173,1257,1369,1340,996,1079,907,885,670,623,628,618,530,466,436,366,326,269,227,725\nTorbay,E06000027,male,558,635,644,630,628,678,718,765,770,799,745,795,757,789,751,755,765,738,706,551,528,607,661,699,680,645,636,700,738,731,761,685,792,734,713,724,677,730,728,702,733,704,717,587,690,694,756,864,874,860,986,1006,985,1048,1058,1034,1055,1066,1052,1016,1039,981,917,986,922,912,867,937,894,884,813,925,983,1030,1092,792,829,772,660,544,497,499,450,422,407,347,295,272,237,201,587\nSwindon,E06000030,male,1310,1349,1371,1451,1442,1530,1539,1500,1626,1604,1616,1529,1474,1558,1405,1426,1321,1367,1193,1069,1096,1109,1245,1346,1326,1400,1455,1386,1510,1650,1678,1683,1653,1671,1741,1679,1661,1732,1690,1707,1753,1757,1609,1569,1495,1543,1680,1663,1715,1745,1715,1719,1626,1642,1750,1642,1683,1669,1630,1604,1486,1369,1375,1237,1165,1088,1061,1064,947,985,907,925,894,984,983,710,734,633,629,541,468,484,446,411,367,333,281,262,229,170,588\nCornwall,E06000052,male,2312,2558,2619,2793,2853,2946,2936,2994,3224,3342,3269,3212,3242,3201,3157,2979,2995,3100,2953,2895,3054,2948,2834,2885,2798,2679,2704,2825,2775,3029,3175,3076,2982,3090,2941,3031,2950,2987,2942,3069,3379,3139,2874,2849,3034,2898,3093,3342,3642,3629,3841,3771,3832,3973,4035,4193,4264,4263,4015,4038,4056,3927,3951,3828,3841,3638,3537,3634,3540,3560,3574,3648,3831,4129,4237,3070,3250,2849,2591,2073,1901,1904,1731,1587,1375,1218,1134,859,825,718,2145\nIsles of Scilly,E06000053,male,11,10,12,6,9,8,11,13,14,10,6,10,8,15,14,14,4,3,4,5,9,10,6,5,12,8,9,13,9,11,5,10,13,17,10,10,11,13,11,14,10,16,14,23,7,13,8,6,7,9,16,15,14,14,12,16,18,24,24,7,9,15,13,19,11,10,12,16,9,15,14,13,16,13,14,19,23,12,10,7,10,18,6,6,7,4,4,1,5,2,8\nWiltshire,E06000054,male,2271,2584,2684,2720,2770,2925,2989,2937,3165,3299,3203,3094,3113,2949,2996,2895,2988,3272,2870,2558,2290,2426,2782,2781,2922,2968,2961,2889,2896,2950,3031,2991,3012,3088,3063,3100,3004,3081,3002,2947,3050,3066,3066,2681,2719,2900,3007,3163,3440,3675,3605,3589,3717,3690,3750,3802,3817,3784,3558,3613,3521,3416,3315,3041,2967,2826,2806,2817,2708,2712,2673,2709,2769,3090,3073,2217,2449,2133,2010,1672,1499,1520,1412,1231,1165,1040,947,754,680,593,1787\n\"Bournemouth, Christchurch and Poole\",E06000058,male,1880,1844,1912,1994,2059,2107,2041,2163,2202,2322,2271,2193,2195,2211,2072,2008,2053,2029,2209,2891,2841,2870,2801,2547,2361,2336,2328,2298,2391,2435,2538,2560,2498,2585,2523,2403,2530,2567,2615,2662,2706,2710,2498,2404,2322,2394,2424,2369,2500,2663,2671,2603,2737,2678,2707,2648,2677,2592,2570,2563,2444,2348,2306,2206,2175,2036,1922,2083,1963,1933,1980,1989,2040,2277,2322,1770,1850,1615,1537,1217,1151,1133,1122,1074,972,871,767,661,579,459,1792\nDorset,E06000059,male,1450,1527,1559,1542,1651,1796,1710,1799,2006,1982,1968,1990,2018,2229,2144,2085,2273,2217,2001,1565,1478,1551,1635,1692,1818,1742,1719,1695,1643,1657,1836,1809,1758,1804,1858,1806,1759,1708,1711,1841,1821,1930,1899,1713,1776,1833,1935,2011,2274,2291,2404,2495,2647,2613,2703,2763,2829,2968,2868,2910,2844,2722,2792,2804,2695,2560,2668,2589,2541,2577,2588,2696,2809,3221,3178,2320,2560,2125,2177,1690,1579,1498,1477,1370,1252,1056,946,838,715,609,2201\nEast Devon,E07000040,male,597,643,705,685,666,769,766,748,845,868,827,792,761,798,801,762,819,805,721,603,654,605,700,712,703,670,663,667,725,700,688,744,690,766,689,765,756,703,713,744,749,772,782,722,690,750,802,825,913,926,924,947,1043,1046,1051,1027,1065,1035,1007,1035,974,1010,997,969,1008,965,932,971,963,965,1044,1119,1061,1211,1261,937,979,912,888,690,627,616,601,557,546,440,363,351,293,271,947\nExeter,E07000041,male,605,584,596,619,604,650,611,659,635,656,661,649,634,613,590,585,582,640,1446,2437,2371,2090,1438,1047,934,917,891,843,923,880,889,911,917,912,921,844,852,846,858,804,799,797,778,700,613,697,763,681,718,811,742,759,835,766,768,765,750,750,689,634,691,618,651,597,572,539,523,508,513,500,512,537,504,532,576,410,414,372,333,325,297,284,287,242,229,194,170,151,121,102,401\nMid Devon,E07000042,male,391,397,456,397,427,447,441,475,527,497,512,498,516,527,559,530,495,494,444,364,331,330,365,399,406,416,399,421,374,410,398,458,423,417,408,463,451,467,409,461,480,468,407,395,452,430,499,490,569,533,616,629,583,607,583,601,619,636,608,577,567,548,591,549,508,494,482,514,541,479,487,552,491,533,577,437,429,407,367,333,258,266,200,212,217,199,162,122,121,110,327\nNorth Devon,E07000043,male,391,462,436,479,523,481,504,535,611,547,602,590,553,553,542,520,579,535,530,495,353,432,448,486,484,486,484,511,504,518,561,502,498,556,482,477,463,479,484,503,562,550,538,500,475,458,536,582,621,621,687,684,688,681,703,723,744,762,736,704,746,690,669,684,683,616,597,621,599,609,600,641,680,702,750,553,549,510,489,387,342,310,312,286,281,259,211,176,143,137,446\nSouth Hams,E07000044,male,309,344,366,412,386,440,407,419,453,487,514,476,487,455,507,465,488,474,432,350,333,309,346,416,384,393,334,356,347,437,391,393,411,425,423,413,358,437,400,455,416,438,415,387,426,453,465,485,524,562,563,561,649,643,662,689,693,713,663,721,708,692,699,656,671,657,603,607,625,629,622,654,664,770,701,524,561,492,447,372,341,290,337,275,244,250,195,167,137,98,408\nTeignbridge,E07000045,male,582,576,624,627,640,679,673,747,706,748,731,795,693,742,743,713,697,706,602,515,547,546,660,605,657,621,630,638,659,647,688,639,695,748,736,698,726,688,694,735,703,775,687,659,628,708,711,811,804,860,947,882,931,917,980,1012,1023,1071,968,1083,948,962,960,931,907,891,925,933,847,848,880,867,905,1039,1009,807,837,714,650,536,482,480,433,378,368,312,278,230,209,202,610\nTorridge,E07000046,male,248,278,291,300,325,357,330,398,376,390,361,376,394,358,359,359,349,355,297,278,274,273,269,342,340,344,308,306,324,312,305,357,323,335,298,319,299,285,325,325,316,327,302,295,314,340,340,357,373,464,471,497,465,498,496,572,541,537,526,526,544,511,547,505,488,495,509,487,508,484,502,507,507,588,542,411,424,396,360,312,276,259,219,231,177,163,131,158,119,87,298\nWest Devon,E07000047,male,215,192,197,236,262,293,242,274,304,301,286,308,296,343,306,345,342,359,282,213,194,227,209,278,238,249,199,262,236,249,277,268,277,252,248,286,283,254,290,263,309,316,281,243,226,285,285,339,388,360,385,405,407,420,462,448,486,481,450,470,476,433,435,423,433,388,411,406,416,398,397,410,381,482,431,378,387,345,287,241,235,232,190,193,177,138,138,134,105,68,288\nCheltenham,E07000078,male,521,535,662,630,654,636,675,657,633,662,664,695,682,631,713,613,600,667,668,693,757,785,746,812,842,873,830,819,809,896,827,864,846,779,788,830,800,799,834,811,818,774,793,699,700,705,697,744,730,743,732,779,793,819,791,820,848,791,766,733,776,700,656,645,613,550,520,527,528,539,497,556,570,564,581,438,473,392,376,310,338,288,307,268,291,237,183,159,144,116,432\nCotswold,E07000079,male,402,379,427,437,432,442,450,462,462,502,533,502,492,482,495,447,462,456,453,358,385,428,442,405,400,385,425,372,395,392,422,465,437,407,436,432,460,476,481,503,462,537,491,440,500,495,533,561,583,638,591,632,661,654,712,743,738,712,680,694,661,674,626,604,563,589,568,640,569,544,574,558,631,616,662,448,500,482,478,359,337,312,311,230,293,213,191,167,157,125,410\nForest of Dean,E07000080,male,355,405,436,405,452,430,414,441,467,477,486,467,453,457,447,453,503,597,538,414,398,414,421,456,430,430,442,482,445,403,499,488,441,482,482,426,431,430,439,456,412,439,439,364,419,429,471,490,529,587,582,627,624,647,701,730,692,659,703,667,637,647,610,573,598,553,522,601,578,570,525,578,617,609,611,442,454,466,445,353,304,351,280,243,229,172,164,139,108,93,284\nGloucester,E07000081,male,708,749,752,784,846,837,822,816,907,887,844,789,833,915,779,811,750,748,743,824,829,897,889,800,806,881,825,896,941,870,935,980,966,989,917,857,955,941,879,949,927,884,833,794,763,799,775,845,832,906,880,887,954,917,892,916,875,927,937,848,883,803,752,713,673,653,611,577,524,529,531,535,556,577,546,413,448,414,411,363,279,298,294,232,229,215,183,125,151,106,338\nStroud,E07000082,male,520,582,603,603,626,677,608,637,684,800,758,722,724,749,777,685,667,744,609,551,469,480,542,561,544,598,627,583,588,624,670,656,594,602,613,653,643,651,639,696,724,707,694,641,657,703,755,811,797,913,929,913,922,921,970,896,945,915,920,889,938,853,821,787,750,767,745,737,661,733,699,730,736,791,720,572,570,558,535,406,393,392,338,309,288,235,228,208,183,124,450\nTewkesbury,E07000083,male,490,547,589,547,584,622,571,589,624,572,603,546,600,526,552,504,532,500,440,336,360,359,434,447,484,466,494,501,540,528,627,573,578,568,561,538,588,562,581,580,612,625,528,506,514,538,518,591,602,632,588,595,685,675,696,716,683,696,647,653,561,574,573,557,536,556,501,497,514,493,472,519,524,576,602,423,479,414,410,325,292,325,279,278,215,164,180,138,118,92,355\nMendip,E07000187,male,513,561,533,551,599,628,613,624,621,615,680,736,710,744,771,719,792,831,720,447,406,510,523,569,550,551,567,601,594,559,589,616,591,647,617,615,589,581,634,624,617,628,604,573,588,619,655,741,733,828,878,839,874,904,884,912,872,922,881,835,834,756,749,767,692,696,704,691,681,674,692,719,728,726,769,568,593,508,498,383,381,354,317,347,256,252,210,164,173,119,457\nSedgemoor,E07000188,male,550,663,614,643,660,710,731,698,700,712,757,774,718,763,682,738,670,731,671,577,567,583,613,670,672,675,669,721,694,706,771,702,801,715,703,716,697,723,697,695,689,722,643,631,643,604,712,777,794,914,867,863,971,912,1017,966,999,971,933,891,884,826,833,759,837,748,731,756,695,704,789,765,775,842,857,609,674,549,548,480,410,458,377,307,312,249,236,189,180,140,486\nSouth Somerset,E07000189,male,823,841,862,836,861,902,875,892,975,1000,992,986,993,1013,934,949,910,908,836,763,781,833,863,969,921,913,936,962,937,980,978,1010,967,992,962,954,914,909,945,925,906,906,915,890,793,900,937,962,1058,1097,1183,1215,1123,1246,1214,1280,1261,1235,1254,1228,1194,1151,1101,1115,1091,1046,1067,1074,1086,1136,1139,1066,1130,1239,1217,909,942,880,807,719,597,609,565,508,460,394,336,301,214,225,787\nSomerset West and Taunton,E07000246,male,708,722,706,775,787,846,846,847,868,910,874,870,868,897,915,919,910,976,851,672,583,643,743,752,744,812,795,861,860,831,896,894,875,926,859,861,860,888,888,880,843,851,814,764,805,776,809,944,955,973,1057,1017,1061,1080,1113,1133,1160,1143,1100,1113,1045,1048,1029,1038,976,889,987,1011,1002,1021,975,979,1038,1110,1042,831,840,797,758,615,501,537,527,473,433,383,330,297,261,225,752\nIsle of Anglesey,W06000001,male,303,309,328,343,387,352,382,370,407,391,431,420,425,385,411,370,386,367,359,294,263,291,365,280,343,322,348,342,308,347,369,336,351,369,360,313,339,353,327,331,341,355,339,296,322,346,351,382,463,453,477,428,465,457,519,504,529,504,540,486,518,514,518,463,484,454,486,482,480,459,453,491,501,545,451,318,433,356,345,285,268,270,239,220,184,160,122,96,80,78,275\nGwynedd,W06000002,male,520,550,523,581,571,640,591,644,674,662,649,723,663,649,664,664,629,626,675,943,969,921,843,751,711,673,642,636,696,602,660,639,670,669,639,572,586,569,569,599,587,594,572,527,589,549,620,675,732,774,824,746,794,776,801,866,861,844,917,790,860,725,808,843,686,707,722,721,726,623,664,695,760,812,737,573,541,549,496,383,334,395,329,309,271,217,219,173,166,121,461\nConwy,W06000003,male,476,538,522,526,539,574,616,577,619,640,660,620,611,617,650,629,664,640,528,460,436,507,519,562,575,484,573,502,565,574,613,588,607,602,574,546,569,557,558,585,592,602,544,484,541,553,570,606,714,775,797,737,800,763,834,875,839,889,868,861,886,863,766,817,774,747,743,806,715,764,749,795,816,876,865,676,656,573,602,461,420,404,381,333,344,297,268,267,197,148,533\nDenbighshire,W06000004,male,458,508,488,479,571,519,521,539,560,563,566,593,592,590,554,587,620,600,551,408,422,452,459,521,487,495,469,498,514,506,475,499,486,475,513,488,478,458,440,478,487,476,458,414,491,491,518,542,541,631,658,648,647,669,668,695,750,731,689,690,677,674,659,625,606,591,595,586,602,577,567,653,666,705,641,450,512,455,451,376,353,297,286,277,244,188,193,148,121,111,351\nFlintshire,W06000005,male,759,736,804,813,807,834,874,893,931,951,956,982,939,1016,959,870,971,879,785,683,647,764,788,835,831,788,844,879,866,985,949,927,994,962,942,933,905,886,858,941,905,930,841,862,795,798,954,940,1012,1175,1146,1125,1255,1172,1090,1157,1153,1158,1128,1115,1059,1043,1023,925,899,825,818,846,839,821,910,852,914,973,956,618,724,660,562,489,471,438,410,378,317,254,248,184,161,135,467\nWrexham,W06000006,male,641,717,726,755,757,784,772,792,848,823,850,890,864,834,795,825,833,784,683,673,614,637,788,729,816,795,792,803,806,796,889,815,876,838,878,848,876,874,828,853,915,895,826,728,786,788,829,819,945,999,986,1026,989,975,980,981,1026,954,976,878,879,826,761,812,805,743,695,724,737,676,705,731,724,781,724,564,570,515,536,435,381,342,301,303,260,231,202,154,153,117,388\nCeredigion,W06000008,male,250,267,274,293,301,335,294,333,348,325,389,323,331,331,337,357,355,362,575,802,792,820,684,525,440,392,410,363,338,347,352,370,359,347,327,287,345,321,326,332,343,278,306,297,294,345,333,349,329,427,428,438,486,451,498,487,506,524,538,494,525,494,499,505,478,510,503,479,461,455,447,483,506,564,499,374,389,376,351,280,236,239,212,199,174,159,143,106,124,84,299\nPembrokeshire,W06000009,male,526,544,578,610,640,662,670,689,673,709,740,716,707,736,754,705,713,682,589,551,543,576,602,668,639,575,564,612,670,664,679,591,632,674,622,616,595,597,590,604,622,657,593,558,565,563,607,660,699,763,757,775,842,852,878,907,910,934,960,928,906,869,938,861,848,871,848,883,862,836,851,847,807,918,847,655,721,621,541,494,514,441,388,335,299,309,234,178,210,134,466\nCarmarthenshire,W06000010,male,869,808,920,953,1027,1053,1006,1004,1096,1140,1123,1107,1124,1102,1157,1124,1094,1140,977,870,859,839,873,993,998,982,944,965,953,1002,1077,1040,1044,1076,1058,1003,990,984,1013,1014,1017,1025,963,921,957,1012,1026,1064,1121,1254,1216,1223,1244,1250,1322,1382,1429,1360,1340,1362,1334,1322,1277,1306,1228,1172,1261,1239,1201,1167,1135,1191,1192,1254,1189,984,957,891,847,725,682,586,539,502,465,406,374,303,247,194,622\nSwansea,W06000011,male,992,1130,1187,1206,1273,1287,1354,1284,1391,1439,1459,1394,1459,1420,1406,1295,1406,1337,1530,2015,2421,2558,2205,1652,1588,1469,1339,1396,1404,1454,1601,1481,1409,1388,1492,1475,1489,1308,1512,1292,1466,1537,1264,1254,1308,1366,1352,1329,1329,1502,1449,1601,1682,1449,1570,1554,1690,1591,1470,1504,1478,1438,1394,1328,1315,1202,1213,1224,1211,1228,1145,1264,1161,1371,1285,893,997,888,867,751,678,623,590,567,500,440,380,320,291,264,754\nNeath Port Talbot,W06000012,male,632,635,742,767,793,784,795,797,812,904,917,870,868,864,841,858,840,758,1079,1258,905,756,797,737,815,794,794,808,839,866,864,817,814,811,871,856,879,852,839,839,834,827,826,788,772,724,826,804,838,908,958,924,966,962,935,1043,997,1008,1019,948,977,948,910,986,820,815,802,850,857,766,760,789,793,895,765,580,630,585,526,461,418,385,342,323,285,260,222,192,147,122,394\nBridgend,W06000013,male,666,703,739,809,832,790,841,866,871,927,940,926,896,902,826,861,871,800,764,681,658,731,782,892,905,868,856,892,899,892,987,959,979,952,1013,908,898,860,853,890,953,923,866,775,787,808,820,889,958,1028,1081,1001,1038,1066,1079,1030,1118,1049,1004,1039,953,878,931,870,863,811,771,800,742,764,768,763,792,816,771,650,633,619,499,472,449,397,364,345,275,243,252,145,182,129,424\nVale of Glamorgan,W06000014,male,631,634,727,702,755,765,724,796,877,857,814,865,899,862,818,748,730,808,706,574,600,582,597,679,641,662,680,712,691,747,716,695,746,798,786,784,732,760,800,808,855,892,733,694,720,706,806,771,816,859,853,864,890,872,917,891,898,918,904,921,930,818,847,778,784,781,733,788,740,701,715,729,720,763,764,543,600,574,486,409,395,402,360,313,265,241,216,208,151,143,415\nCardiff,W06000015,male,1817,1829,1950,2035,2082,2150,2197,2150,2211,2309,2337,2161,2192,2144,2111,1989,2082,1917,2774,4102,4082,3945,3642,3194,3316,3159,2989,2914,2872,2769,2747,2700,2557,2604,2628,2538,2422,2504,2413,2327,2390,2302,2220,2019,2101,1997,2026,2062,1948,2024,2116,2088,2018,2033,2090,1881,2094,2026,1952,1972,1783,1941,1775,1683,1685,1508,1521,1471,1346,1361,1363,1411,1340,1331,1314,995,1012,891,810,663,632,640,588,538,508,443,386,334,250,249,858\nRhondda Cynon Taff,W06000016,male,1223,1215,1366,1337,1343,1340,1442,1403,1430,1454,1494,1422,1594,1434,1459,1390,1433,1393,1347,1315,1390,1358,1590,1446,1500,1389,1501,1410,1478,1464,1543,1619,1575,1473,1514,1526,1458,1497,1456,1398,1385,1461,1364,1277,1186,1292,1282,1336,1541,1655,1670,1579,1660,1658,1622,1718,1745,1638,1618,1580,1478,1358,1495,1389,1356,1261,1237,1252,1151,1299,1189,1329,1302,1274,1304,1124,959,885,768,700,631,595,520,493,411,366,320,260,212,176,555\nCaerphilly,W06000018,male,794,905,956,1005,1004,1055,1048,1032,1093,1052,1111,1129,1140,1073,1068,1059,1074,1094,1001,848,908,913,867,953,1037,989,988,1026,1022,1063,1176,1056,1153,1106,1084,1117,1072,1057,1059,1041,1100,1046,990,949,1018,978,1011,1089,1147,1157,1235,1178,1293,1262,1225,1294,1278,1277,1248,1207,1097,1158,1064,1059,1036,906,941,990,941,939,933,956,905,1014,988,748,723,644,604,590,486,445,467,389,335,267,248,188,179,117,397\nBlaenau Gwent,W06000019,male,350,400,356,359,351,352,395,396,385,402,405,411,416,362,330,325,359,385,311,311,319,377,350,373,362,362,394,449,428,476,444,446,453,411,426,434,447,377,401,347,406,394,352,343,297,367,394,386,468,469,466,494,523,482,477,540,522,531,501,465,428,428,441,414,427,382,367,377,363,374,347,378,375,381,386,300,275,254,261,228,190,170,179,132,126,110,97,72,60,56,142\nTorfaen,W06000020,male,475,512,512,538,556,567,483,570,571,609,582,575,611,565,555,565,579,488,471,431,415,431,448,511,581,555,564,549,516,615,597,613,616,548,559,587,562,524,581,550,500,542,475,434,507,435,486,494,590,586,650,610,606,601,608,680,690,646,660,672,629,592,581,598,529,481,484,537,477,480,518,492,468,522,529,382,431,362,322,267,247,265,220,203,170,160,144,136,103,69,255\nMonmouthshire,W06000021,male,366,384,401,441,471,485,460,476,504,502,541,467,574,515,547,499,582,542,429,357,357,366,405,437,463,447,476,437,437,492,511,435,496,422,491,423,481,449,483,485,476,521,478,493,486,481,536,532,617,667,668,671,690,702,763,758,760,769,752,722,678,672,653,671,638,586,611,539,665,603,601,601,617,643,639,485,501,502,445,351,357,346,282,261,263,219,195,185,161,125,370\nNewport,W06000022,male,949,982,1037,969,1003,1178,1058,1040,1061,1023,1074,1014,1130,1090,894,960,1005,942,891,673,763,839,903,959,956,966,979,1047,1234,1108,1190,1202,1264,1208,1227,1116,1197,1057,1040,1014,1061,1104,990,943,895,927,994,877,1023,999,1101,1069,1076,1001,1046,1083,1085,1066,1031,953,1012,867,974,854,761,700,723,746,760,636,712,648,658,722,745,502,582,495,491,380,345,362,337,291,274,251,189,165,138,128,404\nPowys,W06000023,male,542,512,625,661,616,660,663,677,703,664,681,688,744,740,735,697,751,700,637,565,536,592,638,663,648,719,630,696,631,681,704,685,666,708,598,660,654,617,589,672,659,654,606,603,629,682,711,697,755,941,883,888,925,919,1010,1001,1087,1011,1071,1055,1023,1042,1008,986,1028,960,953,1005,982,940,955,971,1013,1062,1021,740,800,798,702,585,501,498,488,420,402,331,309,239,183,165,558\nMerthyr Tydfil,W06000024,male,339,289,319,391,368,389,381,344,361,396,409,338,364,378,378,318,321,322,359,309,284,337,307,323,353,317,329,402,359,356,390,397,364,416,380,402,420,389,347,362,364,371,326,273,315,323,319,311,342,384,386,407,382,392,407,443,397,427,386,400,406,379,402,382,330,303,299,325,319,290,312,307,326,309,255,227,239,228,206,170,141,137,134,127,106,99,67,50,52,40,127"
        },
        "population-pyramid-with-dropdown-and-interactive-comparison": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"accessibleSummary\":\n\t\t\t\"This chart has been hidden from screen readers. The main message of the chart is summarised in the chart title.\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"comparison_data\": \"comparison.csv\",\n\t\t\"comparison_time_data\": \"comparison-time.csv\",\n\t\t\"dataType\": \"numbers\",\n\t\t// dataType can be a \"percentage\" or \"numbers\" where it works out the percentage in the script\n\t\t\"colour_palette\": [\"#9A86E9\", \"#3fb0b3\"],\n\t\t// this is the lighter palette for reference lines [\"#9A86E9\", \"#3fb0b3\"]\n\t\t\"comparison_colour_palette\": [\"#5c5185\", \"#306970\"],\n\t\t\"legend\": [\"Selected area\", \"2011\"],\n\t\t\"xAxislabel\": [\"Percentage\"],\n\t\t\"yAxislabel\": [\"Age\"]\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"right\": 10,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 10\n\t\t\t},\n\t\t\t\"centre\": 60\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 6,\n\t\t\t\"md\": 6,\n\t\t\t\"lg\": 6\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 3,\n\t\t\t\"md\": 3,\n\t\t\t\"lg\": 3\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 1, \"nav\": 0, \"legend\": 1, \"titles\": 1 }\n};\n",
            "script_js": "const graphic = d3.select('#graphic');\nconst titles = d3.select('#titles');\nconst legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// clear out existing graphics\n\tgraphic.selectAll('*').remove();\n\ttitles.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\td3.select('#select').selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\t// build dropdown, first unique areas\n\t// https://stackoverflow.com/questions/38613654/javascript-find-unique-objects-in-array-based-on-multiple-properties\n\tdropdownData = graphic_data\n\t\t.map(function (d) {\n\t\t\treturn { nm: d.AREANM, cd: d.AREACD };\n\t\t})\n\t\t.filter(function (a) {\n\t\t\tlet key = a.nm + '|' + a.cd;\n\t\t\tif (!this[key]) {\n\t\t\t\tthis[key] = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}, Object.create(null))\n\t\t.sort((a, b) => d3.ascending(a.nm, b.nm)); //sorted alphabetically\n\n\t// // Build option menu\n\tconst optns = d3\n\t\t.select('#select')\n\t\t.append('div')\n\t\t.attr('id', 'sel')\n\t\t.append('select')\n\t\t.attr('id', 'areaselect')\n\t\t.attr('style', 'width:calc(100% - 6px)')\n\t\t.attr('class', 'chosen-select');\n\n\toptns.append('option');\n\n\t//join unique names and codes to build select\n\toptns\n\t\t.selectAll('p')\n\t\t.data(dropdownData)\n\t\t.join('option')\n\t\t.attr('value', function (d) {\n\t\t\treturn d.cd;\n\t\t})\n\t\t.text(function (d) {\n\t\t\treturn d.nm;\n\t\t});\n\n\t// start the chosen dropdown\n\t$('#areaselect').chosen({\n\t\tplaceholder_text_single: 'Select an area',\n\t\tallow_single_deselect: true\n\t});\n\n\t//add some more accessibility stuff\n\td3.select('input.chosen-search-input').attr('id', 'chosensearchinput');\n\td3.select('div.chosen-search')\n\t\t.insert('label', 'input.chosen-search-input')\n\t\t.attr('class', 'visuallyhidden')\n\t\t.attr('for', 'chosensearchinput')\n\t\t.html('Type to select an area');\n\n\t// draw the bars on change\n\t$('#areaselect').on('change', function () {\n\t\tif ($('#areaselect').val() != '') {\n\t\t\td3.select('#bars')\n\t\t\t\t.selectAll('rect')\n\t\t\t\t.data(\n\t\t\t\t\ttidydataPercentage.filter((d) => d.AREACD == $('#areaselect').val())\n\t\t\t\t)\n\t\t\t\t.join('rect')\n\t\t\t\t.attr('fill', (d) =>\n\t\t\t\t\td.sex === 'female'\n\t\t\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t\t\t: config.essential.colour_palette[1]\n\t\t\t\t)\n\t\t\t\t.attr('y', (d) => y(d.age))\n\t\t\t\t.attr('height', y.bandwidth())\n\t\t\t\t.transition()\n\t\t\t\t.attr('x', (d) =>\n\t\t\t\t\td.sex === 'female' ? xLeft(d.percentage) : xRight(0)\n\t\t\t\t)\n\t\t\t\t.attr('width', (d) =>\n\t\t\t\t\td.sex === 'female'\n\t\t\t\t\t\t? xLeft(0) - xLeft(d.percentage)\n\t\t\t\t\t\t: xRight(d.percentage) - xRight(0)\n\t\t\t\t);\n\n\t\t\td3.select('#comparisonLineLeft')\n\t\t\t\t.attr('opacity', 1)\n\t\t\t\t.transition()\n\t\t\t\t.attr(\n\t\t\t\t\t'd',\n\t\t\t\t\tlineLeft(\n\t\t\t\t\t\ttidydataComparisonPercentage\n\t\t\t\t\t\t\t.filter((d) => d.AREACD == $('#areaselect').val())\n\t\t\t\t\t\t\t.filter((d) => d.sex == 'female')\n\t\t\t\t\t) +\n\t\t\t\t\t\t'l 0 ' +\n\t\t\t\t\t\t-y.bandwidth()\n\t\t\t\t)\n\t\t\t\t.attr('stroke', config.essential.comparison_colour_palette[0])\n\t\t\t\t.attr('stroke-width', '2px');\n\n\t\t\td3.select('#comparisonLineRight')\n\t\t\t\t.attr('opacity', 1)\n\t\t\t\t.transition()\n\t\t\t\t.attr(\n\t\t\t\t\t'd',\n\t\t\t\t\tlineRight(\n\t\t\t\t\t\ttidydataComparisonPercentage\n\t\t\t\t\t\t\t.filter((d) => d.AREACD == $('#areaselect').val())\n\t\t\t\t\t\t\t.filter((d) => d.sex == 'male')\n\t\t\t\t\t) +\n\t\t\t\t\t\t'l 0 ' +\n\t\t\t\t\t\t-y.bandwidth()\n\t\t\t\t)\n\t\t\t\t.attr('stroke', config.essential.comparison_colour_palette[1]) // set alternative colour here\n\t\t\t\t.attr('stroke-width', '2px');\n\n\t\t\t// clear the chart via keyboard\n\t\t\td3.select('button.abbr').on('keypress', function (evt) {\n\t\t\t\tif (evt.keyCode == 13 || evt.keyCode == 32) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tclear();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t//on clear\n\t\t\tclear();\n\t\t}\n\t});\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tmargin.centre = config.optional.margin.centre;\n\n\tallAges = graphic_data.columns.slice(3);\n\n\t// calculate percentage if we have numbers\n\t// percentages are based of total populations as is common practice amongst pop pyramids\n\tif (config.essential.dataType == 'numbers') {\n\t\t// turn into tidy data\n\t\ttidydata = pivot(\n\t\t\tgraphic_data,\n\t\t\tgraphic_data.columns.slice(3),\n\t\t\t'age',\n\t\t\t'value'\n\t\t);\n\n\t\t//rollup to work out totals\n\t\trolledUp = d3.rollup(\n\t\t\ttidydata,\n\t\t\t(v) => d3.sum(v, (d) => d.value),\n\t\t\t(d) => d.AREACD\n\t\t);\n\n\t\t// then use total to work out percentages\n\t\ttidydataPercentage = tidydata.map(function (d) {\n\t\t\treturn {\n\t\t\t\t...d,\n\t\t\t\tpercentage: d.value / rolledUp.get(d.AREACD)\n\t\t\t};\n\t\t});\n\n\t\t// turn into tidy data for comparisons\n\t\ttidydatacomparison = pivot(\n\t\t\tcomparison_data,\n\t\t\tcomparison_data.columns.slice(3),\n\t\t\t'age',\n\t\t\t'value'\n\t\t);\n\n\t\t//rollup to work out totals\n\t\trolledUpComparison = d3.rollup(\n\t\t\ttidydatacomparison,\n\t\t\t(v) => d3.sum(v, (d) => d.value),\n\t\t\t(d) => d.AREACD\n\t\t);\n\n\t\t// then use total to work out percentages\n\t\ttidydataComparisonPercentage = tidydatacomparison.map(function (d) {\n\t\t\treturn {\n\t\t\t\t...d,\n\t\t\t\tpercentage: d.value / rolledUpComparison.get(d.AREACD)\n\t\t\t};\n\t\t});\n\t} else {\n\t\t// turn into tidy data\n\t\ttidydataPercentage = pivot(\n\t\t\tgraphic_data,\n\t\t\tgraphic_data.columns.slice(3),\n\t\t\t'age',\n\t\t\t'percentage'\n\t\t);\n\n\t\ttidydataComparisonPercentage = pivot(\n\t\t\tcomparison_data,\n\t\t\tcomparison_data.columns.slice(3),\n\t\t\t'age',\n\t\t\t'percentage'\n\t\t);\n\t}\n\n\tmaxPercentage = d3.max([\n\t\td3.max(tidydataPercentage, (d) => d.percentage),\n\t\td3.max(tidydataComparisonPercentage, (d) => d.percentage)\n\t]);\n\n\t// set up widths\n\tfullwidth = parseInt(graphic.style('width'));\n\tchart_width = (parseInt(graphic.style('width')) - margin.centre - margin.left - margin.right) / 2;\n\theight = allAges.length * config.optional.seriesHeight[size];\n\n\t// set up some scales, first the left scale\n\txLeft = d3\n\t\t.scaleLinear()\n\t\t.domain([0, maxPercentage])\n\t\t.rangeRound([chart_width, 0]);\n\n\t// right scale\n\txRight = d3\n\t\t.scaleLinear()\n\t\t.domain(xLeft.domain())\n\t\t.rangeRound([chart_width + margin.centre, chart_width * 2 + margin.centre]);\n\n\t// y scale\n\ty = d3.scaleBand().domain(allAges).rangeRound([height, 0]).paddingInner(0.1);\n\n\t// create the svg\n\tsvg = graphic\n\t\t.append('svg')\n\t\t.attr('class', 'chart')\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('width', fullwidth)\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t// create line generators\n\tlineLeft = d3\n\t\t.line()\n\t\t.curve(d3.curveStepBefore)\n\t\t.x((d) => xLeft(d.percentage))\n\t\t.y((d) => y(d.age) + y.bandwidth());\n\n\tlineRight = d3\n\t\t.line()\n\t\t.curve(d3.curveStepBefore)\n\t\t.x((d) => xRight(d.percentage))\n\t\t.y((d) => y(d.age) + y.bandwidth());\n\n\t//add x-axis left\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xLeft)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t//add x-axis right\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis right')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisBottom(xRight)\n\t\t\t\t.tickFormat(d3.format('.1%'))\n\t\t\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t\t\t.tickSize(-height)\n\t\t)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t// add bars\n\tsvg\n\t\t.append('g')\n\t\t.attr('id', 'bars')\n\t\t.selectAll('rect')\n\t\t.data(tidydataPercentage.filter((d) => d.AREACD == graphic_data[0].AREACD))\n\t\t.join('rect')\n\t\t.attr('fill', (d) =>\n\t\t\td.sex === 'female'\n\t\t\t\t? config.essential.colour_palette[0]\n\t\t\t\t: config.essential.colour_palette[1]\n\t\t)\n\t\t.attr('y', (d) => y(d.age))\n\t\t.attr('height', y.bandwidth())\n\t\t.attr('x', (d) => (d.sex === 'female' ? xLeft(0) : xRight(0)))\n\t\t.attr('width', 0);\n\n\t//add y-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2 - 3) + ',0)'\n\t\t)\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisRight(y)\n\t\t\t\t.tickSize(0)\n\t\t\t\t.tickValues(y.domain().filter((d, i) => !(i % 10)))\n\t\t)\n\t\t.selectAll('text')\n\t\t.each(function () {\n\t\t\td3.select(this).attr('text-anchor', 'middle');\n\t\t});\n\n\t//draw comparison lines\n\tcomparisons = svg.append('g');\n\n\tcomparisons\n\t\t.append('path')\n\t\t.attr('class', 'line')\n\t\t.attr('id', 'comparisonLineLeft')\n\t\t//.attr('d', lineLeft(tidydataComparisonPercentage.filter(d=>d.AREACD==graphic_data[0].AREACD).filter(d=>d.sex=='female')) + 'l 0 ' + -y.bandwidth())\n\t\t.attr('stroke', config.essential.colour_palette[2]) // set alternative colour here\n\t\t.attr('stroke-width', '2px');\n\n\tcomparisons\n\t\t.append('path')\n\t\t.attr('class', 'line')\n\t\t.attr('id', 'comparisonLineRight')\n\t\t//.attr('d', lineRight(tidydataComparisonPercentage.filter(d=>d.AREACD==graphic_data[0].AREACD).filter(d=>d.sex=='male')) + 'l 0 ' + -y.bandwidth())\n\t\t.attr('stroke', config.essential.colour_palette[3]) // set alternative colour here\n\t\t.attr('stroke-width', '2px');\n\n\t//add x-axis titles\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' +\n\t\t\t\t(fullwidth - margin.left) +\n\t\t\t\t',' +\n\t\t\t\t(height + 30) +\n\t\t\t\t')'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'end')\n\t\t.text(config.essential.xAxislabel);\n\n\t//add y-axis title\n\tsvg\n\t\t.append('text')\n\t\t.attr(\n\t\t\t'transform',\n\t\t\t'translate(' + (chart_width + margin.centre / 2) + ',-15)'\n\t\t)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('text-anchor', 'middle')\n\t\t.text(config.essential.yAxislabel);\n\n\t// Add titles and legend\n\twidths = [chart_width + margin.left, chart_width + margin.right];\n\n\tlegend\n\t\t.append('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data(['Females', 'Males'])\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'chartLabel')\n\t\t.append('p')\n\t\t.text((d) => d);\n\n\tdataForLegend = [\n\t\t['x', 'x'],\n\t\t['y', 'y']\n\t]; //dummy data\n\n\ttitleDivs = titles\n\t\t.selectAll('div')\n\t\t.data(dataForLegend)\n\t\t.join('div')\n\t\t.attr('class', 'flex-row')\n\t\t.style('gap', margin.centre + 'px')\n\t\t.selectAll('div')\n\t\t.data((d) => d)\n\t\t.join('div')\n\t\t.style('width', (d, i) => widths[i] + 'px')\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.style('background-color', (d, i) =>\n\t\t\td == 'x'\n\t\t\t\t? config.essential.colour_palette[i]\n\t\t\t\t: config.essential.comparison_colour_palette[i]\n\t\t)\n\t\t.attr('class', (d) =>\n\t\t\td == 'x' ? 'legend--icon--circle' : 'legend--icon--refline'\n\t\t);\n\n\ttitleDivs\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html((d) =>\n\t\t\td == 'x' ? config.essential.legend[0] : config.essential.legend[1]\n\t\t);\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n} //end draw graphic\n\nPromise.all([\n\td3.csv(config.essential.graphic_data_url, d3.autoType),\n\td3.csv(config.essential.comparison_data, d3.autoType)\n]).then(([data, datab]) => {\n\t//load chart data\n\tgraphic_data = data;\n\tcomparison_data = datab;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n\nfunction clear() {\n\td3.select('#bars')\n\t\t.selectAll('rect')\n\t\t.transition()\n\t\t.attr('x', (d) => (d.sex === 'female' ? xLeft(0) : xRight(0)))\n\t\t.attr('width', 0);\n\n\td3.select('#comparisonLineLeft').transition().attr('opacity', 0);\n\n\td3.select('#comparisonLineRight').transition().attr('opacity', 0);\n\n\t$('#areaselect').val(null).trigger('chosen:updated');\n}\n\n// bostock pivot longer function from https://observablehq.com/d/3ea8d446f5ba96fe\nfunction pivot(data, columns, name, value) {\n\tconst keep = data.columns.filter((c) => !columns.includes(c));\n\treturn data.flatMap((d) => {\n\t\tconst base = keep.map((k) => [k, d[k]]);\n\t\treturn columns.map((c) => {\n\t\t\treturn Object.fromEntries([...base, [name, c], [value, d[c]]]);\n\t\t});\n\t});\n}\n",
            "chart_css": "div.chartLabel>p {\n    font-size: 16px;\n    font-weight: 600;\n    margin-bottom: 10px;\n}\n\ndiv#titles {\n    display: flex;\n    flex-wrap: nowrap;\n    flex-direction: column;\n}\n\n.flex-row {\n    display: flex;\n    flex-direction: row;\n}\n\n/* buttons */\ndiv#select{\n    margin-bottom: 20px;\n}\n\n.legend--icon--circle{\n    margin-right: 8px;\n}",
            "data_csv": "AREANM,AREACD,sex,<1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90+\nHartlepool,E06000001,female,449,458,510,476,518,551,505,528,561,592,564,596,579,568,563,571,554,542,425,431,495,514,563,535,515,554,548,601,579,606,629,617,612,646,647,574,600,560,565,583,555,581,499,501,502,501,492,560,546,633,680,664,698,705,709,759,719,753,730,740,691,633,650,590,575,572,542,489,561,507,491,534,545,543,523,371,372,341,345,322,274,302,281,310,273,209,219,166,168,135,511\nMiddlesbrough,E06000002,female,825,854,856,911,952,853,942,930,1011,988,1005,924,902,893,889,903,871,851,779,756,874,964,972,1048,986,971,1053,1067,1032,1067,1015,1021,1047,1073,1083,1028,1030,966,919,860,936,867,833,697,751,793,754,767,832,878,900,883,901,935,905,946,959,967,958,945,918,873,908,933,841,814,781,757,712,652,702,657,651,659,686,525,485,436,452,416,405,385,377,390,330,323,263,250,208,172,696\nRedcar and Cleveland,E06000003,female,566,691,674,716,736,712,725,756,806,817,797,762,768,770,797,734,719,731,604,589,581,623,675,697,729,712,755,729,790,866,868,833,825,839,854,870,839,786,753,803,860,800,778,683,676,722,739,788,892,934,995,1002,1017,1056,1121,1123,1088,1091,1096,1098,967,1002,1022,961,901,901,826,925,886,854,852,897,920,955,965,771,745,662,583,591,515,572,511,472,422,376,327,277,257,213,864\nStockton-on-Tees,E06000004,female,983,1046,1019,1073,1183,1153,1109,1168,1307,1271,1267,1259,1353,1249,1285,1180,1136,1166,919,730,831,826,916,976,1204,1118,1076,1283,1220,1371,1350,1278,1324,1452,1373,1313,1435,1303,1385,1213,1371,1278,1204,1098,1085,1176,1161,1243,1173,1391,1405,1385,1382,1384,1450,1414,1402,1527,1464,1448,1354,1347,1310,1279,1231,1159,1126,1104,1059,1070,1055,975,1036,1190,1068,795,786,736,670,664,603,619,593,511,460,441,374,350,314,290,957\nDarlington,E06000005,female,526,542,524,581,558,569,603,587,631,658,650,669,615,685,639,619,619,581,542,393,405,519,609,600,640,637,612,657,663,700,779,704,717,700,723,688,662,693,657,696,679,725,690,624,602,662,654,744,740,779,817,766,754,780,820,798,812,811,781,768,774,679,746,750,667,627,561,614,579,613,602,598,592,681,676,505,521,438,374,356,366,367,377,343,311,266,251,216,194,163,672\nCounty Durham,E06000047,female,2162,2365,2325,2513,2630,2677,2774,2713,2741,2868,2874,2920,2836,2955,2814,2729,2752,2563,3306,3990,3792,3534,3283,2850,2957,2821,2910,2943,3161,3173,3271,3182,3223,3194,3158,3283,3116,3047,3137,3184,3261,3184,3045,2751,2821,2885,2967,3141,3496,3722,3854,3665,3965,3817,4080,4086,4032,4119,3858,3885,3724,3582,3699,3602,3343,3297,3158,3104,3108,3006,3043,3127,3113,3350,3281,2496,2670,2319,2124,1835,1854,1681,1702,1597,1526,1372,1199,1008,880,745,2857\nNorthumberland,E06000057,female,1237,1309,1427,1396,1579,1535,1567,1552,1741,1680,1720,1665,1731,1652,1646,1593,1585,1623,1440,1200,1101,1264,1331,1461,1495,1456,1614,1563,1622,1774,1674,1715,1712,1763,1781,1807,1824,1774,1680,1915,1865,1988,1827,1599,1714,1800,1880,1890,2155,2403,2345,2343,2371,2445,2502,2597,2740,2662,2673,2696,2593,2581,2628,2564,2445,2391,2301,2288,2237,2232,2254,2299,2333,2614,2400,1802,1933,1650,1579,1290,1263,1237,1222,1155,1063,887,835,663,661,614,2270\nNewcastle upon Tyne,E08000021,female,1391,1550,1527,1592,1558,1684,1546,1667,1625,1611,1673,1595,1595,1619,1462,1420,1467,1529,2730,4881,4809,4306,3400,2857,2743,2482,2322,2307,2237,2221,2179,2147,2071,2299,2134,1985,2065,1893,1953,1886,1904,1816,1645,1580,1459,1639,1659,1558,1496,1664,1703,1596,1680,1789,1661,1766,1716,1758,1760,1735,1604,1684,1642,1428,1508,1405,1289,1317,1257,1237,1182,1175,1185,1259,1308,889,989,855,790,680,732,770,721,720,625,599,506,476,429,384,1557\nNorth Tyneside,E08000022,female,944,986,1158,1081,1157,1171,1109,1122,1180,1204,1166,1195,1137,1159,1129,1147,1117,1088,952,724,775,817,906,1084,1121,1194,1139,1259,1297,1410,1410,1365,1463,1563,1514,1478,1538,1526,1425,1499,1541,1543,1393,1255,1248,1331,1347,1378,1436,1500,1534,1492,1541,1474,1500,1508,1598,1550,1567,1526,1441,1444,1424,1454,1346,1319,1293,1294,1260,1148,1171,1234,1220,1291,1347,945,980,836,783,662,680,693,662,660,602,515,470,407,382,360,1343\nSouth Tyneside,E08000023,female,703,669,776,788,817,793,803,829,814,875,891,834,842,865,798,763,756,795,694,631,635,671,727,779,818,829,884,897,932,924,1045,965,1049,1042,1119,1072,1019,937,925,932,962,938,905,755,790,838,840,878,908,1026,1035,1014,1102,1072,1110,1182,1191,1160,1120,1132,1154,1089,1108,1027,964,980,871,959,917,798,827,909,832,919,833,673,688,632,577,473,525,481,528,475,436,356,354,328,294,232,928\nSunderland,E08000024,female,1226,1320,1272,1415,1441,1454,1378,1448,1469,1639,1531,1616,1551,1627,1574,1471,1546,1397,1392,1388,1358,1414,1547,1616,1665,1578,1709,1781,1801,1931,1891,1812,1818,1936,1897,1818,1771,1714,1796,1698,1768,1755,1644,1484,1509,1605,1570,1672,1829,2024,1992,1923,1967,1974,2079,2006,2075,2078,2087,2044,1963,1895,1937,1927,1858,1709,1727,1677,1643,1598,1593,1586,1556,1666,1743,1185,1283,1063,1041,938,928,948,900,851,741,722,635,532,477,460,1504\nGateshead,E08000037,female,963,960,1017,973,1077,1047,1044,1091,1110,1108,1164,1108,1115,1051,1112,989,1081,1032,967,894,839,867,1060,1134,1237,1163,1357,1268,1222,1395,1365,1271,1384,1333,1285,1378,1317,1290,1338,1240,1322,1345,1167,1081,1101,1141,1128,1229,1256,1392,1394,1359,1382,1414,1508,1455,1450,1458,1442,1374,1347,1263,1247,1276,1207,1107,1115,1058,1046,1043,1027,1098,1147,1164,1145,866,929,831,695,709,693,681,662,661,572,536,459,449,385,297,1199\nHalton,E06000006,female,601,691,638,692,717,745,758,752,778,815,789,845,770,782,793,783,706,707,607,633,601,627,638,694,731,766,786,824,847,886,872,882,870,971,963,814,928,920,848,827,907,850,812,745,771,749,813,889,888,898,963,861,902,953,923,899,930,847,993,967,866,881,826,865,827,772,796,757,722,738,746,710,724,805,708,500,465,477,404,377,322,379,329,283,280,254,233,209,169,137,525\nWarrington,E06000007,female,930,1028,1102,1014,1108,1181,1144,1207,1218,1225,1333,1180,1272,1305,1166,1182,1207,1187,993,807,780,972,1086,1083,1162,1264,1169,1207,1216,1357,1440,1356,1409,1423,1434,1422,1502,1388,1427,1462,1409,1522,1323,1249,1354,1332,1354,1378,1518,1520,1603,1680,1541,1563,1664,1685,1595,1583,1582,1538,1373,1342,1315,1301,1105,1119,1138,1115,1040,1056,1056,1019,1084,1214,1239,950,942,884,851,808,704,735,689,622,530,481,409,370,320,270,1105\nBlackburn with Darwen,E06000008,female,981,1002,1049,993,1019,1075,1099,1040,1088,1164,1137,1162,1145,1201,1183,1111,1103,1087,1009,923,870,832,965,970,1028,956,976,1032,1023,1076,1070,1063,1103,1175,1127,1140,1127,1168,1088,1103,1168,1071,977,929,847,919,991,965,1024,1060,1028,1029,1043,1026,990,927,949,922,952,909,888,803,768,739,765,698,698,637,700,613,605,623,647,630,655,478,472,434,428,354,315,345,354,292,272,231,226,209,163,168,638\nBlackpool,E06000009,female,698,701,739,705,803,724,798,753,755,828,780,789,774,750,697,750,797,759,625,614,660,674,742,782,893,871,846,855,954,986,1026,988,966,973,973,954,946,825,862,774,796,842,794,713,723,744,815,851,941,977,1002,1002,1091,1048,1061,1091,1124,1109,1051,1048,975,920,933,892,867,834,776,769,719,715,738,773,789,894,814,688,668,640,579,534,487,518,455,435,440,372,346,263,238,250,882\nCheshire East,E06000049,female,1714,1836,2008,2051,2046,2042,2095,2099,2244,2248,2220,2177,2252,2162,2225,2105,2227,2236,1733,1314,1281,1593,1799,1973,2098,1953,2291,2186,2207,2274,2563,2413,2491,2512,2385,2526,2611,2463,2513,2417,2456,2624,2374,2228,2378,2517,2595,2646,2808,2960,3003,3051,3127,3249,3081,3150,3164,3080,3078,2986,2816,2697,2553,2449,2404,2218,2291,2330,2239,2274,2458,2320,2504,2849,2649,1976,2192,2027,1810,1597,1470,1504,1432,1336,1225,1174,988,839,788,704,2945\nCheshire West and Chester,E06000050,female,1685,1680,1678,1753,1839,1909,1837,1902,1942,2052,2033,1983,1921,1980,1882,1956,1934,1853,1808,1759,1787,1992,2100,2114,2190,1965,2050,2129,2190,2304,2328,2207,2261,2403,2284,2266,2260,2279,2294,2274,2276,2244,2195,2019,1994,2105,2262,2377,2401,2655,2628,2635,2685,2612,2727,2887,2718,2668,2642,2627,2488,2307,2320,2273,2224,2094,1951,2009,2010,1972,2037,2054,2088,2360,2236,1702,1841,1570,1482,1292,1291,1322,1130,1176,1070,931,850,707,682,590,2362\nAllerdale,E07000026,female,421,415,390,447,452,469,476,500,495,533,554,523,511,535,525,468,487,456,420,355,341,421,454,450,488,484,510,505,503,555,561,523,547,514,490,558,545,528,524,536,564,545,473,473,488,543,527,606,660,730,768,757,746,807,824,739,778,751,802,755,734,721,745,708,682,657,605,681,679,609,666,686,669,756,666,486,519,500,441,404,338,376,372,357,310,285,241,213,220,182,748\nBarrow-in-Furness,E07000027,female,272,335,329,338,381,404,328,368,347,374,328,351,346,383,379,339,344,366,323,301,323,359,337,366,366,427,398,482,460,441,429,417,461,428,422,449,381,401,388,393,383,325,353,352,357,356,373,416,442,487,515,505,492,507,534,525,551,499,488,440,442,472,467,401,412,409,387,402,380,388,390,401,399,469,427,363,332,303,311,265,287,224,225,224,196,170,167,114,114,89,387\nCarlisle,E07000028,female,509,515,542,490,563,578,616,581,576,629,609,618,566,581,574,569,575,557,562,501,571,515,597,648,648,648,641,694,721,797,728,726,697,687,674,674,696,701,723,651,648,659,596,600,627,586,629,684,730,735,784,777,821,819,769,853,822,861,812,838,806,776,793,762,713,628,676,657,681,661,622,677,660,692,695,519,497,492,452,428,417,369,353,358,363,314,269,255,229,188,738\nCopeland,E07000029,female,288,289,285,327,350,338,325,363,343,379,370,363,335,347,320,337,329,341,281,246,237,265,323,346,356,335,363,353,385,405,427,406,397,405,402,347,406,350,404,357,400,374,366,334,327,393,380,425,414,470,501,507,511,504,555,563,585,576,537,535,502,479,499,495,485,455,444,409,417,407,454,418,424,464,428,302,335,309,292,288,248,263,255,218,218,161,161,138,107,110,368\nEden,E07000030,female,200,196,212,224,207,248,236,257,280,236,286,278,243,294,241,278,244,305,220,176,168,228,248,217,254,232,258,240,268,272,275,301,278,298,241,294,269,268,262,295,271,298,288,299,291,305,305,347,345,396,415,450,484,482,458,480,493,490,476,473,461,433,456,453,379,403,387,367,383,406,408,400,393,435,382,302,362,296,243,239,210,230,257,191,173,172,133,135,115,89,431\nSouth Lakeland,E07000031,female,354,381,432,410,424,384,399,419,445,477,476,469,511,506,560,590,519,549,433,358,320,380,385,449,428,446,463,472,488,530,537,484,519,512,565,542,545,529,549,591,586,566,515,543,534,583,612,656,652,785,769,820,815,838,929,800,918,961,928,834,879,872,865,772,769,734,743,754,699,716,792,845,805,855,846,679,688,658,611,482,440,501,476,459,398,346,309,275,300,237,1020\nBurnley,E07000117,female,493,598,580,561,563,601,588,595,645,589,603,599,669,583,552,639,541,566,452,436,414,452,587,546,568,576,591,655,681,674,716,700,666,722,700,678,623,651,617,587,649,575,562,527,558,542,582,599,569,609,590,638,635,619,642,668,658,635,644,613,635,554,547,550,477,516,485,487,474,476,483,455,533,524,532,371,400,363,324,310,241,258,242,219,217,203,154,154,109,109,489\nChorley,E07000118,female,533,564,583,630,670,674,671,641,685,717,686,700,687,679,661,620,650,607,537,388,428,469,543,570,562,624,656,606,724,702,729,738,772,837,803,834,787,717,803,790,725,762,729,710,708,766,705,757,829,906,931,884,889,913,855,863,916,902,858,811,744,766,675,735,716,696,646,697,609,620,674,645,712,825,707,529,600,492,488,409,423,380,354,331,288,224,232,195,177,139,623\nFylde,E07000119,female,270,313,327,336,367,355,354,395,409,441,385,389,408,421,413,392,421,376,307,246,265,262,325,357,353,373,380,355,362,402,426,440,448,395,431,449,431,436,463,443,470,447,418,380,431,418,431,505,477,612,600,568,608,636,634,674,701,646,705,704,732,621,591,640,617,578,530,562,582,495,580,598,630,627,686,503,536,476,485,396,383,413,373,346,331,298,273,245,194,169,835\nHyndburn,E07000120,female,400,514,460,487,505,511,531,518,537,575,523,547,530,549,512,502,462,505,424,419,387,392,458,518,537,558,491,592,530,568,612,534,608,575,574,552,538,505,503,566,548,521,512,466,411,481,462,507,534,618,576,601,587,542,549,575,574,573,538,511,493,533,461,488,502,420,396,409,415,396,393,385,456,469,417,361,375,327,278,271,238,255,230,206,206,173,148,141,122,106,401\nLancaster,E07000121,female,621,656,690,659,675,765,707,713,754,776,758,721,755,692,713,781,691,726,1308,1913,1823,1525,1082,897,850,783,781,846,800,841,781,830,914,894,830,833,849,856,927,812,839,851,771,706,727,747,737,751,857,900,946,944,974,1004,992,1019,1019,967,1042,963,973,950,924,900,805,806,775,830,801,788,770,782,777,895,850,667,689,618,545,529,469,492,445,432,404,375,321,306,257,240,997\nPendle,E07000122,female,547,590,566,565,631,688,617,663,584,689,663,656,679,652,615,625,624,601,502,503,453,496,464,527,547,550,541,534,642,660,643,637,644,715,679,647,684,722,637,676,674,597,588,564,541,595,563,540,592,607,672,613,613,657,638,569,627,622,611,627,583,580,547,563,587,526,507,466,467,428,511,485,463,524,529,371,397,349,315,272,273,282,222,207,206,183,196,147,132,121,489\nPreston,E07000123,female,873,849,914,842,923,897,897,913,914,953,888,948,864,840,882,841,809,834,1007,1337,1319,1336,1177,1226,1185,1083,1034,1067,1109,1115,1134,1112,1064,1164,1050,1074,1008,1029,960,952,1001,971,902,779,897,835,861,801,936,938,950,905,1000,936,884,894,888,927,957,912,840,798,736,721,747,689,629,634,592,579,588,557,551,631,586,445,449,457,421,344,341,371,361,327,268,274,232,217,196,205,717\nRibble Valley,E07000124,female,218,277,237,257,267,271,269,316,317,315,318,375,347,380,382,377,331,354,306,196,210,250,267,279,294,265,287,282,301,314,310,340,346,343,328,326,308,316,342,365,356,375,333,341,369,364,354,406,444,500,483,532,477,514,516,475,576,565,455,523,482,460,433,472,441,411,404,359,370,354,387,403,420,438,447,345,355,341,278,272,255,259,226,211,204,177,164,135,152,109,448\nRossendale,E07000125,female,338,324,361,376,407,425,425,421,422,444,442,460,438,451,443,419,443,371,334,256,261,316,352,364,324,369,371,465,443,486,499,489,468,514,459,472,450,434,472,482,482,475,422,442,440,454,481,476,506,520,568,547,581,543,573,500,539,502,563,500,490,419,478,406,440,380,424,424,417,360,390,393,387,464,405,269,327,304,260,226,187,202,164,167,151,142,135,122,104,91,367\nSouth Ribble,E07000126,female,486,510,542,570,590,627,586,584,665,608,607,623,649,658,595,613,632,613,501,448,433,467,494,587,554,562,585,647,696,686,722,707,730,761,718,701,706,669,704,669,695,747,645,590,664,705,700,749,764,854,817,798,889,881,849,849,882,868,881,829,752,746,713,710,667,659,650,665,645,642,653,680,692,749,773,518,570,535,495,428,385,418,382,355,291,282,276,244,170,182,656\nWest Lancashire,E07000127,female,457,521,518,530,501,576,553,578,657,629,603,642,622,657,621,615,655,653,1206,1814,1316,1048,748,658,598,584,541,572,607,619,680,616,660,668,645,661,685,685,644,598,647,676,627,621,615,614,656,721,824,830,895,875,876,823,866,932,889,913,906,878,819,770,791,780,765,739,670,729,653,668,674,691,722,816,805,592,604,578,566,517,412,412,435,371,387,292,291,236,205,168,720\nWyre,E07000128,female,451,471,476,479,502,520,516,529,568,525,569,561,587,565,620,594,616,606,432,415,384,433,480,459,481,533,551,568,603,608,602,584,599,619,588,602,639,582,618,551,634,575,552,558,517,559,600,647,717,759,824,789,815,823,880,909,926,881,886,889,925,877,829,862,847,788,751,792,778,782,796,806,939,901,1005,691,693,674,677,591,509,603,521,465,444,415,335,299,223,269,1004\nBolton,E08000001,female,1751,1838,1785,1854,1859,1914,1936,1984,2074,2068,2068,2112,1995,1964,1935,1877,1881,1859,1579,1486,1399,1570,1674,1671,1802,1721,1826,1797,1920,2021,2205,2121,2047,2253,2137,2190,2028,2070,2033,1993,2056,1989,1771,1787,1650,1753,1809,1815,1950,2008,2031,1954,1931,2093,2008,2019,2063,1919,1843,1857,1697,1656,1624,1553,1599,1378,1485,1421,1392,1340,1338,1476,1386,1644,1593,1128,1184,1072,1046,944,834,833,789,725,626,571,521,413,413,370,1398\nBury,E08000002,female,1044,973,1129,1101,1135,1179,1151,1195,1257,1273,1314,1265,1239,1252,1228,1140,1180,1145,1006,823,760,865,989,1011,1077,1045,1119,1178,1278,1322,1380,1379,1385,1478,1442,1401,1392,1369,1378,1382,1294,1272,1273,1152,1178,1171,1252,1199,1318,1352,1365,1381,1358,1357,1412,1369,1401,1372,1325,1308,1251,1185,1124,1057,1010,975,945,1027,995,952,909,957,1084,1116,1131,787,878,841,687,615,602,592,539,520,458,474,373,345,297,248,1006\nManchester,E08000003,female,3375,3414,3415,3409,3502,3484,3556,3597,3564,3693,3621,3557,3499,3589,3472,3320,3227,3179,4737,7035,7177,6811,6261,5910,5760,5359,5305,5349,5339,5127,5039,4959,4882,4680,4596,4565,4371,4191,4166,4008,3980,3784,3696,3264,3195,3065,3081,3012,3011,2994,3050,2927,3039,2854,2916,2814,2825,2628,2535,2470,2325,2330,2010,2044,2034,1827,1676,1567,1567,1500,1473,1436,1318,1409,1347,1089,1098,1046,932,876,903,813,742,750,655,627,473,442,432,405,1496\nOldham,E08000004,female,1349,1583,1639,1603,1637,1582,1803,1675,1852,1742,1780,1851,1739,1842,1737,1671,1749,1711,1403,1317,1396,1324,1455,1396,1496,1534,1512,1658,1543,1553,1802,1815,1801,1797,1820,1777,1698,1709,1735,1592,1726,1717,1597,1399,1370,1397,1457,1417,1585,1549,1727,1601,1523,1533,1500,1575,1666,1497,1421,1513,1383,1435,1179,1191,1169,1196,1114,1076,1071,1095,999,1090,1077,1257,1147,896,910,892,756,702,627,631,630,574,522,443,374,365,270,279,976\nRochdale,E08000005,female,1381,1432,1419,1382,1457,1503,1434,1521,1507,1550,1508,1547,1587,1530,1432,1452,1427,1375,1202,1002,1019,1141,1269,1325,1387,1330,1439,1462,1518,1579,1718,1709,1630,1745,1664,1695,1623,1577,1658,1542,1611,1644,1388,1357,1349,1345,1366,1332,1404,1534,1547,1430,1517,1482,1565,1507,1438,1396,1436,1421,1380,1300,1278,1268,1193,1169,1108,1080,1076,1013,1047,1068,1082,1117,1095,809,825,757,718,659,600,537,520,474,453,435,382,337,282,243,1001\nSalford,E08000006,female,1686,1716,1695,1668,1543,1729,1637,1594,1630,1596,1704,1507,1572,1535,1450,1510,1371,1332,1465,2008,2053,2053,2392,2453,2592,2694,2607,2664,2704,2614,2566,2450,2431,2336,2112,2083,2101,2016,1850,1794,1842,1725,1569,1494,1363,1446,1392,1507,1515,1531,1563,1480,1553,1539,1566,1499,1440,1574,1405,1377,1286,1298,1274,1246,1156,1012,943,1036,934,937,978,990,996,1141,1050,765,777,738,759,633,642,611,564,497,486,446,387,320,272,270,1049\nStockport,E08000007,female,1619,1552,1620,1598,1728,1788,1754,1807,1805,1770,1777,1758,1766,1707,1628,1529,1591,1529,1261,1016,998,1173,1433,1411,1585,1539,1610,1773,1837,2048,2124,2123,2080,2187,2046,2172,2176,2141,2120,2027,2144,2115,1967,1934,1792,1823,1871,1878,1990,2182,2002,1963,2214,2073,2171,2154,2156,2022,2037,2080,1934,1912,1797,1803,1644,1649,1564,1597,1554,1480,1527,1550,1548,1785,1833,1312,1431,1259,1238,1055,1024,1028,987,951,909,754,689,618,575,530,2064\nTameside,E08000008,female,1191,1278,1336,1380,1307,1401,1369,1482,1488,1494,1544,1527,1439,1386,1402,1312,1300,1283,1121,985,1033,1089,1190,1310,1414,1414,1522,1609,1637,1679,1862,1697,1748,1856,1673,1780,1702,1522,1609,1507,1629,1500,1398,1349,1426,1381,1410,1464,1501,1680,1615,1530,1699,1649,1731,1629,1728,1589,1634,1586,1577,1339,1396,1358,1235,1213,1098,1165,1118,1113,1171,1094,1172,1268,1301,884,960,895,823,757,651,639,641,617,495,460,409,351,301,274,1015\nTrafford,E08000009,female,1145,1267,1364,1343,1555,1502,1470,1546,1565,1628,1736,1574,1627,1577,1529,1435,1485,1403,1214,869,810,944,1035,1170,1192,1206,1168,1220,1314,1376,1548,1521,1605,1630,1669,1795,1779,1910,1747,1898,1944,1888,1868,1691,1679,1634,1629,1650,1660,1795,1753,1720,1639,1654,1621,1691,1700,1657,1588,1463,1446,1365,1325,1301,1150,1157,1146,1100,1077,1059,1074,1124,1122,1148,1181,892,1046,908,871,676,759,777,692,640,645,567,517,436,411,346,1391\nWigan,E08000010,female,1640,1682,1665,1863,1804,1782,1777,1936,1854,2019,1943,1895,1992,1844,1838,1861,1876,1751,1543,1355,1367,1551,1720,1747,1993,1970,2056,2150,2298,2357,2334,2315,2378,2306,2307,2223,2239,2241,2080,2157,2180,2045,1987,1869,1833,1890,1983,2059,2274,2424,2539,2493,2544,2474,2450,2391,2380,2314,2277,2199,2140,2036,2037,1901,1892,1716,1745,1809,1737,1665,1714,1832,1855,2126,2027,1500,1577,1419,1419,1152,1015,1022,928,901,767,675,640,503,417,415,1432\nKnowsley,E08000011,female,886,960,966,992,965,900,894,888,956,920,865,905,919,891,848,893,915,820,828,676,713,785,854,941,1137,1004,1116,1119,1141,1281,1294,1261,1208,1277,1281,1187,1101,1081,1044,1028,967,1010,931,835,809,842,880,890,920,1080,1130,1089,1155,1126,1209,1193,1324,1218,1218,1244,1170,1083,1033,1090,1041,912,881,851,857,770,760,732,694,725,702,579,507,493,441,436,388,455,417,402,385,360,297,254,247,211,683\nLiverpool,E08000012,female,2546,2545,2632,2575,2595,2581,2654,2575,2652,2584,2529,2443,2495,2470,2436,2258,2337,2400,3948,6514,6555,5929,4969,4062,4116,3867,3848,3948,3737,3896,3818,3847,3651,3767,3685,3728,3490,3183,3300,3147,3195,2994,2762,2602,2447,2541,2548,2620,2752,2817,3033,3035,2896,2829,3052,3184,3331,3108,3300,3230,3022,2972,2811,2808,2616,2502,2366,2363,2249,2071,2123,2131,2089,2062,2100,1508,1608,1464,1435,1217,1209,1202,1172,1113,1047,924,833,678,600,510,2065\nSt. Helens,E08000013,female,916,889,931,958,996,970,971,988,1039,1041,1046,1070,1028,1030,1050,996,1001,997,825,751,829,855,948,965,1038,1150,1085,1229,1313,1261,1261,1253,1336,1294,1194,1230,1202,1199,1203,1156,1176,1110,1098,1013,980,1028,1128,1119,1243,1413,1389,1329,1428,1342,1302,1384,1396,1374,1302,1262,1265,1178,1130,1079,1090,1086,1006,1081,950,1026,1044,1014,1104,1167,1173,859,879,811,783,672,621,640,628,558,479,460,386,365,304,255,935\nSefton,E08000014,female,1202,1290,1347,1344,1428,1460,1464,1519,1414,1480,1476,1481,1527,1442,1472,1437,1435,1576,1276,1093,1077,1165,1410,1416,1495,1422,1518,1525,1572,1696,1830,1855,1762,1726,1714,1841,1721,1683,1659,1728,1727,1689,1617,1438,1465,1570,1565,1757,1813,1917,1965,1981,2145,2088,2078,2139,2262,2336,2201,2273,2258,2008,2047,2018,1917,1800,1787,1838,1619,1679,1689,1574,1691,1832,1838,1495,1421,1364,1393,1179,1155,1149,1125,1105,1017,903,808,758,661,595,2269\nWirral,E08000015,female,1458,1625,1577,1583,1609,1782,1755,1725,1884,1915,1921,1857,1895,1990,1778,1793,1911,1760,1504,1227,1232,1348,1562,1630,1666,1683,1868,1872,1857,1907,2033,2046,2050,2177,2058,2107,2028,2049,1946,1933,1969,1999,1992,1741,1812,1931,1921,1991,2138,2275,2352,2302,2341,2472,2329,2430,2540,2583,2486,2415,2215,2280,2175,2177,2116,2000,1987,1998,1893,1989,1917,1903,1909,2117,2097,1495,1609,1485,1417,1204,1267,1264,1140,994,924,908,787,695,630,582,2328\n\"Kingston upon Hull, City of\",E06000010,female,1496,1633,1529,1570,1560,1668,1585,1691,1814,1739,1682,1676,1621,1703,1477,1566,1369,1458,1460,1611,1844,2018,1827,1951,2006,2010,2015,2000,2124,2162,2240,2121,2057,2116,2085,2015,1960,1900,1735,1688,1668,1694,1529,1378,1438,1423,1619,1683,1588,1654,1688,1638,1764,1685,1643,1671,1713,1785,1678,1705,1626,1509,1469,1435,1441,1283,1209,1225,1253,1154,1054,1214,1064,1259,1218,842,796,743,820,613,642,630,571,546,576,477,453,394,376,297,1174\nEast Riding of Yorkshire,E06000011,female,1264,1327,1398,1450,1480,1592,1643,1612,1732,1776,1752,1783,1877,1821,1700,1810,1813,1794,1510,1148,1175,1293,1433,1486,1553,1606,1597,1629,1694,1881,1825,1773,1777,1947,1840,1825,1931,1769,1799,1869,1916,1871,1937,1725,1803,1997,2082,2113,2417,2530,2502,2610,2629,2766,2665,2762,2755,2844,2757,2685,2602,2488,2496,2581,2427,2406,2420,2364,2329,2279,2374,2462,2525,2916,2875,2056,2089,1943,1848,1560,1482,1492,1398,1336,1257,1089,927,860,741,654,2740\nNorth East Lincolnshire,E06000012,female,755,783,877,853,876,909,950,911,980,953,946,984,941,892,840,891,899,884,716,679,676,708,774,865,903,858,937,980,1012,1005,1056,1078,1089,1070,1040,1036,995,985,954,973,969,911,803,826,816,829,877,910,935,1203,1061,1089,1195,1144,1169,1241,1182,1203,1256,1167,1109,1066,1084,1016,925,949,876,860,889,860,848,861,884,952,1012,754,744,691,612,519,550,582,538,500,508,414,390,322,326,236,980\nNorth Lincolnshire,E06000013,female,789,821,864,826,912,927,897,947,1013,1005,1046,967,986,989,949,971,933,950,763,655,681,739,776,807,893,876,957,970,999,1022,1040,1083,1120,1109,1077,1091,1045,1074,1028,956,1051,983,938,869,860,1002,969,1065,1081,1190,1174,1273,1336,1241,1292,1312,1302,1317,1289,1250,1218,1161,1142,1127,1060,1081,1050,1046,987,971,1030,1053,1012,1054,1079,812,909,770,726,645,613,619,554,489,485,425,426,328,354,296,1101\nYork,E06000014,female,824,810,831,845,892,927,948,953,970,1026,991,1045,966,1014,1025,981,959,941,1983,3234,3111,2718,1962,1691,1430,1347,1368,1305,1274,1343,1338,1286,1349,1279,1341,1282,1294,1240,1231,1320,1325,1259,1223,1125,1106,1127,1180,1196,1232,1321,1443,1359,1368,1350,1283,1309,1354,1390,1264,1274,1237,1217,1101,1122,1064,1032,1058,983,1058,971,1034,1025,1059,1250,1215,894,915,809,801,667,611,663,656,604,579,517,484,426,339,338,1404\nCraven,E07000163,female,179,235,258,295,223,250,237,268,279,311,285,297,290,288,286,289,253,246,245,173,169,202,254,243,248,223,265,250,294,270,262,289,298,305,242,285,265,286,297,316,332,313,287,290,293,287,368,365,368,452,430,484,423,478,501,522,501,463,499,491,483,462,453,451,463,408,433,423,417,384,414,458,403,474,440,368,371,351,304,254,252,271,235,206,191,209,165,172,138,131,526\nHambleton,E07000164,female,333,360,370,377,406,420,420,409,442,489,425,435,456,453,463,463,466,461,371,277,283,304,370,440,406,405,418,400,468,440,490,483,500,450,471,483,472,433,456,479,484,480,485,450,494,469,495,535,589,684,640,710,749,755,728,799,871,811,789,801,790,704,729,690,638,675,635,680,622,614,642,651,681,723,750,512,615,512,450,427,416,444,386,380,353,336,290,237,185,194,721\nHarrogate,E07000165,female,605,662,722,730,826,757,778,888,860,866,897,965,984,976,988,925,1002,1000,774,474,423,514,607,729,731,733,767,765,794,820,906,899,840,899,892,977,901,996,916,958,1051,1065,1008,957,947,1013,1012,1154,1159,1215,1325,1267,1357,1283,1379,1399,1403,1275,1351,1249,1166,1210,1179,1090,1053,1021,990,996,899,983,1040,986,1070,1128,1130,822,934,755,774,693,650,665,601,598,553,473,444,410,368,311,1398\nRichmondshire,E07000166,female,210,213,221,235,238,226,228,228,262,257,245,249,246,260,240,236,228,249,246,147,161,165,200,216,236,250,248,258,259,258,256,267,315,292,268,267,253,244,315,276,290,247,279,247,239,267,263,321,278,321,364,379,420,394,358,375,399,419,397,392,392,376,399,361,345,317,310,326,296,296,325,320,343,389,338,282,235,254,208,188,180,186,175,169,156,139,134,105,76,63,314\nRyedale,E07000167,female,200,251,239,237,240,245,236,237,259,290,249,289,283,253,279,305,318,278,237,178,159,172,218,252,260,244,271,248,266,261,289,297,278,288,295,289,281,297,267,274,323,264,275,271,258,281,289,333,372,421,412,444,432,427,449,471,474,467,457,483,431,440,393,419,435,471,394,401,373,398,370,429,387,437,435,325,376,307,272,239,235,279,268,212,204,162,170,154,117,124,457\nScarborough,E07000168,female,424,459,456,462,499,475,492,467,558,568,525,560,558,554,526,546,549,554,495,366,414,425,460,533,491,520,489,528,556,654,618,661,600,647,558,590,592,558,547,552,577,542,551,504,535,542,632,617,653,766,746,739,780,842,821,895,891,908,922,952,872,882,885,812,846,808,808,785,790,835,823,813,844,882,938,678,715,627,578,517,519,435,462,456,404,338,327,291,258,202,964\nSelby,E07000169,female,473,436,481,501,476,521,517,473,500,527,513,535,568,525,523,480,518,498,433,325,297,335,408,472,480,463,553,559,587,635,649,626,595,644,615,582,581,537,620,583,591,604,541,520,529,558,577,636,654,703,711,717,719,721,733,718,728,754,745,698,685,636,638,565,571,498,547,556,507,521,552,516,546,589,549,389,442,400,367,306,279,275,280,224,256,208,185,172,148,130,469\nBarnsley,E08000016,female,1229,1297,1311,1339,1377,1370,1395,1333,1525,1445,1409,1379,1425,1362,1366,1268,1306,1258,1101,1034,979,1125,1266,1431,1450,1587,1551,1693,1676,1772,1826,1727,1630,1760,1677,1597,1676,1631,1496,1483,1503,1548,1447,1286,1274,1375,1437,1493,1658,1803,1962,1802,1862,1867,1911,1858,1873,1846,1835,1693,1635,1591,1562,1583,1554,1417,1325,1468,1269,1315,1264,1279,1338,1392,1414,1100,1231,1014,906,776,802,746,683,688,607,560,458,457,404,324,1234\nDoncaster,E08000017,female,1504,1675,1616,1664,1610,1709,1681,1796,1811,1860,1882,1806,1845,1824,1776,1772,1677,1635,1475,1312,1228,1405,1749,1675,1837,1861,2046,2056,2038,2057,2231,2143,2285,2162,2239,2086,2045,1916,1960,1945,1898,1972,1670,1648,1671,1655,1720,1873,1990,2042,2230,2111,2243,2277,2256,2271,2284,2259,2129,2134,2082,2042,1995,1929,1893,1722,1669,1814,1559,1596,1693,1642,1643,1849,1715,1301,1402,1200,1120,999,961,959,927,892,808,765,631,588,527,474,1653\nRotherham,E08000018,female,1302,1368,1445,1460,1503,1585,1487,1638,1609,1657,1622,1662,1596,1594,1546,1552,1551,1437,1392,1109,1182,1348,1467,1482,1554,1521,1591,1717,1756,1842,1915,1892,1901,1822,1846,1783,1760,1729,1666,1713,1806,1663,1615,1386,1400,1531,1601,1726,1763,1887,1997,1940,1958,1943,1955,1896,1919,1869,1830,1775,1817,1669,1667,1694,1573,1486,1446,1436,1499,1276,1420,1426,1439,1574,1554,1231,1349,1086,1045,917,836,917,838,768,647,656,533,526,409,392,1359\nSheffield,E08000019,female,2886,2903,3019,3013,3117,3096,3019,3093,3106,3215,3198,3084,3155,3161,3003,2850,2941,3005,3889,5642,5507,5568,5058,4713,4411,4118,4167,4012,4113,4031,4097,3880,4056,3993,3818,3670,3741,3626,3404,3513,3416,3453,3205,3012,2952,2947,3115,3146,3438,3602,3846,3589,3652,3693,3547,3620,3485,3339,3449,3418,3151,3065,2975,2939,2713,2636,2511,2520,2488,2470,2373,2381,2549,2772,2735,2208,2438,2081,1876,1713,1637,1672,1635,1500,1330,1262,1084,1017,886,783,3117\nBradford,E08000032,female,3243,3661,3685,3550,3795,3849,3928,3908,3915,3979,3999,3979,4076,3980,4109,3882,3930,3917,3608,3087,3134,3342,3438,3336,3496,3241,3524,3574,3687,3779,3768,3910,4099,4264,4113,4042,3984,4008,3877,4053,3936,3854,3598,3399,3393,3292,3235,3471,3434,3537,3606,3454,3418,3290,3381,3250,3298,3352,3275,3115,3189,2930,2910,2871,2667,2565,2498,2412,2375,2275,2246,2274,2262,2552,2342,1674,1775,1619,1455,1356,1281,1368,1239,1311,1185,1085,960,920,772,642,2620\nCalderdale,E08000033,female,995,1037,1122,1142,1196,1177,1211,1170,1370,1302,1304,1294,1361,1304,1291,1278,1251,1204,1008,847,782,912,989,1153,1119,1203,1123,1233,1360,1290,1369,1381,1337,1423,1428,1323,1456,1372,1329,1388,1327,1387,1312,1119,1268,1302,1325,1427,1444,1527,1698,1643,1572,1626,1609,1539,1532,1599,1498,1465,1409,1326,1293,1307,1260,1224,1128,1109,1042,1045,1132,1155,1090,1236,1178,861,954,827,750,668,593,612,600,531,488,457,384,353,358,275,1204\nKirklees,E08000034,female,2354,2413,2455,2530,2597,2607,2643,2640,2694,2918,2777,2794,2780,2758,2771,2654,2742,2654,2540,2467,2510,2547,2654,2562,2695,2637,2540,2748,2764,2896,3018,2874,3051,3030,3048,2980,2919,2870,2912,2963,3033,2880,2873,2525,2591,2609,2728,2794,2936,3180,3168,3115,3185,3082,2937,2994,2968,2884,2866,2717,2529,2576,2530,2396,2349,2209,2115,2138,2103,2127,2086,2101,2221,2393,2378,1682,1762,1648,1542,1331,1194,1198,1200,1118,1041,830,803,735,580,562,2326\nLeeds,E08000035,female,4252,4505,4674,4672,4751,4859,4738,4709,4853,4948,4967,4901,4708,4493,4412,4339,4222,4089,5583,7823,8047,8270,7508,6723,6422,6049,6212,6228,6210,6292,6505,6061,6183,6219,6298,5972,5952,5621,5690,5683,5869,5527,5069,4893,4823,4931,4703,4652,4972,5181,5253,5095,5266,5058,5042,4976,5068,4951,4821,4676,4369,4118,4217,4124,3958,3539,3447,3541,3359,3347,3439,3463,3504,3946,3829,2751,2944,2598,2607,2058,2002,2238,1928,1968,1898,1686,1524,1257,1169,1021,4258\nWakefield,E08000036,female,1838,1900,1967,1971,2042,1958,2035,2030,2089,2087,2077,2048,2030,2049,1955,1879,1907,1875,1593,1397,1380,1671,1850,1950,2164,2260,2288,2416,2533,2657,2663,2562,2553,2666,2577,2517,2463,2398,2279,2322,2322,2308,2079,1863,1860,2120,2109,2161,2450,2603,2644,2609,2614,2703,2686,2598,2588,2521,2518,2361,2324,2155,2260,2165,2004,1955,1925,1939,1848,1794,1734,1956,1882,2056,2016,1526,1639,1397,1371,1097,1086,1097,1046,951,851,759,692,659,563,444,1725\nDerby,E06000015,female,1384,1469,1626,1481,1520,1588,1635,1672,1661,1807,1617,1704,1626,1734,1515,1508,1632,1415,1537,1671,1794,1891,1797,1823,1755,1761,1752,1868,1807,1875,2020,1870,1833,1814,1773,1870,1965,1849,1915,1738,1887,1803,1658,1547,1488,1548,1590,1569,1669,1760,1768,1712,1753,1673,1659,1711,1685,1642,1639,1506,1432,1354,1375,1322,1248,1178,1155,1197,1099,1095,1114,1100,1114,1341,1147,878,1034,925,827,714,766,768,714,675,599,582,538,477,423,339,1489\nLeicester,E06000016,female,1928,2150,2067,2259,2308,2353,2348,2390,2457,2537,2621,2425,2598,2478,2329,2275,2415,2245,3164,4184,4358,4132,3585,3159,3030,2753,2816,2758,2719,2745,2813,2823,2824,2905,2880,2850,2908,2866,2835,2578,2666,2633,2518,2278,2223,2327,2375,2150,2260,2248,2313,2246,2226,2119,2068,1962,1988,1934,2011,1919,1897,1786,1706,1611,1616,1505,1438,1472,1336,1322,1259,1241,1128,1176,1005,873,852,792,802,671,653,675,659,641,601,501,446,419,359,302,1390\nRutland,E06000017,female,141,120,176,186,197,174,188,188,190,170,193,229,199,256,291,279,303,302,220,132,102,142,157,151,160,173,153,175,182,175,204,189,187,188,213,200,219,182,212,228,232,243,210,223,204,210,237,249,263,274,298,324,287,335,297,290,309,300,277,292,269,282,312,277,231,277,252,255,257,252,274,289,292,308,298,217,270,221,251,155,192,172,159,154,125,136,127,100,78,78,339\nNottingham,E06000018,female,1435,1809,1747,1721,1930,1904,1759,1848,2005,1933,1862,1815,1861,1794,1768,1664,1678,1552,3725,7170,7331,5828,3883,2932,2486,2403,2471,2547,2508,2660,2561,2586,2472,2499,2515,2324,2198,2143,2104,2006,2061,1960,1875,1687,1658,1732,1707,1714,1734,1776,1875,1754,1842,1797,1802,1768,1774,1666,1686,1656,1504,1436,1448,1405,1248,1178,1169,1212,1069,953,990,966,989,1065,971,779,793,803,690,643,625,603,623,572,527,497,419,382,361,326,1420\nNorth Northamptonshire,E06000061,female,1784,1954,1986,2017,2071,2148,2015,2206,2330,2324,2317,2163,2279,2275,2285,2164,2131,2077,1637,1424,1490,1626,1780,1951,2009,2001,2229,2296,2443,2511,2471,2552,2669,2592,2476,2564,2543,2409,2529,2458,2510,2475,2374,2143,2319,2211,2373,2423,2536,2616,2586,2638,2711,2698,2604,2591,2624,2499,2413,2372,2206,2122,2058,2081,1843,1906,1845,1875,1898,1861,1755,1891,1967,2070,2007,1518,1534,1431,1303,1111,971,955,936,870,779,696,595,575,500,456,1932\nWest Northamptonshire,E06000062,female,2175,2343,2388,2424,2461,2595,2563,2559,2618,2607,2622,2608,2716,2631,2533,2540,2309,2421,2353,2269,2353,2276,2256,2441,2469,2543,2607,2775,2800,2885,3043,3111,3204,3152,3177,3028,3042,2993,3029,2992,3123,3030,2846,2646,2551,2735,2830,2814,2916,3192,3119,2868,3086,3050,3052,2922,3027,2879,2866,2774,2631,2426,2426,2287,2187,2069,2062,1992,2059,2035,1971,2063,2053,2324,2263,1613,1733,1600,1382,1129,1071,1071,1082,990,889,767,707,675,569,512,2184\nAmber Valley,E07000032,female,544,585,602,611,621,626,640,641,693,697,729,707,698,679,696,623,583,607,581,447,460,572,632,667,703,685,734,714,758,788,786,761,746,761,756,743,780,734,740,733,754,809,683,719,723,767,769,812,923,978,941,1007,1040,982,1033,1029,1028,1022,1016,881,911,858,883,798,815,743,748,825,789,701,778,824,836,926,850,635,684,692,565,490,420,436,430,395,361,313,256,283,223,176,816\nBolsover,E07000033,female,405,381,416,346,403,447,420,451,462,491,453,415,429,442,416,487,402,392,346,307,309,409,400,466,500,504,576,511,557,560,574,554,548,534,526,538,526,479,482,469,474,455,422,387,450,474,445,545,602,598,644,596,695,639,625,636,632,651,582,559,541,541,513,516,522,447,446,482,443,413,447,449,428,474,487,382,412,388,334,269,265,194,267,215,205,179,171,145,121,99,454\nChesterfield,E07000034,female,479,482,511,514,553,500,523,570,570,607,585,540,604,585,552,498,523,507,450,353,445,462,515,582,590,593,648,687,658,715,670,653,671,647,692,624,608,609,596,629,643,630,638,581,540,626,634,647,732,768,789,768,756,767,768,853,841,808,778,718,756,721,677,682,653,652,631,607,603,590,587,661,610,651,702,512,542,477,467,368,328,351,358,328,293,257,249,226,188,164,706\nDerbyshire Dales,E07000035,female,236,259,258,236,316,333,312,307,318,395,363,373,363,407,369,380,384,367,312,239,191,232,270,290,289,255,284,299,306,307,301,322,315,306,339,320,328,327,323,350,376,377,407,354,378,401,397,469,559,567,605,568,604,617,656,638,679,649,653,624,602,577,565,548,524,532,536,503,539,508,561,488,578,624,609,445,475,465,393,353,320,307,325,286,256,231,225,195,165,158,651\nErewash,E07000036,female,520,514,558,569,545,583,596,579,628,642,644,600,610,619,537,573,620,556,521,449,492,519,566,647,649,689,726,696,717,746,770,776,835,772,758,764,703,657,715,738,751,682,703,599,592,664,711,757,773,861,894,875,885,916,897,914,858,878,823,843,762,720,695,691,661,607,632,602,640,650,590,601,651,742,721,559,569,561,492,413,365,393,365,373,308,286,237,221,220,198,663\nHigh Peak,E07000037,female,404,404,412,463,469,459,457,449,479,531,488,501,500,505,511,484,477,474,389,335,317,405,439,421,427,430,478,464,494,591,539,556,536,528,580,535,577,549,525,551,602,537,563,518,479,528,577,575,680,643,723,724,723,767,764,788,803,803,737,689,742,697,682,646,596,555,534,572,518,593,499,523,581,617,596,464,451,455,391,366,328,293,296,239,261,213,212,177,149,128,523\nNorth East Derbyshire,E07000038,female,456,458,462,489,528,516,536,559,493,579,532,577,508,544,523,529,504,508,423,416,378,389,474,504,541,511,569,569,577,597,617,528,565,641,612,586,592,587,582,533,603,631,524,548,538,584,649,580,681,733,767,786,748,805,847,818,807,812,803,730,691,758,724,720,686,667,715,699,604,669,640,709,758,745,742,651,642,603,557,427,428,419,392,381,335,289,274,206,207,180,664\nSouth Derbyshire,E07000039,female,539,541,612,539,609,681,596,556,662,649,671,680,626,623,638,670,613,587,486,388,398,455,514,581,619,672,662,715,765,773,813,776,688,714,722,743,747,692,723,671,743,700,712,660,684,658,660,760,751,836,877,844,864,834,822,809,776,768,798,794,687,649,685,605,575,585,613,610,556,567,514,584,547,652,604,455,491,441,363,327,290,308,296,227,243,233,214,178,155,129,522\nBlaby,E07000129,female,531,542,547,534,604,590,572,563,607,631,657,605,605,586,566,557,581,557,448,393,384,419,516,502,541,562,608,634,649,663,677,704,721,786,692,720,693,745,666,692,711,660,662,612,603,647,673,647,748,684,731,701,778,761,751,706,774,767,705,718,709,684,627,613,563,545,533,579,570,536,513,615,629,649,629,454,531,477,422,366,336,364,368,329,286,268,242,234,185,134,602\nCharnwood,E07000130,female,806,927,873,926,931,960,952,872,995,1005,1068,992,1005,920,911,865,875,982,1463,1940,1710,1556,1530,1205,1084,1015,1109,1104,1118,1194,1228,1190,1159,1261,1209,1213,1206,1191,1163,1147,1211,1183,1086,997,917,1060,1043,1110,1160,1235,1273,1246,1218,1278,1217,1180,1230,1180,1211,1150,1117,1089,1107,1075,910,903,939,989,965,988,929,890,986,1042,965,765,875,839,675,550,542,539,506,479,437,404,370,358,306,279,1066\nHarborough,E07000131,female,423,431,483,454,481,519,493,541,508,555,550,568,533,583,600,553,547,625,460,348,335,378,409,450,491,480,500,477,531,490,596,541,533,570,569,597,549,573,588,625,574,663,608,565,584,611,666,725,721,732,779,752,828,742,795,813,829,778,731,689,665,636,636,620,594,615,569,561,549,523,546,629,587,635,656,460,547,488,431,316,327,348,340,302,327,262,222,192,158,170,637\nHinckley and Bosworth,E07000132,female,513,537,525,566,588,601,629,605,627,635,674,611,593,615,619,609,577,590,510,415,405,431,542,513,554,627,639,680,685,744,760,756,703,740,723,709,747,689,720,741,739,705,730,629,624,703,723,720,801,827,893,858,872,822,825,914,795,765,842,841,773,762,736,751,672,691,593,723,728,666,680,770,756,752,720,587,651,558,519,450,404,368,413,358,295,290,233,213,193,171,760\nMelton,E07000133,female,214,221,232,247,255,244,285,254,298,298,330,296,287,267,295,304,269,254,245,196,159,194,241,244,275,236,312,238,287,284,303,319,277,294,266,280,268,292,305,300,315,318,300,330,279,303,335,320,372,359,410,420,441,389,489,474,415,436,448,390,409,359,363,378,363,328,326,326,331,319,366,333,341,387,322,283,287,262,263,198,166,183,171,146,143,149,141,101,107,98,341\nNorth West Leicestershire,E07000134,female,498,484,556,537,545,563,575,586,600,587,606,606,570,596,559,542,561,594,453,483,544,610,650,621,595,537,599,650,651,699,746,666,687,702,678,646,642,680,712,658,724,651,631,600,614,627,662,734,774,847,847,774,788,797,840,789,766,771,737,756,702,637,647,632,604,550,540,590,571,562,563,626,594,663,659,517,519,480,413,323,308,327,286,252,264,222,210,178,147,131,549\nOadby and Wigston,E07000135,female,232,270,260,289,314,356,324,343,349,339,333,370,361,334,337,346,326,308,514,575,274,238,299,295,318,283,316,313,330,307,363,371,361,391,370,370,412,357,356,360,426,385,362,321,332,347,349,369,330,362,402,379,414,397,371,431,402,431,410,404,382,362,378,331,316,295,307,306,318,299,310,317,338,337,342,250,290,295,250,215,188,207,235,225,197,190,180,157,144,119,494\nBoston,E07000136,female,294,350,309,404,366,380,398,404,414,439,407,425,457,405,392,434,402,354,342,315,313,320,375,358,387,412,389,419,457,469,478,460,473,529,494,506,483,481,443,442,454,442,436,410,408,480,473,440,465,494,533,503,486,504,515,508,520,496,483,496,482,416,417,461,411,428,374,405,368,382,382,405,376,388,419,329,338,324,278,222,223,274,240,202,165,192,150,131,122,117,463\nEast Lindsey,E07000137,female,493,509,551,577,585,598,630,618,681,679,729,757,704,705,715,731,674,671,552,434,462,535,624,618,596,611,622,643,665,683,690,688,749,715,674,717,636,652,627,639,716,673,659,636,630,650,740,792,922,982,1042,1003,1128,1041,1135,1198,1184,1220,1236,1235,1183,1152,1210,1169,1192,1214,1104,1129,1153,1114,1149,1285,1223,1288,1335,1016,1064,980,820,760,687,672,643,556,518,432,398,320,337,292,1118\nLincoln,E07000138,female,509,458,499,513,479,564,511,528,553,471,514,523,516,461,481,456,480,462,1116,2173,2299,1930,1172,896,769,753,815,789,772,756,796,748,703,787,705,663,670,633,601,607,631,655,591,538,487,525,495,533,573,576,588,558,611,607,586,628,586,575,675,597,573,465,532,477,443,423,431,423,409,434,396,415,388,427,417,321,369,342,269,228,230,242,217,272,196,220,159,168,129,121,526\nNorth Kesteven,E07000139,female,476,552,525,568,579,648,628,613,709,671,685,662,696,667,650,633,600,664,529,388,435,454,548,547,566,622,587,688,652,725,779,674,744,746,701,717,717,693,715,715,697,706,698,631,630,685,683,759,811,916,936,961,915,938,926,903,967,905,908,872,870,785,778,718,744,629,684,681,694,686,720,809,778,901,813,607,709,645,578,531,489,513,449,375,372,343,262,277,208,189,768\nSouth Holland,E07000140,female,407,462,449,456,457,494,510,514,523,536,480,527,494,453,525,526,468,443,391,396,347,413,472,485,500,515,527,530,546,529,589,599,588,623,525,567,560,554,584,536,558,536,555,497,558,581,604,638,636,700,684,690,718,688,730,749,750,735,701,708,665,612,619,598,621,579,565,579,588,602,561,604,637,708,680,497,566,451,476,426,386,375,356,336,303,295,243,201,204,187,732\nSouth Kesteven,E07000141,female,610,626,632,697,707,797,803,706,822,830,908,856,870,918,878,818,790,797,676,527,462,551,650,691,669,751,730,790,762,821,857,858,816,807,842,885,837,869,866,851,999,923,866,822,831,845,939,950,1053,1137,1142,1181,1092,1060,1094,1158,1171,1109,1049,1068,1087,1004,1012,980,881,859,887,921,898,903,877,881,942,1060,1023,766,821,737,655,634,516,504,488,455,411,407,346,290,242,247,1035\nWest Lindsey,E07000142,female,336,394,424,461,459,508,509,526,522,539,529,510,484,525,520,511,501,474,397,304,313,363,386,443,458,473,470,456,549,528,521,533,554,532,502,537,541,528,566,533,562,540,528,455,502,520,561,568,639,653,702,726,755,716,784,788,816,750,761,796,723,737,699,706,661,686,675,658,632,602,639,655,675,684,756,560,571,555,513,404,368,353,333,326,319,273,247,194,171,141,605\nAshfield,E07000170,female,612,641,639,669,705,705,728,762,761,746,803,757,771,721,700,657,660,652,624,577,528,570,655,673,747,781,770,875,842,886,903,962,890,896,876,848,841,798,774,797,845,816,733,740,700,721,726,820,853,1003,989,962,987,937,933,946,1000,899,921,848,845,882,736,694,686,707,658,700,685,663,656,681,705,697,730,597,615,581,568,477,412,436,400,349,325,284,223,230,188,170,679\nBassetlaw,E07000171,female,587,557,578,596,634,612,642,587,642,725,666,653,642,639,625,598,584,613,533,448,418,452,607,613,649,651,673,700,692,750,727,710,700,731,696,674,723,699,657,676,713,673,653,631,663,666,711,752,816,866,879,845,924,920,918,961,958,922,893,882,836,814,812,765,719,701,691,704,696,672,655,767,739,852,741,603,645,573,514,461,423,419,393,368,338,288,266,258,178,174,726\nBroxtowe,E07000172,female,487,472,511,519,593,597,541,568,633,616,592,592,588,551,563,505,531,513,629,669,656,595,598,603,658,671,723,747,690,734,795,760,733,789,723,694,773,765,696,642,721,667,654,578,698,628,651,669,715,734,781,737,785,812,759,824,843,821,818,786,728,737,683,691,655,588,625,631,609,615,642,702,639,794,754,557,626,510,474,438,388,419,361,350,337,285,276,232,220,201,781\nGedling,E07000173,female,590,558,569,578,622,627,675,666,709,638,648,659,648,645,628,646,598,611,473,434,384,481,521,587,650,646,714,659,754,790,826,815,815,800,813,756,801,796,796,766,789,789,741,730,701,671,731,795,804,820,885,868,961,828,927,860,929,930,862,850,822,828,722,723,682,695,694,687,657,692,628,691,728,768,768,542,633,550,523,424,392,437,409,394,369,345,303,254,210,187,761\nMansfield,E07000174,female,545,548,571,612,642,639,594,638,658,698,757,628,665,595,584,615,573,526,465,419,427,498,560,617,664,643,655,822,703,793,803,796,791,837,814,779,791,739,739,775,728,701,659,562,625,644,673,663,695,710,762,764,810,810,868,828,811,877,798,847,739,769,710,685,652,640,641,589,568,565,563,584,610,572,598,504,557,466,441,352,348,344,338,306,259,250,238,190,175,156,623\nNewark and Sherwood,E07000175,female,580,578,575,590,640,664,631,661,638,707,688,679,700,681,679,661,675,634,565,564,586,538,595,604,657,663,678,678,781,774,747,793,725,777,740,771,744,720,709,702,718,739,685,672,629,703,704,781,849,886,905,907,915,929,952,961,991,954,920,885,894,852,844,813,804,753,770,724,733,717,718,750,778,902,815,641,687,610,573,490,424,474,446,380,319,316,276,254,223,190,824\nRushcliffe,E07000176,female,497,579,558,613,583,662,602,691,657,670,702,714,742,732,725,605,647,639,634,642,671,612,623,617,591,604,628,568,606,654,709,650,688,743,736,740,797,775,754,777,809,807,808,779,796,759,765,813,808,834,865,890,903,868,876,921,899,881,813,829,790,757,726,736,612,689,650,674,678,648,632,687,696,772,740,635,639,574,517,425,409,433,382,382,332,326,306,279,265,188,997\n\"Herefordshire, County of\",E06000019,female,750,786,830,838,885,820,835,912,992,956,1044,959,960,962,932,860,962,959,866,689,652,717,774,924,832,874,930,936,1018,1068,1082,1089,1114,1112,979,1120,977,1060,1023,1038,1092,1081,942,964,918,978,1121,1098,1163,1380,1341,1356,1447,1464,1427,1581,1512,1520,1473,1451,1461,1319,1338,1464,1387,1306,1319,1311,1291,1209,1228,1312,1306,1402,1410,1064,1190,1060,909,839,775,770,767,661,662,573,583,507,398,351,1580\nTelford and Wrekin,E06000020,female,950,1005,1059,1028,1084,1091,1098,1172,1161,1248,1208,1235,1168,1163,1142,1115,1149,1061,979,1051,994,1057,1149,1088,1129,1124,1176,1236,1228,1271,1296,1299,1388,1343,1307,1225,1233,1250,1256,1124,1263,1212,1180,1019,1109,1037,1143,1212,1273,1382,1370,1401,1351,1363,1316,1368,1347,1286,1204,1171,1158,1151,1091,994,936,939,988,936,911,911,921,929,972,957,1006,733,747,713,673,589,523,522,513,447,369,381,296,288,255,212,798\nStoke-on-Trent,E06000021,female,1524,1598,1561,1499,1543,1562,1660,1706,1694,1751,1754,1623,1712,1717,1519,1460,1499,1428,1322,1481,1544,1700,1645,1650,1668,1643,1701,1771,1796,1788,2007,1973,1989,1916,1894,1836,1832,1746,1727,1678,1749,1626,1579,1379,1319,1392,1454,1552,1592,1702,1770,1666,1637,1643,1590,1711,1738,1529,1542,1619,1561,1425,1420,1373,1419,1288,1267,1301,1145,1168,1150,1184,1266,1274,1284,914,1048,872,987,735,736,709,689,638,687,520,492,441,369,339,1287\nShropshire,E06000051,female,1286,1312,1419,1472,1531,1511,1535,1536,1582,1719,1634,1674,1645,1798,1655,1656,1777,1817,1544,1269,1193,1325,1445,1454,1590,1478,1605,1644,1700,1693,1843,1827,1756,1743,1807,1741,1885,1699,1612,1740,1754,1797,1747,1579,1573,1787,1964,1987,2122,2366,2445,2314,2528,2520,2709,2724,2615,2597,2534,2488,2486,2319,2398,2341,2134,2091,2163,2187,2113,2077,2106,2205,2215,2489,2346,1945,2037,1860,1686,1445,1373,1368,1252,1259,1075,960,826,750,760,621,2738\nCannock Chase,E07000192,female,563,564,529,535,531,516,540,558,616,556,572,533,564,559,599,545,509,520,429,400,410,452,554,571,627,650,616,709,752,736,726,694,738,736,675,718,607,647,684,608,694,579,575,491,527,535,588,689,688,731,755,807,798,743,764,774,760,749,737,734,650,613,633,591,585,560,551,550,532,545,502,566,531,612,579,454,434,432,416,376,300,335,322,315,261,193,184,178,151,136,560\nEast Staffordshire,E07000193,female,639,679,629,659,722,681,686,754,744,776,752,730,774,783,751,687,720,669,603,521,536,547,611,674,770,715,768,786,817,853,856,856,891,820,839,834,798,793,787,764,804,780,761,683,686,743,759,737,803,857,897,830,934,926,928,923,905,887,889,804,804,779,775,716,677,614,626,670,621,557,608,624,587,689,726,528,561,506,496,421,369,402,360,305,323,263,248,210,212,198,702\nLichfield,E07000194,female,494,513,508,546,572,544,527,553,584,595,604,540,563,530,570,554,549,559,463,384,354,395,464,517,514,565,577,627,616,648,602,599,622,614,635,606,636,635,613,623,651,653,622,610,577,656,642,700,711,777,822,807,790,822,831,809,853,785,788,750,702,685,720,658,629,662,634,670,617,627,644,644,687,821,802,668,715,626,582,526,480,419,420,355,331,300,245,227,203,157,669\nNewcastle-under-Lyme,E07000195,female,559,552,557,568,596,610,612,629,653,672,625,553,667,652,655,634,646,614,788,1119,1032,978,857,751,707,646,673,706,708,740,769,812,761,751,775,758,745,685,756,715,737,753,671,673,673,690,728,770,759,852,873,902,908,861,946,897,869,878,900,880,852,818,803,749,737,735,714,700,695,665,734,706,738,836,737,572,659,576,525,457,465,415,432,394,402,341,311,298,242,221,808\nSouth Staffordshire,E07000196,female,440,432,524,492,500,542,541,540,544,587,539,524,590,546,576,519,542,534,440,373,378,448,512,516,545,490,529,529,571,570,615,524,543,646,597,607,605,601,584,605,619,637,544,513,536,608,634,657,697,811,827,786,843,842,910,908,891,857,895,944,870,758,792,780,798,727,686,707,725,677,693,718,769,829,767,667,735,674,637,503,507,458,448,402,373,375,303,262,238,206,783\nStafford,E07000197,female,601,662,675,677,694,711,693,703,742,711,738,752,805,807,711,711,711,669,546,507,534,571,644,648,667,686,796,804,850,834,854,858,836,910,875,807,826,843,794,805,897,857,805,776,766,778,795,883,906,973,1014,1013,1041,1027,1100,993,1091,1073,993,960,961,947,881,893,823,780,823,805,792,806,785,843,879,910,914,716,788,756,722,570,512,508,536,459,404,370,301,285,259,210,983\nStaffordshire Moorlands,E07000198,female,407,383,399,400,436,440,435,440,490,491,508,491,507,520,478,459,551,491,445,328,325,386,375,405,443,450,480,457,449,514,508,444,538,533,524,519,499,476,516,487,552,514,481,504,512,515,597,582,643,717,779,758,806,787,792,764,858,756,708,759,731,663,673,707,665,648,611,661,636,636,637,745,691,784,768,567,608,565,506,473,416,387,413,367,333,297,267,210,188,180,727\nTamworth,E07000199,female,390,419,434,413,449,463,449,433,464,457,477,476,500,460,465,395,440,435,388,349,354,372,392,478,490,444,510,521,559,564,586,556,576,561,568,534,560,518,484,505,554,489,461,446,416,476,499,540,581,593,608,588,570,523,548,577,533,532,527,497,498,516,471,483,456,464,450,484,426,429,392,480,418,440,464,352,323,361,312,224,240,230,215,186,154,161,145,121,118,102,352\nNorth Warwickshire,E07000218,female,309,294,329,354,307,343,335,366,382,379,387,377,355,338,368,339,349,298,301,244,245,286,303,307,373,323,363,374,383,432,435,436,410,405,394,402,367,396,405,371,411,392,356,357,346,399,378,424,487,449,506,469,545,521,550,561,535,493,491,453,508,456,456,422,390,383,374,385,373,384,392,382,406,441,426,326,347,324,296,231,233,225,194,192,206,174,137,120,120,114,416\nNuneaton and Bedworth,E07000219,female,713,730,797,774,747,757,795,800,799,835,835,764,816,782,802,747,779,728,607,592,567,667,693,772,833,804,850,915,964,955,1052,1038,967,1010,957,911,955,865,873,884,937,867,837,738,756,792,770,816,870,910,899,948,1003,1030,970,1019,981,873,865,887,822,786,800,777,788,715,690,701,650,713,701,754,698,767,728,616,654,581,544,417,447,402,427,358,351,282,271,256,191,199,693\nRugby,E07000220,female,586,572,622,649,679,705,686,710,685,755,700,675,733,717,707,678,696,616,521,361,407,500,516,609,646,666,695,702,760,768,817,822,852,909,792,848,839,839,869,810,812,831,757,737,716,739,707,745,811,816,806,833,793,782,769,771,790,801,737,698,707,627,540,613,579,526,536,539,487,533,508,576,556,606,595,501,555,539,432,368,333,361,331,314,298,251,224,197,192,146,666\nStratford-on-Avon,E07000221,female,565,609,559,633,687,677,630,700,710,718,711,709,727,770,731,729,746,684,537,430,385,424,525,617,615,707,673,667,669,738,751,751,793,804,711,752,734,742,783,826,811,812,766,751,810,836,917,909,927,1037,1076,1049,1086,1068,1081,1152,1132,1081,1021,1083,1033,918,973,936,921,827,830,837,838,858,852,862,961,992,1039,832,861,857,713,578,532,556,532,516,467,435,402,340,303,279,1140\nWarwick,E07000222,female,649,721,711,728,740,773,810,783,798,847,849,804,804,766,761,756,703,750,944,1266,1275,1183,890,835,891,798,873,928,910,1039,1051,991,1079,1083,1022,1012,997,1011,1012,969,945,1050,1009,859,913,877,911,961,986,1009,1030,997,982,1026,996,997,980,1008,966,970,926,805,812,735,770,736,705,748,731,771,695,752,764,783,770,656,682,637,614,488,470,483,468,410,383,399,336,275,248,226,1045\nBromsgrove,E07000234,female,445,511,502,519,602,535,553,560,554,567,594,554,586,592,559,548,594,567,452,356,288,361,455,434,472,451,490,468,494,521,575,490,570,564,556,632,590,591,601,611,687,668,633,573,604,594,644,663,732,718,759,739,798,808,769,837,772,736,721,698,692,662,650,624,579,571,633,620,578,533,578,614,578,619,629,526,590,576,456,387,377,361,374,348,303,297,286,263,227,221,860\nMalvern Hills,E07000235,female,257,271,303,326,368,344,366,404,405,430,415,412,450,401,472,449,463,480,378,282,228,295,316,354,353,357,321,339,341,388,357,416,373,388,372,375,390,422,370,380,396,441,459,404,443,434,485,483,523,563,581,553,614,698,631,677,702,678,666,607,623,627,615,601,588,575,564,547,586,547,595,631,572,636,638,497,543,526,452,384,354,356,354,322,349,250,243,242,234,173,783\nRedditch,E07000236,female,467,481,488,479,523,495,525,482,565,540,547,484,478,509,558,496,525,444,415,351,367,416,432,510,550,516,588,572,586,692,641,694,660,630,627,622,618,625,608,649,658,676,544,521,482,511,513,519,598,625,568,574,589,566,591,576,591,550,554,561,512,511,518,549,528,509,488,543,507,497,477,443,500,477,474,364,390,337,266,250,222,207,223,191,205,155,115,139,102,105,422\nWorcester,E07000237,female,482,551,562,507,512,545,495,546,638,583,576,616,562,611,578,575,532,534,634,925,914,842,729,711,777,689,723,741,719,717,796,800,702,719,731,749,705,671,681,684,709,687,637,610,617,692,622,702,651,691,744,761,760,682,747,709,743,698,706,650,610,557,594,564,501,544,483,550,522,460,529,475,468,566,518,416,430,391,362,362,283,316,268,286,260,219,184,186,191,164,555\nWychavon,E07000238,female,589,539,614,612,676,704,600,632,734,729,711,697,690,686,662,725,724,708,562,469,453,506,561,633,650,651,679,654,698,740,711,773,816,780,803,745,751,736,718,764,796,780,799,711,712,738,803,853,895,997,1036,972,1039,1093,1049,1040,1076,1015,1050,1024,976,935,908,938,865,845,867,934,855,844,851,883,910,1002,989,750,799,717,648,534,555,580,515,459,427,348,331,255,280,266,1072\nWyre Forest,E07000239,female,425,422,481,486,518,539,515,528,568,535,551,495,517,556,550,509,496,493,442,420,388,396,505,517,499,507,525,527,563,627,628,615,624,654,621,565,571,545,552,544,619,559,536,522,547,581,637,625,698,707,737,789,768,790,810,800,824,768,743,689,692,663,613,672,604,652,656,695,649,674,669,744,739,839,728,630,670,648,555,449,412,410,384,380,324,292,247,260,203,187,676\nBirmingham,E08000025,female,7259,7227,7241,7481,7806,7702,7724,8024,8099,8028,8127,8050,8296,8112,7802,7876,7828,7784,8831,10848,10794,9955,9376,8902,8791,8580,8401,8415,8311,8536,8871,8830,8758,9009,8960,8582,8475,8425,8459,8276,8282,8223,7493,7128,7018,6772,6724,6584,6763,7144,7025,7146,6938,6933,6830,6647,6416,6343,6352,6139,5797,5496,5216,4966,4833,4513,4421,4369,4314,4049,3902,3967,3847,4064,4071,3059,3274,3172,3037,2622,2547,2495,2394,2291,2268,2101,1762,1566,1530,1382,5425\nCoventry,E08000026,female,1920,1931,2060,2044,2012,2041,2170,2094,2205,2181,2173,2217,2150,2137,2062,1858,2010,2002,2769,3792,3566,3201,3024,2622,2505,2509,2392,2421,2426,2523,2536,2718,2532,2783,2586,2617,2409,2480,2337,2312,2412,2342,2195,2028,2034,2032,1960,1942,2029,2086,2066,2067,2160,2164,2130,2022,1901,1961,1902,1884,1782,1547,1623,1635,1483,1406,1414,1406,1312,1261,1280,1269,1332,1386,1379,1096,1187,1173,1066,885,928,848,814,772,700,689,589,568,458,411,1790\nDudley,E08000027,female,1674,1737,1758,1786,1848,1894,1857,1999,1978,1962,1961,1892,1850,1893,1807,1814,1855,1851,1651,1419,1424,1539,1741,1851,1945,1968,1964,2088,2196,2243,2230,2187,2141,2265,2141,2093,2147,2043,2106,2040,1986,2068,1950,1751,1880,1764,1888,1960,2137,2350,2445,2261,2291,2286,2378,2190,2496,2219,2194,2060,1958,1892,1843,1822,1848,1815,1630,1717,1714,1688,1697,1786,1732,1838,1785,1456,1583,1648,1431,1296,1138,1123,1115,1035,955,881,807,686,617,530,2016\nSandwell,E08000028,female,2020,2098,2238,2134,2254,2374,2211,2254,2537,2528,2405,2408,2419,2371,2254,2288,2145,2185,2060,1864,1796,1851,2072,2068,2151,2112,2266,2334,2484,2451,2638,2621,2631,2577,2689,2610,2607,2679,2687,2513,2695,2506,2287,2091,2148,2178,2152,2184,2191,2265,2439,2351,2350,2205,2204,2252,2252,2130,2024,2014,1852,1776,1670,1639,1636,1480,1458,1400,1390,1339,1401,1305,1290,1326,1254,1033,1151,1165,1051,922,872,893,815,784,729,640,586,484,477,415,1539\nSolihull,E08000029,female,1037,1119,1137,1184,1227,1334,1298,1283,1299,1457,1311,1372,1279,1294,1275,1255,1283,1200,1019,793,855,930,1092,1139,1209,1230,1199,1224,1205,1310,1418,1366,1315,1397,1457,1397,1410,1348,1437,1365,1459,1430,1339,1243,1304,1370,1348,1359,1475,1593,1591,1582,1689,1554,1595,1617,1583,1538,1595,1563,1418,1440,1326,1237,1177,1077,1119,1238,1142,1144,1110,1210,1311,1330,1409,1061,1159,1059,994,859,731,734,810,681,690,623,563,491,450,428,1672\nWalsall,E08000030,female,1671,1906,1799,1868,1886,1893,1831,1845,1949,1955,1950,1982,1843,1868,1862,1804,1779,1709,1669,1415,1470,1510,1665,1791,1729,1801,1750,1883,2012,2041,2097,2019,2129,2167,2056,2028,2012,2006,2013,1862,1907,1998,1637,1652,1707,1588,1667,1764,1743,1896,1963,1847,2004,1987,1831,1871,1879,1796,1818,1755,1723,1594,1524,1531,1423,1403,1329,1338,1158,1243,1292,1275,1298,1378,1334,1054,1155,1084,1070,956,836,868,896,834,765,694,562,556,500,428,1528\nWolverhampton,E08000031,female,1384,1526,1493,1709,1698,1700,1693,1681,1765,1799,1814,1706,1746,1798,1786,1548,1559,1532,1360,1352,1358,1411,1638,1590,1746,1588,1663,1861,1848,1879,1999,1994,1932,1991,2049,1935,2000,1961,1983,1855,1890,1867,1757,1661,1635,1565,1548,1616,1765,1883,1905,1856,1737,1783,1714,1735,1726,1613,1676,1635,1505,1430,1384,1413,1411,1214,1263,1225,1164,1207,1163,1102,1080,1172,1022,852,924,994,902,745,726,770,724,658,669,579,539,486,428,382,1543\nPeterborough,E06000031,female,1295,1293,1343,1453,1488,1489,1456,1472,1584,1593,1522,1487,1533,1468,1405,1347,1347,1264,1087,912,913,1002,1245,1199,1386,1456,1425,1558,1630,1786,1767,1760,1787,1810,1793,1881,1832,1802,1680,1642,1696,1624,1523,1443,1419,1371,1348,1373,1371,1414,1418,1384,1431,1336,1373,1349,1343,1267,1253,1177,1151,1064,1083,1053,959,922,923,960,878,886,805,799,833,828,940,693,658,596,612,517,474,498,496,406,427,382,330,283,292,233,978\nLuton,E06000032,female,1588,1610,1510,1578,1577,1676,1574,1530,1639,1676,1626,1622,1689,1645,1604,1513,1539,1565,1381,1245,1382,1404,1520,1651,1671,1653,1689,1665,1732,1699,1752,1798,1848,1924,1894,1810,1910,1776,1826,1773,1806,1811,1600,1435,1418,1362,1359,1322,1339,1333,1350,1356,1375,1351,1221,1283,1252,1215,1188,1140,1005,1071,1014,865,894,891,765,755,800,701,690,673,637,669,677,581,590,515,507,444,411,478,436,416,425,379,318,279,243,204,818\nSouthend-on-Sea,E06000033,female,989,980,1003,1061,1064,1074,1073,1047,1074,1086,1093,1141,1121,998,1079,962,948,889,808,765,780,910,974,1031,1073,1070,1097,1190,1181,1186,1300,1271,1240,1221,1237,1347,1248,1267,1219,1270,1278,1375,1248,1107,1202,1189,1205,1232,1284,1285,1259,1224,1289,1286,1287,1328,1281,1299,1239,1143,1122,1116,1076,1000,949,930,932,927,923,870,906,945,951,1052,1030,802,865,784,725,607,493,599,581,530,447,420,422,338,364,309,1355\nThurrock,E06000034,female,1075,1191,1189,1265,1259,1282,1214,1237,1225,1207,1245,1175,1231,1268,1128,1114,1115,1080,909,836,826,867,998,977,1100,1104,1179,1297,1298,1374,1451,1476,1498,1536,1490,1497,1557,1419,1305,1442,1396,1368,1290,1171,1223,1160,1232,1175,1123,1204,1189,1105,1256,1143,1192,1133,1141,1104,993,1017,965,844,814,772,789,701,693,706,699,672,677,655,648,779,803,514,525,486,481,401,418,369,337,312,344,290,239,201,201,176,730\nBedford,E06000055,female,1050,1039,1130,1146,1100,1123,1085,1123,1185,1181,1149,1268,1201,1106,1108,1069,1021,1055,889,811,817,917,1012,1088,1146,1123,1198,1209,1278,1328,1356,1372,1406,1533,1382,1444,1403,1365,1281,1393,1434,1441,1246,1248,1196,1153,1243,1242,1314,1206,1323,1240,1332,1299,1272,1244,1273,1281,1198,1150,1069,1026,1021,1014,886,933,905,891,764,868,844,878,837,918,875,664,728,692,573,484,505,473,453,480,413,388,375,363,273,223,1056\nCentral Bedfordshire,E06000056,female,1591,1696,1761,1715,1867,1792,1792,1779,1841,1817,1851,1801,1721,1705,1686,1603,1578,1546,1289,1047,1026,1180,1428,1510,1539,1646,1747,1771,1976,2024,2113,2167,2218,2239,2227,2172,2125,2134,2118,2157,2141,2064,1985,1828,1898,1832,2015,1872,2063,2072,2178,2047,2150,2093,2186,2230,2134,2108,2049,2054,1906,1818,1787,1654,1570,1538,1571,1546,1427,1429,1436,1500,1488,1651,1585,1200,1278,1184,1095,844,768,860,784,702,671,657,565,442,405,359,1406\nCambridge,E07000008,female,578,612,627,599,644,639,677,607,661,650,679,677,667,616,615,590,690,646,1519,2579,2094,2045,2216,1837,1593,1627,1622,1767,1365,1427,1428,1407,1405,1349,1148,1138,1108,943,999,1007,1054,918,855,803,832,844,720,799,841,820,905,719,752,750,892,763,699,702,643,615,521,542,524,511,512,508,486,481,451,446,457,413,407,423,481,342,400,331,286,293,290,270,267,261,246,193,179,168,174,123,686\nEast Cambridgeshire,E07000009,female,432,459,425,479,462,488,520,506,562,542,530,559,532,533,491,500,457,470,385,282,316,277,360,409,433,460,444,494,481,500,511,525,594,582,549,581,606,599,611,670,640,673,603,539,594,585,640,611,655,658,666,670,645,660,665,629,648,609,597,595,590,580,510,542,508,487,488,501,518,475,469,489,519,549,569,376,467,387,362,288,274,290,273,269,244,223,195,181,146,137,608\nFenland,E07000010,female,485,511,478,502,551,551,540,566,580,543,599,555,570,523,521,514,483,550,483,403,412,458,540,546,539,567,577,637,636,700,661,673,665,653,648,647,640,628,613,644,605,610,540,562,545,567,597,628,676,717,766,747,726,757,824,742,798,765,795,738,758,670,654,650,648,624,670,654,630,614,605,640,662,710,674,546,528,479,463,401,374,351,384,336,305,273,265,234,201,194,770\nHuntingdonshire,E07000011,female,858,955,938,979,978,1052,1003,981,1081,1036,1015,1003,1081,981,962,902,929,927,791,649,666,705,802,906,963,929,1031,1088,1119,1210,1197,1245,1244,1297,1188,1215,1250,1287,1207,1167,1250,1230,1151,1096,1064,1135,1223,1191,1286,1331,1361,1320,1338,1306,1310,1410,1338,1277,1310,1253,1207,1148,1127,1097,1027,1006,1030,1004,973,984,1019,997,1056,1122,1138,830,898,779,769,627,604,611,572,502,438,380,333,300,279,265,1031\nSouth Cambridgeshire,E07000012,female,814,772,901,875,949,1052,925,1007,1122,1046,1014,1039,1041,1025,986,977,928,903,770,604,507,528,569,702,712,800,852,789,855,965,966,1001,1075,1053,1105,1120,1136,1128,1139,1208,1217,1260,1207,1181,1206,1157,1175,1236,1206,1263,1249,1254,1160,1224,1219,1128,1232,1173,1100,1010,1029,938,938,894,868,850,839,848,842,828,812,785,862,958,1039,734,731,676,664,530,482,574,510,455,434,374,305,294,298,247,1100\nBasildon,E07000066,female,1092,1228,1197,1212,1198,1197,1183,1269,1295,1204,1193,1211,1144,1149,1137,1059,1068,1035,924,827,752,848,989,1128,1137,1189,1196,1311,1349,1380,1438,1450,1524,1524,1406,1424,1404,1362,1333,1329,1294,1380,1188,1103,1218,1176,1183,1154,1249,1255,1391,1249,1346,1358,1289,1304,1272,1308,1202,1215,1187,1042,1057,1025,967,882,938,891,877,892,808,884,949,996,1071,743,753,677,662,547,522,535,512,517,440,437,371,342,314,267,976\nBraintree,E07000067,female,712,785,889,868,842,881,817,803,896,914,915,963,875,926,894,942,881,903,676,578,606,626,720,796,885,888,888,939,940,1013,1012,1020,1013,1063,1026,1021,1008,1014,954,975,1064,996,940,950,915,982,1091,1042,1117,1098,1185,1116,1213,1247,1247,1216,1161,1152,1150,1005,991,943,954,983,905,832,909,882,861,814,832,897,900,1035,1103,700,791,686,639,505,492,511,464,428,367,364,308,263,253,261,1022\nBrentwood,E07000068,female,388,422,425,369,456,449,403,454,428,434,419,419,448,436,456,435,423,462,347,254,273,294,374,433,444,411,446,474,511,537,546,492,518,509,547,520,543,526,516,574,546,501,510,476,540,483,508,521,523,539,540,559,535,603,616,580,605,571,585,553,496,448,461,463,426,423,407,378,381,346,374,376,366,480,493,350,404,305,314,234,233,279,285,257,259,233,209,193,161,168,680\nCastle Point,E07000069,female,400,417,392,435,435,463,443,490,484,464,532,500,535,483,482,471,496,469,438,357,361,395,467,495,447,428,470,507,484,521,525,513,560,476,524,515,527,533,483,533,571,533,489,469,465,537,547,537,577,572,648,658,663,668,641,682,653,678,643,597,591,565,588,568,574,524,565,586,539,597,611,631,676,782,786,562,581,535,482,467,415,396,384,384,303,292,230,227,191,173,639\nChelmsford,E07000070,female,875,878,978,1050,1077,974,1012,1042,1047,1086,1082,1094,1059,1081,1046,1025,1037,984,913,779,775,855,882,980,1013,1077,1118,1190,1251,1245,1309,1272,1272,1343,1249,1267,1246,1222,1251,1342,1308,1322,1246,1166,1188,1187,1202,1230,1315,1265,1336,1293,1252,1389,1255,1303,1183,1217,1181,1200,1133,997,1001,1041,959,978,914,861,889,867,908,949,991,1122,1195,824,821,753,695,611,555,576,563,533,502,462,405,349,295,290,1134\nColchester,E07000071,female,986,1017,1072,1082,1112,1124,1145,1158,1171,1176,1139,1180,1138,1102,1113,1037,1016,1016,1110,1393,1598,1457,1361,1273,1115,1179,1218,1328,1304,1372,1393,1338,1501,1445,1333,1399,1323,1287,1349,1353,1355,1361,1296,1216,1190,1191,1211,1247,1286,1257,1359,1265,1388,1275,1344,1332,1281,1265,1194,1053,1114,1035,1040,974,980,883,922,957,915,815,921,1000,1038,1075,1140,745,894,756,716,597,572,574,512,454,442,401,359,325,299,256,1159\nEpping Forest,E07000072,female,747,776,734,778,782,800,749,742,744,792,751,776,789,746,742,738,725,770,611,511,560,608,654,748,714,700,754,772,818,827,899,954,953,944,917,967,957,916,980,943,998,961,906,912,899,853,915,884,952,963,1062,1020,1056,1023,1047,1063,1132,1003,972,944,953,806,813,752,757,716,717,730,704,677,675,642,711,781,833,586,647,522,573,443,403,421,434,411,357,324,269,278,229,276,996\nHarlow,E07000073,female,571,617,594,622,654,586,654,672,633,647,640,667,600,632,537,511,527,501,448,429,385,434,485,511,601,592,636,701,671,837,800,845,800,853,840,733,807,790,765,767,702,711,689,611,574,586,594,523,569,595,623,616,620,592,647,572,615,591,554,578,553,522,493,510,470,444,427,426,400,356,381,335,336,410,360,285,326,277,297,209,221,210,238,213,182,186,186,157,134,141,474\nMaldon,E07000074,female,279,296,316,320,298,329,305,335,369,316,349,360,376,332,354,315,359,337,342,246,216,287,338,345,313,335,329,320,363,343,366,340,358,360,343,328,343,362,325,370,379,392,382,316,340,400,420,454,453,489,521,532,554,575,591,579,521,515,524,487,490,494,473,505,443,447,421,448,380,419,404,468,468,532,556,392,427,362,319,279,246,269,256,244,199,203,147,136,127,135,484\nRochford,E07000075,female,421,443,429,420,437,402,480,473,442,446,512,512,490,473,491,462,496,469,384,346,336,403,409,445,406,450,439,430,451,496,479,466,456,515,531,483,495,516,521,497,548,553,532,459,540,542,498,578,611,637,656,671,693,654,728,614,667,629,654,673,574,580,560,519,535,507,494,502,496,490,506,547,566,648,696,509,488,466,427,369,311,337,329,310,281,279,249,194,191,171,641\nTendring,E07000076,female,575,663,643,667,710,723,658,730,794,769,784,727,799,784,749,697,697,708,673,507,585,624,678,736,681,673,701,771,750,842,775,797,764,770,793,740,782,697,666,707,834,727,696,745,680,762,817,833,917,920,960,967,1070,1116,1057,1118,1159,1216,1160,1150,1135,1079,1091,1171,1057,1053,1070,1122,1090,1077,1147,1193,1205,1430,1433,1052,1070,1043,923,805,715,722,704,636,584,538,507,444,388,328,1511\nUttlesford,E07000077,female,400,476,484,509,553,562,598,522,586,558,568,610,540,554,584,572,558,584,433,297,300,380,352,453,399,424,390,437,452,521,520,539,563,602,557,602,584,557,607,660,634,631,626,608,576,584,640,657,671,708,718,717,748,681,757,721,728,740,683,649,624,622,568,594,528,512,475,494,480,480,491,464,528,544,545,410,418,410,351,307,280,307,276,233,208,227,200,181,170,157,688\nBroxbourne,E07000095,female,569,543,596,621,627,605,616,616,624,614,629,635,580,611,600,572,574,553,475,398,400,445,519,543,590,563,617,632,648,641,735,728,721,727,795,782,789,772,722,740,793,754,663,595,637,650,659,606,684,769,740,701,751,734,769,752,694,666,734,615,627,546,582,531,500,497,436,453,466,443,424,440,457,530,581,375,418,379,377,309,305,329,326,264,238,252,242,171,175,151,571\nDacorum,E07000096,female,893,930,928,923,1005,987,959,1013,939,986,1001,1001,991,952,891,889,861,895,700,515,534,606,712,792,816,828,872,936,983,1031,1052,1089,1081,1205,1164,1126,1104,1117,1171,1161,1226,1207,1163,1065,1005,1065,1029,1007,1123,1171,1114,1070,1105,1143,1093,1154,1061,1048,1090,1058,983,908,950,894,862,825,725,749,726,651,700,720,761,777,803,579,593,570,518,442,418,444,427,416,384,332,309,304,272,262,1018\nHertsmere,E07000098,female,593,624,610,624,624,707,631,699,649,701,682,720,667,697,688,695,675,692,544,384,390,462,582,681,653,648,659,613,636,630,702,693,691,725,756,768,831,776,822,860,892,870,792,788,740,775,789,772,757,779,801,789,812,817,790,813,836,775,721,701,715,624,626,542,527,554,559,500,446,478,511,526,534,548,587,442,474,399,400,325,301,327,313,331,257,275,239,218,202,185,773\nNorth Hertfordshire,E07000099,female,697,725,752,773,717,767,747,826,798,849,851,822,811,801,748,763,755,706,595,450,426,516,607,692,707,681,734,746,818,851,873,887,912,927,952,916,899,985,925,967,1082,1038,987,904,915,910,1003,965,961,1094,983,910,994,920,1002,1081,991,944,916,862,834,802,775,717,749,686,703,652,692,649,669,689,710,758,768,523,603,572,506,466,409,430,448,393,402,350,335,293,256,243,956\nThree Rivers,E07000102,female,477,494,525,488,547,556,567,547,631,626,681,635,632,607,623,594,626,625,450,345,318,317,461,480,482,457,455,478,532,549,555,547,573,600,601,626,636,726,672,725,778,767,726,679,635,687,727,695,675,741,687,684,737,701,730,697,720,674,660,645,613,553,579,520,515,511,471,445,439,427,425,449,449,519,506,371,408,341,343,281,283,272,262,258,244,225,205,175,193,161,576\nWatford,E07000103,female,633,626,633,614,648,652,714,631,673,725,683,669,683,617,613,591,599,586,470,373,381,397,541,638,686,729,725,804,880,908,909,849,891,973,946,954,943,902,944,897,924,903,848,786,815,734,715,693,719,744,736,687,672,709,615,658,577,556,543,540,511,493,483,424,393,392,419,373,344,328,361,341,329,371,338,273,283,271,268,226,191,199,230,178,203,168,148,127,134,101,493\nBreckland,E07000143,female,578,661,700,639,703,702,702,754,787,789,764,732,749,738,715,718,676,651,598,553,563,539,656,679,738,785,776,767,732,919,839,807,848,821,860,781,783,760,810,799,803,802,826,693,739,776,799,890,900,1001,983,1017,1025,1018,1055,1115,1051,1078,1080,1021,990,942,912,948,957,898,861,907,927,931,925,932,1023,1069,1133,793,846,741,682,609,550,558,520,517,488,436,374,372,266,273,1132\nBroadland,E07000144,female,470,545,624,576,635,691,621,667,699,690,694,652,710,683,684,635,651,702,577,518,459,462,569,576,599,629,657,665,663,689,692,719,760,743,739,767,736,764,772,814,818,811,818,740,724,767,845,910,917,955,974,989,1050,1012,1002,1061,1050,994,1005,960,967,885,936,851,893,878,856,873,848,835,884,887,939,1040,1073,779,862,710,711,511,586,573,554,506,469,447,401,344,313,285,1159\nGreat Yarmouth,E07000145,female,449,468,456,482,528,525,525,509,547,487,546,580,551,546,539,512,507,538,493,436,408,468,531,520,562,551,544,564,633,633,630,608,609,618,611,581,567,538,603,582,564,556,526,493,544,564,572,613,660,672,712,706,757,744,760,749,807,824,745,708,689,656,710,661,682,617,612,607,657,581,649,611,657,668,790,569,591,549,493,430,381,335,364,309,305,262,235,216,199,190,710\nKing's Lynn and West Norfolk,E07000146,female,667,718,686,706,741,821,815,808,838,803,867,874,827,792,764,721,657,749,683,585,596,631,713,753,768,839,838,848,848,911,924,980,954,986,901,903,945,850,855,841,885,799,750,812,806,835,860,987,967,1088,1089,1062,1139,1116,1024,1124,1205,1183,1170,1146,1162,1049,1109,1083,1048,1098,999,1007,1040,1008,996,1078,1121,1206,1232,922,936,884,842,734,686,660,628,586,507,528,444,389,340,316,1279\nNorth Norfolk,E07000147,female,298,295,352,412,378,396,417,426,406,477,487,470,451,452,457,437,449,452,371,344,303,334,381,424,425,421,420,435,434,449,469,437,468,458,462,480,456,487,441,455,472,466,444,438,494,489,493,547,655,676,673,685,693,761,810,801,839,922,841,857,898,907,929,876,850,842,849,890,892,871,852,915,918,1034,1108,823,764,737,703,575,550,539,513,540,456,447,381,314,362,262,1162\nNorwich,E07000148,female,639,597,701,673,721,729,728,687,780,788,730,755,722,723,678,660,602,592,1186,2175,2315,2046,1626,1412,1371,1210,1195,1232,1264,1197,1182,1157,1142,1206,1084,1079,992,1109,932,964,937,909,899,798,775,777,810,839,783,747,821,779,833,757,843,755,814,747,729,770,678,662,659,628,661,636,630,577,653,564,576,545,558,650,638,481,492,463,427,339,361,336,322,313,264,267,239,239,221,194,876\nSouth Norfolk,E07000149,female,618,639,665,696,750,754,779,789,857,852,782,789,803,774,781,729,730,778,583,469,470,509,629,625,659,746,734,777,750,789,847,849,866,830,927,928,827,878,821,918,931,862,837,794,827,868,906,934,978,1124,1020,994,1011,1091,1034,1086,1158,1033,1031,1067,995,988,935,944,912,870,895,840,931,836,835,894,970,1082,1112,759,880,779,681,593,539,515,541,479,452,428,385,333,308,288,1129\nBabergh,E07000200,female,365,401,362,396,418,513,423,469,463,485,490,481,502,538,482,541,538,535,421,340,307,363,394,426,445,422,415,444,423,445,502,496,465,521,489,454,510,503,475,505,550,567,521,500,520,511,548,604,636,662,693,700,735,733,783,760,748,774,677,711,729,605,616,652,637,690,608,590,645,600,628,686,681,815,772,580,597,575,484,459,407,364,370,327,338,280,278,205,198,195,817\nIpswich,E07000202,female,761,825,809,837,889,899,870,886,927,892,862,925,846,846,796,790,813,798,696,668,687,734,774,822,939,929,1013,1037,1044,1117,1174,1091,1117,1102,1081,999,1009,1006,961,1029,1035,999,874,846,869,829,868,926,874,921,969,907,897,886,848,873,948,888,862,793,759,750,761,761,690,618,680,655,630,613,650,592,565,607,689,472,505,437,416,374,360,353,386,358,328,303,262,252,220,207,854\nMid Suffolk,E07000203,female,420,411,450,443,464,448,485,507,513,546,549,532,555,570,552,522,567,541,447,368,332,410,476,511,508,535,543,523,512,538,608,598,601,588,544,589,548,544,563,551,582,602,553,533,538,555,617,682,697,729,730,752,808,793,853,889,852,860,788,732,770,720,762,749,700,667,700,704,656,718,679,737,735,795,786,585,628,536,489,453,424,396,370,360,304,265,294,238,219,183,781\nSt Albans,E07000240,female,723,850,841,863,925,1030,943,995,1043,1113,1036,1104,1127,1095,1021,977,929,973,681,408,360,508,622,715,713,689,756,759,760,774,832,867,912,952,976,987,1030,1049,1067,1127,1226,1265,1225,1175,1158,1218,1194,1203,1235,1157,1194,1135,1102,1103,1131,1088,1073,1021,972,930,891,812,788,775,715,712,644,654,649,639,669,707,668,734,798,572,584,539,521,389,416,417,430,390,399,340,302,287,257,218,1012\nWelwyn Hatfield,E07000241,female,574,639,644,665,658,719,685,697,746,710,741,695,743,700,641,656,613,689,855,1268,1218,1125,1090,914,790,772,779,717,807,790,785,873,857,876,878,866,889,857,876,868,920,824,775,751,739,767,738,697,812,809,785,740,724,784,768,833,826,738,775,732,680,672,633,581,563,548,531,494,437,494,449,457,466,506,563,395,437,404,371,330,314,346,314,299,292,266,247,220,191,174,758\nEast Hertfordshire,E07000242,female,744,760,813,798,867,837,824,847,863,955,1008,962,918,1001,950,950,909,914,708,479,501,601,751,747,827,854,841,882,979,968,990,993,1016,1015,1013,968,1021,985,994,1081,1089,1092,1055,1002,1013,1066,1087,1064,1199,1161,1174,1145,1203,1187,1158,1161,1151,1090,1065,1086,1007,894,891,852,780,762,729,754,725,656,729,752,769,857,852,586,655,570,550,448,423,449,421,421,353,359,335,300,288,230,887\nStevenage,E07000243,female,527,490,577,518,565,573,564,570,601,625,560,585,538,505,497,512,457,487,409,350,383,395,495,481,544,547,567,625,707,732,787,764,786,735,776,727,718,731,668,656,671,634,589,546,547,558,531,550,561,609,653,597,635,646,625,646,625,637,628,574,543,523,517,444,453,401,408,353,346,343,339,361,333,412,396,309,305,269,272,235,218,232,199,251,207,193,190,141,143,126,480\nEast Suffolk,E07000244,female,934,1027,1061,1113,1115,1190,1184,1184,1269,1288,1293,1335,1364,1336,1340,1297,1284,1324,1123,896,878,946,1103,1154,1089,1171,1177,1170,1259,1199,1282,1229,1327,1310,1290,1223,1267,1215,1292,1283,1349,1355,1256,1269,1181,1294,1467,1533,1612,1716,1817,1684,1880,1836,1863,1981,1958,1929,1857,1861,1903,1809,1780,1818,1737,1733,1649,1729,1711,1785,1738,1839,1845,2111,2185,1603,1604,1496,1387,1254,1027,1086,1029,983,940,831,741,699,613,572,2475\nWest Suffolk,E07000245,female,832,879,1030,955,1000,948,994,1031,1006,1055,948,948,1034,964,903,882,880,917,795,720,723,825,1005,1035,1036,1125,1161,1253,1228,1259,1264,1338,1248,1308,1202,1183,1237,1126,1093,1120,1136,1088,1068,990,998,1003,1055,1146,1140,1161,1209,1142,1254,1321,1248,1256,1174,1350,1119,1159,1071,1062,1070,955,957,948,940,998,932,929,913,985,1048,1212,1210,883,897,894,802,683,630,598,596,571,499,494,384,346,309,265,1245\nCity of London,E09000001,female,16,30,19,26,23,13,16,20,12,16,21,23,19,8,12,11,20,23,29,27,54,68,92,158,117,109,112,122,104,117,105,92,104,86,74,73,69,55,58,48,45,47,46,42,40,49,37,32,40,37,54,38,52,61,34,49,43,48,41,44,39,33,37,37,30,45,45,33,30,38,26,35,32,44,26,25,21,23,17,16,27,23,12,12,9,12,8,12,5,10,20\nBarking and Dagenham,E09000002,female,1534,1758,1633,1708,1772,1775,1762,1747,1756,1886,1830,1722,1778,1757,1765,1666,1588,1450,1380,1192,1231,1177,1344,1471,1443,1470,1569,1571,1703,1748,1787,1912,2128,2009,1989,2039,2062,1902,2000,1888,1942,1873,1899,1662,1598,1645,1581,1473,1416,1504,1469,1461,1400,1417,1222,1318,1260,1098,1125,993,990,893,884,723,808,715,659,601,600,529,521,514,500,562,485,408,384,362,407,326,313,337,340,301,270,236,206,179,172,156,655\nBarnet,E09000003,female,2146,2347,2358,2388,2421,2420,2371,2331,2621,2475,2561,2525,2513,2543,2382,2337,2394,2195,1895,1561,1767,2121,2338,2643,2762,2877,2752,2930,3023,3104,3002,3003,3164,3294,3210,3156,3274,3155,3279,3260,3325,3200,3166,3070,2891,2804,2861,2771,2854,2791,2714,2704,2674,2627,2488,2531,2511,2411,2263,2255,2093,2009,2064,1899,1826,1702,1671,1565,1535,1549,1523,1545,1572,1526,1591,1319,1215,1247,1071,927,867,886,911,765,742,716,682,571,596,487,2325\nBexley,E09000004,female,1424,1407,1527,1533,1550,1510,1558,1502,1617,1691,1596,1628,1605,1638,1588,1473,1417,1463,1346,1170,1231,1303,1393,1407,1438,1433,1480,1547,1593,1738,1824,1768,1918,1803,1867,1868,1994,1817,1954,1933,1935,1915,1713,1666,1687,1617,1616,1666,1679,1708,1773,1762,1814,1702,1827,1843,1771,1751,1606,1612,1556,1390,1359,1328,1311,1156,1129,1086,1068,1051,1073,1072,1104,1211,1175,933,965,848,903,739,720,755,748,664,612,563,521,481,403,358,1472\nBrent,E09000005,female,2007,2101,1857,2005,1850,1954,1808,1910,1983,2013,2052,2048,2115,1997,1974,1939,2069,2038,2050,1963,1975,2253,2477,2778,2906,2871,2846,3065,3053,3040,3029,3124,3018,2975,3001,2951,2864,2818,2668,2714,2769,2846,2506,2436,2353,2371,2516,2250,2287,2209,2300,2410,2573,2244,2225,2101,2206,2062,1975,2087,1843,1862,1916,1528,1462,1378,1320,1177,1279,1114,1153,1129,1007,960,918,809,830,725,845,682,621,707,610,597,600,493,450,362,349,291,1221\nBromley,E09000006,female,1765,1964,1809,1971,1985,2046,1972,1955,2004,2093,2152,2016,1982,1986,1943,1855,1936,1842,1609,1136,1092,1268,1495,1595,1836,1716,1772,1959,2031,2194,2229,2406,2434,2655,2537,2594,2526,2668,2651,2769,2730,2778,2789,2517,2431,2419,2406,2450,2490,2409,2547,2450,2499,2516,2436,2408,2407,2409,2226,2145,2124,1983,1823,1740,1682,1595,1516,1478,1514,1502,1535,1555,1659,1766,1803,1341,1357,1209,1197,1049,940,996,967,937,847,794,729,665,678,563,2278\nCamden,E09000007,female,1003,1032,996,965,944,988,899,976,995,1043,1016,1048,1095,993,1000,918,1115,1089,1782,2354,2311,2131,2150,2338,2317,2374,2420,2358,2317,2280,2213,2295,2219,2051,1984,1807,1819,1739,1670,1592,1568,1530,1568,1452,1431,1439,1447,1344,1367,1336,1438,1364,1368,1373,1340,1368,1279,1153,1137,1087,1010,973,927,911,848,791,794,735,790,709,717,733,718,693,724,622,590,525,534,434,417,409,417,365,308,285,257,227,206,160,794\nCroydon,E09000008,female,2638,2463,2445,2478,2477,2422,2455,2399,2461,2602,2421,2604,2461,2564,2395,2209,2455,2347,1909,1690,1636,1956,2195,2437,2541,2720,2781,2760,2966,3302,3334,3290,3492,3439,3480,3432,3191,3281,3329,3376,3240,3124,3025,2762,2856,2897,2754,2500,2621,2814,2894,2815,2843,2837,2956,2843,2769,2791,2706,2396,2314,2247,2127,1938,1893,1782,1679,1593,1519,1476,1499,1412,1343,1496,1495,1175,1188,1162,1047,859,871,869,861,827,719,680,561,533,471,435,1739\nEaling,E09000009,female,2034,2038,2167,2131,2180,2042,2143,2067,2310,2308,2271,2248,2390,2345,2221,2116,2141,2110,2201,2049,1813,1944,2341,2604,2630,2763,2951,3023,3008,3015,3200,3159,3104,3264,3130,3300,3174,3259,3119,3095,3276,3077,3033,2733,2804,2705,2706,2689,2617,2448,2450,2620,2532,2468,2316,2454,2257,2110,2167,2049,1882,1895,1788,1718,1683,1516,1482,1381,1400,1311,1199,1227,1239,1209,1187,918,979,887,842,791,740,734,651,652,601,568,417,412,343,346,1291\nEnfield,E09000010,female,1796,2141,2142,2164,2206,2285,2122,2159,2305,2318,2433,2276,2397,2416,2224,2312,2245,2326,1953,1479,1536,1635,2054,2197,2183,2168,2148,2249,2228,2298,2382,2582,2565,2686,2556,2761,2645,2478,2623,2730,2808,2678,2790,2536,2542,2356,2458,2282,2492,2385,2536,2466,2390,2275,2205,2407,2395,2213,2117,1878,2024,1840,1700,1691,1503,1485,1388,1386,1300,1258,1216,1181,1185,1230,1173,1035,945,893,851,797,793,836,745,754,617,587,554,497,408,374,1619\nGreenwich,E09000011,female,1903,1879,1939,1862,1896,1873,1762,1878,1882,1807,1837,1857,1770,1693,1724,1647,1612,1611,1460,1525,1603,1628,1880,2039,2229,2386,2327,2516,2771,2829,2899,3001,2986,3048,2798,2816,2595,2768,2664,2544,2741,2527,2313,2178,2115,2079,2081,2075,1911,1979,2065,1941,1960,1784,1823,1672,1760,1731,1476,1518,1482,1418,1238,1180,1041,1093,1051,966,913,879,848,820,791,922,846,719,692,638,557,520,482,491,452,410,341,349,324,277,233,223,903\nHackney,E09000012,female,1748,1561,1617,1526,1578,1494,1463,1417,1461,1494,1551,1510,1569,1544,1511,1479,1389,1439,1385,1283,1542,1561,1855,2327,2734,3115,3369,3468,3615,3572,3706,3620,3346,3130,2957,2779,2569,2313,2446,2147,2094,2069,1873,1857,1827,1679,1621,1578,1636,1499,1509,1507,1537,1630,1452,1573,1573,1305,1325,1297,1211,1187,985,927,981,868,795,756,685,574,640,624,605,574,559,442,391,390,370,343,277,298,301,250,257,228,220,140,155,108,531\nHammersmith and Fulham,E09000013,female,951,971,860,865,888,877,824,865,871,933,864,953,913,879,880,799,880,853,797,869,1148,1427,1678,2326,2413,2594,2731,2522,2478,2388,2252,2155,2033,1949,1777,1639,1650,1565,1470,1415,1482,1458,1386,1350,1315,1256,1256,1325,1358,1265,1338,1315,1247,1258,1247,1180,1178,1080,1005,985,873,795,812,777,717,700,650,637,567,566,544,541,528,567,518,457,413,412,411,349,348,351,315,254,248,208,203,163,155,107,541\nHaringey,E09000014,female,1514,1433,1482,1455,1429,1547,1334,1414,1437,1504,1504,1521,1606,1548,1491,1464,1587,1490,1369,1409,1248,1429,1612,2023,2114,2348,2553,2599,2710,2523,2767,2584,2713,2747,2562,2536,2604,2398,2350,2339,2266,2255,2257,2067,2019,2024,2051,1922,1941,1923,2103,1890,1936,1950,1823,1874,1811,1677,1620,1438,1426,1378,1210,1164,1115,1046,963,896,915,873,890,850,788,705,714,610,616,578,490,472,447,444,429,401,376,342,309,242,222,202,741\nHarrow,E09000015,female,1470,1561,1542,1503,1550,1613,1612,1605,1608,1616,1605,1582,1555,1602,1533,1516,1534,1554,1260,1026,1062,1224,1527,1743,1842,1864,1836,1852,1818,1881,1890,2078,2092,2149,2134,2258,2227,2139,2138,2167,2123,2090,2097,1881,1838,1758,1751,1611,1565,1725,1698,1729,1682,1695,1597,1623,1519,1631,1518,1639,1562,1421,1502,1335,1318,1332,1291,1192,1101,1083,1071,1130,1037,1055,1051,880,939,850,739,641,677,702,678,624,547,529,513,426,363,302,1371\nHavering,E09000016,female,1489,1520,1669,1610,1699,1723,1618,1699,1604,1629,1551,1521,1593,1561,1543,1507,1570,1510,1360,1100,1122,1309,1478,1492,1608,1652,1668,1724,1881,1936,1932,2004,2139,2169,2096,2138,2051,2017,1925,1928,2010,1889,1771,1613,1704,1640,1686,1626,1622,1694,1810,1782,1804,1742,1894,1862,1786,1825,1685,1568,1705,1513,1457,1506,1365,1267,1234,1264,1171,1230,1205,1224,1241,1393,1407,1092,1024,1044,956,778,761,826,746,730,703,664,608,524,490,437,1745\nHillingdon,E09000017,female,1921,1955,1910,1947,2006,1978,1976,1943,2001,2014,1998,2030,1976,1998,1884,1748,1798,1759,1615,1726,1649,1897,2000,1906,1939,1981,2110,2022,2142,2383,2402,2420,2497,2588,2618,2604,2643,2672,2579,2499,2576,2637,2402,2253,2071,2098,2060,2005,1944,1961,2014,2087,1908,2110,1894,1912,1871,1796,1821,1729,1623,1510,1539,1400,1318,1315,1260,1172,1100,1059,1023,1059,1098,1175,1175,847,885,836,803,684,724,690,645,664,614,601,530,455,413,350,1412\nHounslow,E09000018,female,1661,1815,1713,1788,1846,1860,1827,1785,1908,1983,1848,1784,1863,1730,1727,1730,1668,1668,1446,1230,1332,1357,1519,1835,1948,2082,1976,2119,2199,2322,2399,2548,2724,2799,2571,2687,2706,2611,2720,2590,2673,2587,2314,2359,2088,2080,2110,2064,2030,1914,2115,1878,1914,1836,1712,1739,1680,1646,1596,1497,1396,1495,1392,1229,1220,1165,1119,1070,1123,1002,978,971,902,980,912,738,748,666,592,622,562,518,496,466,436,358,332,274,274,238,944\nIslington,E09000019,female,1209,1134,1046,1017,1041,1027,903,1004,1068,945,988,1045,980,947,930,938,843,873,1266,1625,1701,1813,2013,2268,2457,2844,3039,3171,3232,3221,3294,3150,2830,2603,2492,2276,2132,1942,1775,1586,1710,1598,1435,1446,1399,1347,1361,1279,1255,1189,1409,1322,1278,1269,1277,1337,1267,1238,1238,1064,1102,963,954,805,807,762,673,639,652,628,523,590,621,586,568,482,459,409,395,312,320,308,317,278,248,245,224,179,153,144,560\nKensington and Chelsea,E09000020,female,601,551,660,524,673,617,574,643,605,670,629,620,667,625,649,637,631,684,691,677,1045,1107,1284,1427,1484,1478,1421,1426,1385,1391,1318,1335,1346,1337,1239,1210,1179,1123,1137,1125,1042,1065,959,1018,1024,1135,1073,1009,1097,1120,1298,1073,1299,1198,1172,1163,1071,1142,1161,1083,933,821,892,695,821,694,709,678,592,549,609,556,639,598,568,489,547,402,438,346,348,367,326,259,261,204,194,166,129,143,705\nKingston upon Thames,E09000021,female,876,885,909,994,964,1040,1006,1005,1028,1131,1040,1051,1120,1079,983,1000,976,958,880,1019,1182,1287,1242,1258,1142,1054,1098,1141,1161,1249,1247,1276,1327,1336,1271,1343,1362,1354,1445,1350,1524,1477,1400,1324,1289,1343,1301,1293,1321,1242,1268,1161,1196,1128,1123,1071,1070,1020,1024,929,952,862,841,745,811,708,747,722,678,621,674,675,712,713,742,555,526,499,445,383,390,379,393,313,321,262,260,233,192,210,909\nLambeth,E09000022,female,1514,1549,1440,1478,1507,1388,1436,1425,1615,1460,1577,1559,1465,1520,1425,1488,1485,1565,1502,1500,1628,1841,2623,3738,4685,5043,5211,4717,4652,4350,4332,3926,3682,3469,3155,3046,2620,2628,2444,2510,2420,2427,2303,2135,2136,2132,2146,2006,1950,2032,2038,1997,2162,2164,2020,2106,1919,1835,1873,1728,1592,1422,1420,1262,1164,1182,991,893,874,818,773,754,698,708,669,600,524,549,514,445,468,458,426,394,353,331,261,214,223,195,817\nLewisham,E09000023,female,1874,1995,1871,1893,1771,1727,1813,1756,1836,1697,1719,1781,1858,1687,1724,1635,1560,1628,1509,1488,1536,1897,1898,2281,2421,2668,2827,2977,3270,3216,3299,3391,3383,3247,3307,3287,2967,2850,2753,2679,2786,2647,2477,2439,2195,2201,2230,2166,2107,2013,2326,2041,2054,1972,2055,2076,2156,1993,2020,1769,1679,1483,1373,1308,1196,1086,977,940,849,885,796,736,763,771,767,600,575,583,586,500,473,513,510,457,400,377,336,282,237,199,882\nMerton,E09000024,female,1337,1346,1342,1303,1274,1332,1164,1274,1333,1290,1292,1286,1286,1292,1172,1250,1190,1127,945,738,808,959,1158,1328,1508,1604,1787,1749,1942,1922,1923,2037,1971,2050,1994,1942,1969,1956,1881,2018,1994,1938,1855,1745,1747,1576,1569,1493,1655,1564,1451,1494,1476,1511,1451,1439,1307,1313,1268,1196,1190,1104,1069,964,996,937,875,835,818,745,810,785,738,765,671,617,569,536,459,466,463,461,411,392,394,331,296,253,267,195,996\nNewham,E09000025,female,2475,2428,2363,2420,2295,2294,2171,2304,2321,2352,2221,2524,2204,2388,2205,2152,2310,2146,2294,2203,2157,2416,2885,3091,3419,3585,3620,3549,3788,3659,3703,3707,3635,3676,3615,3501,3362,3364,3023,2924,2954,2916,2607,2361,2427,2358,2269,2222,2030,2106,2081,2254,1964,1894,1778,1819,1672,1769,1589,1477,1535,1364,1279,1188,1153,1086,953,850,958,836,697,741,662,732,657,479,456,481,477,429,424,377,369,353,319,251,234,186,180,143,573\nRedbridge,E09000026,female,1947,2130,2082,2122,2111,2189,2131,2063,2083,2182,2118,2113,2233,2027,2012,1851,1967,1990,1733,1613,1498,1714,1928,2071,2182,2203,2134,2250,2244,2392,2434,2557,2617,2562,2619,2713,2784,2711,2688,2624,2753,2674,2412,2289,2355,2282,2052,2106,2025,1990,2112,2027,1949,1871,1831,1773,1955,1718,1590,1560,1565,1482,1398,1414,1397,1226,1232,1160,1127,1081,1055,1020,950,1061,1047,779,816,760,731,597,556,622,571,573,489,450,440,414,357,311,1304\nRichmond upon Thames,E09000027,female,976,1070,1057,1110,1187,1209,1253,1280,1245,1295,1338,1312,1309,1234,1259,1149,1135,1087,920,693,626,720,897,973,947,989,954,1065,1074,1134,1205,1238,1262,1336,1442,1457,1478,1529,1638,1650,1750,1848,1753,1694,1659,1611,1689,1678,1743,1601,1732,1561,1573,1521,1534,1576,1464,1385,1337,1244,1142,1084,1069,989,1007,898,897,906,851,849,912,877,923,1020,965,757,712,727,651,492,495,537,481,427,346,391,314,258,267,240,1147\nSouthwark,E09000028,female,1574,1649,1603,1590,1568,1568,1527,1548,1632,1568,1663,1525,1587,1610,1564,1493,1524,1478,1712,2062,2130,2697,2665,3111,3377,3784,3849,4118,4055,4047,3849,3886,3716,3298,3001,2981,2757,2717,2521,2538,2360,2340,2197,2176,2251,2095,2086,1984,2067,1974,2116,1901,2007,1969,1933,1882,1864,1892,1841,1532,1637,1389,1300,1257,1118,1061,907,937,813,700,694,784,705,684,685,596,505,472,438,419,433,428,418,323,325,305,251,238,208,203,796\nSutton,E09000029,female,1121,1201,1276,1236,1411,1314,1329,1334,1386,1459,1419,1472,1419,1342,1296,1242,1235,1247,1014,717,793,846,983,1167,1189,1176,1260,1311,1317,1404,1556,1548,1589,1651,1675,1696,1776,1762,1904,1863,1876,1866,1830,1640,1593,1489,1599,1521,1521,1526,1565,1475,1493,1512,1512,1524,1521,1411,1309,1248,1230,1158,1049,1000,976,1002,929,899,865,827,842,815,858,913,1041,672,776,652,663,546,484,538,546,492,462,425,395,334,329,295,1179\nTower Hamlets,E09000030,female,1920,1951,1678,1831,1921,1614,1740,1734,1810,1726,1698,1750,1733,1698,1699,1626,1714,1669,1855,2431,2644,2815,3232,3834,4331,4479,4464,4437,4597,4647,4443,4251,4159,3890,3512,3407,3152,3007,2740,2678,2578,2310,2065,2056,1902,1730,1713,1656,1453,1365,1308,1250,1297,1208,1174,1096,1008,1080,1017,931,838,874,740,766,751,713,638,621,626,583,589,534,453,425,387,381,324,302,324,266,321,281,253,211,223,218,171,158,142,114,492\nWaltham Forest,E09000031,female,2010,1862,1777,1845,1814,1768,1661,1687,1669,1697,1654,1753,1647,1611,1523,1563,1476,1548,1409,1319,1213,1463,1556,1682,1789,1954,2146,2401,2524,2594,2989,2823,2910,3029,3079,2804,2908,2739,2794,2651,2556,2545,2230,2242,2067,1980,2034,1901,1926,1845,1871,1852,1878,1792,1848,1708,1680,1697,1567,1460,1398,1364,1310,1107,1055,974,1045,916,908,812,826,771,777,758,795,599,586,579,613,458,453,441,455,412,379,326,293,256,238,202,825\nWandsworth,E09000032,female,1948,1897,1856,1718,1690,1689,1753,1645,1660,1614,1623,1469,1505,1570,1458,1263,1379,1363,1281,1328,1423,1797,2364,3289,4383,5170,5428,5447,5037,4998,4702,4324,3944,3779,3599,3384,3179,3049,2957,2808,2803,2737,2554,2357,2292,2157,2171,2116,2129,2010,2141,1971,1974,1970,1749,1886,1776,1616,1619,1527,1352,1342,1198,1135,1191,1011,989,1051,976,925,948,890,868,912,909,678,747,604,695,527,512,519,503,429,416,403,367,280,250,255,1043\nWestminster,E09000033,female,967,836,779,768,817,783,760,685,783,859,853,829,803,820,874,857,881,985,1206,1292,1690,1712,1953,2414,2571,2409,2445,2465,2377,2350,2342,2237,2270,2069,1881,1827,1704,1583,1506,1567,1418,1467,1357,1371,1505,1434,1406,1442,1421,1440,1346,1421,1601,1664,1476,1379,1311,1190,1241,1109,1212,1019,951,934,817,812,746,751,718,747,731,662,720,632,651,635,512,514,484,459,395,393,389,374,362,315,253,219,201,176,735\nMedway,E06000035,female,1594,1639,1723,1690,1810,1870,1732,1704,1819,1843,1854,1756,1761,1746,1699,1662,1665,1635,1547,1420,1339,1491,1567,1693,1695,1712,1890,1884,1999,2050,2201,2144,2193,2092,2087,2072,1984,1967,1973,2012,1955,2053,1906,1794,1789,1735,1805,1737,1737,1872,1894,1899,1924,1939,1927,1946,1971,1898,1880,1812,1709,1688,1585,1493,1477,1376,1344,1338,1278,1280,1263,1271,1379,1466,1473,1047,1114,934,899,803,673,737,726,672,582,553,479,383,360,314,1264\nBracknell Forest,E06000036,female,644,712,721,695,680,728,714,736,782,826,740,793,832,831,795,788,786,774,622,421,430,521,623,701,774,775,767,861,828,936,901,972,997,931,996,985,969,961,977,947,1055,1005,963,903,813,860,849,942,883,898,973,881,912,902,928,874,860,862,814,817,764,748,722,676,611,592,611,526,556,502,504,467,536,575,556,485,446,388,347,293,271,291,287,273,226,243,204,162,161,126,555\nWest Berkshire,E06000037,female,719,770,815,859,884,876,961,919,935,1023,1051,985,1025,1092,1133,979,979,1061,841,551,496,669,740,757,842,815,888,851,862,911,929,993,1011,972,1071,972,1047,1090,1013,1071,1088,1073,1051,1051,1099,1092,1156,1187,1220,1290,1287,1191,1289,1225,1269,1196,1218,1185,1164,1125,1048,972,1000,1022,943,920,862,839,853,852,881,840,871,955,958,717,766,686,643,539,518,446,489,417,358,365,329,275,263,239,965\nReading,E06000038,female,970,972,976,1016,1057,1053,990,1040,1046,974,1031,999,1009,1043,972,925,863,850,1143,1623,1677,1685,1457,1333,1326,1337,1427,1475,1518,1622,1568,1627,1575,1589,1613,1579,1458,1493,1381,1339,1362,1363,1185,1149,1179,1118,1131,1046,1085,1102,1153,1047,1029,1061,1047,1030,978,931,937,850,772,712,729,698,650,647,639,594,555,544,523,588,561,601,571,428,505,480,372,337,371,341,335,324,276,251,250,215,191,177,734\nSlough,E06000039,female,1091,1114,1166,1188,1298,1221,1137,1231,1287,1276,1274,1370,1258,1273,1159,1127,1026,1004,886,751,775,780,896,976,1044,948,1113,1137,1144,1251,1271,1247,1359,1467,1499,1556,1597,1498,1593,1468,1599,1479,1293,1278,1188,1172,1144,992,993,1057,939,951,958,918,889,826,821,740,765,782,726,694,648,659,607,559,547,488,479,436,397,438,369,403,358,315,265,258,300,231,245,267,201,190,199,176,177,158,131,101,442\nWindsor and Maidenhead,E06000040,female,740,726,772,833,861,876,883,870,939,940,964,974,1015,1020,997,923,987,953,710,470,461,500,665,836,811,796,802,814,777,812,958,929,937,1035,972,1068,1051,1117,1162,1119,1224,1199,1142,1093,1121,1143,1193,1164,1168,1187,1236,1197,1219,1171,1138,1142,1122,1072,1101,994,1000,963,918,818,774,759,768,777,716,746,703,718,762,849,823,606,673,659,570,498,444,505,457,438,409,355,361,301,286,231,1086\nWokingham,E06000041,female,824,873,936,1013,1074,1134,1112,1148,1253,1312,1261,1184,1215,1172,1171,1061,1125,1002,1000,784,631,775,843,927,898,899,936,947,976,1025,1024,1115,1114,1191,1234,1241,1257,1367,1350,1418,1450,1483,1367,1412,1378,1274,1325,1318,1338,1347,1268,1244,1215,1291,1250,1233,1263,1285,1132,1148,1082,981,1009,946,884,809,814,774,759,818,787,839,809,894,958,716,705,702,616,518,486,498,528,438,394,395,355,340,308,265,1011\nMilton Keynes,E06000042,female,1566,1679,1733,1821,1902,2002,1821,2017,1985,2058,2024,2012,2038,1984,1896,1714,1776,1745,1414,1109,1122,1252,1526,1643,1700,1747,1747,1914,2034,2228,2216,2237,2325,2306,2301,2448,2413,2301,2382,2374,2471,2382,2244,2126,2143,2035,2150,1950,2069,1947,2071,1970,1952,1828,1955,1811,1802,1802,1673,1615,1604,1483,1513,1415,1346,1331,1332,1305,1240,1201,1181,1238,1124,1179,1198,852,881,752,744,647,544,580,528,482,469,417,351,313,310,247,1173\nBrighton and Hove,E06000043,female,1059,1165,1143,1122,1178,1278,1271,1179,1318,1347,1344,1503,1327,1437,1408,1369,1359,1439,1967,3130,3654,3524,2940,2634,2259,2142,2053,2099,2076,2227,2202,2063,2025,2076,2010,1953,2012,1956,1930,1987,2084,2018,1943,1843,1956,1906,1855,2067,2082,2254,2082,2047,2308,1955,2017,2037,1868,1824,1688,1597,1531,1405,1303,1274,1196,1154,1185,1089,1008,1094,1024,1000,1096,1088,1054,852,885,784,769,646,625,622,568,576,557,474,456,417,413,324,1478\nPortsmouth,E06000044,female,1081,1106,1148,1083,1155,1167,1206,1157,1208,1224,1130,1180,1115,1111,1079,1043,1060,1038,1504,2315,2464,2293,1785,1542,1465,1454,1544,1590,1584,1647,1633,1610,1733,1683,1654,1626,1561,1484,1466,1392,1377,1284,1274,1192,1123,1168,1146,1178,1225,1255,1388,1308,1293,1383,1326,1412,1318,1259,1265,1166,1203,1051,1027,977,976,915,916,866,799,808,780,815,838,903,918,726,690,617,627,522,497,529,495,513,413,417,369,331,289,265,1089\nSouthampton,E06000045,female,1325,1377,1373,1354,1365,1368,1353,1377,1420,1424,1414,1383,1392,1311,1255,1208,1197,1213,1741,2697,2901,2841,2558,2267,2093,2057,2146,1999,2181,1998,2086,2094,2080,2020,1979,1960,1795,1802,1737,1740,1801,1729,1607,1501,1511,1481,1353,1416,1360,1401,1421,1336,1352,1380,1425,1354,1373,1369,1375,1279,1219,1165,1224,1151,1081,952,961,1008,915,892,936,911,884,997,955,775,791,674,727,605,517,526,508,521,420,423,360,301,350,311,1191\nIsle of Wight,E06000046,female,469,518,511,587,588,619,670,653,685,708,682,728,642,661,684,686,705,623,566,470,479,523,624,594,611,643,700,657,684,714,773,711,739,729,724,679,736,701,669,680,759,771,717,675,707,730,768,832,865,971,1025,983,1125,1089,1212,1122,1174,1123,1154,1181,1123,1145,1073,1073,1083,1098,1098,1104,1077,1119,1041,1091,1158,1290,1248,954,1033,928,890,725,581,662,598,562,516,477,427,375,351,320,1338\nBuckinghamshire,E06000060,female,2689,2808,3057,3148,3234,3429,3319,3321,3488,3726,3706,3580,3635,3625,3486,3328,3475,3329,2715,2081,1903,2213,2630,2755,2970,2983,2945,3013,3161,3219,3604,3468,3536,3718,3572,3674,3702,3827,3886,3929,4176,3980,3939,3822,3748,3734,3712,3815,4171,4165,4228,3942,4129,4274,4342,3997,4153,4094,3854,3723,3582,3385,3351,3148,3008,2915,2776,2654,2740,2629,2736,2694,2796,3042,3068,2267,2446,2353,2156,1745,1727,1812,1687,1548,1395,1347,1223,1073,913,885,3698\nEastbourne,E07000061,female,438,435,455,472,499,554,546,545,567,562,574,572,522,487,524,537,545,595,474,471,489,450,544,573,554,577,559,563,592,642,610,606,597,648,675,667,588,642,623,646,665,644,628,600,548,618,629,614,629,738,674,688,695,733,778,730,773,762,742,736,668,674,653,650,623,653,634,641,596,605,629,654,643,752,811,613,629,507,502,416,428,416,452,416,407,353,323,289,266,250,1157\nHastings,E07000062,female,443,469,477,465,492,486,491,511,530,527,528,527,518,514,482,451,485,456,433,359,380,400,456,490,465,529,532,578,575,598,598,647,652,645,642,656,554,580,582,645,600,604,572,544,534,524,598,594,638,659,753,672,707,757,763,734,723,709,668,606,634,596,599,582,586,543,527,602,501,528,484,484,551,574,564,430,412,373,362,294,307,270,274,245,227,209,175,188,151,132,627\nLewes,E07000063,female,367,423,452,467,467,455,521,525,481,577,565,576,570,509,520,530,559,510,516,351,360,335,412,427,420,385,406,445,479,476,569,557,542,550,583,552,536,558,567,592,612,593,591,535,581,620,629,638,686,762,751,791,735,809,781,727,851,762,772,767,712,684,714,666,676,681,697,644,704,676,645,722,700,800,848,646,605,631,543,453,425,454,436,404,387,349,345,279,245,241,1093\nRother,E07000064,female,315,373,345,352,388,367,359,396,453,435,472,463,475,490,486,444,455,444,396,316,277,342,376,436,405,378,354,388,390,434,440,465,451,418,428,378,439,422,420,438,452,483,446,420,444,476,459,556,595,627,666,663,671,712,749,773,760,775,771,752,742,688,753,727,764,768,729,712,712,725,788,811,847,971,1022,653,760,699,661,567,488,530,520,412,445,375,379,296,311,290,1194\nWealden,E07000065,female,628,677,711,715,777,823,794,822,837,869,890,849,859,884,880,932,894,858,752,504,526,528,721,737,699,733,760,713,730,812,835,822,849,876,810,826,873,818,860,850,884,885,859,913,896,895,990,1024,1095,1188,1215,1154,1223,1303,1374,1293,1396,1373,1308,1291,1226,1220,1217,1156,1115,1077,1108,1115,1094,1071,1090,1140,1210,1368,1414,998,1056,1014,893,750,624,695,668,623,569,511,469,415,385,349,1482\nBasingstoke and Deane,E07000084,female,985,983,1041,1063,1104,1113,1053,1097,1162,1146,1146,1119,1063,1057,1031,999,961,979,793,662,663,806,920,1054,1106,1105,1176,1248,1242,1320,1345,1419,1397,1478,1396,1416,1268,1323,1380,1323,1333,1354,1291,1177,1216,1255,1295,1248,1354,1351,1375,1287,1367,1380,1295,1329,1353,1360,1260,1213,1117,1090,1069,979,976,837,876,898,906,851,844,884,926,1034,1028,784,749,702,645,547,490,515,516,450,391,380,331,248,248,229,911\nEast Hampshire,E07000085,female,510,558,586,626,654,647,620,667,723,705,709,727,739,763,759,714,755,753,595,482,374,465,531,634,669,562,630,605,657,682,656,650,719,713,706,726,650,707,714,743,812,812,782,722,826,808,811,924,833,962,1019,940,1042,1056,991,1047,1066,1063,1026,954,952,895,837,897,817,796,791,711,740,693,700,797,801,880,907,681,697,623,585,531,495,533,504,424,398,345,336,300,266,261,974\nEastleigh,E07000086,female,693,747,803,746,784,803,832,813,845,868,844,883,792,823,783,736,716,685,593,492,490,563,614,688,747,775,897,839,894,938,1053,955,1003,984,986,916,983,996,922,955,1020,946,922,870,874,890,855,882,914,923,929,998,948,955,961,977,1040,928,945,905,887,837,835,780,792,716,724,766,689,693,710,720,742,840,746,590,619,555,523,466,414,446,435,406,390,312,294,283,228,217,927\nFareham,E07000087,female,444,467,504,554,526,614,592,600,658,620,668,623,646,634,576,556,613,599,469,379,440,413,502,491,507,528,523,534,584,613,619,659,680,763,732,716,648,637,652,708,711,700,628,660,690,691,731,737,756,833,905,787,837,902,881,964,945,912,881,903,864,826,815,750,733,684,687,691,692,682,696,739,772,815,888,654,713,640,624,505,484,499,491,419,390,398,340,324,295,255,1014\nGosport,E07000088,female,405,365,398,404,457,473,412,472,444,427,457,479,462,506,440,427,428,426,378,352,358,393,409,412,429,474,493,486,504,502,542,539,548,487,579,525,541,526,509,531,510,526,484,453,432,442,495,527,550,565,608,601,604,589,625,586,625,640,588,637,569,557,614,533,508,466,464,497,458,482,413,496,519,549,549,415,442,368,357,304,252,266,260,247,255,217,205,185,185,150,574\nHart,E07000089,female,453,485,507,535,530,595,577,597,658,621,684,611,637,620,607,602,601,564,438,325,294,307,418,488,467,460,460,470,571,529,589,591,573,637,609,634,660,658,678,714,720,705,683,716,646,717,694,736,792,816,793,678,741,804,750,714,809,774,689,602,631,597,612,600,508,485,490,525,496,480,500,491,538,601,620,483,530,466,436,357,350,351,324,313,268,240,217,190,179,131,626\nHavant,E07000090,female,584,565,593,627,604,652,674,637,695,713,676,728,633,709,656,657,667,680,550,529,511,524,608,647,687,674,633,685,742,743,768,798,792,779,798,774,761,712,721,685,738,727,651,630,615,634,722,717,779,831,851,890,935,938,955,920,974,1018,946,968,948,910,906,855,831,777,820,753,726,719,720,809,863,848,947,778,755,641,606,504,530,520,528,482,457,357,381,344,282,267,1056\nNew Forest,E07000091,female,631,671,776,739,754,757,813,827,865,924,931,883,911,914,906,868,882,840,787,583,592,613,663,764,708,754,747,779,827,845,862,851,884,931,893,932,927,856,933,906,985,968,932,871,938,903,1014,1129,1115,1237,1270,1199,1364,1377,1419,1453,1480,1465,1512,1388,1352,1282,1377,1310,1233,1261,1232,1259,1301,1298,1346,1321,1323,1564,1607,1165,1222,1149,1084,867,826,901,787,835,790,690,637,573,505,465,2133\nRushmoor,E07000092,female,645,570,601,605,557,608,590,555,592,572,574,567,488,530,554,503,517,517,376,373,382,460,593,600,638,708,710,753,848,784,934,873,900,860,926,784,799,790,743,729,700,757,644,656,648,612,647,662,676,670,705,710,759,690,688,738,678,666,635,557,566,523,493,448,441,439,455,441,437,451,432,412,451,446,465,336,331,321,296,275,243,221,220,212,176,176,160,131,113,98,448\nTest Valley,E07000093,female,587,709,662,680,728,766,708,754,825,793,813,730,794,767,685,708,663,688,577,467,410,467,577,652,651,700,667,740,829,804,849,873,860,855,784,814,833,869,862,880,847,873,841,835,778,852,859,871,929,927,1031,963,973,959,1054,950,1048,1009,946,915,899,887,827,791,717,712,715,738,700,684,713,777,751,881,885,643,666,642,599,489,407,428,405,440,373,337,291,262,274,240,893\nWinchester,E07000094,female,501,564,596,606,663,691,677,728,715,783,720,764,750,741,709,726,745,735,969,1332,1260,972,816,704,632,595,601,664,565,630,666,657,690,745,748,765,699,763,756,758,808,847,835,838,815,786,833,854,850,964,934,899,906,903,969,939,985,930,914,850,829,771,738,774,770,677,626,644,676,697,725,671,702,780,772,618,634,596,546,453,439,448,452,410,346,325,322,275,291,228,1087\nAshford,E07000105,female,681,738,746,784,773,809,808,741,850,838,845,881,855,840,834,710,753,807,687,539,449,582,659,749,763,688,838,856,855,856,924,940,968,942,919,919,885,862,872,859,850,806,887,819,850,806,892,851,889,1006,1002,1046,992,1050,981,975,998,906,949,861,821,752,751,755,709,710,739,682,657,668,690,700,765,840,856,614,661,591,549,458,412,415,402,333,342,291,254,232,220,198,772\nCanterbury,E07000106,female,572,666,685,690,681,713,735,706,747,837,797,784,851,813,755,801,852,828,1486,2378,2417,2182,1520,1158,996,880,914,854,880,824,837,843,911,847,879,864,882,879,917,853,872,922,875,804,824,887,862,967,998,987,989,1087,1028,1011,1046,1077,1063,1044,1091,1013,973,989,974,912,903,938,918,894,867,874,899,936,966,1077,1101,843,866,744,701,643,541,575,539,508,449,427,371,338,315,275,1324\nDartford,E07000107,female,794,789,777,827,780,797,830,836,818,779,838,827,778,742,751,706,675,674,529,387,445,474,575,663,692,794,759,817,918,980,1005,1070,1077,1048,1077,1095,1003,984,980,1031,1034,885,859,824,762,750,790,779,751,787,719,793,777,818,770,739,793,655,657,658,616,582,566,543,485,460,450,456,422,429,408,426,435,508,495,315,383,349,309,253,269,282,266,260,223,207,178,173,161,149,514\nDover,E07000108,female,505,521,564,571,582,641,605,589,662,664,652,657,651,724,633,636,652,580,539,434,413,469,595,594,591,602,638,680,710,756,762,691,691,720,677,721,680,660,657,695,674,665,660,591,636,653,623,688,769,790,849,747,798,884,885,932,885,927,862,907,901,812,848,824,783,806,764,743,752,727,754,726,773,869,865,634,719,626,512,485,436,449,392,415,345,301,267,282,233,202,870\nGravesham,E07000109,female,615,648,601,672,697,697,684,756,687,683,692,751,693,727,686,721,625,611,506,474,429,495,567,645,615,616,647,692,692,736,818,808,780,769,838,797,819,805,780,789,778,748,721,652,636,670,685,660,710,727,789,759,781,713,769,744,683,691,722,721,638,577,593,545,527,508,513,509,485,491,454,453,481,575,625,424,405,385,375,341,308,322,307,294,281,237,225,203,191,131,551\nMaidstone,E07000110,female,920,940,1081,1046,1048,1030,1038,1002,1074,1049,1011,1042,1019,1052,943,951,901,964,803,651,644,738,864,1021,1059,1041,1088,1138,1144,1133,1208,1297,1299,1286,1190,1270,1262,1193,1199,1152,1271,1194,1088,1055,1081,1146,1119,1186,1264,1239,1257,1266,1285,1177,1232,1287,1251,1190,1187,1072,1093,985,1046,976,913,917,937,890,859,874,835,920,978,1044,1111,753,765,740,666,548,554,570,528,485,462,405,363,341,297,266,1058\nSevenoaks,E07000111,female,602,595,663,696,711,767,739,704,754,789,802,800,740,759,800,777,775,739,574,403,347,440,487,581,559,560,537,620,597,668,650,671,718,753,749,723,798,739,823,827,821,916,796,768,798,806,796,896,827,864,914,909,930,945,898,995,926,909,838,781,816,775,777,750,689,651,666,647,655,662,679,718,698,774,812,637,584,570,542,407,429,413,416,385,395,337,283,279,264,223,1005\nFolkestone and Hythe,E07000112,female,431,510,476,526,518,554,554,568,573,583,618,598,622,575,605,557,522,531,483,368,374,446,522,560,559,540,579,590,603,626,644,673,666,626,651,605,614,591,625,655,711,677,671,585,600,642,644,685,728,765,772,790,858,803,835,877,845,820,859,847,822,759,742,778,751,696,701,763,729,760,704,714,816,851,895,651,639,616,577,485,408,456,430,370,362,291,283,235,246,201,917\nSwale,E07000113,female,794,877,907,896,924,913,910,875,933,934,962,967,922,921,869,853,843,827,762,648,653,705,801,843,859,867,875,930,1035,949,1038,1118,1051,1030,1033,1037,982,999,960,1036,1001,1006,913,826,894,865,897,964,1001,1002,1068,1061,1075,1053,1096,1137,1094,1126,1012,1032,936,964,909,819,831,805,776,769,746,775,754,881,829,951,929,690,722,651,555,465,487,440,426,402,348,316,262,244,228,196,801\nThanet,E07000114,female,678,653,713,734,703,736,744,765,761,800,806,796,831,810,784,763,713,685,612,558,553,594,687,749,755,762,805,787,893,869,951,884,877,936,950,872,925,842,836,854,884,862,858,763,799,848,873,829,982,928,1049,980,1065,1041,1060,981,1036,1015,1071,991,976,950,914,921,907,891,889,946,894,900,897,914,941,1067,1076,780,824,737,702,612,510,546,522,484,451,400,344,313,288,263,1132\nTonbridge and Malling,E07000115,female,699,686,713,808,842,826,777,804,876,856,845,800,881,859,823,825,801,795,650,472,460,555,602,670,607,671,733,745,824,806,846,860,888,838,853,853,906,912,886,872,992,941,876,899,882,896,930,939,1024,1028,1017,924,1012,1011,1037,1039,1000,960,929,895,804,820,748,749,726,676,657,606,655,653,606,685,686,805,828,570,634,607,558,438,444,430,408,399,346,314,292,244,231,181,796\nTunbridge Wells,E07000116,female,549,589,592,642,626,643,658,678,723,756,750,802,788,795,826,762,778,776,588,359,351,394,511,586,558,567,574,659,622,663,699,704,706,767,695,720,729,794,792,799,792,845,845,764,779,800,851,867,869,1000,929,863,906,911,959,826,947,813,776,722,705,705,756,657,631,543,622,557,550,587,585,575,610,683,639,485,569,517,449,407,386,383,347,351,302,295,280,269,214,210,866\nCherwell,E07000177,female,839,918,855,945,943,928,888,861,907,944,938,942,954,971,952,937,901,886,760,587,581,664,775,853,927,976,990,1097,1113,1130,1235,1198,1220,1228,1268,1230,1285,1212,1198,1147,1189,1133,1112,1013,1004,1015,1061,1063,1120,1108,1127,1147,1198,1146,1190,1226,1159,1081,1089,1036,993,983,898,851,868,765,765,792,712,800,739,826,795,807,810,561,654,605,577,470,443,436,450,419,376,344,335,243,249,210,939\nOxford,E07000178,female,657,732,752,609,691,727,715,755,770,821,848,793,778,848,885,793,852,842,1913,3666,2990,2676,2167,1726,1625,1682,1529,1555,1536,1402,1427,1380,1250,1354,1270,1208,1139,1113,1003,1079,1019,1024,1029,871,908,829,858,943,888,967,860,912,969,911,846,827,893,897,783,844,741,719,610,670,584,551,531,561,592,502,518,536,504,478,507,378,424,400,404,349,312,342,313,282,250,216,205,206,194,162,736\nSouth Oxfordshire,E07000179,female,697,743,776,816,817,827,841,837,876,874,899,889,862,917,895,831,849,848,684,469,415,464,626,671,753,785,793,825,832,919,903,946,910,935,980,999,949,1040,974,995,1049,1017,958,978,933,952,1045,1046,1079,1091,1154,1192,1121,1194,1171,1208,1135,1053,1093,996,1000,921,895,876,861,789,814,804,773,750,791,780,796,861,896,743,769,747,665,544,529,536,496,469,423,399,353,313,267,225,1017\nVale of White Horse,E07000180,female,673,766,757,745,838,781,849,826,815,819,805,790,861,832,769,752,777,744,613,461,438,502,605,711,707,773,782,814,889,891,974,927,981,1000,1014,974,991,990,941,949,1000,974,888,884,892,855,922,931,949,948,967,969,1006,1001,958,978,973,967,995,872,908,828,933,804,753,736,682,759,667,673,700,691,740,793,786,607,675,622,559,466,446,458,409,400,391,354,329,283,250,241,957\nWest Oxfordshire,E07000181,female,512,570,564,552,630,580,625,577,682,674,702,704,679,622,664,613,603,610,512,403,365,361,523,610,538,585,613,651,666,706,716,717,723,703,718,686,720,723,717,711,746,767,716,717,679,699,726,763,790,883,895,809,849,815,931,876,857,931,843,800,808,752,718,719,672,672,639,662,646,630,641,677,680,740,703,583,630,561,509,403,419,428,389,355,305,315,288,269,240,212,913\nElmbridge,E07000207,female,749,729,817,844,876,962,923,965,1007,1070,1032,978,928,979,907,891,901,864,607,336,315,441,526,623,607,618,607,597,613,658,756,760,810,791,858,891,926,993,1113,1092,1198,1236,1185,1104,1176,1164,1160,1150,1175,1104,1174,1106,1101,1097,1013,1016,1025,994,991,939,902,824,789,722,639,643,645,637,674,653,621,625,669,708,701,528,566,543,508,429,419,412,440,391,389,353,326,276,233,269,1135\nEpsom and Ewell,E07000208,female,412,404,451,468,489,503,501,510,545,559,528,515,547,506,479,493,507,479,433,364,343,419,443,405,408,424,382,454,427,419,496,494,503,525,502,527,593,600,620,658,658,685,680,632,602,591,613,605,660,591,637,553,605,606,594,607,523,528,548,529,502,485,450,393,413,365,409,376,380,385,373,419,410,435,446,311,370,319,323,274,255,270,238,224,193,185,168,153,142,136,544\nGuildford,E07000209,female,627,628,652,633,738,719,716,753,788,800,801,802,802,820,766,813,829,799,1180,1646,1553,1379,1520,1122,949,859,789,816,877,819,858,881,935,881,865,842,897,895,928,919,954,961,945,968,854,953,978,956,1014,1004,1007,978,945,978,953,1058,1027,988,928,920,839,842,816,722,748,697,694,656,622,597,643,678,740,699,722,546,592,544,487,418,393,427,442,375,363,323,300,255,241,235,999\nMole Valley,E07000210,female,374,379,402,440,417,437,449,454,431,530,498,519,538,527,518,526,515,590,438,258,230,292,406,398,389,350,434,422,386,396,438,429,426,423,438,494,480,490,501,528,513,579,545,604,627,616,609,590,655,687,717,645,680,689,734,743,695,731,711,661,648,634,572,560,544,567,528,525,528,501,447,526,521,614,599,507,479,461,422,363,355,364,354,361,267,256,274,246,244,189,809\nReigate and Banstead,E07000211,female,815,855,919,911,980,972,962,985,985,1004,1037,963,935,929,957,885,803,877,685,491,417,535,696,728,774,787,811,824,877,1006,996,1155,1128,1083,1086,1121,1140,1078,1087,1233,1206,1127,1154,1082,1080,1078,1055,1039,1043,1137,1069,1065,1053,1093,1100,1120,1118,1052,1036,959,890,872,890,825,746,682,728,678,644,729,674,727,747,792,763,567,604,582,511,464,401,438,430,372,382,332,339,301,319,277,1132\nRunnymede,E07000212,female,440,485,476,467,499,470,504,478,452,485,476,446,491,481,463,472,449,428,781,1253,1302,985,636,569,495,463,494,525,541,533,550,577,567,614,633,600,623,573,563,610,614,600,547,574,588,612,609,631,625,596,576,638,599,617,606,591,609,613,597,526,557,503,481,451,382,397,402,391,381,362,369,374,397,396,470,348,363,284,304,258,260,275,257,229,213,226,205,191,154,119,634\nSpelthorne,E07000213,female,551,616,603,569,597,672,623,598,635,604,600,592,552,577,598,541,530,538,461,328,381,428,575,515,545,563,585,623,621,702,728,678,810,843,820,761,754,762,816,770,812,806,777,709,704,668,718,673,721,727,754,790,711,740,759,744,742,697,748,662,600,582,601,514,558,477,472,482,453,458,452,468,505,505,542,417,437,425,400,338,345,354,280,290,306,257,204,206,220,167,697\nSurrey Heath,E07000214,female,394,438,429,442,458,513,489,469,533,568,572,580,587,555,553,523,521,572,425,284,286,341,445,495,490,479,445,517,482,543,570,538,536,574,536,560,560,602,590,662,654,686,615,539,582,663,688,627,744,690,751,676,700,706,734,714,688,681,620,633,596,577,530,548,488,476,454,461,431,453,434,453,458,534,540,430,407,400,366,293,288,307,285,253,260,270,222,211,219,165,650\nTandridge,E07000215,female,445,460,504,480,517,494,487,498,549,531,528,549,546,659,647,572,624,526,404,284,286,326,420,419,442,393,418,403,410,492,453,497,542,578,536,584,600,628,578,582,656,663,559,574,539,577,614,570,657,654,672,608,699,723,753,637,648,711,626,643,593,565,586,529,538,485,466,505,487,464,453,460,480,571,531,427,432,443,372,326,313,325,274,266,249,238,219,230,187,162,688\nWaverley,E07000216,female,546,614,620,669,675,752,701,736,804,833,817,838,835,828,856,780,909,985,688,468,462,525,608,617,572,540,510,510,573,537,655,645,661,729,747,762,750,790,824,767,901,908,857,854,932,906,954,964,1010,1080,1010,974,956,1002,934,985,975,950,884,831,839,811,773,783,754,684,670,701,629,688,709,714,739,816,805,641,689,659,609,491,475,432,461,458,414,408,389,337,312,294,1238\nWoking,E07000217,female,586,591,610,592,609,669,656,593,696,649,682,674,658,620,645,555,626,571,445,343,341,390,485,538,593,600,603,638,635,707,741,677,740,800,796,806,784,801,843,841,896,892,801,763,769,744,788,771,741,737,723,675,722,696,722,757,730,667,641,603,603,539,528,549,508,472,442,450,468,402,422,491,469,480,474,374,398,343,316,318,268,280,271,275,239,223,191,194,179,178,694\nAdur,E07000223,female,265,302,347,326,354,371,374,341,408,376,382,384,362,346,332,322,367,299,268,235,227,259,231,256,273,299,317,323,327,352,331,374,395,441,391,411,398,405,419,437,443,438,426,443,398,481,427,431,490,469,489,457,470,498,477,447,472,423,460,445,434,402,380,463,378,371,373,360,406,390,397,413,441,486,518,371,379,334,330,267,269,288,281,260,221,185,204,158,146,128,575\nArun,E07000224,female,699,681,737,698,759,820,757,772,821,860,805,803,825,733,798,729,726,765,738,703,686,730,735,735,809,835,802,828,842,905,948,947,993,963,893,922,905,904,856,883,933,975,852,868,815,869,950,1011,994,1103,1173,1076,1213,1208,1141,1272,1254,1218,1219,1245,1216,1116,1179,1174,1156,1102,1161,1092,1149,1174,1176,1247,1337,1447,1533,1160,1145,1076,1006,798,787,837,779,749,652,625,551,457,435,445,1929\nChichester,E07000225,female,452,558,524,566,527,547,604,604,586,631,663,641,693,645,626,638,593,568,715,805,748,674,683,640,573,569,595,587,635,616,689,651,646,693,598,573,687,611,641,673,738,694,641,633,675,662,730,786,777,816,873,765,862,968,947,965,963,1017,1003,963,956,969,910,976,883,830,838,834,819,776,863,897,914,1085,1004,761,830,760,718,611,561,623,560,486,478,399,444,359,357,309,1303\nCrawley,E07000226,female,714,739,744,753,744,774,746,771,731,815,794,790,727,746,725,657,700,667,571,459,536,607,633,691,774,768,837,922,904,977,1042,996,1037,1051,1014,982,1014,953,956,1023,982,941,918,825,824,780,752,730,770,773,793,762,758,767,729,725,718,748,670,670,631,628,649,607,548,535,499,488,441,432,446,410,443,463,505,299,333,284,279,222,240,252,223,215,203,186,169,178,176,137,651\nHorsham,E07000227,female,635,714,722,750,753,716,762,759,798,841,831,882,854,933,852,847,916,847,706,457,441,502,634,685,701,737,720,742,823,798,815,817,903,869,864,951,853,878,877,876,979,960,993,826,888,893,963,976,1037,1077,1104,1103,1123,1149,1168,1208,1178,1180,1097,1076,1063,959,1005,944,913,893,884,826,849,862,894,877,892,996,1000,755,815,765,732,576,515,601,528,482,428,463,374,336,306,294,1278\nMid Sussex,E07000228,female,741,802,794,851,913,911,869,918,913,965,1019,951,968,921,943,877,888,891,695,474,460,576,638,656,700,724,803,790,781,844,902,982,995,986,974,1043,996,995,1044,1091,1115,1172,1112,983,1003,1037,1171,1132,1174,1131,1216,1154,1155,1131,1129,1109,1102,1140,1078,1028,955,912,990,879,817,877,836,805,813,807,782,808,870,963,981,743,819,762,634,524,509,534,494,447,435,409,347,338,301,313,1241\nWorthing,E07000229,female,504,519,546,542,537,621,557,598,589,643,620,597,620,610,598,538,565,520,499,417,428,468,530,594,578,603,601,613,668,714,749,704,726,772,730,723,728,697,734,748,767,792,739,707,687,702,688,785,836,818,834,784,871,831,841,830,842,854,793,741,744,694,705,620,642,607,635,609,600,644,627,672,704,752,796,579,600,535,531,420,426,461,392,407,432,322,327,316,230,234,1157\nBath and North East Somerset,E06000022,female,842,833,813,868,966,958,967,924,1030,1017,1019,969,1038,1041,1081,1025,936,1010,1713,2739,2436,2186,1936,1449,1203,1155,1119,1168,1195,1201,1200,1240,1178,1228,1235,1086,1142,1125,1084,1090,1125,1156,1107,1082,1027,1102,1148,1135,1240,1387,1298,1271,1282,1343,1353,1335,1317,1325,1253,1268,1222,1108,1057,1105,1025,1037,948,1018,940,998,938,1049,1006,1048,1092,833,893,843,772,634,625,662,602,584,540,505,444,357,352,360,1423\n\"Bristol, City of\",E06000023,female,2547,2566,2462,2497,2485,2620,2604,2646,2650,2642,2623,2492,2483,2509,2459,2268,2220,2198,3232,4952,5461,5146,4714,4523,4227,4234,4580,4505,4396,4466,4542,4513,4466,4362,4221,4106,3923,3770,3480,3448,3495,3433,3023,2795,2752,2770,2758,2662,2603,2697,2639,2632,2636,2447,2605,2682,2553,2531,2465,2321,2233,2108,2077,2123,1825,1821,1751,1777,1695,1549,1591,1616,1623,1774,1623,1226,1312,1283,1231,998,965,993,943,876,831,774,698,606,575,531,2183\nNorth Somerset,E06000024,female,965,997,1074,1053,1126,1162,1197,1096,1238,1243,1308,1284,1225,1164,1192,1181,1164,1136,981,800,761,905,1068,1028,1086,1032,1120,1064,1118,1193,1281,1226,1297,1351,1262,1353,1294,1365,1381,1383,1442,1462,1417,1311,1339,1318,1425,1386,1442,1560,1614,1536,1505,1615,1606,1693,1616,1567,1528,1536,1445,1456,1458,1410,1261,1320,1249,1336,1336,1323,1304,1364,1500,1563,1597,1283,1347,1151,1082,920,850,896,794,773,710,626,612,532,498,485,1876\nSouth Gloucestershire,E06000025,female,1536,1481,1613,1565,1598,1631,1691,1621,1721,1699,1674,1635,1663,1652,1536,1510,1558,1436,1591,1684,1626,1697,1678,1761,1839,1885,1883,1951,1983,2085,2086,2075,2140,2159,2016,2118,2030,2011,1908,1910,1940,1916,1803,1762,1695,1692,1788,1741,1913,1930,2074,2024,2055,2055,2091,2134,2075,2055,1929,1788,1720,1655,1630,1542,1491,1411,1424,1399,1362,1329,1365,1400,1443,1640,1542,1276,1362,1237,1154,995,908,952,878,798,764,721,597,570,525,437,1731\nPlymouth,E06000026,female,1176,1329,1304,1299,1268,1382,1443,1405,1608,1519,1496,1531,1396,1505,1483,1270,1382,1364,1647,2307,2425,2432,2218,1968,1803,1733,1819,1791,1743,1874,1817,1923,1860,1870,1855,1808,1728,1809,1679,1693,1744,1663,1602,1420,1354,1535,1506,1572,1646,1730,1776,1772,1732,1736,1941,1723,1852,1756,1662,1697,1633,1544,1509,1506,1575,1346,1266,1362,1304,1327,1328,1296,1311,1475,1461,1218,1139,1016,1016,805,780,825,841,681,700,606,576,481,451,397,1624\nTorbay,E06000027,female,525,525,619,654,641,704,693,729,725,731,741,738,743,711,731,665,751,709,601,484,496,526,659,685,673,667,715,737,758,802,816,801,732,793,781,759,776,735,711,776,785,808,712,725,759,775,809,799,856,917,1019,1013,1062,1042,1053,1121,1144,1088,1126,1002,1043,1031,1016,990,947,960,905,999,958,885,989,949,989,1068,1183,791,881,852,761,672,564,630,588,542,534,471,415,404,320,326,1400\nSwindon,E06000030,female,1194,1315,1339,1393,1460,1369,1508,1421,1536,1523,1515,1454,1449,1450,1315,1287,1283,1239,1108,990,939,1052,1204,1321,1390,1434,1515,1644,1614,1678,1715,1731,1788,1824,1867,1749,1859,1753,1782,1707,1796,1603,1617,1521,1555,1491,1534,1635,1682,1670,1710,1605,1639,1684,1692,1606,1596,1568,1588,1423,1430,1323,1303,1263,1153,1119,1124,1167,1043,961,998,989,996,1127,1034,808,854,773,690,609,561,597,574,496,472,420,426,352,300,299,1155\nCornwall,E06000052,female,2415,2328,2504,2510,2641,2861,2831,2978,3033,3110,3087,3058,2992,3012,2985,2898,2896,2902,2795,2847,2865,2873,2773,2836,2744,2711,2750,2838,3080,3098,3215,3214,3241,3478,3092,3077,3242,3168,3209,3232,3367,3398,3178,2998,3112,3129,3472,3612,3780,4162,4134,4175,4266,4298,4388,4549,4495,4554,4384,4349,4293,4137,4152,4177,4121,3900,3863,3949,3830,3939,3757,4074,4090,4616,4444,3417,3479,3340,2912,2458,2241,2170,2031,1949,1882,1597,1523,1301,1196,1053,4571\nIsles of Scilly,E06000053,female,7,12,17,5,8,12,14,14,4,7,7,12,10,13,9,3,0,2,4,7,9,8,7,2,14,10,14,8,11,19,12,8,9,11,10,15,15,11,14,18,14,23,9,9,13,13,6,16,14,13,21,19,13,22,11,14,21,20,11,15,9,13,12,11,14,7,16,9,14,15,17,9,18,17,23,10,15,12,10,9,9,15,10,7,9,5,9,2,3,4,28\nWiltshire,E06000054,female,2286,2423,2537,2618,2737,2780,2810,2849,2818,2971,3036,2976,2979,2967,3002,2839,2873,2945,2422,1676,1712,1938,2266,2481,2639,2566,2741,2810,2847,2930,3210,3088,3126,3149,3209,3064,3070,3051,3058,3206,3229,3073,2893,2924,2891,3098,3250,3474,3654,3761,3765,3836,3843,3831,3965,4064,3991,3883,3859,3620,3606,3399,3480,3206,3104,3070,2892,2970,3032,2956,2884,2909,3179,3363,3261,2551,2712,2493,2224,1944,1845,1818,1734,1587,1463,1341,1236,1040,1032,897,3800\n\"Bournemouth, Christchurch and Poole\",E06000058,female,1798,1745,1833,1852,1964,2070,2065,1954,2122,2164,2134,2078,2066,2058,2064,1849,1986,1904,2371,2957,3043,2888,2749,2451,2377,2294,2382,2402,2515,2461,2684,2684,2687,2771,2631,2740,2666,2670,2688,2683,2810,2622,2627,2367,2348,2338,2436,2434,2551,2614,2704,2705,2679,2682,2689,2747,2808,2658,2660,2603,2478,2393,2409,2342,2305,2114,2229,2238,2074,2226,2184,2253,2332,2597,2622,1897,2113,1891,1724,1479,1310,1436,1434,1301,1273,1080,1100,966,966,812,3663\nDorset,E06000059,female,1214,1340,1479,1639,1623,1645,1685,1774,1809,1956,1933,2029,2060,2013,1957,2071,1924,1997,1743,1265,1172,1260,1484,1584,1621,1562,1615,1683,1702,1736,1805,1827,1860,1968,1805,1807,1951,1846,1908,1988,1958,2012,1922,1853,1907,1953,2059,2280,2389,2634,2689,2681,2812,2925,2946,3080,3024,3140,3145,3037,3017,2969,3067,3003,2890,2726,2916,2922,2766,2752,2863,3201,3052,3354,3456,2580,2779,2453,2212,1996,1823,1830,1768,1665,1475,1366,1247,1110,1064,969,4095\nEast Devon,E07000040,female,595,606,610,647,737,743,699,744,738,789,751,782,764,763,703,736,716,748,672,508,467,500,572,637,643,638,650,696,713,770,761,777,778,761,770,786,746,765,796,806,872,828,774,687,804,806,836,868,979,1062,1042,1106,1080,1114,1160,1134,1197,1171,1152,1117,1105,1124,1131,1147,1118,1090,1079,1146,1131,1101,1084,1162,1256,1322,1384,1062,1179,977,961,777,814,760,706,690,649,633,521,478,466,397,1886\nExeter,E07000041,female,558,560,584,568,605,631,593,558,621,587,581,619,602,633,536,590,572,535,1594,2785,2607,2280,1517,1130,934,925,838,902,899,940,896,939,874,876,897,857,857,851,840,849,735,859,779,689,682,682,702,741,712,770,760,744,821,779,808,820,785,752,732,695,703,682,662,614,569,574,617,603,538,580,547,561,619,643,649,501,521,457,434,431,406,379,352,330,328,287,257,253,225,206,853\nMid Devon,E07000042,female,360,387,370,402,437,430,406,437,447,478,485,507,470,470,498,470,446,488,401,287,284,333,388,339,421,403,420,415,445,426,456,492,446,505,475,480,506,526,497,471,494,454,510,477,483,454,494,520,561,592,644,604,662,623,638,622,730,668,674,624,609,578,580,585,539,563,556,525,494,534,531,517,544,594,590,437,455,416,410,329,340,288,287,311,265,210,188,197,166,162,661\nNorth Devon,E07000043,female,398,423,441,473,487,505,467,486,519,570,548,591,529,562,552,538,510,514,433,333,373,345,417,448,451,488,524,491,540,497,544,570,577,558,530,535,562,508,530,549,586,567,538,490,481,582,550,596,664,707,714,718,698,739,799,796,796,779,814,784,766,712,712,720,735,655,644,676,634,645,649,702,686,775,737,586,635,576,565,447,424,445,367,343,332,307,269,223,236,227,862\nSouth Hams,E07000044,female,272,340,345,374,379,408,434,436,465,495,459,446,463,477,474,464,452,445,383,307,251,274,343,355,330,360,338,369,365,415,425,458,468,443,460,450,459,459,472,490,464,509,521,478,483,500,502,546,575,620,645,638,696,713,765,755,778,761,806,782,770,780,694,727,748,675,667,682,703,658,690,712,638,765,782,609,584,548,485,406,384,394,345,312,329,287,275,238,209,204,834\nTeignbridge,E07000045,female,460,570,638,566,623,638,620,669,719,692,716,693,707,667,681,664,669,689,601,440,436,454,518,575,592,601,637,641,638,744,716,760,743,765,699,725,728,720,788,707,746,781,750,669,745,709,759,835,927,951,982,992,1023,1044,1072,1119,1117,1146,1166,1121,1109,1026,999,998,1009,929,974,1027,994,951,934,966,1047,1098,1127,865,868,816,760,647,551,609,530,498,458,456,380,387,334,278,1281\nTorridge,E07000046,female,269,267,272,270,283,304,301,353,303,381,381,344,317,327,344,340,322,314,322,226,225,243,272,249,293,293,318,296,294,315,361,360,347,349,360,305,341,341,298,345,366,400,326,318,345,403,374,375,456,484,537,517,504,517,567,550,504,612,597,547,552,585,603,590,522,500,495,558,497,520,530,575,501,594,599,425,494,416,354,363,282,281,251,254,220,209,201,169,151,135,596\nWest Devon,E07000047,female,201,187,225,229,252,239,269,271,278,281,307,300,327,330,345,295,300,298,238,224,150,194,203,207,218,228,257,253,245,245,263,264,272,267,258,252,283,295,255,313,341,293,274,281,273,306,323,314,408,383,391,427,466,467,447,517,525,516,506,500,492,446,473,428,433,445,429,415,402,438,435,464,454,526,485,373,400,328,327,276,233,257,236,248,183,178,173,150,145,113,501\nCheltenham,E07000078,female,506,621,551,599,578,570,637,626,645,637,664,643,740,726,741,651,677,688,733,703,773,780,789,787,829,794,789,737,790,798,885,826,815,853,829,860,843,838,776,814,806,820,788,691,693,738,764,752,759,795,754,765,795,847,821,796,874,849,774,779,733,674,624,614,606,595,591,630,558,588,523,616,580,691,646,525,515,518,453,427,390,397,390,341,329,328,315,265,268,241,983\nCotswold,E07000079,female,342,367,403,400,427,438,420,482,450,510,476,498,492,507,489,474,450,499,412,372,395,337,413,358,402,370,430,404,420,416,448,469,473,494,517,484,524,480,463,575,522,571,540,525,506,553,593,612,639,696,720,712,704,748,738,777,817,776,713,763,708,723,656,652,622,580,634,629,640,615,584,634,644,697,712,541,570,547,473,428,355,411,388,352,270,276,262,272,242,173,772\nForest of Dean,E07000080,female,368,379,382,389,405,445,455,419,429,475,490,483,466,480,419,428,551,657,540,390,340,360,386,386,429,457,398,440,436,455,503,472,479,492,479,487,470,467,474,466,502,466,460,415,417,465,472,518,576,652,624,653,669,711,717,718,735,685,689,673,704,620,627,641,588,596,612,555,617,582,599,593,632,636,633,475,537,487,419,372,338,330,305,281,278,233,236,181,168,149,671\nGloucester,E07000081,female,695,712,724,763,725,837,768,792,818,847,835,836,826,782,731,706,764,763,720,801,866,806,906,829,858,812,870,922,921,941,1004,963,1034,1023,996,927,932,877,938,911,903,916,827,755,750,731,800,871,819,852,912,946,933,925,952,994,950,883,848,829,814,841,728,708,669,640,616,610,568,611,573,556,610,624,611,531,499,508,487,389,325,402,339,332,280,252,243,225,206,178,764\nStroud,E07000082,female,475,485,567,590,592,634,635,654,671,663,716,725,753,665,666,667,675,663,597,430,366,432,488,520,611,562,561,624,639,669,654,665,664,727,691,679,683,668,734,693,752,747,730,721,722,736,801,863,911,929,952,941,962,955,1024,952,969,943,986,967,932,891,854,887,769,746,757,769,725,770,766,827,813,860,803,625,666,600,557,472,429,445,428,386,358,336,338,273,223,238,911\nTewkesbury,E07000083,female,481,460,529,563,524,571,560,559,556,532,521,571,512,544,531,453,510,517,405,308,313,378,400,466,465,526,541,536,559,561,624,670,676,677,640,605,611,672,605,624,678,593,605,585,536,579,550,628,564,670,673,638,656,715,756,707,742,696,691,684,659,659,626,612,565,537,547,559,602,583,543,572,529,627,661,467,484,507,412,392,375,347,328,321,279,247,223,178,183,180,686\nMendip,E07000187,female,480,518,585,557,562,645,556,550,675,641,678,658,647,688,694,686,712,741,615,389,366,403,454,508,543,527,575,569,580,592,616,701,713,663,681,652,654,677,632,645,708,700,679,646,648,670,732,739,838,936,896,937,921,964,980,961,966,944,892,877,833,799,895,782,779,714,777,771,760,741,735,787,804,833,793,640,614,595,577,472,467,419,420,378,377,324,299,271,237,206,939\nSedgemoor,E07000188,female,537,573,526,600,635,621,650,688,692,732,723,755,691,688,690,649,648,673,583,468,508,520,639,664,662,628,685,688,721,753,746,756,779,754,702,690,678,704,675,694,712,682,686,680,629,690,736,730,841,830,909,881,992,916,909,1033,967,950,976,910,916,820,832,815,811,748,812,835,781,820,749,833,860,912,856,643,723,645,605,516,464,479,448,433,366,321,294,270,272,235,1025\nSouth Somerset,E07000189,female,752,751,788,871,841,865,891,883,902,944,924,962,975,922,936,917,965,894,792,648,668,720,806,853,833,824,933,981,951,992,1010,1082,1073,990,989,960,953,917,906,899,1023,894,874,912,900,969,1055,1064,1072,1155,1240,1224,1246,1290,1259,1341,1267,1351,1374,1318,1231,1242,1223,1177,1108,1046,1139,1208,1155,1138,1166,1172,1268,1384,1363,945,1076,952,928,804,671,683,641,638,573,518,444,417,374,314,1569\nSomerset West and Taunton,E07000246,female,695,703,756,746,766,779,761,784,796,866,868,881,843,832,908,813,893,829,750,554,536,629,667,745,755,760,849,903,868,918,933,954,955,924,939,916,945,886,924,924,962,919,902,778,792,859,913,911,1025,1108,1093,1106,1153,1150,1145,1174,1210,1228,1201,1202,1136,1125,1076,1103,1125,1034,1060,1075,1053,1067,1026,1076,1066,1158,1153,949,969,873,813,710,684,615,616,556,531,488,467,448,338,350,1647\nIsle of Anglesey,W06000001,female,270,266,316,341,350,358,381,361,427,429,395,369,367,435,339,319,351,383,302,274,238,263,279,366,366,320,332,294,337,358,388,379,416,364,362,360,381,346,348,354,366,418,354,349,342,331,355,422,452,470,523,509,506,539,525,527,520,565,521,512,526,508,506,488,519,479,511,494,433,479,512,502,502,532,547,414,453,416,386,314,292,300,253,266,230,194,181,162,145,115,566\nGwynedd,W06000002,female,463,504,526,533,577,573,574,578,636,677,631,598,649,626,668,642,611,576,671,982,1045,953,887,765,703,640,646,667,640,674,720,656,670,643,639,607,602,579,645,586,654,639,608,571,562,579,683,709,755,763,785,888,811,810,843,818,881,862,835,859,896,831,782,808,809,737,684,734,728,712,692,705,699,770,767,587,619,634,571,475,435,408,430,364,373,328,323,267,252,247,1028\nConwy,W06000003,female,456,485,459,508,521,573,525,577,609,589,597,628,667,617,596,557,556,547,515,407,379,449,491,509,569,514,561,584,569,639,658,616,671,605,625,572,607,611,603,659,630,582,567,579,564,553,644,662,735,815,860,816,872,854,911,902,983,968,944,886,896,891,916,894,817,775,799,895,842,789,823,827,866,951,925,673,727,601,636,599,520,521,484,446,452,392,351,330,296,261,1151\nDenbighshire,W06000004,female,404,462,435,490,473,505,531,503,526,571,542,564,574,550,539,550,502,519,436,387,334,385,474,470,494,512,489,560,536,510,562,537,520,524,534,523,491,498,540,495,511,581,497,514,517,557,608,548,616,698,647,708,768,693,772,740,730,782,776,727,741,664,709,639,658,584,617,672,646,595,662,636,673,734,688,521,555,576,492,415,399,388,336,355,321,270,265,205,208,179,759\nFlintshire,W06000005,female,664,721,716,776,831,782,782,834,895,890,875,894,900,925,906,871,894,851,727,603,615,619,735,784,823,843,907,896,920,998,1067,939,991,956,1005,946,1021,976,960,993,947,1031,870,837,882,920,989,968,1144,1155,1231,1242,1222,1183,1165,1217,1267,1190,1187,1084,1083,1048,981,984,951,871,890,952,868,918,980,924,1000,1054,1071,784,842,704,674,577,566,515,542,511,405,350,306,277,256,224,890\nWrexham,W06000006,female,615,672,661,747,707,747,765,794,818,863,836,783,829,806,761,766,799,705,608,614,599,654,652,758,756,724,699,815,818,862,883,876,858,878,876,865,936,862,889,902,842,868,733,734,798,772,775,874,927,1007,1063,1046,1020,1033,1009,933,986,1011,952,907,813,879,842,862,803,764,794,814,754,748,765,782,779,822,789,626,630,584,514,529,470,392,384,341,357,320,259,242,231,216,786\nCeredigion,W06000008,female,254,258,261,279,274,340,333,325,347,308,366,383,282,352,331,306,327,315,557,838,835,757,617,486,410,343,363,365,360,371,342,371,318,339,331,333,338,311,341,334,332,333,309,356,322,327,352,354,419,471,486,450,513,489,514,529,597,580,562,547,587,520,516,509,507,492,537,509,491,493,484,520,491,515,504,420,447,411,376,296,327,271,242,253,224,229,211,148,160,115,570\nPembrokeshire,W06000009,female,475,515,513,566,615,627,666,602,692,741,716,714,676,690,689,651,658,665,545,486,441,479,560,533,580,569,617,642,679,686,704,693,706,687,637,650,690,661,610,667,703,609,668,619,635,577,656,746,832,852,883,852,959,883,974,948,1006,988,1032,1018,969,957,905,908,885,869,901,803,875,871,912,895,887,908,953,767,802,728,659,553,519,517,434,452,414,372,354,304,302,234,943\nCarmarthenshire,W06000010,female,809,876,896,934,964,951,930,976,1043,1075,1061,1073,1004,1166,1053,986,1089,1007,902,720,733,756,873,935,961,1045,978,982,1025,1084,1052,1003,1117,1176,1087,1080,1073,1125,1081,1068,1192,1108,1036,1016,943,1017,1095,1096,1214,1294,1308,1335,1410,1418,1455,1494,1488,1537,1454,1476,1470,1389,1412,1366,1300,1360,1275,1288,1195,1252,1187,1204,1219,1363,1257,1045,1030,995,956,803,749,657,682,559,593,494,482,387,381,338,1392\nSwansea,W06000011,female,1019,1105,1168,1195,1152,1295,1208,1145,1275,1338,1235,1403,1344,1380,1186,1210,1189,1266,1267,1937,1936,1976,1727,1639,1455,1464,1382,1395,1440,1489,1548,1544,1484,1646,1480,1630,1444,1440,1462,1459,1589,1443,1471,1286,1219,1299,1369,1434,1522,1519,1629,1554,1619,1541,1568,1666,1704,1664,1585,1567,1486,1562,1455,1506,1582,1359,1366,1398,1288,1216,1257,1315,1353,1521,1467,1133,1155,998,1032,845,844,821,807,736,687,633,589,511,473,394,1571\nNeath Port Talbot,W06000012,female,634,641,685,748,768,765,767,763,779,810,826,832,767,827,797,822,824,756,804,855,656,612,745,817,826,765,803,842,876,953,946,881,906,957,972,919,878,908,885,899,885,905,787,772,810,846,800,867,899,929,958,960,1038,1018,1060,1007,1113,1139,1087,970,1025,1029,976,916,933,838,848,843,847,898,816,832,822,884,892,678,656,657,592,502,501,450,460,422,392,352,317,237,273,229,929\nBridgend,W06000013,female,680,640,766,754,754,798,764,810,836,922,842,816,823,829,801,777,842,822,671,532,567,626,689,795,819,758,879,830,920,975,997,969,1049,1035,961,922,919,915,876,858,972,891,819,803,782,859,948,886,984,1077,1063,1079,1098,1060,1113,1088,1150,1074,1085,1067,984,950,949,906,882,803,838,806,873,863,831,765,853,925,891,678,701,675,633,524,537,492,474,455,422,347,337,234,260,228,780\nVale of Glamorgan,W06000014,female,598,632,637,744,791,763,759,743,784,848,792,791,774,877,758,720,770,809,619,458,446,551,544,637,763,703,719,757,725,777,744,811,837,895,886,857,842,806,889,848,898,883,909,756,788,796,799,904,819,991,957,925,943,1012,947,996,983,1064,959,951,939,911,889,928,857,876,773,811,838,758,788,741,808,925,877,626,743,612,624,524,460,493,458,401,374,337,310,296,244,219,923\nCardiff,W06000015,female,1734,1870,1868,1881,2003,2104,2002,2029,2209,2143,2161,2159,2103,2184,1957,1924,1885,1942,3069,4749,4709,4370,3748,3636,3245,3007,2958,2873,2851,2906,2847,2742,2721,2686,2774,2567,2669,2451,2573,2449,2444,2356,2171,2057,2202,2050,1990,2009,2045,2084,2194,2213,2038,2141,2130,2253,2145,2150,2093,2039,1945,1845,1790,1881,1703,1601,1467,1635,1498,1399,1486,1440,1389,1492,1501,1068,1221,1021,1009,900,884,804,811,793,719,661,594,568,499,432,1844\nRhondda Cynon Taff,W06000016,female,1081,1232,1216,1216,1302,1414,1254,1420,1467,1408,1465,1515,1406,1428,1305,1337,1420,1354,1236,1204,1186,1405,1475,1461,1509,1387,1452,1527,1517,1615,1719,1674,1626,1716,1634,1614,1606,1542,1532,1584,1574,1455,1371,1269,1238,1364,1414,1472,1610,1715,1767,1612,1686,1688,1709,1766,1656,1750,1691,1626,1623,1490,1455,1510,1297,1341,1353,1326,1327,1274,1304,1234,1426,1470,1381,1031,1037,921,1029,851,760,710,722,676,604,516,455,427,338,300,1241\nCaerphilly,W06000018,female,813,882,915,970,974,1027,1033,993,1045,1034,1112,1037,1063,1052,1028,968,976,985,814,776,720,786,902,924,1047,985,1067,1163,1162,1215,1154,1177,1267,1241,1166,1212,1244,1177,1148,1113,1205,1155,1102,1024,986,976,1048,1078,1265,1271,1252,1275,1350,1305,1273,1277,1323,1294,1256,1261,1161,1085,1105,1099,1123,1063,1013,1064,1077,918,975,1055,1040,1073,1088,802,874,719,712,642,572,548,510,481,418,388,373,332,272,237,822\nBlaenau Gwent,W06000019,female,312,352,336,363,362,346,346,360,410,341,368,378,396,350,382,366,333,319,311,300,267,328,377,375,400,410,448,483,476,490,504,459,482,492,475,440,368,410,390,409,433,401,405,299,359,380,349,430,427,467,508,502,540,514,570,546,530,520,517,493,495,445,442,446,398,343,363,389,351,386,380,360,403,398,418,296,322,274,310,249,211,222,210,177,179,160,114,112,96,85,327\nTorfaen,W06000020,female,440,450,507,488,524,540,471,513,567,544,583,549,533,537,536,539,493,509,434,376,316,394,471,583,544,522,626,621,623,647,670,667,665,694,645,607,614,636,532,550,612,599,520,508,473,497,536,569,567,599,635,662,694,648,661,708,714,668,689,683,655,572,614,606,526,544,539,570,583,535,548,495,542,574,531,430,438,391,395,389,318,296,280,268,260,239,222,181,154,165,539\nMonmouthshire,W06000021,female,368,352,397,387,393,429,417,422,468,479,479,504,500,491,539,460,485,488,415,315,311,315,365,406,446,394,455,458,464,439,463,462,470,467,514,486,500,536,519,539,546,532,509,511,482,524,546,549,648,711,744,697,736,771,820,860,776,881,791,747,706,722,619,641,662,629,646,631,666,617,651,640,652,656,704,580,568,482,506,471,409,370,361,327,314,311,255,218,203,173,847\nNewport,W06000022,female,890,926,931,1026,1020,980,1063,981,953,1000,1037,1124,971,988,893,925,923,893,782,679,682,778,916,919,1022,989,1135,1131,1205,1268,1386,1222,1242,1338,1262,1209,1173,1151,1069,1121,1113,982,995,926,938,936,875,1001,1022,1059,1057,1020,1075,1195,1136,1103,1145,1098,1083,1025,968,966,932,832,810,726,762,782,749,690,659,774,762,777,797,600,662,556,561,521,481,452,424,383,405,335,268,272,224,229,823\nPowys,W06000023,female,510,541,537,570,617,636,579,639,643,675,678,665,661,728,675,670,702,683,575,439,427,461,556,599,578,589,684,648,597,633,718,632,680,696,636,642,643,637,679,688,654,647,671,653,631,692,730,782,784,979,1013,970,997,1009,1098,1096,1102,1069,1141,1044,1094,1089,1065,1049,1026,965,1039,1046,995,939,969,1025,972,1049,1016,827,861,807,754,654,601,597,549,488,478,434,349,343,319,278,1186\nMerthyr Tydfil,W06000024,female,268,336,331,318,338,346,367,340,348,389,325,363,355,333,336,306,320,325,304,236,293,289,323,334,374,349,368,369,405,440,426,431,435,445,465,463,421,411,407,402,409,357,310,318,294,331,337,352,381,414,416,419,422,414,477,406,482,452,432,430,431,370,357,400,323,346,335,304,312,316,349,319,315,334,331,222,264,225,211,178,177,175,128,176,130,130,93,108,81,74,282\nHartlepool,E06000001,male,469,496,536,510,559,558,527,569,611,580,604,642,609,622,574,597,537,543,502,478,487,500,502,464,537,510,529,513,527,529,566,512,565,539,553,532,539,520,492,498,516,529,500,447,435,519,452,498,595,622,629,589,610,646,648,677,731,680,681,662,693,633,627,596,609,548,511,521,482,513,466,496,472,524,491,391,347,275,221,236,229,213,215,199,168,169,122,122,101,81,217\nMiddlesbrough,E06000002,male,796,866,907,997,961,1010,978,1017,1068,996,1028,1045,922,939,921,895,892,867,875,882,1024,1013,1034,1158,1096,1101,1005,1003,1013,1010,1002,1018,1058,1011,992,1022,928,954,829,841,825,869,819,748,696,773,749,823,754,807,813,817,787,882,913,924,951,884,928,905,869,843,849,853,833,715,742,678,694,663,604,609,605,632,657,437,453,387,364,346,302,282,281,249,235,198,169,142,127,112,316\nRedcar and Cleveland,E06000003,male,610,656,680,713,773,748,778,757,851,923,804,834,794,829,838,774,834,782,686,671,577,658,691,624,722,747,662,722,710,768,766,723,720,754,724,711,740,710,707,685,756,748,654,663,633,730,708,775,805,858,932,922,964,931,1074,1047,980,1094,1012,1026,989,924,954,952,891,861,828,826,771,819,746,780,825,876,859,651,720,583,561,477,482,405,424,358,314,281,229,211,152,130,443\nStockton-on-Tees,E06000004,male,933,1032,1131,1105,1228,1191,1205,1291,1415,1319,1421,1324,1321,1298,1240,1222,1185,1193,980,906,869,987,967,1023,1089,1021,1136,1194,1279,1220,1289,1235,1284,1243,1307,1389,1244,1309,1210,1251,1317,1240,1311,1070,992,1097,1146,1198,1219,1371,1379,1334,1391,1413,1409,1369,1352,1336,1387,1309,1316,1224,1250,1159,1264,1160,1014,1089,1043,968,973,963,1019,999,975,687,803,619,546,566,500,418,457,417,376,312,236,185,195,170,488\nDarlington,E06000005,male,514,505,585,586,572,651,626,670,674,660,695,671,735,621,646,624,684,657,608,458,410,518,514,598,613,591,590,652,621,655,703,659,650,682,651,674,632,637,633,591,679,675,719,628,623,594,658,653,676,758,761,761,760,742,809,797,809,736,807,739,756,677,693,665,598,658,565,610,590,542,519,547,613,604,548,437,474,386,342,316,313,291,301,244,210,194,174,146,119,116,321\nCounty Durham,E06000047,male,2461,2444,2644,2477,2731,2857,2694,2937,3022,3074,3060,3002,2878,3109,3053,2771,2879,2756,3257,4230,3756,3691,3429,2977,2786,2801,2738,2774,2948,2937,3075,2839,2823,2936,2978,2984,2932,2990,2952,2995,2985,2974,2913,2713,2538,2806,2816,2960,3353,3485,3652,3606,3703,3783,3809,4024,3970,3878,3794,3810,3582,3398,3489,3409,3297,3212,3132,3056,3001,2966,2885,2910,2879,3036,3091,2318,2440,2114,1799,1617,1456,1504,1379,1223,1135,884,778,688,567,428,1385\nNorthumberland,E06000057,male,1338,1322,1478,1589,1560,1696,1624,1728,1809,1754,1887,1789,1750,1814,1752,1798,1748,1741,1592,1358,1330,1359,1449,1545,1571,1565,1517,1617,1559,1640,1677,1562,1644,1748,1658,1663,1730,1647,1718,1650,1680,1829,1701,1591,1620,1689,1835,1888,1989,2140,2185,2035,2231,2339,2417,2385,2568,2473,2418,2564,2429,2439,2437,2318,2324,2314,2184,2353,2133,2152,2095,2153,2148,2402,2278,1689,1751,1586,1391,1143,1079,1011,931,859,773,700,621,498,419,349,1067\nNewcastle upon Tyne,E08000021,male,1581,1511,1601,1639,1700,1706,1667,1679,1730,1789,1799,1706,1698,1639,1618,1496,1474,1442,2576,4340,4514,4445,3712,3093,2766,2465,2573,2319,2258,2208,2134,2186,1991,2130,1975,2095,1986,1900,1944,1887,1817,1844,1743,1562,1574,1585,1621,1463,1674,1701,1785,1636,1623,1579,1712,1700,1865,1729,1638,1693,1556,1577,1500,1570,1428,1281,1310,1265,1202,1112,1059,1160,1112,1177,1171,844,824,739,664,589,504,577,517,414,395,428,351,320,249,232,688\nNorth Tyneside,E08000022,male,1034,1135,1140,1162,1194,1245,1209,1241,1262,1196,1276,1282,1291,1298,1220,1226,1159,1106,1022,829,871,868,968,1064,1036,1078,1143,1161,1254,1277,1305,1267,1327,1319,1324,1439,1331,1339,1399,1348,1416,1536,1351,1184,1177,1200,1310,1276,1371,1477,1481,1396,1344,1395,1479,1488,1508,1543,1525,1407,1343,1320,1278,1308,1238,1178,1174,1212,1152,1122,1019,1080,1138,1199,1120,865,862,712,652,540,507,501,511,441,388,365,329,266,216,187,605\nSouth Tyneside,E08000023,male,752,798,768,859,894,906,842,857,891,858,910,890,915,813,874,798,790,833,748,672,690,716,686,784,781,827,776,809,851,941,906,865,942,949,974,1014,882,861,851,881,942,905,852,721,693,786,778,848,889,961,984,945,1061,1042,1063,1073,1103,1119,1094,1054,1070,1075,1030,991,968,918,888,858,836,753,806,789,792,840,827,584,573,483,470,401,399,377,386,347,344,253,214,185,156,131,403\nSunderland,E08000024,male,1391,1306,1420,1515,1543,1550,1476,1581,1558,1687,1673,1604,1617,1652,1588,1509,1535,1504,1522,1377,1419,1487,1495,1555,1585,1574,1584,1620,1695,1750,1835,1741,1730,1719,1665,1732,1671,1602,1602,1651,1582,1639,1524,1403,1346,1441,1536,1554,1714,1884,1954,1826,1918,1919,1895,1878,2016,1962,1978,1910,1914,1836,1884,1904,1795,1589,1614,1576,1468,1502,1461,1394,1451,1586,1457,1093,1043,971,878,728,717,719,683,637,582,411,402,348,308,264,677\nGateshead,E08000037,male,920,1020,966,1068,1089,1119,1165,1098,1114,1174,1249,1209,1109,1074,1042,1057,1020,990,1007,1037,983,920,1064,1127,1180,1266,1224,1255,1303,1280,1278,1325,1254,1327,1320,1346,1270,1304,1266,1226,1300,1243,1174,1105,1061,1117,1113,1139,1168,1377,1347,1351,1363,1393,1425,1409,1437,1385,1408,1425,1273,1281,1241,1263,1157,1104,1126,1051,993,976,964,1017,1018,1110,1053,759,772,686,580,531,568,557,563,483,406,322,301,270,242,215,538\nHalton,E06000006,male,660,725,729,716,785,781,763,784,840,876,802,783,820,860,819,836,805,771,680,622,601,734,722,661,695,714,745,786,772,837,827,749,773,851,757,814,837,858,803,889,775,812,772,746,802,823,796,768,807,897,933,943,864,873,869,880,914,917,892,905,801,785,830,776,727,704,701,699,704,661,688,701,673,696,654,492,432,402,410,334,301,276,252,241,204,181,167,132,109,79,245\nWarrington,E06000007,male,1016,1090,1106,1089,1148,1232,1260,1250,1321,1327,1255,1389,1336,1333,1250,1261,1264,1211,1093,922,933,1035,1048,1114,1287,1201,1219,1242,1296,1340,1383,1372,1346,1386,1380,1411,1449,1405,1371,1364,1445,1417,1368,1288,1280,1318,1412,1414,1499,1573,1587,1547,1597,1637,1655,1665,1614,1561,1585,1473,1391,1336,1275,1197,1168,1140,1064,1049,1048,950,958,1040,1017,1051,1045,873,858,741,745,553,554,591,543,447,393,330,317,249,211,143,497\nBlackburn with Darwen,E06000008,male,944,1012,1035,950,1071,1137,1095,1092,1195,1178,1205,1201,1184,1206,1112,1169,1170,1202,1101,983,927,914,980,986,981,983,1005,1008,967,1037,1053,1011,1034,1014,993,1045,1048,989,1040,1044,1064,999,1010,1020,937,950,976,968,1018,1018,1018,1022,1092,1058,994,953,976,938,925,909,864,858,807,750,762,744,668,612,686,622,587,595,594,656,611,429,402,387,385,315,291,273,272,242,192,196,152,128,118,90,268\nBlackpool,E06000009,male,711,721,765,788,732,822,797,796,834,798,758,822,863,821,810,818,834,805,718,670,689,644,730,791,840,735,761,821,830,910,914,944,889,914,909,868,834,842,820,800,812,829,757,707,747,769,766,831,895,1030,1007,1066,1058,1068,1135,1124,1133,1124,1123,1066,1046,1020,960,922,883,896,768,776,722,699,745,681,771,834,828,603,611,569,512,414,395,392,396,325,293,242,215,172,152,127,430\nCheshire East,E06000049,male,1934,2014,1934,2224,2169,2343,2027,2247,2393,2357,2409,2387,2433,2361,2255,2287,2347,2135,1885,1431,1462,1593,1932,1883,2005,2061,2108,2174,2255,2234,2464,2404,2275,2456,2380,2489,2418,2307,2367,2423,2441,2467,2331,2314,2260,2274,2552,2493,2700,2885,2879,2863,3021,3113,2892,3053,3077,2983,2961,2939,2795,2637,2538,2450,2307,2237,2249,2222,2136,2139,2154,2227,2253,2444,2495,1788,2015,1772,1554,1304,1229,1188,1135,1027,898,819,725,571,529,444,1538\nCheshire West and Chester,E06000050,male,1595,1755,1824,1872,1934,1956,1944,2081,2123,2100,2105,2106,2120,2110,2115,2017,1949,2000,1759,1693,1713,1843,1888,1997,2057,1948,2122,2169,2076,2283,2298,2305,2173,2180,2027,2222,2287,2142,2108,2219,2135,2165,2100,1849,1885,2061,1990,2178,2434,2471,2557,2577,2532,2616,2476,2611,2588,2690,2686,2455,2407,2224,2215,2168,2080,2014,1941,2077,1921,1835,1874,1846,1936,2088,2036,1553,1657,1482,1309,1094,1079,1034,988,827,744,631,567,459,409,359,1181\nAllerdale,E07000026,male,420,406,444,463,483,482,476,455,508,489,553,566,589,540,538,513,537,516,434,417,367,426,482,471,486,434,528,515,549,559,578,511,492,495,471,533,486,499,497,498,528,523,481,484,462,443,518,549,628,619,745,673,737,726,837,761,786,774,727,730,736,713,720,691,642,621,609,599,620,619,613,613,678,682,670,495,492,422,416,357,364,340,281,262,259,216,182,150,138,132,315\nBarrow-in-Furness,E07000027,male,362,350,394,341,383,372,364,375,379,363,362,383,409,361,376,398,384,369,312,371,349,323,430,393,416,412,445,490,432,459,451,435,466,456,413,401,395,423,418,354,358,370,350,338,317,357,366,370,401,454,483,448,478,523,529,515,519,524,522,493,496,478,402,456,380,377,357,379,386,359,360,353,392,430,439,297,304,269,292,222,222,205,194,161,134,124,80,81,70,58,180\nCarlisle,E07000028,male,486,580,533,573,586,606,629,596,603,686,622,670,612,625,563,598,612,613,544,472,512,509,576,578,649,620,642,704,649,729,679,669,669,692,670,683,702,672,658,671,656,609,606,588,560,569,659,655,740,784,775,743,800,757,770,812,828,835,833,773,835,789,799,725,653,626,653,663,633,590,651,626,629,615,664,459,445,441,420,347,314,319,283,270,220,228,158,158,152,120,300\nCopeland,E07000029,male,311,276,319,328,362,335,348,358,407,417,378,371,375,362,384,382,349,343,351,274,284,322,333,354,368,382,386,412,402,401,339,367,407,383,359,411,346,357,401,393,345,348,322,316,335,352,346,411,413,468,439,491,497,483,547,576,588,538,602,548,539,550,528,492,500,482,443,454,378,419,423,418,440,459,445,287,382,282,252,268,198,224,154,181,155,139,110,84,80,75,200\nEden,E07000030,male,203,247,228,199,236,242,253,259,292,273,278,304,300,274,294,301,307,324,242,193,227,232,227,254,281,266,258,240,283,271,299,270,272,266,289,249,286,288,265,295,308,293,271,239,272,319,308,291,372,372,395,385,431,451,452,419,525,497,457,462,435,496,417,447,399,365,410,398,342,405,420,361,374,412,392,314,298,290,254,205,206,206,198,167,145,128,107,83,91,92,198\nSouth Lakeland,E07000031,male,350,344,394,376,452,461,444,481,485,452,477,529,558,559,594,552,609,614,534,465,368,444,475,493,487,502,486,485,544,504,566,578,521,507,489,516,517,542,521,517,539,529,509,491,542,519,597,637,600,728,730,784,753,760,772,842,815,872,851,826,815,833,807,781,736,690,769,738,704,677,665,732,789,864,834,647,618,602,509,457,413,418,365,366,290,294,215,217,174,153,489\nBurnley,E07000117,male,557,594,585,569,660,657,591,623,641,645,658,645,650,683,638,599,617,570,550,502,509,499,471,589,538,545,549,594,615,667,701,596,659,666,627,678,657,638,603,582,558,588,544,566,571,537,554,551,548,637,626,628,685,647,619,590,644,617,620,652,580,554,624,560,508,481,462,456,480,417,424,414,481,506,466,357,342,326,290,235,251,202,193,183,143,123,114,66,85,63,211\nChorley,E07000118,male,575,553,600,641,713,705,687,690,740,762,773,701,719,675,706,722,690,635,538,487,466,512,576,609,604,616,638,644,672,723,762,710,739,783,786,754,792,779,736,813,819,808,712,693,690,770,805,773,834,875,960,893,895,879,889,886,914,886,791,830,819,733,710,738,661,578,622,699,630,599,616,653,685,723,759,535,560,478,491,369,306,340,272,279,222,179,177,133,131,106,264\nFylde,E07000119,male,311,328,360,350,351,354,382,387,414,429,426,421,398,394,418,428,440,426,346,322,285,338,325,363,377,351,382,409,370,392,425,415,428,426,431,404,465,446,475,450,427,445,421,395,374,388,438,439,490,546,553,542,617,599,668,600,624,667,653,686,640,638,607,641,598,560,596,594,534,543,539,506,594,635,600,524,495,483,443,328,287,293,278,264,234,222,172,174,123,125,369\nHyndburn,E07000120,male,491,497,526,518,527,463,514,532,544,556,570,554,536,486,529,562,617,555,478,426,426,442,442,436,499,512,491,519,544,551,532,561,532,561,564,537,523,509,473,483,486,472,448,421,451,472,473,507,467,543,597,596,633,622,616,551,558,532,564,533,499,468,467,430,436,430,388,378,393,429,398,392,426,468,428,315,313,273,281,233,183,192,152,168,147,140,100,76,62,70,177\nLancaster,E07000121,male,614,707,709,687,723,704,695,764,788,794,789,792,763,801,772,756,747,716,1230,1837,1851,1625,1250,969,906,755,805,765,801,801,853,754,821,833,740,781,915,891,787,782,835,807,755,725,677,697,771,787,788,863,904,927,947,884,981,913,1050,950,935,925,911,877,877,815,767,749,778,739,725,731,725,727,792,776,861,608,540,573,528,445,393,378,337,377,291,245,216,197,173,146,435\nPendle,E07000122,male,558,658,593,602,642,660,664,614,734,640,721,713,701,679,686,639,646,581,540,508,498,549,570,544,574,487,479,565,538,598,590,619,638,608,657,601,635,604,650,659,610,641,548,568,530,587,554,576,617,656,594,632,614,642,597,631,611,589,647,613,555,529,548,545,510,472,450,526,490,471,448,511,456,540,483,350,361,336,305,247,233,197,190,172,183,121,134,107,88,55,253\nPreston,E07000123,male,883,919,870,875,972,981,898,920,933,935,987,963,961,961,937,934,957,898,997,1164,1156,1208,1312,1386,1295,1165,1157,1092,1056,1135,1074,1032,1004,1042,1051,1007,987,1020,960,939,987,1015,882,854,852,861,868,949,961,984,958,1005,905,924,990,952,979,916,951,935,903,775,776,699,693,671,631,591,604,559,569,544,616,543,517,425,389,382,361,330,274,292,268,272,208,219,180,149,106,108,335\nRibble Valley,E07000124,male,246,268,265,307,293,291,292,314,320,341,352,359,419,353,388,369,401,389,309,221,265,257,287,302,300,285,296,294,272,295,322,286,331,326,313,297,348,288,351,293,316,323,317,278,323,326,370,394,395,428,486,464,530,503,476,509,518,481,518,514,507,445,439,460,449,377,371,399,376,339,332,374,402,431,411,358,352,274,264,193,237,193,177,166,152,131,126,123,76,79,210\nRossendale,E07000125,male,350,374,418,411,420,419,445,427,465,462,466,475,451,459,485,438,413,405,403,317,294,329,317,350,340,363,422,387,400,395,434,427,438,455,423,428,414,430,415,405,435,439,394,407,384,425,433,476,486,487,536,546,577,553,527,568,517,527,529,528,454,484,448,438,398,402,362,408,380,334,362,382,395,443,370,304,258,249,236,184,178,165,148,148,123,102,89,71,70,47,179\nSouth Ribble,E07000126,male,539,532,547,572,613,622,670,645,672,670,674,689,686,654,632,608,676,566,572,453,504,475,527,584,566,585,529,614,615,640,714,684,644,720,672,639,653,705,649,595,688,656,652,625,652,622,729,712,712,851,838,772,829,807,835,855,879,840,831,758,773,710,680,677,672,652,584,630,578,613,596,606,615,699,677,475,491,485,435,330,315,342,307,273,245,203,198,147,115,97,334\nWest Lancashire,E07000127,male,473,518,547,580,602,567,585,599,647,630,674,645,700,703,672,676,634,663,886,1095,950,836,661,656,631,555,602,613,593,597,706,617,601,636,660,598,602,583,620,594,601,628,557,580,588,596,631,686,710,791,836,808,806,847,855,916,962,878,856,801,788,752,752,753,675,651,617,675,611,643,639,683,653,696,671,518,539,504,457,395,393,325,320,317,289,228,198,150,132,117,349\nWyre,E07000128,male,481,475,505,526,524,603,605,555,572,585,632,645,585,632,582,557,709,696,556,473,489,459,487,494,590,485,524,529,533,547,578,574,572,553,584,522,587,551,524,590,591,600,504,476,483,522,592,613,645,702,736,735,817,789,798,850,879,874,856,833,828,839,768,777,809,719,764,769,709,703,755,767,794,848,808,623,684,612,583,478,456,449,425,378,313,315,268,203,189,151,481\nBolton,E08000001,male,1790,1893,1820,1832,2034,1926,2099,2085,2146,2202,2149,2137,2204,2168,2085,2088,2021,2039,1835,1654,1622,1655,1699,1802,1744,1625,1645,1721,1723,1771,1880,1804,1996,1857,1742,2012,2017,1876,1959,1764,1931,2008,1794,1749,1773,1719,1782,1915,1953,2064,1994,2058,2082,1927,2047,2060,1924,1928,1830,1768,1780,1629,1569,1623,1480,1391,1354,1390,1378,1342,1270,1353,1337,1419,1374,1011,1052,984,904,758,672,651,627,593,433,394,331,280,248,200,654\nBury,E08000002,male,1079,1207,1205,1100,1184,1268,1275,1242,1331,1320,1323,1295,1377,1324,1232,1338,1330,1246,1093,931,888,911,995,1020,1033,1017,1060,1105,1201,1209,1301,1274,1296,1244,1298,1296,1291,1265,1218,1367,1274,1245,1219,1085,1085,1131,1231,1190,1330,1313,1295,1252,1341,1321,1362,1362,1385,1360,1346,1232,1178,1216,1107,1118,1041,923,889,943,919,860,912,930,928,1030,976,719,734,671,593,486,461,507,418,394,323,303,242,199,171,129,439\nManchester,E08000003,male,3206,3643,3404,3373,3637,3649,3685,3714,3841,3779,3808,3801,3770,3671,3555,3376,3418,3149,4551,6426,6661,6242,5882,5655,5534,5378,5368,5238,5019,5101,5239,4851,4611,4859,4283,4449,4336,3996,4043,3924,3970,3869,3441,3371,3207,3320,3201,3163,3077,3142,3156,3148,3204,3033,3043,2876,2887,2604,2653,2401,2356,2235,2151,2146,2009,1824,1831,1597,1620,1474,1509,1337,1406,1359,1223,894,966,830,731,746,660,582,583,528,472,391,369,273,244,211,614\nOldham,E08000004,male,1631,1547,1609,1665,1742,1823,1706,1665,1863,1734,1802,1941,1751,1814,1811,1864,1743,1709,1565,1522,1293,1397,1482,1398,1496,1393,1387,1393,1520,1482,1500,1532,1599,1601,1455,1574,1637,1511,1468,1496,1598,1546,1376,1416,1348,1489,1417,1462,1490,1583,1641,1644,1674,1563,1632,1580,1481,1502,1401,1421,1447,1296,1224,1205,1117,1037,1098,1108,1033,991,970,962,1011,1093,1032,699,733,812,636,552,501,542,483,476,367,284,256,218,158,145,449\nRochdale,E08000005,male,1407,1466,1506,1502,1687,1539,1529,1595,1636,1661,1631,1622,1635,1664,1572,1532,1565,1432,1322,1149,1202,1204,1217,1169,1269,1236,1362,1372,1372,1408,1472,1489,1500,1541,1446,1479,1512,1403,1409,1419,1394,1466,1350,1290,1283,1296,1366,1358,1469,1508,1526,1451,1523,1490,1579,1463,1477,1412,1473,1355,1310,1259,1214,1171,1120,1116,1046,1137,1085,1026,976,956,961,1022,1009,689,733,664,629,499,430,464,431,354,328,273,217,193,164,134,445\nSalford,E08000006,male,1857,1807,1792,1661,1832,1719,1618,1711,1720,1759,1770,1678,1640,1649,1557,1461,1463,1475,1556,1853,2130,2013,2293,2277,2399,2548,2540,2542,2773,2746,2638,2587,2670,2389,2262,2344,2234,2036,2155,1859,1796,1802,1611,1492,1650,1556,1507,1431,1447,1648,1579,1443,1622,1544,1547,1602,1547,1581,1595,1427,1384,1320,1288,1261,1153,1060,974,1005,946,830,923,935,924,991,1044,716,704,640,603,552,452,502,476,418,359,330,280,230,188,152,453\nStockport,E08000007,male,1564,1623,1755,1747,1769,1837,1698,1909,1912,1774,1914,1836,1831,1834,1876,1758,1842,1627,1469,1138,1158,1209,1330,1547,1523,1541,1580,1658,1587,1771,1875,1784,1881,2067,1891,1996,1943,1911,2024,1889,2038,2080,1906,1728,1793,1822,1833,1805,1908,2076,2131,1954,2022,1970,2062,2005,2125,1993,2004,1881,1847,1730,1700,1659,1675,1625,1496,1557,1408,1368,1444,1368,1480,1607,1513,1125,1167,1016,1053,827,823,810,709,710,628,556,519,398,367,291,901\nTameside,E08000008,male,1337,1430,1458,1413,1540,1399,1444,1469,1567,1588,1578,1533,1523,1493,1448,1384,1382,1294,1286,1104,1004,1047,1278,1191,1353,1365,1308,1412,1403,1606,1535,1586,1558,1576,1474,1666,1542,1543,1498,1372,1480,1432,1426,1306,1430,1327,1381,1418,1504,1601,1690,1698,1632,1610,1750,1700,1717,1610,1611,1489,1566,1365,1355,1361,1205,1219,1013,1080,1111,1121,965,1098,1111,1212,1164,771,854,761,732,535,519,525,453,418,373,355,261,182,197,157,441\nTrafford,E08000009,male,1236,1279,1376,1411,1486,1617,1576,1664,1656,1785,1736,1739,1679,1625,1608,1560,1522,1490,1277,955,865,984,1140,1177,1214,1153,1236,1221,1305,1368,1327,1344,1374,1458,1424,1617,1629,1690,1626,1647,1782,1803,1605,1598,1521,1569,1605,1589,1600,1763,1658,1623,1635,1582,1580,1600,1656,1613,1553,1398,1369,1347,1310,1266,1173,1159,1086,1071,977,991,988,968,995,1093,970,752,786,744,684,561,508,553,552,494,429,400,348,293,296,183,649\nWigan,E08000010,male,1716,1749,1777,1921,1965,1977,1954,1960,1939,2048,2107,2152,2031,2067,1917,1960,1961,1901,1751,1486,1654,1692,1705,1763,1865,1839,1897,2035,2089,2144,2291,2250,2227,2251,2196,2127,2228,2157,2099,2123,2090,2067,1929,1781,1864,1876,2087,2039,2210,2593,2498,2414,2498,2490,2582,2401,2523,2305,2228,2230,2174,1904,2008,1885,1757,1713,1640,1696,1575,1611,1655,1698,1721,1918,1794,1417,1393,1288,1252,1065,916,883,788,630,608,477,408,311,254,244,634\nKnowsley,E08000011,male,907,990,1051,1015,1006,1016,964,963,985,1003,983,954,894,946,957,941,937,841,808,732,787,783,829,843,909,919,977,991,989,1082,1080,1154,1044,1046,1043,993,1057,1023,906,898,849,886,796,731,722,746,801,853,882,893,1006,958,1009,989,1056,1069,1131,1150,1114,1078,1094,1079,970,1022,927,876,838,784,787,657,679,673,666,628,640,439,438,407,346,322,320,318,304,281,239,242,162,185,131,116,316\nLiverpool,E08000012,male,2468,2671,2786,2750,2804,2826,2742,2620,2771,2721,2702,2550,2563,2502,2551,2460,2464,2465,3523,5477,5665,5524,4660,3981,3878,3751,3724,3755,3764,3792,3939,3693,3735,3757,3422,3462,3458,3222,3083,3064,3078,3059,2714,2486,2435,2623,2499,2552,2678,2949,2860,2813,2953,2800,2884,2694,2940,2927,3037,2908,2877,2762,2633,2619,2422,2385,2120,2202,2134,2029,2001,1836,1853,1875,1924,1368,1287,1281,1069,1023,948,961,851,771,717,585,484,436,416,288,836\nSt. Helens,E08000013,male,910,965,1029,983,1081,1052,1033,1052,1071,1129,1097,1088,1085,1120,1008,1054,1015,1065,870,816,857,886,975,977,1039,991,1025,1122,1125,1221,1271,1182,1153,1196,1117,1204,1080,1163,1107,1172,1111,1127,1110,960,1017,1071,1152,1145,1254,1265,1385,1274,1351,1300,1333,1326,1372,1313,1288,1273,1239,1198,1133,1144,1030,1011,944,954,964,947,989,928,1011,1078,1022,781,807,707,683,568,488,504,478,436,377,359,288,212,206,168,449\nSefton,E08000014,male,1249,1410,1317,1444,1475,1508,1540,1532,1618,1535,1647,1596,1552,1590,1515,1531,1585,1559,1320,1218,1284,1317,1390,1535,1411,1455,1437,1444,1492,1673,1690,1601,1614,1660,1689,1689,1704,1534,1595,1679,1628,1658,1569,1414,1349,1415,1496,1551,1748,1869,1941,1882,1984,1980,2066,1926,2139,2155,2185,2064,2124,1981,1850,1827,1786,1650,1728,1649,1532,1608,1407,1518,1493,1698,1758,1170,1266,1189,1045,916,908,836,846,759,689,648,567,454,399,310,979\nWirral,E08000015,male,1520,1584,1747,1776,1837,1906,1896,1849,1973,2113,1922,2021,1962,1950,1955,1930,1904,1901,1631,1436,1423,1345,1572,1592,1706,1678,1635,1750,1802,1812,1983,1857,1821,1929,1804,1765,1796,1852,1798,1950,1864,1843,1763,1619,1767,1739,1731,1788,2029,2214,2261,2102,2166,2311,2309,2249,2300,2311,2222,2397,2273,2141,2132,2062,1948,1840,1783,1920,1718,1789,1860,1862,1739,1896,1803,1320,1403,1345,1153,945,936,951,831,750,658,619,516,444,394,330,1046\n\"Kingston upon Hull, City of\",E06000010,male,1592,1574,1614,1621,1765,1725,1714,1701,1883,1825,1789,1653,1724,1657,1754,1538,1715,1486,1564,1720,1950,2014,1900,2073,1842,1807,1965,2034,2059,2044,2111,2012,2083,2017,1976,2040,1876,1836,1721,1935,1716,1655,1596,1539,1589,1693,1570,1534,1765,1775,1793,1707,1755,1757,1823,1773,1821,1697,1637,1737,1589,1499,1525,1465,1370,1265,1220,1288,1190,1133,1130,1012,1103,1150,1178,730,770,604,670,509,458,504,517,412,377,336,309,203,199,153,522\nEast Riding of Yorkshire,E06000011,male,1358,1512,1540,1616,1740,1686,1786,1762,1850,1930,1920,1878,1854,1922,1892,1811,1861,1979,1647,1409,1322,1432,1542,1623,1577,1606,1649,1689,1719,1760,1794,1718,1723,1864,1751,1749,1722,1783,1789,1791,1756,1835,1746,1673,1740,1811,1936,2005,2204,2436,2413,2417,2466,2552,2569,2619,2661,2737,2711,2605,2567,2490,2489,2460,2320,2339,2240,2292,2216,2198,2328,2308,2300,2549,2712,1920,1892,1749,1556,1329,1231,1219,1195,1091,956,817,665,640,548,440,1343\nNorth East Lincolnshire,E06000012,male,779,883,832,876,941,919,964,945,957,1030,1029,998,966,970,1006,1010,936,874,834,681,722,795,836,831,858,859,882,865,946,972,1026,999,1015,1043,994,988,926,843,887,929,867,862,815,779,768,852,879,944,942,1087,1055,1086,1044,1125,1112,1087,1176,1151,1150,1190,1101,1039,951,981,946,907,887,884,807,830,832,814,808,883,962,610,657,572,562,501,431,432,392,384,343,286,307,250,216,147,477\nNorth Lincolnshire,E06000013,male,773,824,821,890,925,930,916,964,1005,1044,986,1078,1056,1038,1022,1032,1043,937,878,737,800,829,846,904,851,992,915,906,1016,1029,1048,1054,991,1069,1034,1052,1092,1032,959,958,994,946,895,849,897,919,967,946,1083,1155,1191,1220,1255,1280,1255,1280,1378,1297,1359,1206,1216,1174,1145,1113,1054,1025,961,986,935,982,937,976,977,1081,1027,729,784,715,659,546,482,499,456,438,367,336,334,234,215,156,518\nYork,E06000014,male,864,843,916,864,923,998,999,1001,1056,1021,1101,1051,1067,1035,1025,919,1094,1002,1611,2493,2366,2316,1826,1539,1395,1284,1319,1280,1245,1201,1300,1274,1244,1237,1226,1195,1257,1220,1205,1308,1209,1199,1202,1127,1096,1037,1124,1178,1211,1323,1334,1270,1319,1259,1276,1289,1301,1314,1248,1221,1170,1081,1111,1139,1014,978,934,958,917,896,957,939,950,999,1054,795,770,677,625,511,539,496,499,457,418,385,282,263,228,181,633\nCraven,E07000163,male,210,215,241,259,232,272,289,256,282,278,290,311,328,319,289,302,302,297,303,203,212,209,252,276,244,232,250,239,272,266,287,268,306,272,259,272,246,263,276,264,363,321,262,260,282,310,291,309,374,402,422,402,441,463,444,415,478,459,446,453,462,442,408,440,399,408,417,446,414,361,356,386,396,455,430,291,335,305,322,236,193,199,183,176,164,142,139,92,88,81,209\nHambleton,E07000164,male,322,365,424,410,453,418,452,425,491,462,468,498,460,469,401,464,490,476,389,392,356,416,386,460,479,464,427,456,471,458,463,465,450,445,413,445,437,378,406,472,492,456,443,402,438,441,463,485,521,530,619,628,683,694,723,772,753,756,720,709,760,716,688,645,626,605,599,619,628,614,641,616,665,698,670,513,568,535,456,357,286,353,317,331,242,246,199,182,148,121,391\nHarrogate,E07000165,male,691,682,762,765,842,880,817,794,844,910,1037,918,1002,1012,964,1017,1351,1656,865,610,585,608,717,754,799,754,765,837,805,862,858,883,797,853,858,888,908,870,874,983,975,983,904,911,916,942,956,1037,1063,1174,1218,1172,1226,1209,1262,1269,1239,1280,1208,1249,1168,1125,1122,1009,1039,1014,967,920,858,820,824,927,916,1105,1101,731,817,735,647,535,525,519,517,449,407,369,279,280,242,202,628\nRichmondshire,E07000166,male,223,189,295,248,251,254,273,292,248,270,299,314,284,267,274,261,259,257,356,660,460,327,316,313,331,379,373,383,340,356,261,279,288,271,282,286,275,253,292,272,248,265,234,227,213,213,255,274,289,336,334,332,328,360,346,345,358,366,366,363,398,333,331,362,340,333,318,313,310,322,286,282,303,349,328,238,250,238,212,181,175,149,176,113,131,99,73,78,60,54,158\nRyedale,E07000167,male,216,213,227,213,260,285,277,261,266,298,287,311,271,303,299,302,301,299,254,206,177,192,262,247,241,264,230,254,243,253,292,253,257,273,236,282,255,247,263,300,269,310,267,257,232,281,296,324,329,335,401,344,367,405,417,438,431,482,442,459,453,432,398,417,384,392,397,382,377,373,413,395,400,422,411,323,339,321,288,214,202,205,186,175,137,149,117,122,89,76,246\nScarborough,E07000168,male,464,480,454,483,534,538,544,536,540,533,552,556,599,571,554,561,604,567,529,457,435,447,464,511,480,535,505,554,584,559,608,624,555,547,617,576,544,522,527,518,569,540,521,445,453,525,570,619,643,711,702,722,749,784,817,798,869,868,850,785,887,866,831,817,755,730,778,796,747,737,726,783,738,903,846,627,649,622,513,389,355,420,398,314,279,250,252,187,152,139,442\nSelby,E07000169,male,470,487,531,532,564,566,491,553,550,545,558,528,531,528,547,522,472,526,437,387,321,397,420,444,450,467,487,547,492,560,575,604,590,585,565,592,586,560,522,542,537,629,535,490,498,525,554,566,643,635,685,670,705,679,703,735,741,712,673,612,704,622,667,591,569,535,545,516,481,473,510,500,512,555,556,415,393,352,353,279,223,245,199,220,180,153,137,126,99,86,224\nBarnsley,E08000016,male,1282,1421,1327,1417,1463,1413,1394,1423,1505,1563,1536,1491,1434,1495,1455,1335,1388,1332,1179,1055,1060,1076,1272,1347,1442,1384,1507,1501,1675,1783,1720,1625,1631,1634,1586,1577,1566,1540,1566,1554,1484,1496,1314,1231,1240,1337,1433,1469,1601,1739,1845,1729,1950,1951,1841,1789,1852,1732,1755,1729,1602,1560,1580,1499,1439,1396,1284,1385,1299,1240,1257,1267,1228,1365,1259,991,1056,935,815,716,647,577,539,521,413,378,338,287,232,163,537\nDoncaster,E08000017,male,1779,1828,1731,1747,1786,1872,1751,1835,1881,1923,1892,2024,1909,1841,1823,1726,1787,1769,1543,1440,1474,1511,1634,1801,1900,1827,1818,2058,2101,2329,2226,2160,2070,2254,2081,2043,2139,1968,2008,2003,2037,1876,1819,1713,1678,1768,1707,1933,1940,2076,2091,2211,2133,2099,2154,2164,2194,2240,2238,2090,2084,2062,1853,1863,1774,1850,1599,1620,1566,1546,1561,1485,1569,1661,1498,1214,1235,1160,1008,873,793,777,690,640,580,531,446,376,346,314,801\nRotherham,E08000018,male,1454,1454,1477,1545,1637,1547,1484,1589,1672,1713,1732,1645,1759,1752,1631,1517,1583,1562,1475,1293,1272,1335,1388,1485,1586,1488,1539,1579,1652,1720,1804,1724,1678,1758,1687,1647,1731,1669,1644,1657,1600,1594,1418,1394,1403,1413,1515,1536,1808,1880,1930,1892,1934,1949,1968,1904,1884,1869,1837,1820,1760,1611,1528,1610,1479,1380,1422,1411,1340,1335,1314,1343,1340,1447,1354,1092,1309,957,871,769,709,738,647,599,537,437,376,317,285,204,631\nSheffield,E08000019,male,2832,3057,3014,3131,3207,3272,3244,3173,3437,3363,3337,3288,3332,3389,3102,3177,3140,3160,4031,5620,5533,5846,5123,4803,4310,4144,4027,3970,3890,4066,4001,3798,3809,3730,3685,3640,3435,3509,3335,3161,3416,3460,3181,3008,3040,3063,3115,3101,3385,3326,3522,3570,3710,3692,3501,3585,3499,3337,3470,3286,3177,2970,2912,2927,2680,2583,2404,2579,2380,2224,2220,2312,2294,2515,2468,1712,2025,1816,1643,1369,1294,1310,1202,1131,1038,828,765,651,468,435,1480\nBradford,E08000032,male,3379,3652,3673,3633,3825,3957,3805,4071,4003,4139,4175,4390,4276,4258,4110,3953,4191,4027,3782,3402,3118,3247,3449,3229,3346,3198,3265,3352,3442,3487,3521,3586,3559,3593,3598,3708,3614,3658,3700,3595,3731,3681,3578,3213,3266,3205,3296,3363,3381,3600,3455,3446,3396,3453,3377,3150,3347,3071,3235,3092,2992,3011,2775,2755,2675,2641,2371,2415,2385,2187,2125,2074,2134,2232,2131,1373,1468,1360,1279,1044,1049,1037,993,910,818,684,641,507,452,404,1223\nCalderdale,E08000033,male,1111,1139,1167,1172,1235,1276,1289,1292,1388,1326,1398,1349,1366,1340,1306,1286,1364,1309,1108,947,874,1008,1083,1108,1097,1123,1111,1200,1214,1133,1200,1225,1135,1233,1201,1215,1254,1249,1241,1206,1301,1292,1276,1207,1163,1216,1196,1298,1495,1557,1485,1518,1621,1488,1499,1583,1574,1485,1462,1345,1343,1267,1240,1279,1206,1112,1056,1102,1047,1006,1033,1001,1091,1126,1046,777,851,751,703,517,519,484,412,411,382,295,258,252,184,143,499\nKirklees,E08000034,male,2405,2492,2602,2555,2744,2702,2750,2826,2963,2901,3008,3026,2975,2905,2820,2885,2830,2859,2692,2544,2593,2498,2651,2586,2548,2659,2471,2479,2615,2636,2706,2624,2615,2786,2675,2804,2702,2731,2647,2629,2775,2843,2719,2463,2493,2555,2594,2752,2843,3066,3132,3043,3113,3099,2986,3025,2922,2788,2747,2712,2596,2434,2403,2452,2263,2147,2058,2093,2005,2037,2008,1996,2009,2154,2082,1554,1634,1394,1220,1090,975,981,984,870,728,682,551,435,388,313,1001\nLeeds,E08000035,male,4564,4655,4911,4846,4970,5194,4983,4907,5300,5124,5124,5049,5011,4706,4784,4571,4464,4383,5243,7106,7125,7291,6679,6403,5991,6029,5914,5958,5892,5835,6322,5742,5816,5754,5746,5716,5465,5617,5392,5492,5594,5387,5047,4752,4687,4939,4635,4893,5099,5118,5298,5036,4979,4814,4966,5020,4966,4704,4657,4348,4268,4053,4017,3886,3691,3454,3228,3405,3220,3150,3111,3137,3232,3379,3269,2381,2480,2297,2101,1744,1578,1623,1578,1451,1336,1213,981,864,740,588,1907\nWakefield,E08000036,male,2018,2071,2081,2016,2167,2130,2091,2163,2219,2188,2234,2160,2137,2124,2019,2054,1972,2044,1658,1486,1596,1689,1722,1872,2108,2102,2196,2283,2429,2500,2499,2482,2433,2433,2438,2472,2413,2312,2276,2198,2262,2239,1927,1936,1930,2078,2140,2156,2386,2563,2643,2637,2605,2611,2579,2609,2532,2478,2459,2335,2281,2195,2135,2129,1902,1934,1775,1850,1697,1684,1727,1720,1802,1843,1790,1390,1422,1338,1156,904,858,836,796,721,628,529,453,394,326,259,767\nDerby,E06000015,male,1547,1457,1596,1491,1652,1616,1752,1674,1748,1745,1764,1812,1701,1814,1691,1571,1669,1741,1645,1964,1810,2085,1944,1837,1792,1951,1893,1793,1820,1910,1913,1862,1736,1811,1675,1830,1728,1715,1807,1815,1872,1542,1520,1515,1664,1502,1645,1737,1620,1776,1786,1673,1771,1808,1637,1587,1695,1616,1538,1531,1464,1464,1285,1254,1139,1179,1049,1187,1098,1076,1019,1067,1009,1089,1122,823,893,738,663,628,513,594,548,521,437,378,365,307,289,217,683\nLeicester,E06000016,male,2275,2326,2250,2309,2427,2426,2594,2480,2584,2639,2550,2597,2716,2708,2600,2550,2609,2301,2913,3676,4187,4034,3526,3069,3034,2721,2735,2682,2704,2655,2732,2647,2620,2589,2665,2540,2679,2649,2606,2737,2698,2532,2472,2275,2394,2330,2197,2144,2268,2240,2264,2303,2213,2122,2019,2033,1972,1910,1955,1791,1854,1909,1716,1651,1525,1485,1421,1470,1274,1252,1194,1122,1101,1096,966,757,713,702,664,500,498,504,484,425,381,333,327,235,212,224,647\nRutland,E06000017,male,134,176,145,192,172,202,197,223,211,229,217,251,228,314,362,317,346,388,301,173,167,211,258,217,287,234,230,258,289,266,248,219,285,221,227,233,190,242,228,278,249,277,239,233,235,248,210,225,251,287,308,270,278,276,293,308,262,306,301,261,277,280,273,242,255,239,215,257,260,234,259,268,257,280,311,203,246,189,215,162,155,133,145,134,101,109,96,73,72,57,192\nNottingham,E06000018,male,1731,1812,1829,1856,1950,1952,1964,1920,1986,1980,2022,1953,1912,2045,1775,1768,1663,1771,3737,6965,6517,5612,3705,2846,2495,2312,2289,2343,2444,2297,2435,2407,2304,2323,2111,2268,2293,1964,2013,1874,1934,1943,1816,1674,1764,1753,1770,1709,1842,1863,1849,1720,1706,1763,1752,1866,1702,1640,1706,1568,1547,1434,1381,1244,1278,1159,1130,1037,1011,966,1024,1002,916,962,913,725,711,640,590,490,480,460,438,436,351,331,294,253,222,180,617\nNorth Northamptonshire,E06000061,male,1931,2101,2091,2023,2245,2206,2237,2294,2327,2372,2382,2378,2430,2381,2346,2274,2259,2303,1924,1568,1657,1633,1764,1913,1965,1949,2119,2066,2338,2413,2373,2425,2460,2443,2402,2416,2336,2396,2413,2311,2494,2447,2226,2181,2159,2219,2272,2275,2387,2630,2630,2599,2685,2592,2718,2666,2594,2486,2386,2279,2235,2079,2014,1979,1854,1762,1755,1815,1643,1657,1657,1640,1714,1852,1837,1386,1404,1270,1135,977,842,794,807,717,585,560,454,372,334,303,844\nWest Northamptonshire,E06000062,male,2288,2356,2461,2504,2567,2601,2600,2633,2769,2834,2788,2797,2758,2799,2614,2473,2485,2463,2299,2232,2349,2438,2446,2550,2577,2552,2700,2675,2816,2989,3027,2997,2946,3221,2912,3029,2904,2878,2965,2871,3110,2988,2876,2679,2667,2637,2852,2904,2895,3021,3027,3033,3056,3033,2918,3033,2970,2917,2757,2748,2455,2390,2319,2242,2165,1980,1948,1949,1856,1811,1801,1919,1846,2183,2076,1545,1546,1423,1264,1109,963,862,873,804,681,588,528,443,415,356,1043\nAmber Valley,E07000032,male,554,592,608,614,742,670,633,700,705,706,739,728,685,702,679,694,708,634,601,567,536,573,601,636,669,671,707,676,735,758,821,718,717,753,699,715,653,746,709,687,695,759,721,616,696,693,812,805,913,964,977,941,974,1039,996,937,1047,957,998,937,868,836,839,801,832,797,701,743,682,763,739,786,790,803,829,606,650,561,556,441,372,349,378,277,248,222,201,139,173,132,343\nBolsover,E07000033,male,411,421,447,466,403,449,427,439,437,469,455,456,457,493,459,440,423,416,369,338,360,388,441,423,480,464,506,528,519,574,561,538,526,500,509,521,491,493,529,423,429,477,439,388,432,481,479,447,563,573,636,589,669,685,618,618,629,603,604,538,554,542,551,494,503,454,453,424,410,415,428,453,420,432,426,385,414,322,316,254,224,208,177,182,144,114,112,102,92,51,182\nChesterfield,E07000034,male,472,485,540,519,527,534,530,582,588,604,628,571,601,595,540,577,514,558,511,427,395,505,639,578,601,586,632,680,666,702,668,576,612,618,686,562,613,612,604,667,644,675,575,572,541,572,626,631,710,751,756,759,800,740,796,826,790,795,769,751,734,691,688,658,652,638,566,606,596,557,563,560,522,610,564,481,474,435,400,327,337,301,255,246,196,162,187,149,117,108,323\nDerbyshire Dales,E07000035,male,242,263,254,261,312,284,365,276,330,384,372,350,376,411,394,384,399,418,342,288,247,281,325,332,317,303,275,285,326,335,311,325,318,330,294,309,325,289,312,325,355,372,335,365,352,411,433,417,481,511,514,528,603,581,607,652,643,606,624,570,627,557,564,549,531,519,462,519,481,506,511,521,507,570,566,425,448,421,368,312,263,259,247,238,207,179,146,122,106,111,278\nErewash,E07000036,male,463,559,547,591,626,646,655,689,699,658,673,682,658,666,625,624,640,643,533,531,493,567,602,593,616,650,650,707,675,724,733,733,720,751,713,687,685,674,670,677,700,703,653,575,582,644,702,750,737,830,845,843,842,883,878,886,808,836,855,829,769,720,683,712,619,589,596,590,577,585,576,601,614,671,654,483,552,457,390,359,309,324,274,268,228,217,170,171,132,115,331\nHigh Peak,E07000037,male,379,456,423,452,467,453,485,448,522,522,525,521,532,574,500,499,529,509,446,307,364,393,464,498,466,426,466,450,492,519,577,496,477,550,526,510,509,507,500,519,550,485,511,467,492,465,579,544,640,675,714,696,720,771,762,733,744,775,744,760,699,630,686,658,617,583,514,568,545,534,521,544,524,590,585,439,423,390,331,286,253,264,232,193,185,150,136,97,84,93,242\nNorth East Derbyshire,E07000038,male,454,463,475,489,565,518,503,499,589,591,569,578,562,547,540,499,536,505,512,395,392,417,518,460,497,554,589,531,576,555,546,566,551,540,541,511,541,551,557,548,604,632,479,530,513,580,543,611,689,699,740,719,755,719,854,780,786,742,794,752,748,716,699,720,671,616,641,664,587,576,622,630,641,687,707,545,626,568,475,373,362,338,378,283,241,217,189,168,143,105,347\nSouth Derbyshire,E07000039,male,556,556,635,592,585,662,638,609,679,713,680,642,701,721,695,700,629,630,548,469,436,484,559,579,577,605,633,660,683,727,721,736,666,678,641,666,623,722,646,683,682,652,616,588,638,655,688,698,781,842,812,775,797,863,917,841,806,725,717,722,687,625,628,628,563,551,530,550,575,537,543,519,491,549,579,396,470,415,381,254,248,245,240,185,158,154,113,111,90,95,253\nBlaby,E07000129,male,500,559,606,626,661,626,645,641,671,680,592,605,631,684,603,631,613,589,522,435,425,453,512,528,516,569,571,565,625,661,665,658,653,717,640,654,688,665,657,650,693,660,571,608,580,592,645,608,690,681,764,691,711,727,744,686,725,674,681,706,685,627,639,600,592,531,517,529,526,512,514,532,512,611,566,410,483,419,383,297,266,275,283,226,238,207,158,152,142,96,289\nCharnwood,E07000130,male,858,863,973,1002,1014,1042,968,963,1029,1074,1070,996,987,1022,942,1061,966,1045,1804,2738,2289,2125,1972,1424,1153,1072,1059,1090,1091,1102,1201,1185,1115,1116,1119,1158,1206,1129,1052,1158,1157,1090,1039,998,990,993,1076,1057,1100,1202,1223,1238,1214,1162,1202,1189,1216,1167,1127,1086,1159,999,1054,976,1045,942,892,905,931,870,908,843,919,929,930,720,695,685,628,503,460,444,417,381,345,323,243,233,201,173,529\nHarborough,E07000131,male,448,482,499,510,507,559,528,583,528,556,586,604,649,647,582,652,663,645,524,388,399,431,433,513,504,491,545,452,505,530,536,534,545,576,485,563,556,507,540,564,643,602,590,540,563,589,624,617,701,754,788,690,773,741,803,744,750,732,709,745,763,632,645,612,551,617,507,532,531,540,528,529,550,604,622,455,482,452,414,319,277,304,283,237,227,194,175,156,123,110,331\nHinckley and Bosworth,E07000132,male,510,592,593,617,645,628,615,618,695,696,659,662,683,659,680,623,666,592,549,448,449,473,574,524,572,609,636,670,634,687,727,739,675,712,662,752,697,667,676,715,699,689,649,604,663,689,670,715,726,810,826,832,845,871,892,855,823,830,777,819,799,765,697,669,667,641,629,663,640,643,698,622,734,741,685,545,578,513,454,330,378,338,295,309,235,209,200,153,151,111,373\nMelton,E07000133,male,221,262,229,265,267,260,279,290,299,319,299,293,312,319,287,272,291,303,241,176,212,204,239,238,243,281,232,260,245,258,273,300,294,300,244,285,259,255,274,271,297,294,270,284,252,245,304,307,318,370,369,381,443,422,400,427,458,441,435,385,377,346,342,344,341,307,326,325,348,316,309,326,332,365,341,248,283,255,213,162,159,187,154,126,106,100,85,77,72,42,178\nNorth West Leicestershire,E07000134,male,554,547,581,588,564,589,578,549,618,627,619,648,603,624,627,615,617,597,499,477,462,525,596,587,598,603,567,634,640,673,689,656,659,629,621,608,672,619,613,649,645,652,587,560,625,620,650,707,748,812,798,790,801,834,802,771,792,786,723,735,693,666,666,606,589,572,561,572,540,586,577,558,573,597,659,462,516,428,383,314,277,289,249,227,177,155,148,104,102,85,246\nOadby and Wigston,E07000135,male,261,265,301,323,352,334,362,333,367,400,367,343,340,370,325,342,366,336,514,600,309,272,318,291,313,307,354,310,327,321,317,326,323,318,345,382,320,319,335,334,366,372,308,310,314,333,327,346,354,332,417,333,393,376,379,357,371,366,374,369,375,364,342,375,297,310,286,309,294,264,262,284,301,288,272,225,259,220,201,177,166,172,152,153,154,129,113,108,95,68,238\nBoston,E07000136,male,350,393,377,428,377,413,423,415,428,448,438,483,445,455,391,380,430,385,397,320,311,363,395,385,407,381,403,435,431,444,465,462,506,463,474,466,473,468,445,477,425,425,430,416,379,398,392,444,492,508,430,444,481,476,470,500,526,483,446,449,473,430,412,428,402,379,383,366,355,381,351,369,366,376,384,314,309,262,253,247,198,186,187,149,135,133,118,87,98,68,257\nEast Lindsey,E07000137,male,554,583,572,618,595,661,622,673,644,722,744,743,724,777,673,713,667,717,659,548,556,616,622,671,625,663,712,669,660,654,696,645,657,688,647,577,601,592,610,639,643,613,624,540,599,612,678,691,815,863,955,932,984,994,1018,1095,1104,1145,1147,1147,1113,1140,1090,1148,1104,1037,1091,1086,1134,1052,1145,1111,1098,1285,1324,1060,1022,943,834,701,633,569,521,521,466,401,305,280,239,211,655\nLincoln,E07000138,male,526,511,547,513,565,574,534,508,571,577,539,570,620,541,507,505,492,560,946,1645,1984,1652,1141,896,859,814,850,842,785,767,766,797,829,788,744,746,696,665,653,596,662,606,597,541,523,545,597,550,585,633,617,582,604,607,606,595,587,591,606,579,584,526,486,433,502,396,397,409,398,404,374,383,403,392,404,299,269,298,234,180,218,204,169,142,139,133,107,103,78,78,228\nNorth Kesteven,E07000139,male,508,507,538,606,671,663,660,634,640,747,662,675,692,624,628,642,651,690,581,523,506,539,604,635,663,660,688,631,677,685,701,696,686,723,631,633,731,690,674,639,660,734,651,574,561,612,681,685,781,858,818,821,892,887,889,887,894,932,919,867,809,754,741,712,695,644,710,666,600,671,644,708,631,828,793,596,646,553,494,465,427,409,396,383,278,249,237,198,137,137,399\nSouth Holland,E07000140,male,490,468,498,520,524,516,485,495,554,513,538,548,557,554,516,532,450,502,459,378,397,445,479,487,522,475,552,513,569,490,570,596,592,598,562,595,545,503,545,524,524,565,536,491,518,508,558,562,631,638,721,653,667,669,712,711,732,697,717,661,658,588,614,612,590,530,569,557,508,538,561,556,601,657,664,454,452,460,428,336,295,344,281,287,270,218,178,166,147,117,386\nSouth Kesteven,E07000141,male,654,653,669,741,762,834,831,815,812,881,892,870,893,928,839,838,832,825,675,590,521,558,645,649,714,725,719,754,744,720,719,754,823,811,768,715,753,755,794,822,872,845,777,762,748,860,825,890,944,1068,1047,1061,1075,1057,1046,1055,1138,1091,1084,977,1035,918,946,897,877,820,855,801,819,826,813,841,809,925,938,758,673,681,613,516,445,472,409,355,349,295,243,201,190,146,524\nWest Lindsey,E07000142,male,444,464,445,503,470,498,532,536,530,573,547,543,568,552,530,542,581,535,432,392,370,404,427,455,470,471,439,469,451,492,543,497,444,480,483,474,522,458,495,492,505,476,506,481,430,498,536,568,558,632,636,691,688,720,765,738,724,713,735,739,774,683,673,631,639,619,624,599,623,605,600,636,644,662,717,506,565,521,478,376,355,308,314,274,242,240,207,151,118,95,313\nAshfield,E07000170,male,628,712,664,772,738,784,734,793,828,862,814,752,762,725,759,753,747,685,644,548,603,610,667,667,731,674,703,724,782,815,810,832,846,869,746,870,756,759,783,753,793,757,709,697,687,727,691,805,831,878,931,893,955,959,922,947,948,911,965,864,819,839,744,705,715,648,634,618,640,664,632,648,649,672,633,492,557,524,506,383,346,360,305,271,223,206,172,150,120,97,325\nBassetlaw,E07000171,male,529,611,564,639,672,714,620,660,687,673,723,651,682,689,648,692,672,629,554,449,515,557,612,631,676,642,725,693,692,734,761,703,738,707,746,722,648,696,675,637,727,689,658,609,627,705,635,729,757,813,879,825,935,903,893,895,990,912,920,894,856,771,759,793,731,677,718,692,647,616,669,638,732,737,737,534,623,537,502,381,367,337,324,283,254,205,215,167,125,134,389\nBroxtowe,E07000172,male,470,549,560,547,584,574,616,597,630,677,636,662,589,641,584,556,520,491,578,671,677,650,677,641,612,665,699,724,700,727,772,715,729,705,753,733,712,691,643,662,634,666,643,592,614,627,656,668,693,712,823,738,771,832,813,802,771,789,749,673,728,675,658,642,635,627,589,593,596,568,598,582,630,684,713,473,542,488,448,340,369,306,305,289,238,187,191,178,153,126,358\nGedling,E07000173,male,551,585,626,664,638,691,658,648,707,706,742,722,699,716,717,630,685,633,557,467,448,507,528,588,602,603,645,691,666,698,688,676,709,746,690,733,664,735,722,713,727,758,726,668,682,672,678,734,784,813,863,785,886,867,836,860,874,832,833,784,821,696,723,675,667,644,619,606,653,651,630,642,670,702,708,488,514,439,438,374,328,310,337,307,261,216,204,185,136,126,356\nMansfield,E07000174,male,558,622,629,604,628,618,672,704,676,692,645,624,723,713,628,588,614,584,531,437,488,496,543,618,595,653,690,687,755,786,785,817,732,775,765,788,815,782,718,730,705,728,653,583,612,590,612,641,739,799,766,778,770,789,831,842,820,758,789,789,773,685,700,686,629,604,589,599,565,547,590,564,525,576,534,441,475,417,359,310,255,266,228,242,195,188,154,117,104,89,291\nNewark and Sherwood,E07000175,male,621,579,597,652,651,624,646,635,751,723,690,744,658,693,708,664,667,698,625,518,603,575,649,621,668,717,703,729,758,749,765,740,733,774,712,707,720,719,716,664,751,730,712,644,650,703,702,719,836,878,877,862,959,969,917,923,872,949,960,854,839,824,813,771,745,747,681,753,650,700,715,737,671,801,799,579,594,573,490,416,398,356,338,301,300,224,179,181,160,132,400\nRushcliffe,E07000176,male,543,586,599,645,645,683,698,705,724,770,762,761,727,748,709,713,734,669,595,516,658,661,598,641,637,639,553,630,611,630,654,617,629,683,680,709,639,703,723,747,818,723,761,719,748,685,829,783,824,892,857,823,902,842,859,841,874,892,820,815,814,736,758,700,664,617,614,605,612,663,640,656,617,696,732,500,556,514,454,365,351,333,312,282,296,227,210,190,160,165,418\n\"Herefordshire, County of\",E06000019,male,766,867,871,922,913,982,958,997,1028,1028,1076,1034,1034,1054,1036,1013,1036,987,910,781,751,827,878,909,910,962,954,930,948,1032,1036,1015,1029,1076,1002,984,999,1008,983,1059,1046,989,938,894,940,981,1067,1089,1129,1220,1236,1273,1306,1332,1439,1416,1378,1365,1398,1486,1360,1405,1317,1321,1251,1267,1166,1243,1192,1176,1206,1239,1276,1334,1300,1015,1023,1005,877,753,695,664,618,561,523,449,385,348,295,261,816\nTelford and Wrekin,E06000020,male,1036,1099,1083,1086,1133,1184,1113,1251,1257,1294,1221,1266,1302,1239,1198,1179,1164,1153,1024,1018,1095,1141,1144,1090,1085,1126,1081,1174,1150,1243,1285,1194,1216,1210,1183,1252,1238,1195,1158,1175,1120,1135,1091,1034,1041,1104,1187,1160,1234,1350,1369,1320,1334,1313,1339,1333,1245,1306,1147,1193,1109,1021,1046,983,898,914,920,882,900,909,827,929,873,846,843,620,714,666,576,507,442,422,379,357,315,245,215,208,149,131,400\nStoke-on-Trent,E06000021,male,1512,1559,1625,1546,1658,1711,1656,1729,1767,1751,1733,1737,1664,1762,1612,1564,1662,1427,1593,1680,1771,1776,1713,1745,1734,1536,1655,1655,1753,1845,1841,1856,1928,1872,1799,1837,1738,1766,1738,1718,1731,1607,1630,1410,1441,1503,1565,1494,1669,1693,1713,1750,1813,1666,1688,1700,1622,1623,1644,1613,1525,1445,1483,1354,1391,1303,1301,1201,1228,1130,1055,1149,1150,1251,1160,909,905,837,820,648,586,560,524,476,397,362,303,240,221,196,560\nShropshire,E06000051,male,1370,1435,1463,1482,1653,1696,1621,1637,1793,1619,1761,1853,1769,1715,1743,1786,1812,1894,1884,1480,1468,1598,1577,1784,1692,1707,1830,1770,1716,1729,1826,1772,1775,1856,1748,1776,1709,1799,1702,1602,1792,1701,1632,1543,1566,1711,1731,1859,2051,2400,2284,2255,2344,2327,2584,2472,2532,2488,2558,2530,2486,2258,2277,2151,2114,2076,2051,2178,1906,1975,1991,2041,2187,2215,2153,1777,1778,1745,1495,1244,1153,1170,1060,895,883,742,676,551,486,431,1285\nCannock Chase,E07000192,male,532,584,567,585,576,543,589,569,631,578,593,569,587,528,577,552,555,598,501,485,432,483,555,547,614,595,621,665,647,717,762,690,680,712,671,658,660,641,610,600,619,580,608,460,513,556,613,560,727,758,728,802,811,791,794,773,766,774,740,677,647,580,669,569,559,534,554,566,473,457,490,507,522,514,522,444,439,373,339,286,248,258,224,225,183,177,125,116,84,81,242\nEast Staffordshire,E07000193,male,702,719,704,740,775,776,755,725,811,765,795,805,803,756,682,759,757,767,651,617,587,644,692,708,740,790,803,798,844,924,958,869,899,936,772,883,850,801,810,799,869,839,780,692,700,715,739,769,877,866,920,854,904,915,893,873,896,785,866,853,809,796,741,756,699,679,625,598,614,577,597,591,603,616,571,450,468,529,371,358,304,307,263,263,231,172,191,138,120,95,327\nLichfield,E07000194,male,469,535,479,581,532,559,546,546,595,603,576,598,619,610,588,607,601,598,532,525,499,571,561,584,596,574,563,600,571,626,637,628,573,589,561,620,582,566,545,598,620,642,606,530,573,608,668,653,730,791,835,789,812,789,796,803,822,771,765,776,751,634,635,650,650,593,554,627,611,567,581,652,665,767,687,541,602,585,524,455,395,353,319,327,259,227,165,162,137,105,338\nNewcastle-under-Lyme,E07000195,male,557,576,569,618,643,625,684,675,635,714,647,702,714,662,632,671,758,697,730,988,947,969,856,754,727,646,677,652,676,736,732,708,756,734,759,741,727,689,680,681,711,710,634,677,647,676,714,709,768,867,895,878,872,831,881,868,885,872,831,875,871,765,767,808,743,650,675,722,639,646,658,665,734,732,739,543,588,542,468,393,369,348,344,307,297,248,216,154,166,141,377\nSouth Staffordshire,E07000196,male,491,459,477,530,578,547,512,546,568,583,558,581,544,589,539,564,626,586,513,531,517,569,622,699,627,655,632,619,646,630,655,604,676,650,681,653,619,677,631,634,624,694,614,520,571,571,629,686,724,755,798,809,836,860,902,858,903,850,813,905,826,823,767,737,744,640,722,665,672,626,686,710,692,750,729,554,583,608,539,482,403,451,388,364,293,283,228,158,155,124,368\nStafford,E07000197,male,624,711,698,631,745,737,729,745,831,805,782,739,777,791,765,748,696,722,633,488,546,572,694,685,770,739,710,828,765,810,842,857,837,887,782,821,882,805,819,818,861,874,771,757,739,734,877,881,959,979,1026,989,1036,1055,1025,1018,1060,990,961,1000,950,905,907,881,796,823,758,792,785,759,788,812,805,827,847,681,665,637,620,511,485,433,449,385,330,281,269,205,180,126,482\nStaffordshire Moorlands,E07000198,male,386,396,391,429,446,460,511,483,502,539,530,534,554,553,498,496,535,523,504,416,373,423,493,464,431,460,440,428,455,469,500,492,506,484,464,506,493,494,472,530,507,448,452,459,477,487,572,601,684,694,746,794,750,793,786,722,743,810,787,702,714,697,708,666,615,612,625,633,642,627,585,672,671,770,679,554,568,525,466,408,358,340,335,288,276,194,228,155,132,117,337\nTamworth,E07000199,male,464,451,434,487,499,476,420,479,518,507,506,534,523,501,429,482,500,454,401,392,374,414,410,478,446,444,501,494,504,558,576,565,533,567,544,509,507,551,509,473,516,494,467,422,420,443,447,482,508,586,615,569,633,567,566,562,518,485,483,442,475,471,415,424,441,423,419,431,415,386,359,408,437,431,414,301,344,302,242,229,161,195,164,147,146,117,83,81,52,38,147\nNorth Warwickshire,E07000218,male,287,333,315,337,338,368,331,363,397,371,373,348,369,350,367,325,389,357,323,298,287,323,298,356,359,345,366,354,386,399,428,369,396,419,373,419,381,376,350,328,349,339,358,300,346,364,401,400,432,471,475,492,552,461,528,556,508,469,516,484,442,453,441,437,412,394,346,397,345,359,367,368,366,421,389,298,321,317,269,219,182,196,183,161,142,118,104,93,80,64,172\nNuneaton and Bedworth,E07000219,male,761,785,811,799,835,863,802,810,857,847,880,846,832,832,785,771,724,744,639,606,604,637,765,761,772,854,799,844,829,922,1004,916,959,917,898,900,883,902,857,824,885,846,804,724,715,793,831,818,894,927,926,964,962,900,952,974,989,907,843,872,863,809,761,742,747,697,690,695,674,643,630,735,599,645,707,517,597,513,450,414,322,328,327,274,247,200,162,177,118,109,317\nRugby,E07000220,male,602,651,673,664,670,695,688,713,743,734,782,695,777,718,720,793,754,722,596,467,503,536,561,639,653,686,693,704,751,817,816,849,850,778,866,791,840,751,778,836,790,817,759,712,721,749,760,714,777,848,830,852,815,777,813,787,781,782,774,761,686,682,619,605,558,524,497,508,466,486,514,473,511,534,558,452,458,441,378,347,365,281,288,251,216,210,164,131,101,106,372\nStratford-on-Avon,E07000221,male,636,584,640,666,672,724,689,658,716,722,753,753,790,790,762,670,757,697,636,484,486,484,602,628,638,596,644,615,650,737,748,735,690,749,738,657,709,703,703,748,769,781,766,720,715,773,789,804,845,996,930,1003,965,996,1049,1053,1079,1061,994,990,990,971,901,885,820,813,806,815,809,821,780,795,836,934,917,771,779,736,644,476,459,478,483,390,379,331,281,208,212,155,568\nWarwick,E07000222,male,723,807,798,781,780,781,848,787,862,871,831,817,863,816,787,750,886,748,996,1439,1494,1355,975,980,862,1000,958,990,1011,1040,1029,1076,1101,1060,1042,993,1051,909,964,1030,1045,924,956,914,893,897,996,934,983,963,965,984,1064,1007,972,997,955,982,918,933,822,839,797,736,731,710,695,692,662,606,670,699,689,696,727,587,594,541,531,407,372,378,367,341,303,283,177,207,168,160,484\nBromsgrove,E07000234,male,443,470,564,543,559,541,568,579,608,623,682,614,626,645,650,587,624,624,499,402,403,407,473,492,505,511,453,484,481,497,522,550,533,538,582,560,579,542,560,581,620,589,558,503,568,626,600,643,698,665,674,694,728,770,776,753,739,726,686,705,650,609,630,629,573,550,543,600,536,554,493,549,581,577,554,471,483,414,403,342,302,328,312,269,258,203,193,163,131,125,408\nMalvern Hills,E07000235,male,292,307,326,314,351,353,401,403,420,420,433,434,445,439,484,472,509,498,435,289,275,312,366,412,378,344,330,326,349,363,381,361,347,346,388,349,356,356,323,393,410,414,397,373,371,393,425,436,472,543,583,529,561,590,636,614,665,624,661,629,622,621,571,582,548,523,488,550,535,523,534,553,585,593,641,427,493,442,379,359,325,327,302,258,236,223,214,162,140,124,355\nRedditch,E07000236,male,489,501,498,525,541,551,560,533,568,582,570,553,548,583,543,522,550,492,432,397,382,421,431,478,500,533,509,564,569,610,655,659,651,608,592,576,577,617,583,561,626,629,577,578,560,572,557,533,541,575,612,585,580,560,577,582,554,536,554,498,524,475,452,497,490,434,444,457,452,473,447,509,479,452,425,362,358,332,281,225,197,176,170,138,157,92,97,69,63,54,203\nWorcester,E07000237,male,502,533,548,541,541,593,588,586,619,643,619,613,645,576,582,595,613,599,601,685,724,692,668,681,701,653,684,722,758,731,764,777,703,756,690,690,720,655,683,639,720,674,655,626,575,580,618,650,714,734,760,726,802,682,700,722,760,727,673,686,632,603,616,508,511,517,483,483,477,466,418,450,473,498,486,349,365,329,313,259,239,231,219,205,190,171,141,123,86,88,246\nWychavon,E07000238,male,573,658,627,664,703,724,654,664,792,697,738,684,766,767,731,735,709,743,643,488,497,517,616,642,652,672,707,665,664,738,679,722,749,774,791,755,760,757,728,694,749,738,727,677,669,728,780,793,892,879,924,937,957,1038,1064,1008,1008,1081,967,1012,951,869,897,870,822,809,802,810,825,800,825,839,880,887,930,684,757,701,584,513,469,442,419,409,363,304,246,225,197,169,529\nWyre Forest,E07000239,male,458,445,514,512,545,584,535,561,595,581,621,589,584,581,563,580,588,514,541,430,400,455,484,506,518,535,515,503,540,589,563,560,570,523,522,589,549,568,544,537,541,583,523,519,510,552,607,659,657,651,744,751,736,759,804,749,770,750,745,698,657,623,620,660,571,579,553,621,612,598,634,645,712,756,740,589,601,569,499,400,362,344,352,303,239,217,187,175,130,120,350\nBirmingham,E08000025,male,7013,7524,7748,7640,8084,8014,8298,8218,8638,8525,8672,8474,8638,8558,8331,8070,8157,8398,8787,9863,9534,9835,9289,8397,8370,8031,8133,8035,8026,8125,8356,8119,7972,8051,7920,7827,7868,7635,7583,7498,7611,7304,7205,6849,6884,6736,6682,6811,6987,6851,7207,7023,7101,7016,6735,6371,6386,6169,6075,5787,5667,5428,5217,5245,4775,4358,4324,4203,4106,3927,3674,3503,3448,3507,3364,2687,2956,2667,2450,2150,1865,2072,1857,1620,1550,1365,1260,948,953,741,2491\nCoventry,E08000026,male,2006,2064,2131,2025,2249,2125,2183,2227,2320,2416,2356,2323,2261,2211,2216,2080,2027,2061,2893,3914,4190,3770,3292,2764,2649,2598,2406,2439,2369,2402,2421,2603,2395,2512,2460,2490,2446,2276,2190,2518,2273,2307,2105,2187,1884,1995,1974,1990,2101,2151,2169,2176,2271,2170,2072,1982,2081,1921,2038,1918,1794,1707,1746,1553,1447,1381,1412,1325,1325,1143,1220,1191,1210,1181,1214,1061,984,999,821,702,647,694,690,596,528,478,380,325,292,240,853\nDudley,E08000027,male,1789,1755,1905,1922,2002,1930,1944,1987,2159,2065,2039,2066,2000,1911,1888,1928,1915,1956,1740,1643,1630,1617,1639,1806,1819,1970,1895,2032,1933,2157,2201,2007,2070,2115,2004,1951,1903,1979,1985,1964,2092,1851,1887,1710,1702,1864,1858,2001,2133,2192,2345,2359,2457,2315,2334,2289,2240,2236,2190,2121,1998,1823,1789,1914,1751,1658,1692,1615,1675,1614,1536,1611,1579,1679,1762,1318,1443,1312,1268,1058,944,943,891,808,703,634,513,446,399,315,925\nSandwell,E08000028,male,2224,2252,2252,2295,2407,2469,2420,2469,2631,2670,2533,2559,2539,2558,2310,2418,2540,2448,2091,1965,2056,1956,2101,2229,2090,2145,2039,2137,2203,2345,2375,2482,2287,2363,2256,2358,2355,2217,2313,2198,2332,2386,2364,2180,2240,2111,2304,2219,2361,2335,2298,2261,2306,2395,2265,2187,2041,2039,1983,1928,1980,1674,1759,1655,1595,1439,1422,1418,1240,1271,1193,1222,1226,1249,1191,885,919,974,864,713,692,643,616,597,510,438,375,315,261,216,617\nSolihull,E08000029,male,1037,1176,1203,1299,1275,1342,1364,1456,1449,1488,1438,1392,1377,1471,1395,1415,1374,1332,1187,949,962,1034,1141,1216,1177,1123,1182,1187,1158,1163,1237,1160,1245,1234,1203,1241,1288,1217,1214,1224,1355,1351,1212,1173,1187,1235,1186,1330,1376,1494,1560,1509,1637,1458,1454,1635,1584,1458,1428,1434,1343,1268,1329,1241,1198,1106,1042,1079,1008,993,1095,988,1150,1211,1255,924,1007,864,816,668,621,625,589,517,475,407,388,331,300,230,817\nWalsall,E08000030,male,1666,1767,1910,1845,1876,1986,1955,1996,2100,2039,2026,1973,2020,2069,1972,1912,1913,1848,1688,1557,1511,1532,1643,1687,1622,1740,1686,1583,1704,1767,1887,1785,1722,1881,1905,1832,1925,1806,1809,1716,1750,1931,1666,1545,1577,1663,1590,1701,1755,1933,2034,1854,1874,1910,1862,1827,1800,1715,1754,1790,1656,1621,1475,1436,1453,1306,1328,1242,1290,1256,1131,1145,1191,1275,1194,927,1004,1005,856,778,754,706,656,591,543,451,414,329,279,256,718\nWolverhampton,E08000031,male,1706,1694,1751,1673,1690,1823,1714,1904,1787,1862,1938,1898,1779,1855,1677,1688,1787,1655,1487,1387,1417,1620,1692,1631,1687,1543,1551,1792,1675,1682,1835,1833,1712,1746,1784,1749,1767,1723,1716,1665,1923,1740,1709,1580,1621,1600,1729,1781,1700,1779,1885,1722,1811,1825,1874,1723,1600,1591,1616,1520,1489,1395,1330,1437,1249,1176,1182,1203,1117,1094,1115,1031,1023,1079,975,809,758,787,737,626,614,591,554,491,463,404,359,300,261,228,771\nPeterborough,E06000031,male,1405,1471,1453,1481,1481,1624,1596,1644,1670,1602,1696,1677,1621,1607,1487,1358,1426,1445,1230,1124,1066,1115,1205,1255,1292,1392,1456,1493,1565,1564,1670,1665,1677,1711,1658,1733,1662,1599,1758,1660,1686,1589,1498,1407,1407,1385,1390,1347,1432,1419,1325,1360,1339,1424,1310,1244,1213,1221,1147,1137,1132,1044,1014,988,914,894,806,831,756,769,785,789,788,759,790,601,583,556,455,415,406,426,343,322,308,270,253,191,165,162,516\nLuton,E06000032,male,1545,1580,1676,1557,1736,1689,1727,1806,1732,1682,1732,1724,1704,1734,1666,1616,1698,1583,1500,1432,1387,1519,1541,1703,1804,1655,1591,1583,1627,1619,1704,1706,1779,1732,1719,1738,1656,1763,1771,1642,1841,1751,1710,1580,1557,1518,1468,1458,1466,1466,1464,1476,1421,1442,1373,1282,1329,1287,1267,1138,1164,1095,1038,912,903,927,788,681,761,704,617,608,644,590,579,456,486,428,443,317,364,323,321,350,313,240,230,210,142,118,420\nSouthend-on-Sea,E06000033,male,971,990,1054,1069,1061,1137,1059,1106,1136,1107,1165,1184,1081,1157,1135,1019,989,1071,911,818,746,863,924,1041,1014,1026,1096,1128,1126,1124,1112,1157,1159,1148,1090,1181,1106,1136,1197,1224,1194,1276,1244,1123,1116,1116,1136,1249,1286,1340,1252,1216,1267,1257,1201,1287,1280,1264,1193,1182,1163,1116,1013,1017,850,897,848,806,869,814,748,804,895,953,923,676,703,637,564,479,436,459,453,365,354,285,264,256,213,190,564\nThurrock,E06000034,male,1212,1251,1263,1261,1295,1378,1257,1232,1301,1334,1347,1188,1304,1314,1201,1197,1176,1154,998,879,856,880,978,991,1055,1048,1020,1127,1184,1167,1265,1316,1364,1347,1360,1351,1375,1304,1313,1286,1224,1276,1221,1138,1168,1134,1116,1146,1202,1157,1199,1192,1210,1157,1189,1190,1090,1087,1028,976,896,879,872,771,770,711,666,675,626,564,645,631,653,681,650,442,474,412,383,295,266,307,256,242,222,178,155,139,102,105,320\nBedford,E06000055,male,1113,1091,1113,1168,1213,1225,1209,1171,1215,1226,1254,1247,1233,1253,1154,1160,1211,1162,1034,910,900,930,947,1146,1095,1133,1097,1198,1112,1206,1297,1299,1324,1311,1269,1293,1249,1321,1273,1289,1400,1336,1254,1205,1192,1222,1186,1252,1138,1311,1326,1248,1316,1332,1347,1279,1186,1162,1163,1100,1060,1069,994,924,907,875,803,810,789,740,778,765,771,863,807,624,598,610,462,432,387,379,405,342,331,257,260,197,176,156,550\nCentral Bedfordshire,E06000056,male,1718,1866,1904,1852,1835,1946,1868,1857,1888,1941,1885,1830,1837,1798,1744,1705,1600,1686,1480,1244,1225,1315,1415,1649,1698,1577,1692,1757,1787,1980,1969,2005,2029,2170,2066,2060,2032,1961,2064,1951,2081,2008,1896,1736,1873,1807,1826,1869,1934,2075,2146,1979,2070,2070,2153,2151,2162,2080,2070,1924,1937,1744,1720,1746,1635,1433,1494,1376,1332,1267,1340,1352,1349,1493,1496,1100,1130,1065,946,736,699,663,642,601,571,471,380,338,288,238,754\nCambridge,E07000008,male,646,680,647,648,666,637,680,726,680,746,697,666,669,718,641,625,596,619,1387,2279,2026,2388,2395,1865,1852,1827,1827,1694,1686,1430,1659,1476,1244,1215,1217,1276,1019,1046,1000,971,1069,886,1089,828,808,846,781,805,740,809,841,725,818,748,646,731,714,642,720,693,557,504,584,559,521,469,459,463,388,407,403,387,428,364,377,322,352,258,289,244,238,210,237,192,163,139,158,127,97,87,298\nEast Cambridgeshire,E07000009,male,362,442,471,516,472,542,470,504,574,563,656,548,587,541,548,517,525,514,447,350,295,363,397,419,395,455,447,491,460,482,501,525,564,557,548,543,526,560,523,595,587,609,581,506,592,571,598,657,619,658,626,651,621,612,639,685,613,594,640,554,554,527,505,543,481,475,433,452,450,433,434,485,452,507,511,390,390,333,294,283,264,277,202,212,203,177,165,120,110,102,285\nFenland,E07000010,male,483,528,547,569,516,624,577,576,588,614,557,551,565,573,594,578,505,548,514,446,474,460,546,584,555,580,586,612,617,654,695,613,641,643,646,682,589,622,563,556,634,537,626,536,524,571,590,601,605,671,689,725,709,745,734,741,759,742,761,684,704,646,599,646,632,607,547,643,574,603,558,579,595,664,627,512,535,449,430,378,282,295,289,288,271,184,172,137,137,117,346\nHuntingdonshire,E07000011,male,894,986,1024,1016,1031,1074,1053,1068,1126,1136,1114,1096,1046,1060,1032,1012,1055,1000,864,720,716,787,925,1006,1029,1001,1024,999,1109,1142,1166,1162,1193,1317,1176,1216,1230,1178,1189,1176,1219,1168,1164,1067,1138,1120,1215,1209,1206,1253,1359,1304,1315,1347,1291,1412,1302,1290,1328,1210,1227,1151,1176,1098,976,959,1006,904,847,857,914,937,973,1071,1017,818,856,720,663,557,524,442,458,428,370,320,262,248,173,148,519\nSouth Cambridgeshire,E07000012,male,775,885,899,944,957,1058,989,1014,1079,1090,1155,1080,1119,1129,1044,990,1059,945,859,655,578,545,670,738,740,776,895,773,822,794,1010,922,1019,980,976,1010,1074,989,1029,1245,1172,1128,1220,1125,1123,1125,1164,1173,1197,1207,1259,1093,1121,1152,1094,1120,1157,1093,1115,1042,976,928,953,957,818,803,792,754,767,756,768,770,748,845,918,650,726,642,558,479,408,411,409,391,349,295,275,226,186,190,613\nBasildon,E07000066,male,1158,1221,1340,1250,1300,1313,1243,1221,1297,1260,1276,1232,1227,1241,1217,1148,1113,1150,1015,855,854,952,964,978,1038,1048,1163,1183,1233,1212,1296,1300,1350,1347,1356,1351,1302,1228,1223,1190,1281,1187,1182,1109,1115,1103,1175,1186,1199,1224,1298,1238,1275,1292,1298,1231,1202,1214,1200,1142,1132,1080,1082,964,920,843,822,747,733,740,744,810,740,884,899,666,618,524,531,433,406,388,355,353,320,267,273,211,175,166,449\nBraintree,E07000067,male,733,881,852,934,957,907,919,917,949,978,976,1017,948,964,900,945,860,876,804,716,709,713,825,815,841,849,839,884,971,950,938,975,979,971,938,966,905,957,878,973,978,923,921,892,874,905,1002,1056,1086,1130,1163,1203,1124,1128,1234,1085,1123,1037,1065,1079,989,909,896,913,867,854,833,845,786,769,795,759,859,917,920,654,672,642,615,445,454,375,433,315,310,248,227,183,167,139,417\nBrentwood,E07000068,male,413,436,454,474,443,454,500,475,503,477,459,444,473,463,444,427,452,463,379,285,286,347,355,392,435,400,453,449,553,474,546,493,522,505,482,496,483,463,460,446,523,494,465,483,454,455,558,460,503,494,530,536,549,533,566,547,570,532,526,562,493,461,425,451,387,382,415,372,355,333,345,330,371,424,412,282,327,259,270,185,177,206,185,185,170,169,133,123,98,94,344\nCastle Point,E07000069,male,401,430,463,462,480,498,482,494,514,505,513,482,492,552,489,492,521,530,446,387,397,454,504,504,522,445,500,482,512,485,454,505,465,503,463,536,485,456,443,496,480,492,486,437,468,466,519,506,530,580,575,597,647,655,682,670,643,612,629,605,619,557,531,532,557,484,482,504,492,485,476,551,574,669,680,470,517,444,449,323,299,313,242,256,243,216,182,152,128,88,320\nChelmsford,E07000070,male,930,1004,974,1007,1109,1143,1116,1102,1102,1168,1133,1119,1129,1161,1048,1134,1105,1040,959,794,815,814,923,1003,1049,1022,1057,1191,1153,1207,1207,1151,1153,1183,1187,1138,1151,1192,1243,1242,1244,1240,1166,1135,1132,1219,1233,1201,1236,1355,1328,1262,1280,1235,1266,1234,1217,1224,1140,1169,1055,1070,1001,929,984,933,835,846,870,787,820,831,836,1006,997,782,735,667,657,459,445,447,431,431,402,317,331,235,215,187,615\nColchester,E07000071,male,1020,1092,1123,1166,1160,1174,1204,1209,1249,1183,1274,1236,1177,1187,1067,1100,1104,1046,1087,1353,1606,1611,1396,1248,1211,1164,1178,1236,1275,1317,1323,1239,1331,1352,1257,1249,1236,1244,1207,1258,1284,1262,1236,1145,1233,1078,1280,1246,1261,1358,1323,1280,1221,1294,1284,1237,1201,1140,1114,1177,1099,972,987,936,885,828,781,793,844,854,819,803,886,1037,985,702,747,663,599,514,386,457,422,425,322,302,269,250,217,167,515\nEpping Forest,E07000072,male,764,888,883,809,761,807,696,745,812,800,803,850,786,859,801,800,787,780,700,609,631,633,730,751,813,742,752,715,742,754,800,838,855,850,848,802,812,856,866,895,948,933,845,853,834,809,851,859,910,906,972,925,950,914,996,964,1001,931,893,941,919,855,781,729,736,688,694,631,606,571,610,631,640,724,744,495,581,497,465,360,342,328,338,298,271,252,213,161,166,137,466\nHarlow,E07000073,male,619,606,655,647,666,683,672,651,690,676,656,664,655,683,603,562,579,551,477,475,446,493,489,508,544,547,556,654,612,630,686,695,727,731,764,739,735,695,701,715,701,668,645,598,602,512,570,542,572,564,596,546,572,578,640,592,604,586,573,580,523,505,487,486,426,462,433,367,373,338,315,299,318,320,332,219,248,209,202,166,157,167,139,135,138,96,92,93,82,63,239\nMaldon,E07000074,male,277,278,294,348,334,367,333,347,357,360,381,376,360,366,377,373,391,373,334,306,299,316,343,334,337,363,339,346,307,309,334,332,348,301,302,363,323,312,304,345,352,338,316,305,327,383,394,360,393,437,480,479,501,518,544,550,570,505,486,486,525,503,461,466,438,437,406,428,390,407,411,434,430,499,483,376,407,345,269,244,214,230,217,197,172,159,137,104,101,69,222\nRochford,E07000075,male,372,397,401,474,468,472,412,465,508,514,521,530,538,527,548,474,493,522,423,384,374,399,436,517,472,442,428,438,441,458,454,418,463,455,431,495,466,459,480,472,511,461,499,454,472,506,515,533,530,623,593,645,644,606,665,656,649,597,602,603,534,575,551,520,519,468,436,450,467,440,403,475,502,563,640,406,425,394,340,287,251,277,258,245,239,170,172,160,134,120,279\nTendring,E07000076,male,684,661,640,754,693,710,821,750,763,812,798,851,749,764,755,726,776,780,698,622,653,653,687,715,755,730,691,720,668,690,729,762,713,744,710,681,650,641,670,667,726,671,623,620,652,700,733,707,850,908,907,909,986,1009,1124,1079,1080,1033,1023,1087,1085,1043,1054,1049,998,933,986,948,1092,947,961,1029,1113,1235,1333,925,979,942,848,644,625,652,590,526,485,438,373,292,248,231,707\nUttlesford,E07000077,male,433,533,550,505,583,580,553,564,595,600,708,556,565,604,625,593,553,570,492,348,349,372,428,457,424,392,459,430,420,473,455,434,495,507,488,522,544,512,572,587,600,606,608,548,548,560,548,626,641,676,676,658,702,709,707,660,679,657,692,622,617,615,599,539,540,510,459,488,479,444,433,474,485,498,520,403,424,375,297,277,225,267,196,226,171,145,148,137,104,101,303\nBroxbourne,E07000095,male,547,572,654,620,596,602,616,597,640,642,681,617,648,629,652,602,613,591,558,549,495,513,542,596,552,574,588,560,592,673,605,640,675,701,677,665,676,601,674,695,673,678,691,594,608,563,642,609,619,637,691,700,670,683,703,667,698,642,632,657,594,538,522,498,516,421,411,410,411,364,400,373,397,422,479,332,369,310,299,229,220,188,243,209,226,157,136,124,94,105,300\nDacorum,E07000096,male,893,944,991,1048,1028,1035,994,994,1012,1009,1078,1057,1039,995,963,934,902,959,773,609,597,633,711,826,877,836,897,830,947,951,1016,1025,1039,1134,1058,1107,1048,1084,1080,1106,1089,1110,1109,982,1073,1052,1061,1024,1084,1115,1122,1034,1093,1019,1054,1075,1079,1106,1066,1001,950,934,904,846,845,787,736,745,634,692,648,634,634,699,650,504,540,505,453,319,325,337,347,268,269,247,230,181,178,168,511\nHertsmere,E07000098,male,599,668,632,676,646,708,677,688,685,705,728,727,760,751,677,697,732,700,569,420,450,489,555,600,583,601,627,587,574,584,635,616,636,670,631,719,704,722,738,704,757,747,791,713,723,731,687,755,712,747,731,668,726,741,688,772,739,707,718,680,634,626,606,548,547,485,477,476,460,434,433,421,450,468,492,349,394,345,318,224,217,246,222,237,207,188,170,130,113,107,367\nNorth Hertfordshire,E07000099,male,712,793,755,741,801,856,793,840,895,866,877,876,836,851,796,729,771,766,598,521,476,485,564,655,711,729,709,737,812,814,815,819,798,868,827,861,829,878,831,922,902,959,881,908,824,852,936,938,931,942,904,922,954,955,923,997,925,940,904,867,852,805,825,729,674,690,637,644,606,585,619,634,581,677,643,481,549,453,501,359,358,295,313,325,290,257,227,194,166,135,454\nThree Rivers,E07000102,male,500,498,532,524,535,575,598,614,638,619,675,652,683,656,614,624,599,605,483,389,391,408,485,544,530,508,441,472,459,476,511,509,467,552,547,513,532,583,585,693,656,689,635,663,676,652,698,660,680,711,687,660,710,687,642,709,669,703,628,640,556,555,543,507,479,445,476,414,398,405,395,407,412,446,457,330,365,321,294,233,185,218,188,176,181,178,148,146,114,94,310\nWatford,E07000103,male,638,661,702,691,683,688,707,683,716,647,714,683,662,738,649,617,648,617,591,451,433,490,518,607,641,636,688,737,775,815,829,821,915,799,886,889,877,842,838,889,860,811,812,790,789,769,767,787,688,693,704,721,662,652,639,615,569,612,592,572,506,502,485,438,400,377,373,351,338,319,310,285,292,334,317,262,247,215,212,175,151,154,167,151,143,95,99,91,72,82,192\nBreckland,E07000143,male,646,657,699,757,745,793,753,800,811,780,809,791,814,804,804,730,759,735,660,580,607,661,707,773,814,831,800,820,851,824,902,883,846,852,839,767,826,752,756,774,866,848,706,720,732,672,850,866,879,933,986,971,1032,940,1042,1056,1045,1047,1041,995,996,927,917,891,817,851,883,872,823,829,858,849,884,999,1030,804,788,750,679,559,489,483,458,446,382,335,302,246,203,188,546\nBroadland,E07000144,male,545,567,630,666,676,660,661,653,755,740,760,765,733,739,738,648,740,685,659,509,554,520,576,592,626,591,665,587,673,668,677,696,698,724,703,730,727,708,652,740,750,773,688,743,704,713,818,856,905,922,917,958,991,1012,982,985,979,1022,939,964,928,848,829,810,839,792,777,769,781,753,776,836,887,955,964,709,756,654,606,568,489,485,454,463,389,311,291,247,237,180,618\nGreat Yarmouth,E07000145,male,473,483,525,535,551,495,562,544,558,611,606,595,546,613,552,523,545,557,536,461,448,504,531,524,529,568,546,508,601,563,563,583,586,563,611,581,529,603,484,527,522,587,576,470,482,559,516,549,616,646,667,696,691,685,711,666,744,721,705,680,665,664,651,650,599,620,648,612,575,630,569,613,648,712,696,520,535,489,456,387,323,329,332,286,219,189,172,150,136,126,379\nKing's Lynn and West Norfolk,E07000146,male,697,685,795,755,810,853,829,833,901,865,819,819,828,829,840,828,847,771,738,637,662,683,763,821,788,877,763,897,962,840,897,861,845,875,896,925,861,808,777,782,831,829,797,749,783,785,820,910,903,985,1002,1017,1091,1063,1077,1162,1116,1184,1049,1102,1069,1029,993,988,998,947,911,922,915,941,946,968,991,1120,1149,870,895,786,731,635,526,581,544,482,461,371,319,312,281,213,653\nNorth Norfolk,E07000147,male,331,400,378,377,447,445,441,449,464,504,490,476,538,505,488,497,534,491,480,351,345,383,384,444,460,396,458,427,428,441,449,490,424,501,470,454,470,429,465,438,477,408,392,424,483,463,490,518,532,672,668,690,682,667,738,743,771,778,750,819,821,767,835,869,804,788,804,773,795,839,849,904,889,973,1008,724,785,741,635,532,439,454,434,433,405,355,310,286,205,205,636\nNorwich,E07000148,male,701,742,714,716,727,759,764,769,832,762,803,750,745,743,695,627,647,720,1165,1889,2011,1760,1465,1250,1215,1184,1106,1231,1212,1230,1253,1242,1169,1144,1101,1104,1070,1082,1045,1040,1002,971,962,887,836,784,834,911,877,863,847,821,863,807,881,792,888,771,769,737,716,660,599,577,581,546,598,555,515,555,552,507,549,544,521,417,405,389,355,313,287,279,231,227,223,175,180,148,119,101,361\nSouth Norfolk,E07000149,male,641,668,733,754,823,830,797,749,848,853,827,824,870,796,831,827,808,807,650,521,537,588,606,648,704,637,703,720,716,730,738,754,788,828,742,841,821,818,808,825,866,854,808,790,754,835,807,917,885,993,1005,963,1016,985,993,1080,1014,1049,965,1008,948,911,872,912,837,842,820,847,791,771,811,850,858,986,1044,739,776,706,695,518,455,513,490,428,385,341,271,240,218,160,603\nBabergh,E07000200,male,348,414,398,474,396,496,448,435,501,519,523,506,557,559,538,523,544,534,440,346,345,386,414,474,456,408,438,441,386,465,471,461,464,462,450,429,416,467,477,451,538,477,502,458,484,501,554,542,626,614,651,637,643,625,726,713,719,732,683,672,660,597,649,619,582,579,537,580,539,581,606,644,576,745,682,539,585,474,465,384,383,348,340,299,259,213,184,162,141,106,393\nIpswich,E07000202,male,768,852,852,836,895,952,896,880,905,942,921,905,918,875,903,848,882,952,851,759,730,772,782,883,846,911,926,951,953,1008,1027,1031,1042,1076,1078,1062,1041,1047,978,1034,992,1047,901,904,945,856,889,896,921,940,962,964,949,945,909,867,888,817,904,766,746,708,745,741,719,668,606,613,547,642,559,572,546,610,600,480,478,387,374,337,277,297,266,274,251,225,197,157,143,102,413\nMid Suffolk,E07000203,male,446,467,438,483,476,516,533,534,544,565,565,555,589,580,540,592,582,592,501,514,435,442,497,496,521,566,583,581,539,530,548,540,552,605,556,516,572,514,543,584,585,526,556,511,487,575,519,638,683,746,705,742,744,708,793,792,800,753,789,789,763,729,724,708,662,647,640,724,647,636,626,669,713,779,775,524,609,513,480,411,378,375,321,285,245,245,195,173,156,94,411\nSt Albans,E07000240,male,770,839,942,906,1000,984,995,1033,1046,1144,1164,1130,1179,1116,1109,1032,1055,1008,760,436,472,511,610,708,724,744,751,702,712,784,787,813,826,854,849,839,843,958,910,1014,1022,1110,1127,1111,1133,1191,1123,1139,1145,1161,1168,1112,1079,1135,1088,1108,1012,991,915,867,916,797,758,732,752,684,618,672,621,542,595,598,533,610,646,531,499,481,430,326,305,378,335,290,305,248,230,219,183,182,483\nWelwyn Hatfield,E07000241,male,663,665,677,719,722,726,733,726,747,790,706,725,733,724,679,704,677,665,818,1125,1174,1161,1168,989,948,803,822,790,783,733,791,790,762,775,784,729,797,771,828,792,853,867,800,735,747,743,717,739,707,770,834,745,795,747,792,737,777,745,721,714,706,663,675,597,560,544,478,493,444,428,444,418,413,477,498,321,386,323,300,244,240,241,249,220,214,186,172,149,138,112,374\nEast Hertfordshire,E07000242,male,816,861,884,869,903,886,940,875,947,957,1003,1070,995,896,1005,1001,916,978,753,585,554,647,750,824,771,828,831,884,868,931,901,897,959,906,908,941,906,909,893,959,1004,1043,992,946,889,986,1006,1160,1090,1162,1101,1067,1118,1139,1100,1167,1120,1116,1013,1020,948,917,896,912,844,759,740,686,710,616,678,665,681,763,725,504,580,503,465,361,345,376,326,319,292,250,207,217,173,148,448\nStevenage,E07000243,male,529,572,599,615,626,584,564,609,632,602,641,597,565,620,587,510,533,564,501,418,432,471,484,519,588,586,548,645,615,664,659,691,676,725,703,669,686,631,651,648,637,653,541,561,574,506,514,568,536,563,598,561,620,611,667,597,660,653,627,567,537,498,517,500,452,452,406,365,370,305,280,330,318,362,333,243,217,252,231,166,155,179,156,130,142,121,109,91,70,74,228\nEast Suffolk,E07000244,male,938,1011,1089,1164,1180,1192,1282,1191,1326,1398,1397,1365,1382,1386,1360,1346,1346,1355,1277,1011,977,1048,1092,1221,1209,1180,1202,1204,1177,1210,1134,1254,1259,1298,1187,1208,1197,1171,1135,1273,1301,1315,1267,1152,1186,1283,1261,1426,1557,1563,1585,1724,1669,1768,1819,1828,1862,1832,1805,1757,1763,1719,1734,1747,1633,1567,1546,1683,1594,1584,1601,1645,1784,2000,1925,1540,1483,1321,1273,1022,907,943,883,846,701,652,578,490,443,343,1291\nWest Suffolk,E07000245,male,1014,1074,988,1011,1046,1041,1009,1031,1071,1119,1082,1038,998,1009,919,962,881,946,915,882,975,1175,1298,1246,1223,1216,1289,1453,1246,1357,1479,1288,1259,1222,1285,1173,1114,1291,1164,1103,1181,1144,1127,919,1069,998,1033,1051,1167,1195,1225,1224,1289,1147,1230,1258,1196,1210,1169,1137,1102,1094,964,1044,895,824,847,924,864,910,901,900,893,1033,1034,796,784,731,662,585,501,567,551,496,425,351,301,231,232,205,601\nCity of London,E09000001,male,28,27,15,13,17,14,12,20,19,23,29,19,15,14,14,21,15,14,31,23,59,63,101,149,104,136,150,118,123,124,138,109,107,102,85,102,83,74,80,86,68,61,57,75,66,59,60,73,60,96,69,99,90,80,62,64,55,63,55,54,63,62,46,64,47,44,36,34,45,44,30,29,28,33,35,24,32,23,17,12,19,19,16,15,13,6,10,1,6,7,20\nBarking and Dagenham,E09000002,male,1622,1669,1754,1909,1892,1925,1765,1847,1978,1893,1884,1878,1911,1881,1825,1646,1733,1613,1576,1280,1162,1228,1358,1375,1451,1449,1432,1398,1460,1416,1465,1638,1618,1759,1748,1733,1807,1765,1758,1684,1828,1614,1625,1481,1553,1456,1528,1557,1391,1378,1429,1400,1405,1383,1251,1192,1152,1106,1129,955,1039,886,835,801,729,658,637,556,526,462,456,438,410,433,461,350,284,264,267,184,233,226,188,204,171,163,143,107,100,91,282\nBarnet,E09000003,male,2465,2466,2460,2523,2532,2505,2586,2628,2621,2694,2701,2653,2686,2679,2565,2488,2503,2308,2112,1670,1529,1965,2239,2459,2575,2616,2748,2596,2586,2812,2950,2901,2984,2822,2845,2979,2946,2780,2944,3016,3018,2897,2983,2847,2691,2659,2638,2807,2634,2650,2582,2614,2519,2306,2417,2274,2230,2362,2034,2003,2047,1843,1818,1913,1628,1681,1514,1411,1443,1376,1354,1385,1322,1284,1259,1084,1086,992,829,691,666,706,668,567,563,551,467,433,360,256,1047\nBexley,E09000004,male,1391,1562,1526,1548,1567,1714,1605,1629,1655,1714,1716,1708,1643,1681,1636,1507,1583,1598,1325,1231,1231,1375,1380,1385,1362,1395,1361,1431,1413,1487,1537,1600,1634,1600,1558,1580,1640,1642,1636,1647,1758,1733,1668,1505,1552,1510,1565,1490,1600,1562,1681,1674,1702,1636,1691,1656,1682,1632,1569,1485,1498,1366,1365,1240,1163,1132,1067,1008,965,993,950,934,903,1044,1073,723,757,681,669,535,486,566,541,481,438,388,331,280,274,172,687\nBrent,E09000005,male,1967,2166,1947,2019,2051,2211,1889,1942,2023,2103,2144,2077,2103,2111,2250,2060,2156,2119,2074,2153,2214,2209,2393,2611,2773,2811,2925,2967,2830,2903,2960,3050,2942,2901,2847,2730,2724,2630,2674,2914,2607,2674,2479,2369,2319,2414,2436,2197,2258,2181,2227,2265,2303,2251,1984,2017,2065,1861,1797,1709,1728,1580,1546,1533,1391,1353,1304,1159,1129,1086,954,944,899,847,799,679,659,648,545,566,497,490,494,438,424,361,329,279,225,217,604\nBromley,E09000006,male,1892,1871,2082,2026,2126,2068,2085,2068,2177,2160,2271,2279,2137,2056,2103,2006,2005,1952,1621,1253,1189,1307,1551,1689,1654,1650,1653,1780,1796,1770,1820,2050,2044,2143,2108,2218,2259,2323,2322,2460,2395,2358,2468,2321,2254,2202,2425,2246,2270,2384,2299,2185,2315,2251,2430,2308,2182,2323,2003,1936,2064,1822,1725,1698,1596,1513,1413,1345,1307,1300,1332,1300,1366,1514,1538,1112,1158,1010,969,830,705,763,719,658,607,544,486,425,385,352,1120\nCamden,E09000007,male,1033,994,1044,1001,1020,999,979,971,1002,1020,1056,1064,1044,1028,1044,1014,1080,997,1446,1945,1864,1759,1651,1770,1874,1927,2062,2150,2049,2065,2050,2101,2011,1845,1772,1731,1663,1535,1466,1526,1498,1458,1421,1281,1295,1256,1359,1304,1220,1288,1327,1267,1322,1195,1275,1255,1137,1188,1074,1068,1026,931,885,846,784,764,657,656,636,590,608,574,581,608,587,504,486,444,380,310,303,317,267,243,222,197,171,139,114,114,399\nCroydon,E09000008,male,2447,2592,2562,2532,2537,2551,2501,2509,2497,2598,2661,2562,2568,2646,2544,2523,2554,2566,2200,1893,1789,1967,2210,2348,2541,2448,2504,2726,2619,2704,2957,2904,2965,2884,2866,2980,2895,2982,2824,2863,2896,2845,2736,2563,2574,2534,2607,2336,2469,2429,2487,2456,2590,2629,2606,2553,2535,2553,2349,2278,2241,2014,1945,1879,1735,1545,1537,1483,1303,1335,1270,1276,1288,1372,1314,1012,941,822,841,694,658,665,610,574,552,485,416,396,298,279,817\nEaling,E09000009,male,2113,2342,2068,2222,2222,2178,2195,2325,2280,2398,2425,2530,2362,2452,2404,2220,2321,2139,2308,2194,1979,2112,2266,2363,2575,2644,2728,3061,2853,2853,2872,3010,3009,3131,2894,2998,3021,2910,2948,2946,3195,3135,2830,2723,2857,2842,2729,2551,2586,2509,2650,2559,2398,2516,2236,2300,2358,2134,2078,2026,1939,1829,1795,1583,1535,1444,1407,1304,1141,1200,1113,1099,1092,1036,995,774,778,694,681,625,576,568,574,485,417,404,345,294,264,185,652\nEnfield,E09000010,male,1925,2179,2161,2239,2306,2316,2239,2178,2335,2493,2470,2459,2529,2502,2401,2374,2449,2338,2066,1799,1686,1885,1955,1915,2070,2082,1889,2066,2012,2037,2004,1998,2058,2184,2112,2121,2224,2087,2065,2245,2445,2340,2159,2177,2096,2134,2074,2168,2229,2152,2162,2118,2192,2262,2042,2159,2139,2033,1963,1806,1732,1847,1687,1566,1469,1369,1300,1167,1091,1045,1041,1043,1064,1002,1023,800,816,778,682,556,578,634,548,503,482,427,388,321,266,223,759\nGreenwich,E09000011,male,1868,1990,1896,1874,1920,1902,1953,1875,1958,1895,1857,1870,1924,1871,1804,1659,1667,1628,1607,1479,1526,1729,1841,1868,2020,2255,2134,2361,2472,2665,2603,2589,2678,2735,2531,2520,2615,2512,2546,2198,2452,2295,2264,2075,1999,1961,2005,1798,1834,1845,1965,1836,1952,1858,1842,1786,1581,1555,1555,1493,1511,1351,1191,1122,996,1064,960,861,803,734,795,740,705,786,721,566,582,530,449,375,350,364,340,284,261,240,194,163,145,110,361\nHackney,E09000012,male,1643,1734,1647,1527,1554,1625,1607,1450,1639,1511,1570,1561,1540,1525,1538,1486,1644,1511,1300,1208,1323,1412,1542,2064,2231,2557,2796,2903,2993,3144,3271,3204,3190,2875,2650,2417,2327,2364,2079,2171,1946,1897,1737,1670,1666,1575,1544,1442,1431,1459,1430,1433,1427,1304,1341,1356,1390,1319,1195,1013,1106,1005,1013,863,826,862,642,647,635,552,546,516,503,468,420,342,315,290,261,274,230,229,208,167,166,155,151,122,92,72,254\nHammersmith and Fulham,E09000013,male,932,911,894,881,921,903,838,910,916,887,924,968,877,878,868,825,785,793,726,878,1198,1318,1526,1758,2168,2132,2116,2212,2091,2137,2008,1912,1883,1760,1658,1587,1469,1383,1341,1280,1209,1206,1214,1153,1075,1141,1180,1130,1146,1117,1120,1085,1071,1092,1124,997,1048,918,980,872,730,713,684,647,606,595,518,560,456,482,488,446,455,457,441,342,338,315,267,232,238,243,212,186,146,156,108,116,100,97,236\nHaringey,E09000014,male,1517,1661,1507,1444,1492,1531,1495,1467,1504,1510,1652,1548,1558,1567,1578,1527,1532,1577,1401,1215,1343,1351,1531,1738,1973,2007,2170,2284,2310,2498,2467,2690,2490,2486,2394,2424,2372,2239,2216,2128,2217,2235,2053,1941,1845,1889,1955,1799,1798,1870,1935,1695,1754,1777,1660,1707,1570,1522,1485,1393,1281,1189,1068,1089,977,963,871,812,781,701,700,646,643,616,595,448,488,474,365,345,329,329,321,278,286,220,181,177,138,125,319\nHarrow,E09000015,male,1565,1622,1600,1696,1593,1551,1632,1566,1706,1621,1759,1627,1726,1631,1861,1753,1858,1836,1516,1187,1265,1313,1609,1790,1760,1784,1827,1790,1925,1890,1982,2006,2074,2089,1961,2080,2010,2033,1970,2111,2085,1936,1991,2001,1885,1767,1815,1738,1671,1604,1554,1662,1711,1476,1540,1536,1566,1468,1481,1372,1497,1382,1300,1228,1305,1165,1228,1060,1075,988,961,915,877,923,873,749,696,682,651,534,512,558,513,465,454,375,337,295,227,196,745\nHavering,E09000016,male,1607,1723,1761,1698,1714,1838,1655,1669,1694,1732,1689,1614,1622,1675,1596,1497,1597,1553,1393,1280,1246,1324,1474,1501,1549,1528,1656,1570,1625,1698,1772,1745,1777,1842,1815,1833,1841,1817,1854,1786,1847,1828,1644,1558,1576,1584,1595,1533,1614,1619,1645,1653,1672,1709,1659,1663,1678,1675,1623,1592,1468,1508,1532,1411,1288,1195,1194,1161,1075,1081,1095,1094,1051,1218,1198,872,854,792,705,608,572,541,534,529,477,433,377,301,313,266,814\nHillingdon,E09000017,male,1890,1965,2029,2100,2157,2079,2111,2043,2142,2182,2074,1995,2051,2101,1886,1938,1879,1903,1990,2198,2160,2173,2074,2083,1931,1946,1999,2017,2081,2089,2164,2238,2291,2187,2276,2366,2380,2355,2482,2345,2521,2422,2356,2082,2138,2109,2006,2147,1957,1999,1980,2043,1904,1911,2043,1974,1825,1772,1747,1677,1715,1628,1442,1363,1344,1274,1230,1130,1145,976,998,996,927,1013,988,735,744,711,599,544,525,532,492,468,413,358,308,292,269,212,709\nHounslow,E09000018,male,1871,1839,1874,1908,1907,1962,1895,1913,1939,2035,1999,1973,1856,1994,1882,1783,1763,1731,1663,1491,1569,1526,1788,1874,2008,1921,1979,2004,2130,2076,2250,2311,2442,2411,2454,2638,2450,2518,2445,2537,2528,2561,2445,2244,2361,2304,2058,2074,2072,2198,1893,1973,1953,1869,1799,1821,1704,1687,1546,1455,1528,1399,1259,1147,1254,1108,1001,978,1037,963,873,916,808,781,783,616,637,550,487,474,399,445,383,346,306,287,255,226,193,179,430\nIslington,E09000019,male,1247,1138,1176,1107,1095,993,1020,949,977,1089,1039,1029,1025,998,977,882,915,935,1143,1215,1345,1463,1511,1808,2095,2374,2538,2673,2844,2813,2773,2782,2532,2460,2397,2179,1989,1848,1705,1573,1625,1658,1429,1207,1295,1236,1229,1191,1271,1248,1263,1326,1210,1268,1275,1311,1156,1070,1083,1064,919,979,827,777,682,685,658,632,558,545,531,483,491,541,459,301,335,338,291,268,257,258,216,180,172,153,136,100,110,78,264\nKensington and Chelsea,E09000020,male,669,607,640,575,672,567,681,677,665,666,683,659,680,663,607,630,546,846,627,739,1081,884,1318,1262,1305,1270,1184,1164,1195,1151,1057,1194,1058,1168,1025,1141,928,907,920,898,989,970,884,874,760,912,864,1062,956,968,983,994,1030,1000,1035,1009,1066,993,933,819,844,797,669,758,597,583,537,544,518,450,538,488,507,485,482,372,387,387,371,280,309,273,220,236,195,155,144,133,109,89,288\nKingston upon Thames,E09000021,male,926,984,982,1020,1019,1090,1087,972,1116,1035,1121,1076,1055,1074,989,942,1001,984,861,830,893,973,1022,1077,1079,1050,1053,1023,1049,1107,1120,1141,1246,1160,1161,1165,1272,1181,1268,1239,1320,1336,1301,1286,1235,1213,1257,1245,1235,1240,1228,1184,1164,1103,1080,1124,1058,1045,943,901,867,872,815,744,715,695,623,698,609,628,601,605,590,632,657,489,452,453,421,328,323,306,265,237,254,196,188,159,128,108,420\nLambeth,E09000022,male,1633,1652,1569,1481,1442,1554,1521,1527,1543,1474,1509,1552,1613,1638,1628,1532,1475,1484,1476,1427,1463,1613,2329,3050,3785,4195,4400,4369,4231,4169,4183,3730,3630,3377,3078,2900,2644,2581,2535,2524,2443,2302,2127,2053,2097,2138,2015,1927,2014,2055,1983,2178,2032,2031,1863,1968,1852,1789,1632,1484,1425,1320,1211,1229,1126,957,1003,814,746,699,715,690,646,631,574,436,428,393,421,329,352,343,290,262,276,202,153,158,144,118,348\nLewisham,E09000023,male,1968,2012,1940,1919,1884,2020,1755,1841,1859,1868,1887,1851,1691,1706,1676,1628,1796,1614,1493,1319,1506,1615,1633,1906,2117,2224,2320,2531,2700,2850,2895,2830,3014,2815,2668,2821,2553,2566,2499,2531,2363,2331,2281,2151,2079,1992,2116,1940,1981,2035,1931,1878,1929,1838,1967,1802,1848,1635,1696,1591,1405,1324,1349,1239,1148,1063,868,880,740,720,747,661,609,650,584,459,506,427,442,367,347,323,322,320,253,220,199,189,148,129,389\nMerton,E09000024,male,1403,1392,1400,1364,1371,1468,1413,1300,1331,1396,1393,1403,1325,1383,1336,1164,1240,1175,1008,841,831,903,1129,1232,1311,1510,1598,1533,1782,1784,1812,1869,1775,1830,1881,1872,1810,1828,1854,1821,1860,1809,1793,1653,1725,1563,1628,1526,1512,1437,1467,1426,1434,1413,1357,1338,1239,1227,1176,1083,1092,1047,941,923,926,798,758,746,682,685,686,622,671,678,678,465,497,398,423,329,360,351,350,314,245,203,207,163,159,128,389\nNewham,E09000025,male,2315,2454,2402,2382,2320,2408,2348,2392,2366,2370,2365,2361,2358,2348,2319,2236,2236,2179,2210,2188,2402,2466,2834,3289,3326,3536,3523,3612,3669,3491,3772,3742,3632,3751,3468,3453,3492,3150,3173,3087,3021,3009,2966,2650,2485,2575,2502,2374,2221,2110,2378,2230,2100,1974,1807,1741,1651,1615,1548,1420,1412,1346,1235,1161,1095,1023,973,860,833,731,707,550,577,497,473,390,352,318,345,273,307,281,283,234,236,175,166,131,128,92,325\nRedbridge,E09000026,male,2115,2108,2244,2134,2204,2234,2159,2200,2268,2224,2197,2182,2086,2252,2206,2039,2137,2258,1942,1785,1731,1793,1864,2004,2182,2071,2039,1995,2250,2157,2370,2261,2467,2529,2488,2372,2709,2492,2606,2528,2614,2503,2369,2516,2299,2183,2226,2203,2143,1903,2004,1884,1992,1996,1754,1756,1746,1650,1667,1592,1528,1551,1380,1458,1330,1249,1152,1075,974,999,936,900,898,870,897,703,647,588,530,494,501,558,492,406,392,331,296,270,203,203,639\nRichmond upon Thames,E09000027,male,1049,1083,1157,1179,1237,1232,1267,1288,1356,1387,1424,1423,1381,1323,1224,1152,1187,1143,998,686,622,729,852,962,899,877,903,948,970,1039,1054,1165,1084,1200,1111,1244,1253,1318,1419,1356,1480,1538,1489,1548,1601,1528,1628,1534,1539,1697,1548,1511,1435,1504,1488,1451,1383,1341,1284,1190,1104,1028,998,932,895,838,770,785,763,797,772,795,758,860,850,638,678,594,489,420,405,362,389,350,272,249,209,211,183,139,531\nSouthwark,E09000028,male,1656,1754,1673,1588,1707,1666,1619,1621,1563,1581,1708,1671,1701,1553,1642,1530,1594,1471,1621,1716,1640,1939,2271,2657,2991,3413,3500,3779,3885,3837,3743,3756,3666,3233,2811,2938,2699,2585,2443,2357,2314,2238,2153,1886,1939,2089,1955,1895,1994,1779,1864,2044,1923,1818,1983,1804,1822,1668,1641,1622,1475,1444,1276,1121,1130,927,889,807,709,649,654,610,581,610,663,434,424,362,362,336,311,296,286,254,199,182,162,121,115,92,315\nSutton,E09000029,male,1182,1314,1291,1336,1428,1457,1492,1475,1467,1537,1547,1533,1470,1480,1391,1325,1334,1259,1119,849,809,972,994,1114,1076,1121,1166,1206,1228,1285,1266,1303,1362,1388,1389,1479,1454,1447,1607,1661,1680,1771,1660,1618,1592,1544,1571,1491,1492,1509,1466,1423,1415,1394,1463,1387,1420,1309,1301,1167,1146,1083,1079,987,941,925,841,854,776,695,732,737,743,799,876,592,594,540,479,387,369,422,376,304,311,299,238,222,177,153,519\nTower Hamlets,E09000030,male,2050,1929,2024,1852,1934,1888,1691,1746,1809,1900,1776,1863,1714,1783,1681,1654,1653,1734,1773,2258,2369,2578,2834,3336,4015,4188,4545,4488,4188,4444,4615,4268,4087,3888,3591,3335,3113,2900,2726,2718,2599,2462,2331,2092,2242,2115,2019,2037,1825,1628,1649,1586,1536,1530,1380,1205,1189,1222,1076,1011,958,956,910,880,771,670,656,497,562,479,450,350,399,357,391,268,259,233,221,217,196,209,165,209,159,116,127,102,88,79,260\nWaltham Forest,E09000031,male,1907,2109,2124,1733,1805,1837,1787,1755,1803,1777,1788,1649,1693,1655,1640,1642,1658,1711,1459,1357,1391,1373,1525,1666,1917,1887,2162,2092,2296,2485,2566,2707,2755,2876,2803,2754,2631,2728,2573,2503,2456,2310,2310,2298,2089,2243,1886,1760,1867,1900,2019,1763,1718,1837,1553,1578,1601,1526,1339,1300,1364,1271,1118,1072,1018,927,859,826,740,789,670,627,642,680,656,539,483,413,431,388,341,387,348,328,331,233,198,176,147,154,386\nWandsworth,E09000032,male,2076,1955,1930,1830,1804,1712,1726,1643,1771,1695,1661,1688,1669,1552,1483,1395,1348,1298,1234,1192,1292,1318,1862,2586,3530,4009,4321,4469,4391,4389,4306,3668,3664,3420,3058,3006,2940,2771,2615,2582,2563,2409,2362,2333,2178,2195,2043,2040,2046,1909,1817,1832,1888,1679,1779,1715,1585,1594,1490,1414,1456,1207,1152,1052,1027,886,854,800,836,771,757,765,755,752,726,573,562,483,465,390,441,400,358,329,301,259,220,193,171,111,470\nWestminster,E09000033,male,894,876,897,831,837,790,779,762,784,889,877,863,904,1007,807,896,976,1005,1175,1376,1388,1582,1837,2013,2170,2236,2289,2156,2286,2240,2281,2102,2063,1898,1769,1745,1658,1443,1514,1543,1370,1589,1305,1364,1315,1178,1320,1384,1417,1313,1427,1344,1332,1348,1422,1340,1305,1227,1152,1173,1037,979,873,913,845,833,716,692,638,656,605,593,590,604,547,458,500,414,405,362,287,301,292,263,220,187,179,168,138,112,436\nMedway,E06000035,male,1680,1706,1780,1876,1810,1883,1799,1858,1865,1963,1881,1858,1876,1818,1771,1690,1721,1724,1622,1541,1536,1616,1684,1646,1668,1662,1698,1825,1752,1869,1882,1954,1953,1944,1919,2035,1912,1817,1803,1903,1939,1878,1823,1642,1685,1671,1779,1663,1822,1833,1904,1877,1954,1876,1954,1985,1921,1830,1830,1701,1702,1539,1523,1514,1436,1288,1304,1281,1285,1153,1088,1221,1225,1309,1313,935,954,816,764,666,602,554,552,496,429,356,268,258,221,194,512\nBracknell Forest,E06000036,male,708,701,723,778,758,780,796,821,830,849,788,835,808,826,832,827,803,806,681,564,519,617,701,722,771,844,778,836,767,808,846,884,960,907,920,900,859,933,922,947,943,953,878,814,828,823,853,895,880,918,923,876,881,852,921,844,863,858,804,764,802,693,691,631,607,628,539,546,516,508,489,452,446,520,483,348,374,322,278,252,200,254,206,212,192,162,138,135,110,90,288\nWest Berkshire,E06000037,male,790,829,838,861,945,924,924,986,1047,1102,1043,1091,1110,1108,1006,1078,951,1075,964,662,690,712,753,817,877,840,869,780,912,959,934,898,932,969,923,1004,944,1003,932,995,1060,1036,1053,1011,1014,1102,1032,1133,1144,1193,1306,1252,1277,1270,1230,1200,1168,1211,1165,1118,1058,1048,1052,939,888,869,825,817,840,795,793,735,782,894,875,708,662,634,532,426,458,427,398,356,303,276,240,200,159,147,516\nReading,E06000038,male,1010,1070,1057,1015,1095,1118,1037,1045,1146,1037,1021,1075,1085,1040,972,969,970,891,1116,1638,1660,1557,1385,1282,1329,1416,1418,1455,1389,1515,1543,1502,1543,1598,1481,1535,1480,1460,1467,1400,1479,1417,1291,1168,1226,1208,1149,1150,1201,1123,1129,1121,1069,1024,1061,985,1017,953,909,902,884,800,790,735,660,628,588,581,558,510,464,443,469,575,507,380,426,407,357,316,259,313,243,236,231,187,171,132,113,121,355\nSlough,E06000039,male,1075,1191,1208,1203,1238,1355,1265,1343,1303,1271,1377,1328,1228,1341,1215,1154,1109,1095,994,773,849,900,855,905,969,959,1014,1056,967,1067,1145,1171,1164,1247,1283,1273,1341,1371,1471,1322,1492,1454,1378,1324,1268,1165,1227,1153,1158,1028,1084,975,1044,953,889,902,896,732,756,724,759,695,627,633,589,560,582,520,497,450,450,395,374,331,311,210,248,236,231,195,210,209,165,139,153,122,126,100,106,62,209\nWindsor and Maidenhead,E06000040,male,722,806,856,814,887,874,905,929,990,1020,1053,1060,1074,1095,1233,1167,1152,1168,885,566,533,674,697,781,808,790,777,769,825,822,872,873,941,860,930,945,923,963,1028,1014,1133,1120,1101,1038,1059,1080,1134,1096,1156,1135,1188,1120,1140,1114,1185,1129,1090,1042,1066,1038,1003,868,848,823,813,710,726,670,657,670,668,639,675,750,729,561,584,551,463,385,370,383,381,355,281,288,234,211,179,151,549\nWokingham,E06000041,male,896,987,1030,1116,1100,1195,1180,1167,1332,1354,1347,1359,1315,1296,1143,1116,1149,1136,951,772,731,778,865,893,898,913,888,943,943,978,891,1011,1002,1043,1053,1116,1138,1101,1229,1255,1339,1457,1325,1293,1358,1320,1298,1398,1359,1361,1336,1287,1274,1169,1265,1199,1222,1173,1150,1118,1057,997,980,1008,852,849,785,732,751,719,674,698,738,870,785,582,650,606,491,507,416,409,385,360,356,290,255,207,201,173,527\nMilton Keynes,E06000042,male,1690,1727,1797,1884,1934,1912,2033,2090,2112,2235,2263,2170,2127,2101,2000,1903,1943,1849,1571,1330,1298,1469,1540,1706,1733,1850,1797,1812,1890,2022,2076,2086,2121,2178,2157,2228,2195,2143,2304,2232,2341,2237,2306,2044,2107,2043,2069,1973,2002,1936,2025,1944,1883,1905,1768,1801,1790,1726,1585,1482,1522,1496,1472,1347,1292,1206,1242,1131,1171,1067,1081,1058,1015,1098,1004,779,707,738,614,535,461,458,448,359,319,276,233,192,155,143,479\nBrighton and Hove,E06000043,male,1140,1158,1247,1281,1258,1237,1351,1307,1373,1390,1421,1456,1420,1502,1361,1386,1367,1474,1810,2462,2891,2849,2742,2229,2202,2105,2068,2006,2123,2061,2133,2046,1936,1964,2055,1890,1890,2055,1849,1931,1944,1912,1890,1816,1851,1829,1833,2180,2147,2225,2123,2046,2096,2127,2090,2051,2139,1823,1741,1618,1519,1516,1415,1281,1191,1192,1093,1101,1000,998,970,928,1019,1075,1016,727,760,653,554,487,483,527,411,393,367,319,298,266,220,181,701\nPortsmouth,E06000044,male,1153,1155,1084,1133,1182,1212,1233,1293,1246,1181,1212,1262,1226,1166,1174,1077,1067,1052,1712,2625,2764,2518,1990,1688,1533,1462,1571,1484,1520,1514,1555,1496,1506,1565,1523,1556,1531,1469,1416,1408,1356,1344,1264,1180,1159,1194,1178,1185,1290,1340,1360,1334,1321,1311,1324,1275,1291,1319,1261,1235,1178,1086,1068,999,955,867,825,809,750,788,734,766,784,819,847,641,599,550,500,408,352,393,336,323,287,255,246,216,150,145,452\nSouthampton,E06000045,male,1389,1381,1431,1404,1396,1473,1485,1475,1510,1568,1492,1418,1459,1421,1290,1262,1205,1239,2030,2959,3040,3117,2817,2401,2106,2095,2169,2004,2121,1948,2063,1995,1981,1938,1929,1934,1919,1834,1833,1779,1778,1735,1601,1589,1552,1560,1503,1538,1496,1496,1538,1411,1378,1351,1417,1459,1474,1403,1358,1332,1239,1179,1212,1154,1062,1143,945,998,924,877,882,883,839,840,867,733,673,618,547,497,434,455,415,319,312,282,233,211,189,157,570\nIsle of Wight,E06000046,male,522,535,616,593,613,683,685,713,711,736,730,682,727,763,750,723,721,719,644,535,596,548,597,668,719,648,659,668,693,626,712,656,739,747,692,742,671,697,679,628,712,711,661,664,636,666,745,777,753,792,912,935,940,1007,1036,1109,1066,1073,1074,1039,1020,1029,1045,983,962,950,1064,1069,912,964,927,1011,1083,1173,1211,940,930,834,794,632,535,583,495,466,358,358,308,292,218,199,654\nBuckinghamshire,E06000060,male,2957,3078,3174,3420,3323,3474,3494,3479,3665,3759,3856,3776,3837,3688,3616,3505,3540,3488,2971,2375,2314,2341,2720,2939,2861,2877,2913,3058,2920,3151,3139,3201,3222,3421,3282,3341,3356,3442,3571,3650,3741,3931,3758,3561,3553,3552,3652,3770,3952,3958,3913,3832,3925,3954,4126,4048,4089,3972,3773,3558,3565,3328,3249,3113,2934,2836,2698,2591,2550,2450,2305,2503,2501,2735,2681,2058,2141,1936,1709,1579,1395,1355,1367,1230,1175,1025,865,748,654,607,1694\nEastbourne,E07000061,male,449,455,505,512,496,508,491,534,608,614,599,620,632,602,653,543,554,579,537,505,499,512,541,539,524,514,551,564,509,566,596,571,629,618,552,536,553,566,536,586,594,589,588,532,482,562,577,592,640,644,641,634,669,691,696,624,682,704,692,667,666,633,634,577,579,555,496,547,507,555,540,572,584,676,668,504,494,433,394,385,343,302,338,299,281,228,191,170,165,160,494\nHastings,E07000062,male,457,520,506,483,508,523,509,502,572,514,569,510,536,568,538,564,542,491,495,395,412,440,471,467,500,510,506,510,497,526,560,547,562,587,571,574,509,516,512,537,601,538,529,509,467,543,568,527,624,626,658,633,669,666,701,716,711,696,680,643,616,634,528,543,528,528,484,529,473,478,509,446,509,509,509,330,447,310,279,251,236,204,195,180,173,151,121,123,85,68,249\nLewes,E07000063,male,431,456,444,500,534,515,498,536,580,624,599,604,617,579,608,553,591,606,519,453,396,422,434,481,454,400,400,404,439,440,465,476,494,518,478,476,510,507,570,534,563,556,534,485,562,529,551,547,667,717,653,691,706,726,767,733,754,709,704,707,717,672,670,645,593,599,593,559,623,617,625,601,643,696,714,507,528,526,472,356,343,399,353,282,263,249,230,201,167,149,508\nRother,E07000064,male,362,369,403,404,419,398,444,434,458,484,497,466,450,481,481,454,514,477,429,367,331,345,395,415,431,415,377,380,388,422,354,388,368,404,404,323,405,404,373,387,408,401,392,351,386,408,413,491,498,536,568,584,617,588,698,664,721,744,693,695,654,701,677,641,661,611,658,669,676,606,662,760,689,852,920,653,637,654,525,439,393,422,362,348,338,283,260,221,185,156,553\nWealden,E07000065,male,670,664,777,769,793,858,845,850,866,900,907,908,960,952,949,886,893,909,804,649,603,659,736,754,702,725,709,710,728,765,769,733,762,780,773,715,762,713,813,795,824,871,833,695,762,738,948,958,1020,1152,1079,1173,1164,1184,1240,1186,1249,1263,1176,1200,1121,1125,1175,1114,1073,1009,949,1025,973,933,952,956,1027,1222,1162,893,968,853,842,647,555,587,540,497,463,394,340,303,247,232,733\nBasingstoke and Deane,E07000084,male,1004,1076,1078,1017,1203,1130,1155,1139,1272,1280,1239,1190,1107,1191,1081,1019,1032,980,895,769,738,905,1039,987,1013,1163,1191,1147,1165,1170,1285,1349,1397,1368,1287,1315,1296,1290,1290,1300,1309,1297,1259,1218,1221,1218,1307,1256,1300,1352,1396,1400,1406,1366,1425,1321,1326,1308,1257,1231,1158,1056,996,1004,932,872,837,843,803,796,782,856,808,897,880,656,671,619,583,429,451,437,384,373,302,290,222,185,197,152,468\nEast Hampshire,E07000085,male,575,616,591,667,628,655,649,699,792,786,798,732,751,753,766,748,757,794,676,497,467,480,519,616,647,570,608,649,641,582,697,631,637,667,684,665,679,651,716,721,732,717,712,686,721,698,771,781,933,884,923,935,888,908,928,923,963,925,956,937,916,895,840,851,826,752,728,705,667,720,624,677,738,767,840,587,638,577,528,426,368,378,366,331,315,272,252,216,184,147,496\nEastleigh,E07000086,male,689,734,756,819,820,831,841,909,887,901,917,901,839,844,791,838,828,761,701,560,594,570,663,756,730,769,746,790,801,881,923,920,927,888,866,911,934,879,881,898,932,947,869,804,843,850,840,876,898,903,971,967,925,936,942,912,920,992,865,856,826,839,831,760,721,714,673,688,667,619,589,645,662,722,697,530,562,491,439,372,394,374,323,303,283,241,218,177,163,142,495\nFareham,E07000087,male,454,484,530,577,618,638,600,629,616,638,677,616,677,631,603,606,629,694,566,482,515,530,578,651,618,561,566,549,532,564,609,675,636,665,641,672,677,665,618,637,661,664,592,606,623,609,633,680,789,728,812,813,800,838,836,835,867,897,873,866,818,781,836,741,756,741,629,601,620,598,604,628,695,771,831,600,592,566,488,389,372,402,341,360,295,290,242,221,190,157,491\nGosport,E07000088,male,418,472,446,446,430,467,467,455,535,525,519,539,500,493,530,469,474,458,418,382,398,440,491,443,477,474,486,478,517,474,488,527,504,505,467,492,508,485,509,480,452,486,453,452,438,413,449,480,486,568,586,502,562,571,586,590,606,600,590,572,584,565,532,516,450,469,431,448,380,419,425,429,446,530,491,405,371,284,287,222,216,238,221,198,190,147,113,102,109,91,275\nHart,E07000089,male,476,489,579,496,610,658,656,576,640,690,701,656,656,642,600,634,637,710,634,559,446,454,496,540,510,558,532,506,506,545,575,516,563,562,563,594,552,591,620,621,664,679,654,618,647,681,729,743,773,771,801,674,720,728,763,749,743,700,739,703,643,590,552,524,515,482,450,441,440,421,416,475,465,544,547,392,403,389,332,326,286,278,256,237,225,194,182,143,111,112,339\nHavant,E07000090,male,545,635,621,625,724,701,647,711,728,746,742,687,773,668,715,673,696,679,593,519,556,557,611,591,654,631,641,663,705,672,723,753,676,705,688,725,662,736,665,662,661,645,646,571,571,628,615,649,752,780,799,818,901,834,910,878,925,904,911,910,891,843,852,836,795,758,776,735,718,700,678,658,728,821,844,618,651,563,530,423,405,402,386,326,301,301,262,234,231,184,516\nNew Forest,E07000091,male,662,682,738,736,846,869,860,814,985,931,985,950,984,953,976,900,923,940,792,749,673,671,801,804,767,786,698,748,722,834,839,789,769,834,816,758,805,804,857,868,934,889,868,831,808,844,898,955,1016,1098,1154,1179,1222,1186,1275,1333,1372,1364,1303,1349,1339,1156,1373,1214,1164,1131,1163,1224,1158,1136,1137,1214,1221,1392,1405,1047,1167,1051,854,775,731,723,642,622,594,520,449,404,376,287,1076\nRushmoor,E07000092,male,620,690,661,625,623,621,684,600,621,651,592,575,531,593,550,536,560,565,568,557,505,575,586,609,643,731,773,758,765,800,844,830,849,908,844,857,751,776,762,762,759,766,659,645,643,660,623,650,659,655,698,689,654,673,688,740,651,644,638,640,604,513,470,486,490,392,387,374,338,341,336,346,414,447,469,291,345,352,282,236,243,229,190,162,151,118,95,86,63,66,186\nTest Valley,E07000093,male,630,691,713,733,807,795,785,773,810,792,787,746,823,792,667,686,749,688,595,530,464,546,545,657,730,688,676,736,719,766,827,783,867,804,769,800,824,746,779,821,831,858,819,763,771,845,895,858,886,916,929,907,934,977,1007,1021,970,941,912,932,847,838,792,766,799,700,720,671,606,617,666,663,695,747,802,550,642,546,489,422,342,366,385,334,319,271,267,188,146,140,429\nWinchester,E07000094,male,584,597,591,623,718,679,718,777,745,818,787,779,764,831,897,851,829,917,1043,1067,890,850,674,738,631,692,670,660,594,654,692,632,651,670,682,727,708,689,722,705,759,751,724,753,762,793,784,806,877,864,885,821,851,901,924,876,881,878,856,847,814,755,742,801,676,632,639,647,600,640,619,616,633,669,745,581,581,508,451,394,366,377,348,304,284,247,219,206,149,158,528\nAshford,E07000105,male,727,726,755,870,808,820,831,856,894,867,838,893,871,845,857,785,836,868,727,594,582,588,688,683,728,755,768,728,791,822,834,831,801,863,830,805,783,830,791,734,801,812,768,772,802,768,804,804,824,843,929,991,1024,984,956,946,954,954,852,896,839,782,710,677,653,690,636,609,629,634,584,670,658,732,743,561,594,526,461,386,362,372,319,292,256,236,213,147,138,132,365\nCanterbury,E07000106,male,665,669,714,729,752,804,762,784,788,869,851,872,862,829,944,924,898,972,1389,2072,1946,1928,1506,1120,1015,884,896,861,860,812,811,835,803,838,809,799,839,758,769,775,869,826,757,751,736,780,844,830,902,931,936,896,966,919,1001,1023,1067,936,957,945,923,862,881,858,851,844,820,779,835,762,807,853,871,940,932,706,702,588,628,486,452,504,427,391,345,293,269,203,180,154,545\nDartford,E07000107,male,805,858,908,876,867,815,830,816,863,884,859,873,825,799,739,768,747,660,613,469,465,516,574,620,606,653,715,695,794,797,894,900,926,918,946,913,947,917,858,901,957,911,890,822,799,839,797,813,746,786,761,732,752,781,752,795,758,677,704,625,589,616,538,504,526,455,452,450,386,388,412,361,373,437,394,299,313,265,250,236,218,200,174,184,177,146,122,119,94,78,273\nDover,E07000108,male,555,567,572,624,608,657,634,688,677,677,736,696,723,655,650,701,648,669,580,529,482,517,564,583,601,585,620,609,655,689,636,613,722,677,687,689,647,655,615,614,683,603,622,607,586,603,581,637,690,699,812,739,749,794,864,880,900,864,863,809,819,761,818,786,770,707,744,778,677,684,674,638,745,816,810,617,634,529,477,440,388,376,357,304,269,252,204,150,163,138,380\nGravesham,E07000109,male,654,699,645,693,676,726,724,704,724,772,749,753,675,734,680,729,657,705,613,507,517,559,593,630,616,584,585,656,645,675,710,700,705,759,733,728,719,697,685,716,730,695,714,610,647,668,683,634,702,686,758,739,722,709,721,789,683,751,697,657,591,601,603,571,498,530,489,461,426,418,451,421,441,503,475,342,372,363,313,268,243,263,229,197,184,166,160,136,107,104,277\nMaidstone,E07000110,male,1010,1048,1086,1147,1066,1143,1126,1073,1185,1154,1104,1048,1094,1039,1047,1032,1043,1033,830,712,710,856,989,1012,965,1081,1067,1171,1179,1163,1207,1165,1168,1264,1147,1216,1211,1148,1192,1168,1213,1185,1134,1023,1084,1075,1106,1112,1210,1208,1262,1297,1269,1301,1231,1272,1205,1185,1132,1096,1029,1084,1005,929,859,870,811,783,825,769,792,822,805,1000,992,725,737,658,557,513,429,456,415,380,350,338,273,213,172,182,492\nSevenoaks,E07000111,male,641,651,707,681,778,708,765,725,802,834,838,862,796,845,818,767,751,737,594,422,419,499,558,537,533,526,541,547,561,549,593,593,623,666,654,638,696,654,713,724,723,777,758,750,715,734,839,773,836,856,827,842,783,849,949,909,860,826,864,846,788,716,705,688,655,634,609,668,622,596,577,586,632,724,732,543,585,480,446,360,350,330,318,297,273,256,212,197,163,152,456\nFolkestone and Hythe,E07000112,male,518,508,541,523,564,575,557,548,645,625,638,666,639,603,606,577,583,574,543,496,505,530,556,629,571,575,553,562,573,636,573,577,588,613,583,555,559,584,548,593,632,645,561,596,526,570,622,645,610,762,791,754,828,806,775,883,818,807,870,747,816,775,758,684,669,643,651,632,696,649,693,674,701,871,851,555,635,534,484,387,417,353,327,298,279,233,218,176,148,123,404\nSwale,E07000113,male,793,865,962,932,946,975,877,979,1045,998,1012,943,1020,969,959,947,917,885,813,690,695,801,817,899,889,882,912,977,1020,970,1026,1071,1047,992,1071,1004,992,966,983,998,960,1051,935,830,837,862,891,886,998,1033,1019,1044,1033,1082,1058,1085,1099,1130,1008,980,951,897,897,886,853,805,778,789,699,702,762,775,766,866,818,602,649,581,502,422,403,411,356,308,259,233,217,159,126,123,356\nThanet,E07000114,male,721,777,768,795,796,812,781,784,860,926,845,836,894,889,810,804,864,835,703,606,622,634,685,744,721,675,724,712,733,786,843,756,770,829,740,826,757,815,735,789,830,816,751,781,740,721,789,779,857,881,928,841,927,894,977,939,982,986,991,983,882,825,891,912,819,789,793,810,761,800,845,816,853,958,914,694,733,649,567,466,472,427,369,366,324,258,241,204,174,146,504\nTonbridge and Malling,E07000115,male,657,773,858,795,852,837,828,883,955,890,922,889,895,902,903,918,887,916,761,522,491,537,633,626,653,636,649,665,665,733,732,721,800,795,731,746,759,789,763,822,842,854,813,817,782,843,927,921,933,1004,965,997,942,1000,952,930,935,938,896,885,854,760,779,736,697,612,662,635,619,571,570,619,597,733,697,465,529,504,467,356,350,328,360,287,298,248,219,194,151,114,377\nTunbridge Wells,E07000116,male,582,592,647,687,663,712,667,718,753,790,821,817,853,804,880,748,728,761,599,408,370,386,517,582,576,541,591,551,644,596,620,626,668,677,674,718,659,671,682,702,754,791,755,733,727,755,795,831,864,854,849,863,883,875,946,821,867,829,785,708,708,687,666,633,598,529,576,523,469,493,519,528,561,596,586,470,461,422,391,316,322,293,287,270,217,210,178,175,156,115,428\nCherwell,E07000177,male,936,970,1008,962,979,969,984,956,971,1010,1050,1042,978,976,986,931,943,908,812,652,673,776,841,886,941,968,1060,1061,1141,1144,1163,1183,1230,1276,1234,1196,1190,1146,1206,1093,1180,1170,1066,1051,1007,1017,1024,1042,1129,1077,1069,1130,1117,1196,1185,1160,1141,1158,1115,1030,1013,920,839,862,867,827,741,709,709,712,670,687,722,764,732,539,571,530,472,399,370,374,340,320,290,239,239,210,156,145,446\nOxford,E07000178,male,725,744,706,725,796,811,741,793,823,893,866,849,949,973,861,890,867,947,1835,3269,2570,2552,2256,1825,1599,1542,1626,1532,1485,1473,1445,1378,1338,1248,1219,1227,1089,1079,1054,1006,1044,1048,938,911,851,839,888,826,881,888,842,927,846,871,823,848,784,788,801,734,602,657,607,660,593,579,518,489,427,474,476,468,454,480,444,324,360,323,305,276,212,232,242,201,182,177,163,133,126,118,333\nSouth Oxfordshire,E07000179,male,781,763,855,855,879,923,867,900,916,928,978,950,880,941,883,900,867,885,722,584,555,598,735,818,818,803,783,834,827,905,980,904,938,908,926,924,980,936,935,904,1002,1002,925,935,944,938,1023,1009,1020,1081,1129,1056,1106,1126,1173,1069,1132,1088,1065,1009,1010,927,876,851,770,756,760,770,739,673,722,704,711,778,836,651,674,562,540,444,451,428,426,388,322,283,293,221,208,172,518\nVale of White Horse,E07000180,male,724,811,807,823,856,864,808,846,834,926,926,901,889,904,964,927,881,877,765,549,531,569,685,741,761,818,800,839,873,910,887,917,948,950,898,938,897,944,969,883,917,956,884,866,852,904,885,908,936,918,887,937,970,951,954,1002,1014,939,943,900,864,814,789,817,716,729,711,668,665,674,679,679,727,749,721,537,625,497,451,426,360,403,357,312,309,262,248,192,168,125,514\nWest Oxfordshire,E07000181,male,565,569,624,543,592,669,625,680,739,729,699,725,680,726,672,642,679,662,595,455,469,547,570,652,686,671,654,663,684,731,681,687,683,747,692,652,675,664,706,748,744,658,690,634,646,666,621,748,752,794,838,800,767,845,814,817,842,853,842,838,770,736,696,690,664,604,627,573,603,548,604,570,604,679,587,523,535,453,470,367,313,348,310,274,276,263,192,179,138,145,454\nElmbridge,E07000207,male,776,860,837,915,944,932,909,1018,1004,1073,1088,1032,1024,1003,967,942,911,888,682,412,382,456,586,585,612,576,582,583,547,627,659,681,701,736,731,756,751,790,923,952,972,1083,1062,1099,1132,1050,1112,1135,1136,1103,1068,1023,1043,1001,983,1009,1026,898,923,921,860,764,756,738,657,631,620,609,556,592,562,546,589,627,648,476,478,449,434,308,306,304,284,280,255,242,212,180,197,140,503\nEpsom and Ewell,E07000208,male,456,447,448,513,539,511,525,543,552,574,540,560,538,572,553,548,534,523,428,307,366,379,392,399,411,358,397,364,384,411,418,467,428,460,481,453,496,489,571,585,581,618,575,585,605,638,615,598,572,639,553,572,549,590,580,578,546,579,538,486,474,427,424,427,414,380,325,313,341,331,339,362,358,392,411,293,285,260,249,213,202,189,166,158,153,148,110,100,100,91,241\nGuildford,E07000209,male,614,652,749,693,696,777,761,771,844,880,913,801,883,875,806,718,816,994,1269,1702,1605,1433,1500,1148,938,928,932,825,872,864,809,890,847,844,835,838,847,833,829,833,916,878,886,876,891,887,899,978,992,972,992,940,986,979,966,961,998,967,917,898,844,815,719,758,673,661,672,611,621,601,556,609,578,693,678,505,493,477,412,347,328,350,284,268,263,256,219,190,175,138,488\nMole Valley,E07000210,male,357,383,424,409,423,447,446,461,513,513,591,505,539,565,522,515,555,526,453,291,291,347,427,449,433,432,435,363,399,413,405,413,419,408,409,424,449,473,453,490,556,507,527,498,502,541,582,594,582,691,664,612,655,703,739,718,711,684,618,633,618,611,623,567,546,518,469,517,511,464,448,523,451,492,583,429,447,398,389,264,276,269,265,254,248,220,180,167,138,140,390\nReigate and Banstead,E07000211,male,866,928,894,955,922,1022,987,1007,1033,1064,1026,1015,1068,1012,934,891,872,916,709,538,528,591,721,763,786,762,858,786,824,901,926,1034,1025,1048,966,1019,1040,1027,1064,1116,1116,1134,1086,1080,1000,1055,1097,1078,1041,1109,1052,1022,1011,1026,1078,1108,1044,1009,990,928,921,921,839,793,755,733,676,665,646,631,617,622,665,739,717,539,528,464,468,372,347,321,333,300,246,230,213,187,168,139,530\nRunnymede,E07000212,male,445,481,515,452,520,467,519,464,436,514,490,521,505,514,470,461,455,449,740,1066,953,831,608,559,506,494,459,478,519,496,548,489,523,552,576,522,559,492,594,538,558,629,526,552,536,556,571,554,603,621,558,567,607,592,589,587,603,599,583,511,503,500,471,454,417,401,384,380,339,338,318,321,359,397,410,311,296,309,281,223,196,204,172,169,155,161,135,142,108,93,306\nSpelthorne,E07000213,male,592,629,595,594,664,623,631,639,669,680,667,602,638,627,634,580,609,598,501,428,431,439,489,540,581,552,598,590,599,601,672,668,697,791,714,662,788,710,750,835,748,725,750,721,690,668,683,596,702,753,730,697,758,657,752,793,702,771,722,729,712,605,598,523,494,509,471,418,450,415,431,411,412,449,495,378,352,323,330,252,272,284,226,249,231,194,156,125,129,117,355\nSurrey Heath,E07000214,male,438,406,473,491,512,562,536,552,560,565,581,592,618,563,560,561,614,568,463,333,324,363,456,498,534,470,507,452,503,494,499,574,534,574,510,486,557,554,562,630,591,595,597,593,631,606,656,657,599,683,744,679,672,668,703,681,670,656,708,643,602,513,551,533,493,461,433,433,426,400,376,374,429,496,474,331,349,378,341,265,246,251,231,198,205,173,157,144,120,104,296\nTandridge,E07000215,male,468,491,550,524,536,570,497,523,588,551,546,559,564,532,554,530,544,557,466,338,340,385,447,422,463,423,411,381,348,400,444,457,470,485,456,489,524,538,507,554,523,537,544,546,514,509,601,566,599,612,630,624,590,660,641,669,652,659,615,641,631,549,502,535,474,458,425,454,451,420,392,425,445,510,483,379,357,339,321,234,227,238,239,225,202,165,124,134,131,107,394\nWaverley,E07000216,male,556,627,684,730,745,786,755,762,868,832,831,812,869,935,980,917,891,974,780,564,516,536,622,636,530,545,505,521,557,584,561,558,577,611,636,696,699,696,719,774,786,817,783,790,827,903,917,915,929,983,1008,970,938,949,929,966,910,875,890,801,825,782,766,735,684,648,647,662,623,600,587,658,642,713,698,527,603,597,505,380,378,394,356,342,284,292,262,199,195,179,570\nWoking,E07000217,male,592,612,691,664,668,676,685,679,693,748,709,686,733,713,667,659,592,596,539,388,443,417,534,551,600,619,637,607,716,635,662,697,754,737,717,754,730,737,751,836,843,867,777,765,806,806,786,761,739,775,743,723,712,740,686,673,702,715,648,597,590,554,556,539,508,459,466,410,459,457,433,416,393,446,428,329,347,302,271,236,215,226,187,192,201,196,133,132,112,105,346\nAdur,E07000223,male,274,281,351,349,344,394,362,410,434,436,409,408,373,421,395,358,381,368,344,253,221,287,298,298,317,306,306,277,321,323,339,331,329,366,367,385,348,361,369,406,388,412,399,388,398,393,416,397,485,505,456,469,473,412,456,484,493,452,451,400,416,375,368,384,362,343,348,318,362,324,298,343,354,395,378,290,339,289,302,217,212,226,184,173,182,145,127,98,94,85,259\nArun,E07000224,male,648,717,741,775,799,827,818,769,883,905,837,900,894,862,835,831,851,861,737,712,697,673,772,761,812,844,819,841,806,902,907,936,900,912,914,919,923,881,896,858,886,879,881,767,804,784,826,906,976,1014,1083,1096,1160,1114,1174,1118,1232,1183,1099,1108,1053,1043,1010,1021,1032,984,996,1018,976,1031,1041,1095,1190,1277,1258,945,1067,927,868,711,673,614,613,605,526,449,411,341,281,270,873\nChichester,E07000225,male,480,531,549,576,546,575,615,616,686,677,689,643,672,692,659,645,627,661,642,633,645,654,656,651,613,690,638,592,618,622,659,618,615,681,542,667,696,618,643,597,632,618,616,619,583,595,622,677,754,803,739,808,859,802,865,861,875,930,924,855,821,870,862,810,770,808,800,804,783,690,721,754,793,848,897,701,710,669,631,539,446,488,418,431,364,332,297,274,199,178,640\nCrawley,E07000226,male,786,799,798,769,793,860,850,872,840,817,897,830,813,766,741,722,744,737,616,627,592,630,633,723,737,750,801,828,888,943,977,958,1001,974,946,978,926,1035,942,972,970,979,896,844,793,776,844,799,819,799,830,803,764,758,765,750,763,741,689,666,666,630,622,584,493,537,450,451,417,383,414,377,369,393,390,278,283,260,224,197,189,160,162,151,129,134,122,123,93,65,295\nHorsham,E07000227,male,687,715,755,769,865,830,783,812,887,825,892,967,944,923,918,892,896,841,746,523,554,603,657,691,717,718,723,725,752,800,848,781,822,848,852,845,818,797,839,886,924,900,908,824,811,818,912,924,994,986,1041,1004,1081,1110,1111,1162,1115,1095,1091,1054,1080,977,970,917,864,878,758,816,806,770,783,797,833,860,955,682,673,619,583,494,488,421,409,433,351,287,281,231,207,185,620\nMid Sussex,E07000228,male,767,762,870,862,953,968,927,989,952,970,1032,1003,971,965,973,935,959,948,797,550,546,605,673,761,758,702,750,785,720,766,831,844,850,964,855,907,923,994,956,966,993,1075,1007,1030,1003,998,1053,1091,1122,1132,1143,1084,1121,1169,1076,1092,1097,1067,990,996,909,871,872,829,841,770,855,698,716,698,694,711,713,874,835,628,669,644,585,411,398,383,392,357,324,316,252,216,207,165,590\nWorthing,E07000229,male,521,548,567,577,586,563,633,614,643,654,670,699,636,620,627,586,631,676,529,477,472,477,534,540,573,560,610,633,645,589,695,689,674,723,656,652,722,656,701,659,747,666,648,701,678,700,703,764,757,837,773,740,809,815,853,777,850,780,740,713,698,712,682,629,604,560,571,576,527,517,547,532,605,695,697,509,487,445,446,299,329,336,297,300,250,218,212,175,152,129,524\nBath and North East Somerset,E06000022,male,926,898,918,1015,940,1026,953,1071,1013,1088,1109,1134,1036,1149,1070,1053,990,1063,1718,2525,2376,2093,2061,1546,1263,1133,1120,1152,1089,1130,1129,1091,1161,1169,1084,1130,1093,1063,1002,1078,1083,1100,1102,1030,968,1041,1039,1161,1236,1242,1211,1221,1231,1193,1305,1264,1286,1256,1227,1223,1127,1055,1084,1059,968,944,903,874,878,880,852,882,975,994,1010,752,795,673,620,570,488,493,478,465,401,360,312,264,243,207,705\n\"Bristol, City of\",E06000023,male,2619,2612,2721,2674,2759,2658,2716,2718,2747,2763,2758,2655,2598,2571,2428,2209,2390,2327,3131,4692,5148,5065,4693,4253,4308,4339,4401,4460,4483,4534,4492,4442,4373,4320,4128,4176,3968,3769,3635,3492,3546,3319,3091,2911,2876,2723,2771,2630,2704,2753,2770,2598,2685,2661,2681,2590,2726,2443,2389,2343,2189,2055,2091,1933,1904,1793,1728,1688,1545,1547,1562,1544,1519,1598,1529,1177,1138,1093,1017,840,767,814,724,676,577,491,449,404,362,326,1010\nNorth Somerset,E06000024,male,977,1070,1128,1104,1167,1207,1195,1211,1328,1373,1340,1364,1327,1383,1240,1243,1203,1181,1069,876,929,925,987,1048,1047,1014,972,1093,1063,1126,1157,1111,1209,1264,1172,1236,1200,1232,1291,1342,1395,1272,1281,1219,1269,1251,1350,1438,1441,1518,1510,1546,1554,1544,1460,1680,1553,1578,1551,1472,1357,1282,1335,1270,1227,1214,1203,1203,1179,1165,1226,1241,1295,1400,1459,1046,1207,1006,942,768,757,725,666,580,538,467,470,354,274,283,881\nSouth Gloucestershire,E06000025,male,1529,1670,1691,1750,1688,1802,1655,1726,1786,1795,1761,1751,1720,1705,1630,1574,1552,1603,1732,1959,1929,1850,1908,1935,1877,1854,1944,1915,1962,1958,1951,1993,2054,2033,1958,2002,1942,1977,1871,1913,1868,1880,1793,1685,1729,1718,1690,1886,1813,1887,2014,1960,1984,1988,2067,2030,2003,1967,2000,1878,1792,1641,1628,1502,1487,1355,1313,1336,1320,1259,1221,1334,1267,1433,1414,1062,1281,1066,1066,833,743,751,705,667,591,513,469,387,353,266,967\nPlymouth,E06000026,male,1274,1258,1420,1414,1463,1563,1471,1511,1622,1601,1596,1539,1557,1515,1417,1436,1440,1381,1635,2056,2091,2254,2237,1892,1853,1874,1795,1783,1744,1782,1917,1833,1811,1775,1734,1724,1719,1737,1691,1781,1688,1603,1584,1450,1469,1491,1428,1585,1628,1653,1685,1692,1751,1776,1757,1779,1764,1695,1770,1616,1670,1525,1472,1512,1338,1312,1324,1274,1206,1170,1158,1173,1257,1369,1340,996,1079,907,885,670,623,628,618,530,466,436,366,326,269,227,725\nTorbay,E06000027,male,558,635,644,630,628,678,718,765,770,799,745,795,757,789,751,755,765,738,706,551,528,607,661,699,680,645,636,700,738,731,761,685,792,734,713,724,677,730,728,702,733,704,717,587,690,694,756,864,874,860,986,1006,985,1048,1058,1034,1055,1066,1052,1016,1039,981,917,986,922,912,867,937,894,884,813,925,983,1030,1092,792,829,772,660,544,497,499,450,422,407,347,295,272,237,201,587\nSwindon,E06000030,male,1310,1349,1371,1451,1442,1530,1539,1500,1626,1604,1616,1529,1474,1558,1405,1426,1321,1367,1193,1069,1096,1109,1245,1346,1326,1400,1455,1386,1510,1650,1678,1683,1653,1671,1741,1679,1661,1732,1690,1707,1753,1757,1609,1569,1495,1543,1680,1663,1715,1745,1715,1719,1626,1642,1750,1642,1683,1669,1630,1604,1486,1369,1375,1237,1165,1088,1061,1064,947,985,907,925,894,984,983,710,734,633,629,541,468,484,446,411,367,333,281,262,229,170,588\nCornwall,E06000052,male,2312,2558,2619,2793,2853,2946,2936,2994,3224,3342,3269,3212,3242,3201,3157,2979,2995,3100,2953,2895,3054,2948,2834,2885,2798,2679,2704,2825,2775,3029,3175,3076,2982,3090,2941,3031,2950,2987,2942,3069,3379,3139,2874,2849,3034,2898,3093,3342,3642,3629,3841,3771,3832,3973,4035,4193,4264,4263,4015,4038,4056,3927,3951,3828,3841,3638,3537,3634,3540,3560,3574,3648,3831,4129,4237,3070,3250,2849,2591,2073,1901,1904,1731,1587,1375,1218,1134,859,825,718,2145\nIsles of Scilly,E06000053,male,11,10,12,6,9,8,11,13,14,10,6,10,8,15,14,14,4,3,4,5,9,10,6,5,12,8,9,13,9,11,5,10,13,17,10,10,11,13,11,14,10,16,14,23,7,13,8,6,7,9,16,15,14,14,12,16,18,24,24,7,9,15,13,19,11,10,12,16,9,15,14,13,16,13,14,19,23,12,10,7,10,18,6,6,7,4,4,1,5,2,8\nWiltshire,E06000054,male,2271,2584,2684,2720,2770,2925,2989,2937,3165,3299,3203,3094,3113,2949,2996,2895,2988,3272,2870,2558,2290,2426,2782,2781,2922,2968,2961,2889,2896,2950,3031,2991,3012,3088,3063,3100,3004,3081,3002,2947,3050,3066,3066,2681,2719,2900,3007,3163,3440,3675,3605,3589,3717,3690,3750,3802,3817,3784,3558,3613,3521,3416,3315,3041,2967,2826,2806,2817,2708,2712,2673,2709,2769,3090,3073,2217,2449,2133,2010,1672,1499,1520,1412,1231,1165,1040,947,754,680,593,1787\n\"Bournemouth, Christchurch and Poole\",E06000058,male,1880,1844,1912,1994,2059,2107,2041,2163,2202,2322,2271,2193,2195,2211,2072,2008,2053,2029,2209,2891,2841,2870,2801,2547,2361,2336,2328,2298,2391,2435,2538,2560,2498,2585,2523,2403,2530,2567,2615,2662,2706,2710,2498,2404,2322,2394,2424,2369,2500,2663,2671,2603,2737,2678,2707,2648,2677,2592,2570,2563,2444,2348,2306,2206,2175,2036,1922,2083,1963,1933,1980,1989,2040,2277,2322,1770,1850,1615,1537,1217,1151,1133,1122,1074,972,871,767,661,579,459,1792\nDorset,E06000059,male,1450,1527,1559,1542,1651,1796,1710,1799,2006,1982,1968,1990,2018,2229,2144,2085,2273,2217,2001,1565,1478,1551,1635,1692,1818,1742,1719,1695,1643,1657,1836,1809,1758,1804,1858,1806,1759,1708,1711,1841,1821,1930,1899,1713,1776,1833,1935,2011,2274,2291,2404,2495,2647,2613,2703,2763,2829,2968,2868,2910,2844,2722,2792,2804,2695,2560,2668,2589,2541,2577,2588,2696,2809,3221,3178,2320,2560,2125,2177,1690,1579,1498,1477,1370,1252,1056,946,838,715,609,2201\nEast Devon,E07000040,male,597,643,705,685,666,769,766,748,845,868,827,792,761,798,801,762,819,805,721,603,654,605,700,712,703,670,663,667,725,700,688,744,690,766,689,765,756,703,713,744,749,772,782,722,690,750,802,825,913,926,924,947,1043,1046,1051,1027,1065,1035,1007,1035,974,1010,997,969,1008,965,932,971,963,965,1044,1119,1061,1211,1261,937,979,912,888,690,627,616,601,557,546,440,363,351,293,271,947\nExeter,E07000041,male,605,584,596,619,604,650,611,659,635,656,661,649,634,613,590,585,582,640,1446,2437,2371,2090,1438,1047,934,917,891,843,923,880,889,911,917,912,921,844,852,846,858,804,799,797,778,700,613,697,763,681,718,811,742,759,835,766,768,765,750,750,689,634,691,618,651,597,572,539,523,508,513,500,512,537,504,532,576,410,414,372,333,325,297,284,287,242,229,194,170,151,121,102,401\nMid Devon,E07000042,male,391,397,456,397,427,447,441,475,527,497,512,498,516,527,559,530,495,494,444,364,331,330,365,399,406,416,399,421,374,410,398,458,423,417,408,463,451,467,409,461,480,468,407,395,452,430,499,490,569,533,616,629,583,607,583,601,619,636,608,577,567,548,591,549,508,494,482,514,541,479,487,552,491,533,577,437,429,407,367,333,258,266,200,212,217,199,162,122,121,110,327\nNorth Devon,E07000043,male,391,462,436,479,523,481,504,535,611,547,602,590,553,553,542,520,579,535,530,495,353,432,448,486,484,486,484,511,504,518,561,502,498,556,482,477,463,479,484,503,562,550,538,500,475,458,536,582,621,621,687,684,688,681,703,723,744,762,736,704,746,690,669,684,683,616,597,621,599,609,600,641,680,702,750,553,549,510,489,387,342,310,312,286,281,259,211,176,143,137,446\nSouth Hams,E07000044,male,309,344,366,412,386,440,407,419,453,487,514,476,487,455,507,465,488,474,432,350,333,309,346,416,384,393,334,356,347,437,391,393,411,425,423,413,358,437,400,455,416,438,415,387,426,453,465,485,524,562,563,561,649,643,662,689,693,713,663,721,708,692,699,656,671,657,603,607,625,629,622,654,664,770,701,524,561,492,447,372,341,290,337,275,244,250,195,167,137,98,408\nTeignbridge,E07000045,male,582,576,624,627,640,679,673,747,706,748,731,795,693,742,743,713,697,706,602,515,547,546,660,605,657,621,630,638,659,647,688,639,695,748,736,698,726,688,694,735,703,775,687,659,628,708,711,811,804,860,947,882,931,917,980,1012,1023,1071,968,1083,948,962,960,931,907,891,925,933,847,848,880,867,905,1039,1009,807,837,714,650,536,482,480,433,378,368,312,278,230,209,202,610\nTorridge,E07000046,male,248,278,291,300,325,357,330,398,376,390,361,376,394,358,359,359,349,355,297,278,274,273,269,342,340,344,308,306,324,312,305,357,323,335,298,319,299,285,325,325,316,327,302,295,314,340,340,357,373,464,471,497,465,498,496,572,541,537,526,526,544,511,547,505,488,495,509,487,508,484,502,507,507,588,542,411,424,396,360,312,276,259,219,231,177,163,131,158,119,87,298\nWest Devon,E07000047,male,215,192,197,236,262,293,242,274,304,301,286,308,296,343,306,345,342,359,282,213,194,227,209,278,238,249,199,262,236,249,277,268,277,252,248,286,283,254,290,263,309,316,281,243,226,285,285,339,388,360,385,405,407,420,462,448,486,481,450,470,476,433,435,423,433,388,411,406,416,398,397,410,381,482,431,378,387,345,287,241,235,232,190,193,177,138,138,134,105,68,288\nCheltenham,E07000078,male,521,535,662,630,654,636,675,657,633,662,664,695,682,631,713,613,600,667,668,693,757,785,746,812,842,873,830,819,809,896,827,864,846,779,788,830,800,799,834,811,818,774,793,699,700,705,697,744,730,743,732,779,793,819,791,820,848,791,766,733,776,700,656,645,613,550,520,527,528,539,497,556,570,564,581,438,473,392,376,310,338,288,307,268,291,237,183,159,144,116,432\nCotswold,E07000079,male,402,379,427,437,432,442,450,462,462,502,533,502,492,482,495,447,462,456,453,358,385,428,442,405,400,385,425,372,395,392,422,465,437,407,436,432,460,476,481,503,462,537,491,440,500,495,533,561,583,638,591,632,661,654,712,743,738,712,680,694,661,674,626,604,563,589,568,640,569,544,574,558,631,616,662,448,500,482,478,359,337,312,311,230,293,213,191,167,157,125,410\nForest of Dean,E07000080,male,355,405,436,405,452,430,414,441,467,477,486,467,453,457,447,453,503,597,538,414,398,414,421,456,430,430,442,482,445,403,499,488,441,482,482,426,431,430,439,456,412,439,439,364,419,429,471,490,529,587,582,627,624,647,701,730,692,659,703,667,637,647,610,573,598,553,522,601,578,570,525,578,617,609,611,442,454,466,445,353,304,351,280,243,229,172,164,139,108,93,284\nGloucester,E07000081,male,708,749,752,784,846,837,822,816,907,887,844,789,833,915,779,811,750,748,743,824,829,897,889,800,806,881,825,896,941,870,935,980,966,989,917,857,955,941,879,949,927,884,833,794,763,799,775,845,832,906,880,887,954,917,892,916,875,927,937,848,883,803,752,713,673,653,611,577,524,529,531,535,556,577,546,413,448,414,411,363,279,298,294,232,229,215,183,125,151,106,338\nStroud,E07000082,male,520,582,603,603,626,677,608,637,684,800,758,722,724,749,777,685,667,744,609,551,469,480,542,561,544,598,627,583,588,624,670,656,594,602,613,653,643,651,639,696,724,707,694,641,657,703,755,811,797,913,929,913,922,921,970,896,945,915,920,889,938,853,821,787,750,767,745,737,661,733,699,730,736,791,720,572,570,558,535,406,393,392,338,309,288,235,228,208,183,124,450\nTewkesbury,E07000083,male,490,547,589,547,584,622,571,589,624,572,603,546,600,526,552,504,532,500,440,336,360,359,434,447,484,466,494,501,540,528,627,573,578,568,561,538,588,562,581,580,612,625,528,506,514,538,518,591,602,632,588,595,685,675,696,716,683,696,647,653,561,574,573,557,536,556,501,497,514,493,472,519,524,576,602,423,479,414,410,325,292,325,279,278,215,164,180,138,118,92,355\nMendip,E07000187,male,513,561,533,551,599,628,613,624,621,615,680,736,710,744,771,719,792,831,720,447,406,510,523,569,550,551,567,601,594,559,589,616,591,647,617,615,589,581,634,624,617,628,604,573,588,619,655,741,733,828,878,839,874,904,884,912,872,922,881,835,834,756,749,767,692,696,704,691,681,674,692,719,728,726,769,568,593,508,498,383,381,354,317,347,256,252,210,164,173,119,457\nSedgemoor,E07000188,male,550,663,614,643,660,710,731,698,700,712,757,774,718,763,682,738,670,731,671,577,567,583,613,670,672,675,669,721,694,706,771,702,801,715,703,716,697,723,697,695,689,722,643,631,643,604,712,777,794,914,867,863,971,912,1017,966,999,971,933,891,884,826,833,759,837,748,731,756,695,704,789,765,775,842,857,609,674,549,548,480,410,458,377,307,312,249,236,189,180,140,486\nSouth Somerset,E07000189,male,823,841,862,836,861,902,875,892,975,1000,992,986,993,1013,934,949,910,908,836,763,781,833,863,969,921,913,936,962,937,980,978,1010,967,992,962,954,914,909,945,925,906,906,915,890,793,900,937,962,1058,1097,1183,1215,1123,1246,1214,1280,1261,1235,1254,1228,1194,1151,1101,1115,1091,1046,1067,1074,1086,1136,1139,1066,1130,1239,1217,909,942,880,807,719,597,609,565,508,460,394,336,301,214,225,787\nSomerset West and Taunton,E07000246,male,708,722,706,775,787,846,846,847,868,910,874,870,868,897,915,919,910,976,851,672,583,643,743,752,744,812,795,861,860,831,896,894,875,926,859,861,860,888,888,880,843,851,814,764,805,776,809,944,955,973,1057,1017,1061,1080,1113,1133,1160,1143,1100,1113,1045,1048,1029,1038,976,889,987,1011,1002,1021,975,979,1038,1110,1042,831,840,797,758,615,501,537,527,473,433,383,330,297,261,225,752\nIsle of Anglesey,W06000001,male,303,309,328,343,387,352,382,370,407,391,431,420,425,385,411,370,386,367,359,294,263,291,365,280,343,322,348,342,308,347,369,336,351,369,360,313,339,353,327,331,341,355,339,296,322,346,351,382,463,453,477,428,465,457,519,504,529,504,540,486,518,514,518,463,484,454,486,482,480,459,453,491,501,545,451,318,433,356,345,285,268,270,239,220,184,160,122,96,80,78,275\nGwynedd,W06000002,male,520,550,523,581,571,640,591,644,674,662,649,723,663,649,664,664,629,626,675,943,969,921,843,751,711,673,642,636,696,602,660,639,670,669,639,572,586,569,569,599,587,594,572,527,589,549,620,675,732,774,824,746,794,776,801,866,861,844,917,790,860,725,808,843,686,707,722,721,726,623,664,695,760,812,737,573,541,549,496,383,334,395,329,309,271,217,219,173,166,121,461\nConwy,W06000003,male,476,538,522,526,539,574,616,577,619,640,660,620,611,617,650,629,664,640,528,460,436,507,519,562,575,484,573,502,565,574,613,588,607,602,574,546,569,557,558,585,592,602,544,484,541,553,570,606,714,775,797,737,800,763,834,875,839,889,868,861,886,863,766,817,774,747,743,806,715,764,749,795,816,876,865,676,656,573,602,461,420,404,381,333,344,297,268,267,197,148,533\nDenbighshire,W06000004,male,458,508,488,479,571,519,521,539,560,563,566,593,592,590,554,587,620,600,551,408,422,452,459,521,487,495,469,498,514,506,475,499,486,475,513,488,478,458,440,478,487,476,458,414,491,491,518,542,541,631,658,648,647,669,668,695,750,731,689,690,677,674,659,625,606,591,595,586,602,577,567,653,666,705,641,450,512,455,451,376,353,297,286,277,244,188,193,148,121,111,351\nFlintshire,W06000005,male,759,736,804,813,807,834,874,893,931,951,956,982,939,1016,959,870,971,879,785,683,647,764,788,835,831,788,844,879,866,985,949,927,994,962,942,933,905,886,858,941,905,930,841,862,795,798,954,940,1012,1175,1146,1125,1255,1172,1090,1157,1153,1158,1128,1115,1059,1043,1023,925,899,825,818,846,839,821,910,852,914,973,956,618,724,660,562,489,471,438,410,378,317,254,248,184,161,135,467\nWrexham,W06000006,male,641,717,726,755,757,784,772,792,848,823,850,890,864,834,795,825,833,784,683,673,614,637,788,729,816,795,792,803,806,796,889,815,876,838,878,848,876,874,828,853,915,895,826,728,786,788,829,819,945,999,986,1026,989,975,980,981,1026,954,976,878,879,826,761,812,805,743,695,724,737,676,705,731,724,781,724,564,570,515,536,435,381,342,301,303,260,231,202,154,153,117,388\nCeredigion,W06000008,male,250,267,274,293,301,335,294,333,348,325,389,323,331,331,337,357,355,362,575,802,792,820,684,525,440,392,410,363,338,347,352,370,359,347,327,287,345,321,326,332,343,278,306,297,294,345,333,349,329,427,428,438,486,451,498,487,506,524,538,494,525,494,499,505,478,510,503,479,461,455,447,483,506,564,499,374,389,376,351,280,236,239,212,199,174,159,143,106,124,84,299\nPembrokeshire,W06000009,male,526,544,578,610,640,662,670,689,673,709,740,716,707,736,754,705,713,682,589,551,543,576,602,668,639,575,564,612,670,664,679,591,632,674,622,616,595,597,590,604,622,657,593,558,565,563,607,660,699,763,757,775,842,852,878,907,910,934,960,928,906,869,938,861,848,871,848,883,862,836,851,847,807,918,847,655,721,621,541,494,514,441,388,335,299,309,234,178,210,134,466\nCarmarthenshire,W06000010,male,869,808,920,953,1027,1053,1006,1004,1096,1140,1123,1107,1124,1102,1157,1124,1094,1140,977,870,859,839,873,993,998,982,944,965,953,1002,1077,1040,1044,1076,1058,1003,990,984,1013,1014,1017,1025,963,921,957,1012,1026,1064,1121,1254,1216,1223,1244,1250,1322,1382,1429,1360,1340,1362,1334,1322,1277,1306,1228,1172,1261,1239,1201,1167,1135,1191,1192,1254,1189,984,957,891,847,725,682,586,539,502,465,406,374,303,247,194,622\nSwansea,W06000011,male,992,1130,1187,1206,1273,1287,1354,1284,1391,1439,1459,1394,1459,1420,1406,1295,1406,1337,1530,2015,2421,2558,2205,1652,1588,1469,1339,1396,1404,1454,1601,1481,1409,1388,1492,1475,1489,1308,1512,1292,1466,1537,1264,1254,1308,1366,1352,1329,1329,1502,1449,1601,1682,1449,1570,1554,1690,1591,1470,1504,1478,1438,1394,1328,1315,1202,1213,1224,1211,1228,1145,1264,1161,1371,1285,893,997,888,867,751,678,623,590,567,500,440,380,320,291,264,754\nNeath Port Talbot,W06000012,male,632,635,742,767,793,784,795,797,812,904,917,870,868,864,841,858,840,758,1079,1258,905,756,797,737,815,794,794,808,839,866,864,817,814,811,871,856,879,852,839,839,834,827,826,788,772,724,826,804,838,908,958,924,966,962,935,1043,997,1008,1019,948,977,948,910,986,820,815,802,850,857,766,760,789,793,895,765,580,630,585,526,461,418,385,342,323,285,260,222,192,147,122,394\nBridgend,W06000013,male,666,703,739,809,832,790,841,866,871,927,940,926,896,902,826,861,871,800,764,681,658,731,782,892,905,868,856,892,899,892,987,959,979,952,1013,908,898,860,853,890,953,923,866,775,787,808,820,889,958,1028,1081,1001,1038,1066,1079,1030,1118,1049,1004,1039,953,878,931,870,863,811,771,800,742,764,768,763,792,816,771,650,633,619,499,472,449,397,364,345,275,243,252,145,182,129,424\nVale of Glamorgan,W06000014,male,631,634,727,702,755,765,724,796,877,857,814,865,899,862,818,748,730,808,706,574,600,582,597,679,641,662,680,712,691,747,716,695,746,798,786,784,732,760,800,808,855,892,733,694,720,706,806,771,816,859,853,864,890,872,917,891,898,918,904,921,930,818,847,778,784,781,733,788,740,701,715,729,720,763,764,543,600,574,486,409,395,402,360,313,265,241,216,208,151,143,415\nCardiff,W06000015,male,1817,1829,1950,2035,2082,2150,2197,2150,2211,2309,2337,2161,2192,2144,2111,1989,2082,1917,2774,4102,4082,3945,3642,3194,3316,3159,2989,2914,2872,2769,2747,2700,2557,2604,2628,2538,2422,2504,2413,2327,2390,2302,2220,2019,2101,1997,2026,2062,1948,2024,2116,2088,2018,2033,2090,1881,2094,2026,1952,1972,1783,1941,1775,1683,1685,1508,1521,1471,1346,1361,1363,1411,1340,1331,1314,995,1012,891,810,663,632,640,588,538,508,443,386,334,250,249,858\nRhondda Cynon Taff,W06000016,male,1223,1215,1366,1337,1343,1340,1442,1403,1430,1454,1494,1422,1594,1434,1459,1390,1433,1393,1347,1315,1390,1358,1590,1446,1500,1389,1501,1410,1478,1464,1543,1619,1575,1473,1514,1526,1458,1497,1456,1398,1385,1461,1364,1277,1186,1292,1282,1336,1541,1655,1670,1579,1660,1658,1622,1718,1745,1638,1618,1580,1478,1358,1495,1389,1356,1261,1237,1252,1151,1299,1189,1329,1302,1274,1304,1124,959,885,768,700,631,595,520,493,411,366,320,260,212,176,555\nCaerphilly,W06000018,male,794,905,956,1005,1004,1055,1048,1032,1093,1052,1111,1129,1140,1073,1068,1059,1074,1094,1001,848,908,913,867,953,1037,989,988,1026,1022,1063,1176,1056,1153,1106,1084,1117,1072,1057,1059,1041,1100,1046,990,949,1018,978,1011,1089,1147,1157,1235,1178,1293,1262,1225,1294,1278,1277,1248,1207,1097,1158,1064,1059,1036,906,941,990,941,939,933,956,905,1014,988,748,723,644,604,590,486,445,467,389,335,267,248,188,179,117,397\nBlaenau Gwent,W06000019,male,350,400,356,359,351,352,395,396,385,402,405,411,416,362,330,325,359,385,311,311,319,377,350,373,362,362,394,449,428,476,444,446,453,411,426,434,447,377,401,347,406,394,352,343,297,367,394,386,468,469,466,494,523,482,477,540,522,531,501,465,428,428,441,414,427,382,367,377,363,374,347,378,375,381,386,300,275,254,261,228,190,170,179,132,126,110,97,72,60,56,142\nTorfaen,W06000020,male,475,512,512,538,556,567,483,570,571,609,582,575,611,565,555,565,579,488,471,431,415,431,448,511,581,555,564,549,516,615,597,613,616,548,559,587,562,524,581,550,500,542,475,434,507,435,486,494,590,586,650,610,606,601,608,680,690,646,660,672,629,592,581,598,529,481,484,537,477,480,518,492,468,522,529,382,431,362,322,267,247,265,220,203,170,160,144,136,103,69,255\nMonmouthshire,W06000021,male,366,384,401,441,471,485,460,476,504,502,541,467,574,515,547,499,582,542,429,357,357,366,405,437,463,447,476,437,437,492,511,435,496,422,491,423,481,449,483,485,476,521,478,493,486,481,536,532,617,667,668,671,690,702,763,758,760,769,752,722,678,672,653,671,638,586,611,539,665,603,601,601,617,643,639,485,501,502,445,351,357,346,282,261,263,219,195,185,161,125,370\nNewport,W06000022,male,949,982,1037,969,1003,1178,1058,1040,1061,1023,1074,1014,1130,1090,894,960,1005,942,891,673,763,839,903,959,956,966,979,1047,1234,1108,1190,1202,1264,1208,1227,1116,1197,1057,1040,1014,1061,1104,990,943,895,927,994,877,1023,999,1101,1069,1076,1001,1046,1083,1085,1066,1031,953,1012,867,974,854,761,700,723,746,760,636,712,648,658,722,745,502,582,495,491,380,345,362,337,291,274,251,189,165,138,128,404\nPowys,W06000023,male,542,512,625,661,616,660,663,677,703,664,681,688,744,740,735,697,751,700,637,565,536,592,638,663,648,719,630,696,631,681,704,685,666,708,598,660,654,617,589,672,659,654,606,603,629,682,711,697,755,941,883,888,925,919,1010,1001,1087,1011,1071,1055,1023,1042,1008,986,1028,960,953,1005,982,940,955,971,1013,1062,1021,740,800,798,702,585,501,498,488,420,402,331,309,239,183,165,558\nMerthyr Tydfil,W06000024,male,339,289,319,391,368,389,381,344,361,396,409,338,364,378,378,318,321,322,359,309,284,337,307,323,353,317,329,402,359,356,390,397,364,416,380,402,420,389,347,362,364,371,326,273,315,323,319,311,342,384,386,407,382,392,407,443,397,427,386,400,406,379,402,382,330,303,299,325,319,290,312,307,326,309,255,227,239,228,206,170,141,137,134,127,106,99,67,50,52,40,127\n",
            "comparison_csv": "AREANM,AREACD,sex,<1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90+\nHartlepool,E06000001,female,37,16,104,194,172,175,226,252,130,10,94,106,40,208,12,207,132,136,77,30,121,59,119,15,51,3,146,49,99,72,155,5,304,314,62,121,259,15,10,42,183,197,129,193,120,104,14,29,50,213,133,328,89,349,306,182,276,106,62,349,246,108,63,202,258,274,83,201,123,90,135,215,130,153,244,29,131,108,32,108,3,129,131,142,39,48,10,14,76,38,205\nMiddlesbrough,E06000002,female,112,315,423,50,184,257,165,26,169,229,289,43,166,229,124,178,407,424,277,207,355,368,36,377,265,344,9,40,60,85,414,472,460,38,289,294,252,403,282,217,139,193,330,280,39,20,50,46,0,327,44,69,422,374,71,152,172,89,388,411,185,19,29,422,44,189,200,183,348,216,241,158,89,303,322,226,186,187,25,9,142,92,153,7,69,5,120,47,65,83,202\nRedcar and Cleveland,E06000003,female,193,12,241,290,249,193,81,16,373,115,330,59,233,137,1,226,339,136,178,265,251,91,146,22,161,354,68,24,265,52,367,378,213,335,204,78,388,329,45,106,154,42,234,128,268,121,237,264,41,197,298,360,441,160,237,48,50,51,236,356,440,183,101,326,275,172,8,330,160,251,123,365,382,51,461,250,354,305,276,98,88,276,102,159,165,70,53,114,20,94,83\nStockton-on-Tees,E06000004,female,430,202,105,330,405,213,129,446,642,25,361,615,146,81,122,292,548,244,175,304,199,27,264,139,494,107,397,323,186,289,325,433,203,725,141,585,606,490,185,241,543,315,173,242,274,391,250,332,279,303,597,641,612,658,585,607,591,147,409,673,151,184,507,349,422,481,382,429,87,26,139,278,141,404,397,387,163,118,281,250,204,4,7,253,178,26,13,8,73,104,9\nDarlington,E06000005,female,121,1,235,80,39,227,102,68,196,34,301,175,285,64,305,83,222,257,201,28,47,195,80,218,291,24,36,34,303,35,157,264,93,324,125,169,118,119,24,164,145,246,105,198,157,306,320,80,54,126,364,47,323,120,47,124,134,61,268,215,350,114,351,364,22,180,269,142,48,185,284,0,135,156,64,198,167,59,128,20,95,49,188,67,109,13,123,64,83,44,114\nCounty Durham,E06000047,female,514,1083,471,579,1300,1188,1034,1092,926,1268,1310,833,36,190,1091,897,1217,1178,483,43,1727,1262,311,419,468,918,192,568,776,600,935,1234,1287,18,787,1354,1374,443,433,1319,1341,208,1429,1306,245,330,258,1083,966,1348,583,166,26,1145,485,1560,946,1275,1348,1851,611,1234,1507,353,173,170,1516,1536,272,105,1274,469,418,1656,330,819,1262,207,992,435,103,780,111,784,527,43,516,90,160,369,687\nNorthumberland,E06000057,female,546,38,330,675,25,259,600,147,633,694,31,785,208,427,164,708,148,686,213,502,40,291,37,706,173,418,183,131,479,693,112,364,379,320,715,473,571,103,625,629,791,390,39,545,593,788,122,670,373,1190,1006,789,1105,239,209,38,245,35,898,757,1010,211,1097,444,253,766,960,90,174,1072,1073,877,1130,961,535,817,935,429,616,158,311,31,382,436,456,153,112,58,260,197,692\nNewcastle upon Tyne,E08000021,female,62,131,61,709,6,29,35,403,97,390,526,498,628,126,626,107,669,358,155,874,2353,1388,1648,369,490,345,23,14,1109,419,505,317,350,259,839,173,793,798,578,487,626,538,268,462,28,152,600,648,354,822,832,757,230,417,79,761,375,16,729,564,451,546,30,334,59,601,97,599,572,190,533,161,576,121,467,391,409,354,192,335,191,352,121,77,157,79,132,111,23,149,540\nNorth Tyneside,E08000022,female,120,430,224,222,28,563,298,521,306,416,580,594,279,219,552,71,471,506,390,265,335,129,9,141,24,77,14,491,404,619,668,53,50,221,377,226,142,329,356,571,644,554,523,182,266,247,298,609,630,183,604,727,620,347,513,641,274,422,427,743,320,282,129,510,515,194,168,495,514,314,296,265,414,509,84,314,135,141,375,329,220,55,261,66,289,147,102,38,7,103,612\nSouth Tyneside,E08000023,female,156,2,92,23,14,189,167,310,215,305,244,291,153,245,257,38,187,393,70,119,15,165,328,370,229,66,439,303,84,360,284,352,12,459,293,429,237,235,169,132,91,27,398,322,196,83,3,292,148,313,156,274,395,8,59,581,178,546,172,329,562,503,56,352,113,183,288,458,109,289,37,269,204,368,276,125,99,51,49,157,170,168,67,186,155,32,110,50,3,27,323\nSunderland,E08000024,female,472,44,443,523,196,497,383,161,668,691,231,411,259,413,684,643,435,235,172,230,35,656,408,60,229,699,206,425,338,371,44,589,678,716,80,658,88,289,135,774,598,714,17,187,618,84,342,25,222,185,163,946,848,943,258,928,153,69,165,325,174,516,807,314,101,174,316,65,264,413,258,165,172,283,4,549,492,468,204,164,419,359,443,73,84,161,123,198,223,33,601\nGateshead,E08000037,female,75,344,289,469,29,156,366,454,34,84,84,542,358,308,375,451,498,233,480,168,227,56,353,414,328,529,193,154,455,566,306,410,511,477,220,96,536,326,36,102,345,472,240,406,217,517,240,313,65,136,383,554,4,390,575,722,388,312,119,381,358,119,68,440,337,360,518,54,342,299,159,412,105,80,489,279,205,13,306,49,196,135,158,147,25,42,119,22,152,23,288\nHalton,E06000006,female,57,178,44,302,252,230,200,28,229,340,307,255,85,173,29,239,106,123,230,281,12,133,298,338,155,57,366,15,103,80,166,42,259,147,338,227,82,252,255,296,314,2,41,317,36,100,253,386,283,400,377,32,185,140,120,217,405,11,256,341,198,179,121,101,395,2,341,304,332,368,250,37,31,380,127,151,4,236,44,180,102,146,70,105,66,39,61,48,24,28,35\nWarrington,E06000007,female,258,5,312,107,8,50,425,351,383,460,223,439,221,102,535,436,75,481,371,217,206,11,88,488,526,55,263,323,26,66,255,567,298,688,420,551,412,307,410,60,303,740,440,201,306,496,555,251,425,424,603,487,154,312,585,565,367,344,266,720,565,96,424,624,118,192,247,123,502,223,492,178,16,242,470,212,255,331,297,166,69,64,305,149,127,171,141,54,127,102,238\nBlackburn with Darwen,E06000008,female,423,463,215,436,231,514,522,266,149,389,383,181,157,189,216,224,427,376,157,299,183,353,285,52,23,184,403,234,435,404,175,275,275,190,261,47,238,338,508,336,270,142,382,255,157,196,271,194,452,252,365,418,489,280,477,357,304,458,382,259,180,271,365,168,192,127,146,269,281,196,215,73,60,85,274,101,150,190,3,112,136,91,159,15,115,66,34,21,65,29,68\nBlackpool,E06000009,female,62,14,359,314,1,174,255,325,346,81,246,22,327,244,342,232,282,165,250,48,164,16,253,326,260,258,38,6,74,272,486,199,443,131,78,364,331,334,27,351,135,99,241,62,357,350,68,206,397,132,471,371,94,449,390,240,535,78,266,33,175,285,231,424,363,333,330,167,1,343,89,266,227,43,116,8,28,167,41,87,200,225,105,110,157,23,24,74,39,94,407\nCheshire East,E06000049,female,227,668,67,906,119,977,625,980,62,239,1106,852,377,131,865,212,652,590,825,539,370,745,374,475,904,572,556,1047,36,197,628,541,275,969,1116,409,197,158,769,359,813,991,756,236,66,771,337,825,354,406,882,436,1000,577,114,148,539,875,638,894,158,1346,1045,1041,1114,979,374,557,231,677,637,591,955,1341,1110,71,885,1009,894,462,592,588,565,316,259,298,25,257,114,109,250\nCheshire West and Chester,E06000050,female,797,646,470,71,767,223,132,21,800,537,858,990,518,657,426,569,675,43,450,448,844,635,330,382,498,386,838,984,689,301,312,468,216,454,813,49,69,273,69,1,964,58,913,858,500,304,598,623,901,612,1139,298,930,730,858,225,877,787,335,80,204,958,648,574,738,795,513,153,820,849,577,802,461,921,957,491,590,450,375,375,89,113,12,78,399,244,381,134,93,109,439\nAllerdale,E07000026,female,115,107,77,78,203,224,8,216,148,142,174,221,178,266,13,167,77,154,6,144,10,135,135,56,212,16,98,163,164,143,54,95,6,238,45,57,85,248,243,55,45,176,138,25,154,223,121,139,225,344,36,16,229,341,322,56,320,265,399,131,134,293,253,153,37,307,117,150,194,111,237,13,265,265,28,237,117,178,169,126,155,177,174,140,137,119,97,7,9,50,187\nBarrow-in-Furness,E07000027,female,7,28,36,116,1,150,22,35,5,138,22,1,103,13,102,147,30,146,19,30,139,172,114,137,101,190,33,49,131,50,112,108,37,73,116,45,122,100,122,56,63,48,101,129,178,39,24,163,135,225,164,9,28,213,58,76,1,162,58,195,5,29,154,195,151,185,93,23,144,94,163,57,156,126,86,160,57,44,97,66,133,86,63,48,64,35,60,12,27,3,42\nCarlisle,E07000028,female,167,30,63,85,279,70,219,203,213,181,24,296,207,224,158,224,197,4,134,95,166,151,244,278,32,235,197,98,21,61,347,327,153,3,257,147,281,94,323,73,227,190,2,101,37,46,76,18,334,359,303,352,320,7,116,201,193,45,10,350,112,171,259,71,100,221,121,128,142,62,169,249,121,291,218,157,42,204,93,207,53,6,172,64,165,51,114,37,96,1,80\nCopeland,E07000029,female,36,105,86,110,146,150,130,24,20,52,40,159,129,81,80,1,56,14,96,56,100,93,112,25,57,120,48,67,112,128,175,11,23,24,83,51,94,12,54,14,131,110,104,100,162,73,68,34,1,7,129,48,246,136,207,70,285,150,256,120,142,194,152,215,106,128,84,202,107,125,182,18,162,76,196,120,165,28,37,18,95,26,29,59,16,50,71,61,32,1,118\nEden,E07000030,female,36,68,40,89,40,104,64,97,2,95,115,103,12,56,1,65,2,63,109,86,53,112,86,22,52,115,92,79,127,25,60,137,24,31,61,73,70,105,119,148,85,2,38,22,144,29,58,168,168,61,195,123,34,30,132,134,25,230,83,123,48,98,5,223,105,91,139,6,85,66,51,59,74,17,150,104,177,94,73,111,29,80,68,91,81,32,40,21,52,23,124\nSouth Lakeland,E07000031,female,125,140,90,22,8,17,144,198,59,66,93,48,256,159,216,212,49,52,144,114,94,92,129,120,123,49,193,131,5,119,269,171,119,119,22,257,241,62,108,100,281,11,41,241,51,14,161,157,141,168,69,255,2,18,304,8,214,102,186,138,98,242,149,184,160,120,295,211,1,31,56,54,158,204,12,169,68,327,51,226,46,232,138,56,54,169,17,114,15,60,53\nBurnley,E07000117,female,98,84,252,236,90,229,263,281,42,280,298,162,55,186,195,11,181,112,106,19,112,28,5,30,59,80,81,313,130,334,320,234,135,27,12,175,174,4,210,174,15,107,247,20,89,50,278,195,230,87,85,75,65,54,73,93,300,97,33,134,178,196,210,230,10,252,93,75,107,156,76,221,60,202,32,112,101,129,109,143,88,50,5,42,44,15,58,5,32,37,133\nChorley,E07000118,female,209,38,283,264,54,156,138,221,169,104,178,193,151,53,40,124,31,202,62,84,99,208,133,66,133,235,219,70,40,99,6,67,346,121,246,127,93,172,193,64,363,256,233,284,149,120,108,74,349,35,83,249,342,316,179,295,391,298,92,290,261,87,17,96,98,67,148,165,171,197,105,12,109,125,332,261,248,146,140,19,176,190,87,9,60,77,66,69,5,48,140\nFylde,E07000119,female,69,11,141,109,57,24,79,122,74,152,82,185,105,107,175,16,5,76,108,43,9,21,146,91,123,164,35,105,105,132,64,151,155,195,194,199,58,136,141,179,104,95,22,34,55,45,136,171,112,284,84,76,129,34,208,151,346,261,254,27,42,210,165,95,153,139,39,230,286,176,123,236,30,227,178,127,257,51,48,21,4,32,25,137,76,46,78,103,77,33,93\nHyndburn,E07000120,female,141,212,192,144,125,210,19,87,181,285,118,239,252,78,122,99,174,192,87,183,1,151,211,15,130,240,175,132,200,222,243,204,212,36,122,249,147,154,240,119,177,98,112,221,73,73,27,38,14,157,127,117,80,11,12,27,111,226,119,113,24,217,171,94,162,130,108,34,87,195,92,190,5,42,23,90,73,115,120,83,93,60,70,7,36,86,62,12,24,15,165\nLancaster,E07000121,female,261,105,69,307,127,305,101,171,305,74,332,28,344,240,206,353,316,230,289,352,208,701,518,110,114,269,339,111,282,211,108,386,305,387,321,21,256,334,59,122,387,210,279,326,75,299,14,192,266,36,83,253,35,460,64,342,185,283,455,187,481,264,343,4,69,153,238,104,371,210,217,228,90,151,158,262,322,207,38,157,27,22,97,212,13,178,56,104,106,39,99\nPendle,E07000122,female,62,170,212,274,57,43,6,164,155,292,247,275,214,41,23,268,145,71,192,3,190,121,84,148,144,43,227,73,83,202,110,303,67,34,296,214,232,61,185,322,22,237,241,52,103,197,138,102,76,225,224,293,102,273,55,32,291,116,236,225,209,277,43,260,140,145,54,220,111,128,213,171,173,225,61,12,182,128,130,124,112,51,99,77,37,70,86,1,36,10,204\nPreston,E07000123,female,9,250,423,74,43,206,95,320,272,473,194,300,425,163,49,107,181,398,459,193,481,643,273,258,358,239,465,136,314,341,486,79,492,347,346,390,324,312,315,119,363,280,148,269,398,269,163,182,35,23,7,421,249,7,77,286,233,48,121,188,317,71,173,126,367,147,157,259,23,86,253,15,61,88,220,61,91,152,102,117,151,41,126,88,25,47,31,7,38,90,10\nRibble Valley,E07000124,female,67,73,34,3,80,101,89,40,120,40,145,105,68,19,3,12,74,133,12,76,43,20,87,47,62,97,69,77,89,11,100,84,8,50,113,83,48,146,98,173,72,127,84,154,19,143,168,181,81,234,7,74,204,162,17,202,68,218,110,255,152,65,212,128,80,6,160,138,95,125,63,136,166,23,88,98,108,21,32,130,43,16,93,42,89,16,20,20,71,13,83\nRossendale,E07000125,female,1,100,156,178,50,79,209,21,62,38,102,111,128,56,102,104,6,112,43,78,67,123,168,170,15,135,30,7,100,33,196,5,232,135,88,148,4,1,20,183,141,42,94,28,207,121,184,237,22,203,254,206,9,257,41,196,19,191,194,118,43,104,42,137,128,49,206,133,51,59,161,18,106,96,55,69,96,37,16,34,49,49,11,70,28,15,58,39,2,24,128\nSouth Ribble,E07000126,female,126,239,33,284,92,64,205,279,60,229,281,89,167,186,261,121,47,226,130,175,115,103,72,84,59,255,46,202,329,278,107,13,80,90,158,351,57,131,37,196,169,237,277,1,229,12,235,132,335,28,366,301,57,76,87,129,355,171,62,210,17,198,170,82,179,264,205,203,28,88,245,261,152,110,235,115,151,169,184,132,23,16,47,81,103,4,113,74,33,79,243\nWest Lancashire,E07000127,female,146,195,220,78,179,258,23,49,279,166,94,100,157,167,297,121,205,134,240,311,557,39,191,45,278,192,39,54,37,10,285,7,31,318,82,196,160,254,119,220,99,9,180,121,274,239,161,255,378,290,147,428,305,176,90,161,1,59,108,363,6,276,36,349,198,298,73,312,47,89,2,140,28,265,290,48,162,125,21,234,21,48,61,102,59,139,63,81,48,59,17\nWyre,E07000128,female,80,114,0,116,81,219,7,15,123,97,111,135,40,162,136,293,192,278,36,18,76,57,118,141,122,188,126,56,227,200,282,181,272,209,258,249,103,184,249,25,97,86,148,35,48,14,204,134,94,92,164,312,265,306,431,193,455,220,418,28,1,169,82,73,231,232,185,247,89,208,48,166,131,352,37,5,285,324,16,273,248,162,261,61,31,28,116,130,20,41,77\nBolton,E08000001,female,57,318,662,83,198,291,48,499,107,162,485,164,76,323,517,695,372,580,362,671,620,693,262,505,677,328,108,477,568,501,1091,338,265,1060,395,89,196,251,706,45,96,244,863,102,532,803,845,240,392,569,903,460,931,192,557,415,10,560,382,351,354,804,469,30,149,523,304,537,552,95,73,403,152,101,330,484,195,374,287,44,289,102,361,60,161,155,156,28,41,148,616\nBury,E08000002,female,223,40,447,17,375,590,344,428,484,456,275,46,62,298,249,142,436,200,148,28,228,275,237,342,417,384,446,378,82,525,6,672,335,441,220,31,497,121,642,395,3,249,152,504,535,191,55,437,610,348,499,152,264,13,532,590,294,290,253,76,137,554,308,369,461,320,405,35,200,89,194,119,244,273,364,163,19,110,213,295,209,149,4,236,184,142,159,128,28,13,3\nManchester,E08000003,female,92,571,1139,761,383,760,191,1070,1429,678,1361,1145,647,1770,322,1436,335,250,1963,2175,594,3292,1650,1450,2366,348,1720,125,2146,383,304,1341,537,1064,1699,1993,118,383,1045,4,1598,572,1722,220,257,966,1434,213,1409,503,351,901,495,1268,1232,568,756,700,817,941,308,1062,709,382,579,822,73,548,401,460,10,259,178,450,635,233,106,270,290,409,101,2,45,157,306,179,112,52,187,48,482\nOldham,E08000004,female,56,244,178,321,704,649,818,744,838,148,719,564,105,632,107,652,836,307,326,449,167,268,619,2,736,738,533,78,323,191,231,596,137,87,731,335,148,333,106,509,448,150,195,6,447,387,174,704,757,168,385,686,573,359,79,719,418,155,582,482,357,150,223,504,242,438,29,109,48,422,480,46,249,349,461,321,297,260,242,8,116,201,101,164,231,150,118,170,115,133,170\nRochdale,E08000005,female,127,496,697,121,414,749,655,337,655,417,332,750,413,258,152,196,610,542,6,330,326,51,206,287,509,512,251,6,112,439,785,750,47,372,318,451,643,185,649,603,788,310,402,1,550,517,476,395,114,118,172,604,682,489,423,2,224,231,655,249,583,240,311,361,390,50,275,294,253,196,222,193,479,288,489,231,137,315,300,104,50,241,162,38,101,159,89,162,89,11,267\nSalford,E08000006,female,230,692,404,456,527,676,670,670,375,422,69,220,416,565,304,86,627,624,48,705,608,517,256,961,285,724,644,356,358,832,566,1179,1114,788,405,72,71,358,404,251,514,134,546,219,46,651,12,618,347,674,147,122,246,422,404,5,49,102,471,585,402,426,100,550,316,491,311,60,244,389,318,244,448,557,427,301,256,124,341,279,122,226,274,61,11,39,136,29,23,78,198\nStockport,E08000007,female,408,638,512,227,552,733,555,179,107,446,689,394,237,56,283,143,492,169,436,211,381,542,678,277,221,483,614,864,238,173,234,341,596,7,863,1082,864,287,1011,853,255,372,312,741,419,241,171,677,522,771,100,377,1008,185,928,126,672,589,914,8,568,612,886,416,571,119,391,536,248,34,124,54,422,824,330,11,546,265,542,269,246,441,214,407,409,224,15,186,17,186,52\nTameside,E08000008,female,161,271,9,193,312,458,76,619,395,512,355,431,82,501,680,595,416,599,69,344,234,215,394,478,75,519,165,57,320,281,447,530,121,114,259,104,504,173,689,485,547,174,146,235,213,308,564,619,675,671,16,212,401,230,609,782,608,504,699,521,418,323,530,36,497,502,120,524,552,403,260,118,396,92,147,315,333,114,168,303,33,25,221,18,182,25,97,47,125,121,89\nTrafford,E08000009,female,49,614,134,113,755,623,57,60,220,45,862,384,123,341,13,502,268,233,237,68,62,339,485,487,279,203,396,419,242,613,99,410,767,754,376,528,138,541,703,906,917,712,617,437,411,435,554,11,482,406,742,170,569,116,626,480,155,362,425,691,224,38,531,347,451,479,392,12,193,486,490,221,69,443,212,38,437,265,270,113,187,197,42,182,296,226,204,139,172,70,295\nWigan,E08000010,female,383,428,57,374,141,306,164,566,724,401,233,336,145,323,537,504,7,648,627,131,432,336,406,438,665,448,38,48,617,430,461,278,842,534,323,827,923,587,468,746,202,406,916,11,526,684,562,803,899,502,356,1096,700,193,255,79,128,1029,140,320,17,726,352,413,713,602,650,586,475,65,349,676,21,888,843,502,470,460,51,321,199,472,389,124,109,71,272,138,54,144,138\nKnowsley,E08000011,female,11,110,457,133,26,307,126,114,453,388,40,268,249,337,330,78,342,72,347,14,301,165,112,9,279,212,264,119,63,447,106,2,271,192,211,409,24,316,67,73,263,338,332,373,129,51,315,356,386,115,122,294,35,348,12,467,35,568,381,44,534,61,405,138,217,372,429,79,177,145,187,357,38,4,174,162,19,69,182,198,94,83,38,94,177,28,86,15,74,2,81\nLiverpool,E08000012,female,291,1099,254,859,362,374,996,636,109,335,1236,357,1089,986,600,1104,872,97,1485,3110,1898,1750,1505,824,893,1810,199,1871,1059,1271,1131,1659,1182,451,868,1073,1272,489,1461,43,1221,791,1295,541,939,718,366,323,434,859,555,1114,275,732,1504,1213,1398,784,35,333,444,891,777,384,168,482,269,966,960,664,130,827,436,103,876,744,552,726,226,604,368,591,256,464,436,372,28,180,205,233,571\nSt. Helens,E08000013,female,155,113,225,143,28,386,368,80,66,99,346,92,74,90,344,96,103,263,347,230,58,398,198,393,301,77,425,369,519,595,89,192,247,56,514,72,202,106,432,1,195,293,486,79,423,338,468,294,379,223,34,660,72,41,41,651,279,231,33,288,118,143,250,10,114,139,212,78,113,126,243,87,131,245,105,325,335,181,296,103,129,118,134,183,14,81,98,111,52,41,140\nSefton,E08000014,female,263,200,94,320,603,354,521,468,581,165,511,283,10,145,336,301,666,353,552,450,152,525,155,322,554,118,494,15,489,365,608,478,249,649,338,167,468,42,764,609,215,494,444,22,234,550,316,771,569,733,710,822,154,540,507,824,321,262,675,1119,832,55,519,129,274,872,160,822,334,408,235,73,195,614,559,113,415,623,188,103,330,95,228,470,13,433,66,341,301,237,808\nWirral,E08000015,female,633,493,556,5,147,230,409,297,45,247,425,902,927,467,529,293,93,701,273,294,62,299,77,625,730,719,463,87,787,716,692,909,1025,197,26,689,838,76,799,453,682,420,479,125,536,54,428,605,991,1078,1114,624,779,247,308,1206,1132,722,518,1077,39,781,274,666,143,126,952,565,332,826,644,394,708,228,603,716,20,591,398,341,183,382,257,436,95,407,251,40,310,208,960\n\"Kingston upon Hull, City of\",E06000010,female,284,536,51,30,364,600,506,149,278,790,95,45,754,126,320,462,274,312,644,746,740,337,142,610,644,632,196,834,386,801,53,540,591,478,774,332,14,375,414,462,172,284,19,574,460,706,590,143,709,565,705,600,684,126,769,434,848,110,163,445,319,90,35,62,585,35,148,273,271,213,163,249,144,479,481,24,348,224,80,290,242,259,224,11,93,9,95,37,120,104,372\nEast Riding of Yorkshire,E06000011,female,315,207,392,383,509,304,151,437,259,788,123,823,717,508,49,325,675,658,166,242,95,446,146,168,558,202,636,516,628,347,281,808,601,111,879,865,569,229,105,627,448,162,607,635,887,938,392,927,834,322,192,393,1036,1154,240,662,1165,1184,789,441,705,323,462,251,939,39,529,655,784,502,395,191,859,128,906,356,510,557,252,636,594,125,278,566,326,77,90,76,131,63,1305\nNorth East Lincolnshire,E06000012,female,329,294,131,103,212,314,197,367,380,373,29,54,375,262,29,195,294,17,171,228,279,325,156,308,425,53,348,33,172,424,470,530,163,89,205,128,137,84,92,160,338,274,293,173,387,28,48,365,346,407,70,348,217,99,357,160,477,500,9,530,48,18,68,348,149,149,355,1,105,253,271,109,384,377,213,5,89,176,4,99,4,121,229,60,197,159,144,108,136,21,3\nNorth Lincolnshire,E06000013,female,380,85,136,250,65,118,133,374,499,192,53,81,361,225,192,126,283,431,291,297,218,138,359,393,326,49,83,253,49,25,401,506,312,117,470,18,468,507,350,95,518,270,385,279,58,365,403,452,287,117,384,337,235,496,533,17,47,202,429,298,82,65,194,76,44,407,519,65,95,300,275,147,292,39,537,141,218,326,85,37,278,56,17,135,33,108,100,14,18,20,292\nYork,E06000014,female,163,202,284,327,110,16,212,82,95,176,165,394,86,102,176,448,192,305,401,1213,1382,23,960,812,700,158,227,486,85,375,268,261,222,134,51,383,18,316,32,514,521,414,335,202,196,352,270,455,491,19,501,210,596,614,84,391,215,91,415,474,349,145,415,195,470,329,432,361,155,406,211,114,228,455,568,18,64,83,343,252,260,203,177,124,127,112,47,180,117,137,19\nCraven,E07000163,female,2,60,111,146,35,116,28,25,59,134,100,19,78,2,25,104,70,81,7,82,16,91,0,10,15,109,90,38,42,84,76,9,34,37,91,16,88,30,26,33,148,53,112,115,1,61,38,34,156,185,65,55,54,96,76,153,173,192,158,119,137,181,190,160,226,42,105,41,44,22,29,115,64,88,124,71,67,38,76,33,28,54,60,55,8,87,32,86,7,1,80\nHambleton,E07000164,female,3,47,108,79,116,202,27,130,10,44,25,211,178,51,128,30,149,29,29,99,46,47,2,151,2,195,203,173,231,145,13,194,230,123,44,144,123,66,28,231,48,132,102,155,197,132,239,123,45,49,240,323,138,137,62,175,195,223,230,210,28,228,265,169,273,161,299,288,298,82,172,287,120,356,267,38,298,177,50,49,65,116,31,42,152,107,77,29,4,26,5\nHarrogate,E07000165,female,43,293,36,54,139,36,312,400,73,34,184,404,144,372,200,114,25,359,212,65,11,32,238,50,197,98,92,240,209,390,373,356,232,293,352,90,60,182,103,187,63,462,313,58,190,174,387,533,51,121,475,516,463,304,118,685,646,368,248,328,69,585,304,83,44,98,29,353,447,185,232,439,59,384,401,42,187,245,115,62,255,107,296,152,203,55,10,54,177,69,369\nRichmondshire,E07000166,female,36,87,0,68,59,33,65,106,15,50,9,80,115,7,72,98,69,46,82,28,33,13,70,91,4,88,14,82,32,22,76,57,36,20,76,30,36,79,25,13,5,16,38,32,102,33,1,128,4,160,8,174,162,86,154,121,85,122,108,179,24,60,38,80,118,55,38,151,57,17,49,72,84,133,107,5,22,28,96,52,69,59,13,45,27,29,59,42,0,20,128\nRyedale,E07000167,female,45,71,110,67,107,29,13,4,61,108,45,100,111,102,99,63,121,26,17,18,35,38,13,114,48,47,19,100,71,66,69,139,97,120,45,37,100,25,53,56,120,27,37,13,43,100,105,47,106,91,53,206,79,66,30,135,75,77,69,69,182,203,91,87,59,94,107,195,21,114,176,35,122,107,181,28,124,33,74,4,98,99,119,17,26,79,52,6,43,4,62\nScarborough,E07000168,female,153,114,4,141,40,53,177,138,117,281,68,248,235,63,209,199,19,183,110,68,26,113,30,172,182,57,70,37,81,174,279,297,149,4,48,113,91,248,67,69,35,26,44,194,219,247,137,66,95,13,248,20,81,349,59,394,426,276,205,362,238,149,19,281,113,41,255,253,4,187,284,225,20,424,399,96,224,23,101,216,90,51,156,62,48,159,148,140,58,58,390\nSelby,E07000169,female,108,104,39,27,99,254,192,56,25,45,233,108,259,233,52,57,18,194,17,100,78,149,143,74,96,27,199,191,239,1,19,242,249,54,215,215,188,34,138,34,142,85,84,10,14,90,227,209,299,233,103,106,277,349,38,327,124,191,36,104,85,165,301,98,179,228,252,14,88,22,243,228,134,240,68,113,93,179,60,89,8,73,2,47,58,84,2,4,37,4,48\nBarnsley,E08000016,female,293,382,587,109,121,559,557,191,40,478,286,128,656,308,234,22,484,434,199,216,36,109,474,180,719,11,281,613,141,243,474,427,752,252,38,120,822,767,366,450,210,750,523,304,91,460,654,669,416,148,743,594,437,675,316,275,924,710,497,543,676,230,700,691,526,608,34,242,129,188,21,5,589,124,235,70,604,47,321,40,355,80,224,294,154,118,115,18,86,85,342\nDoncaster,E08000017,female,698,124,437,59,555,445,3,478,839,616,127,688,532,658,471,40,60,449,648,470,242,99,150,37,523,477,1001,23,299,97,999,28,313,1046,650,309,423,923,746,636,675,49,43,592,634,795,747,361,375,581,905,568,978,455,26,352,573,407,439,680,567,848,348,799,95,834,492,277,757,519,324,127,611,853,645,352,355,448,432,373,330,248,71,396,119,379,134,196,6,37,170\nRotherham,E08000018,female,90,341,73,178,534,730,577,219,145,490,570,515,543,391,376,322,288,327,403,446,474,136,25,492,285,273,772,177,860,408,724,412,1,308,322,697,473,607,169,30,466,69,508,323,388,695,415,761,236,904,170,720,213,695,678,485,771,595,910,417,556,734,721,56,215,222,227,576,442,68,529,93,228,206,462,580,248,306,424,108,391,261,200,350,296,172,129,176,3,194,8\nSheffield,E08000019,female,345,1039,863,1028,1538,1131,1447,651,1334,1001,503,907,847,599,903,964,725,117,1803,1913,2671,1405,1442,2242,557,186,503,967,1972,1478,121,1864,1308,62,1305,1338,1681,538,782,1619,97,755,1396,518,1089,489,1077,977,73,71,613,111,1524,422,1544,707,204,1132,1489,887,1075,1032,314,1327,660,1170,853,552,541,650,183,321,151,779,575,886,761,93,139,758,402,620,474,585,37,204,97,309,79,198,1190\nBradford,E08000032,female,544,483,878,289,899,1892,847,1795,35,771,1394,1883,278,566,1119,1770,1440,1563,1327,521,1053,1608,400,1195,1291,390,3,378,1712,1758,1465,1548,1592,1360,1266,638,1440,613,223,114,1064,23,1164,1257,1497,1070,1456,633,121,1650,1072,741,685,1323,525,1339,1391,1061,35,449,4,43,1443,528,749,1046,1181,926,732,167,47,506,758,469,731,409,0,20,410,635,328,592,439,124,352,34,138,159,124,297,477\nCalderdale,E08000033,female,230,15,94,382,179,319,146,521,476,43,424,447,668,503,559,372,192,137,207,280,325,349,199,419,90,497,167,546,188,416,323,527,139,55,380,542,542,71,155,301,458,351,278,199,437,173,123,555,527,237,604,486,120,680,654,390,496,481,580,212,584,524,408,633,415,332,395,30,332,523,201,172,331,326,457,181,280,27,168,69,55,238,102,109,4,212,69,8,78,115,551\nKirklees,E08000034,female,118,935,834,180,1114,790,970,1241,1139,288,1192,367,87,1165,55,409,1166,1313,1141,587,255,602,81,1110,593,502,590,191,31,511,863,628,20,594,1269,754,241,602,165,921,118,798,1296,65,1107,638,988,183,1166,234,93,231,612,356,546,355,772,1060,907,188,1229,864,666,892,418,397,424,1051,700,136,628,454,426,925,574,806,69,716,741,124,88,342,119,148,316,220,137,264,250,87,979\nLeeds,E08000035,female,812,1531,933,168,518,2094,973,2290,497,1173,2260,1906,651,1097,413,343,2058,565,1969,2592,1302,588,1431,2123,2599,935,2278,2673,2752,1188,2622,2027,953,2364,1284,1190,436,2224,2460,1188,2091,1006,1118,1307,1070,468,470,2187,1114,2337,2165,876,1255,1711,1936,2372,2027,1529,158,262,1654,583,1941,1622,970,1158,492,543,531,65,439,426,1252,930,1707,992,799,597,915,143,609,199,621,902,726,383,117,101,305,435,84\nWakefield,E08000036,female,643,474,733,414,92,122,142,485,630,438,551,870,638,829,797,336,619,480,648,465,180,229,748,974,292,437,68,712,1257,137,279,1188,937,647,1163,653,452,223,771,610,535,806,447,588,184,492,526,66,64,853,145,692,741,1156,1304,840,827,759,307,33,868,306,585,805,915,653,174,122,508,169,568,593,800,727,62,265,113,166,280,167,220,118,399,200,95,18,132,7,110,36,283\nDerby,E06000015,female,66,679,810,378,57,124,118,206,355,247,24,760,471,226,684,101,346,281,175,22,57,9,168,403,560,167,603,694,727,293,878,901,554,775,358,932,607,527,195,155,175,221,569,279,429,643,441,303,189,439,326,489,320,779,727,387,278,435,345,16,5,451,361,620,10,281,424,513,276,308,53,265,263,605,419,368,144,244,293,341,331,198,19,295,282,289,232,46,135,83,262\nLeicester,E06000016,female,599,595,883,880,598,1024,428,151,990,312,168,998,1179,476,572,8,367,548,1395,1865,1391,1009,916,814,392,1077,391,1161,61,1198,759,1148,902,627,1281,746,188,603,989,459,1063,744,835,855,1055,783,352,678,793,662,581,151,701,401,909,680,733,68,956,797,398,364,49,744,134,227,416,65,254,18,612,33,354,372,289,326,293,309,381,221,176,200,312,291,80,225,110,61,83,105,386\nRutland,E06000017,female,55,47,29,8,75,33,36,9,69,18,75,58,26,66,124,135,106,95,61,66,50,11,1,66,68,36,24,47,7,53,42,63,40,77,74,36,5,65,60,34,65,60,66,65,4,82,5,54,21,42,125,68,94,35,145,78,57,87,129,79,106,86,137,91,97,66,80,52,7,102,35,70,32,12,30,81,103,61,44,24,35,18,70,62,40,11,23,47,18,14,27\nNottingham,E06000018,female,183,67,395,263,275,151,269,94,929,74,237,89,116,323,373,501,193,671,559,1038,1968,2011,1469,44,209,182,343,197,288,829,941,183,361,87,534,343,232,915,336,892,601,948,498,473,422,67,29,772,199,5,875,295,410,221,207,304,473,44,223,141,287,137,547,436,447,49,286,179,286,240,393,356,270,471,198,381,247,298,42,32,302,168,157,3,39,226,11,78,84,101,395\nNorth Northamptonshire,E06000061,female,367,865,278,733,286,843,972,814,406,565,540,204,111,168,54,519,26,707,448,72,89,496,404,175,699,514,317,916,744,945,50,656,1286,659,138,15,367,1117,819,647,89,439,220,206,1140,712,528,1000,102,556,805,509,201,219,158,764,485,0,273,519,16,354,827,931,912,779,631,53,480,223,322,914,639,93,859,296,575,598,41,447,84,329,182,427,11,67,24,201,214,118,13\nWest Northamptonshire,E06000062,female,814,691,1066,1139,748,741,268,40,964,1223,397,1121,575,1200,380,998,1068,1174,1077,923,853,163,178,1130,373,1266,292,946,1070,844,341,797,903,1405,360,290,1400,792,1232,990,1509,291,38,22,210,1125,396,632,742,717,93,1159,244,1337,372,1325,567,525,1423,333,357,779,1117,975,12,511,973,136,274,305,474,1008,837,885,605,598,336,151,17,106,367,185,252,49,178,122,227,199,255,104,315\nAmber Valley,E07000032,female,136,74,137,179,52,183,172,271,121,256,176,334,107,76,256,96,275,89,205,63,147,219,52,166,315,155,366,185,141,67,343,242,344,366,209,364,83,19,309,106,216,158,106,353,57,227,202,64,205,289,306,126,220,194,153,144,126,238,455,138,255,391,25,267,74,97,37,116,347,162,364,249,181,384,411,255,286,200,255,47,64,97,84,111,33,105,88,91,97,45,89\nBolsover,E07000033,female,135,110,6,93,28,94,22,168,230,37,8,132,72,86,119,223,200,53,22,135,102,57,2,21,102,9,43,180,70,156,136,263,34,137,65,161,202,115,159,44,217,48,165,154,161,91,145,122,35,288,271,83,183,88,25,251,295,74,208,5,190,50,151,139,233,82,194,99,218,63,42,99,143,234,138,189,176,130,2,80,118,14,100,30,23,31,0,40,60,19,31\nChesterfield,E07000034,female,81,57,109,35,231,52,198,74,140,266,172,198,83,261,242,23,170,247,6,114,203,174,200,249,239,125,123,312,94,216,211,39,116,250,329,265,231,254,171,109,112,101,282,181,25,255,64,175,50,122,310,175,265,205,364,118,374,331,259,185,172,248,227,218,22,131,130,181,178,210,121,83,30,243,130,43,111,214,172,171,69,15,108,134,71,18,5,87,36,71,268\nDerbyshire Dales,E07000035,female,88,128,86,4,115,10,98,9,74,149,65,100,60,101,175,25,87,137,38,15,6,17,123,101,41,23,89,13,61,145,15,104,3,41,68,133,109,37,118,150,43,135,66,99,42,102,193,162,218,26,124,126,194,257,277,156,325,107,116,56,44,156,35,56,26,70,213,203,187,77,269,225,7,8,214,102,205,192,165,129,39,113,101,95,53,0,72,92,80,43,190\nErewash,E07000036,female,221,233,182,16,109,287,116,123,293,208,180,91,132,142,88,136,309,69,12,84,2,219,112,21,16,329,20,16,234,175,222,23,137,158,108,190,157,245,120,259,329,169,250,53,49,135,74,154,211,227,379,417,24,17,117,64,388,334,159,297,375,221,232,325,41,203,46,200,275,158,89,300,40,99,244,138,242,180,174,153,74,159,131,38,117,21,20,76,48,4,87\nHigh Peak,E07000037,female,154,187,187,192,213,61,210,85,6,118,13,135,151,14,11,6,226,175,117,139,31,194,136,33,177,84,90,125,194,253,125,72,203,12,100,77,167,104,136,19,14,257,265,76,213,165,52,191,22,298,300,19,1,70,63,70,164,332,252,107,61,163,102,319,141,269,156,127,67,124,178,46,30,188,211,220,172,73,11,3,48,71,98,49,21,37,17,63,41,26,241\nNorth East Derbyshire,E07000038,female,123,92,78,19,46,142,242,259,217,192,76,211,251,53,107,15,30,206,94,132,63,186,232,80,9,2,163,245,24,216,12,121,267,273,270,182,92,145,226,250,100,283,247,113,188,118,60,39,261,272,318,336,195,179,326,18,273,309,223,73,56,13,232,209,151,205,188,312,90,167,125,7,139,211,10,294,181,48,47,133,69,122,34,132,62,83,38,56,65,0,8\nSouth Derbyshire,E07000039,female,157,8,36,90,286,186,76,85,178,159,62,99,7,85,167,115,112,86,215,158,140,72,69,180,32,325,81,13,26,83,123,35,322,131,288,309,12,25,172,132,267,56,30,191,254,124,194,53,370,130,83,99,110,353,383,28,132,116,8,326,156,303,283,175,255,34,258,64,186,70,27,163,223,196,161,38,3,164,102,60,8,71,61,100,79,50,97,47,28,55,18\nBlaby,E07000129,female,46,144,178,255,284,203,266,36,72,109,112,277,77,256,197,216,46,256,50,167,93,144,244,227,74,77,225,86,174,205,28,245,285,149,95,355,266,152,252,141,171,277,121,244,24,48,226,16,160,289,269,164,349,142,234,152,350,87,223,264,28,87,110,129,14,23,188,123,227,216,179,2,209,263,176,26,69,20,118,94,140,93,45,125,33,38,49,110,34,37,95\nCharnwood,E07000130,female,103,347,327,36,101,292,342,128,372,320,375,163,398,300,304,31,420,460,634,542,774,351,740,441,400,445,131,371,298,248,124,392,369,500,130,12,292,184,532,182,16,527,262,137,286,82,314,472,494,574,563,458,129,194,593,447,107,400,362,458,194,199,76,361,107,338,151,137,42,283,52,338,263,159,73,77,310,119,113,233,24,221,219,149,104,13,26,29,85,42,514\nHarborough,E07000131,female,162,128,227,67,85,137,206,87,218,194,142,90,18,118,57,78,167,275,109,157,76,6,34,35,5,171,56,161,192,13,137,269,210,5,283,289,201,124,280,195,135,136,128,89,134,263,271,41,90,363,158,133,234,212,198,335,291,220,11,128,143,70,59,101,194,68,58,248,270,235,258,111,161,103,96,120,166,9,158,73,114,105,154,66,17,61,53,83,38,35,1\nHinckley and Bosworth,E07000132,female,28,81,243,256,162,293,119,135,195,236,114,2,151,34,100,116,57,127,170,124,73,188,161,128,107,8,76,217,178,213,167,61,21,53,100,58,126,319,171,73,308,61,154,100,43,10,36,292,78,313,94,356,197,379,190,232,182,194,362,48,290,150,61,76,194,301,7,339,346,63,75,195,32,136,209,266,68,240,93,171,61,173,129,56,19,92,107,6,97,24,314\nMelton,E07000133,female,19,44,25,10,94,85,84,0,36,51,59,15,14,5,18,87,73,27,53,61,77,78,30,7,43,105,33,56,134,31,19,130,113,145,14,73,58,38,37,8,39,41,72,95,63,141,108,63,54,175,13,183,184,181,124,162,121,112,55,124,19,6,27,178,179,73,128,20,113,130,122,111,102,163,24,119,139,92,106,15,49,91,34,33,62,61,1,18,31,8,36\nNorth West Leicestershire,E07000134,female,40,176,261,48,29,170,62,13,70,242,42,272,32,262,262,159,215,20,92,214,30,199,218,167,216,261,191,164,248,221,78,95,217,226,335,187,273,177,233,215,177,255,81,41,55,7,167,189,153,130,160,247,24,180,158,296,94,267,152,84,216,160,84,205,112,208,128,225,218,133,87,105,250,199,24,57,17,43,71,27,1,49,70,41,75,8,59,51,36,12,263\nOadby and Wigston,E07000135,female,85,128,11,43,44,16,147,66,95,164,145,29,49,35,59,51,23,100,116,6,28,27,141,73,131,119,4,123,105,109,147,137,41,24,24,37,164,77,158,24,159,58,17,121,57,65,126,14,11,115,76,34,194,26,39,3,40,23,33,201,116,95,28,73,154,63,12,73,61,71,121,50,149,75,74,90,132,112,115,25,83,16,45,11,15,51,18,3,57,2,45\nBoston,E07000136,female,121,5,24,112,95,94,151,189,127,25,22,135,37,3,76,25,33,99,127,84,155,127,159,99,173,100,112,26,46,22,6,55,227,60,122,138,110,101,3,186,81,24,74,37,120,209,224,145,136,119,254,235,47,241,74,118,254,166,147,143,191,139,125,152,184,115,11,80,30,6,93,138,134,158,190,119,46,23,131,23,37,50,27,76,23,70,32,18,46,20,123\nEast Lindsey,E07000137,female,60,169,226,7,78,68,72,66,296,277,209,324,304,111,247,50,81,168,270,49,214,193,189,190,242,93,61,228,243,162,247,213,272,137,143,7,67,174,10,301,272,242,21,197,28,35,320,151,218,308,67,120,43,34,153,64,413,427,46,507,16,315,361,524,356,370,400,138,354,50,10,333,459,379,536,279,43,160,91,362,106,159,211,141,44,127,188,68,94,81,287\nLincoln,E07000138,female,178,52,88,59,143,263,14,62,63,235,243,173,203,132,223,50,96,80,315,313,161,507,202,153,253,327,59,179,36,88,309,130,226,157,257,299,182,174,24,2,99,123,87,123,102,181,83,115,212,243,215,54,175,247,123,222,282,25,303,122,271,84,254,18,71,170,141,89,159,180,127,53,149,174,187,95,14,122,113,29,37,76,64,75,75,17,60,47,62,15,106\nNorth Kesteven,E07000139,female,68,262,188,113,42,290,252,26,51,221,341,292,335,180,237,302,55,261,31,28,128,57,238,179,173,45,136,220,229,245,252,220,322,80,229,156,194,335,157,60,232,283,31,258,247,52,335,317,34,430,132,384,258,263,405,55,88,368,282,49,372,373,120,308,335,201,170,319,197,118,145,248,363,343,320,105,111,177,52,43,237,160,208,17,178,146,6,42,90,24,57\nSouth Holland,E07000140,female,13,197,166,162,40,100,118,93,144,213,236,225,10,85,246,247,46,145,97,26,124,38,117,55,215,253,249,134,42,58,240,85,256,142,226,65,102,89,37,118,155,92,57,26,40,57,183,233,113,123,79,170,241,203,218,17,162,189,297,291,324,224,293,93,76,151,65,170,117,87,128,205,283,318,3,136,86,79,88,140,56,156,54,147,151,102,91,84,63,60,245\nSouth Kesteven,E07000141,female,170,10,161,200,148,205,175,194,152,389,176,366,110,217,149,244,168,70,91,52,97,149,119,284,218,120,151,67,102,203,60,145,41,33,352,410,231,402,120,38,82,272,48,406,70,355,448,178,64,239,172,569,394,120,406,85,187,199,117,202,270,161,303,481,181,41,213,98,334,324,3,156,322,79,387,144,84,136,303,179,148,143,19,98,170,89,35,2,43,67,146\nWest Lindsey,E07000142,female,138,124,37,216,105,99,158,40,37,129,85,79,61,152,26,172,183,176,109,66,134,11,30,126,126,88,59,166,112,134,248,60,219,229,234,146,141,176,187,145,155,155,238,83,169,52,22,233,135,122,130,3,141,326,9,82,6,166,377,113,302,193,285,149,54,202,95,318,100,6,310,122,159,24,114,276,58,230,121,45,183,137,63,130,42,20,34,46,57,16,92\nAshfield,E07000170,female,248,228,279,214,144,12,30,161,130,235,385,181,238,141,246,50,12,67,255,135,57,93,205,297,16,193,362,217,3,73,132,16,198,303,162,351,26,202,244,84,282,235,33,46,90,129,339,263,393,451,300,410,347,365,123,229,199,206,356,47,111,116,311,200,6,20,16,228,267,319,60,106,107,319,90,19,167,133,273,177,81,22,83,140,86,81,25,33,89,40,13\nBassetlaw,E07000171,female,31,14,266,146,138,276,309,102,96,179,233,84,34,37,13,124,18,56,184,215,202,211,233,6,156,188,89,298,30,170,32,222,282,191,259,291,194,229,203,252,147,227,200,202,56,279,70,211,123,200,400,390,32,195,149,125,457,344,78,108,122,34,380,43,255,24,81,97,205,138,145,166,66,174,62,190,66,202,65,79,111,19,112,29,48,32,28,101,48,54,304\nBroxtowe,E07000172,female,138,218,71,14,244,105,107,114,34,285,35,257,238,128,184,218,54,44,157,189,298,54,148,129,196,214,318,275,77,262,271,203,216,341,312,131,160,203,138,96,250,196,310,106,281,146,308,260,59,251,340,360,275,225,342,330,3,150,379,342,225,275,109,263,182,246,225,19,148,116,245,173,180,131,319,223,125,129,178,104,70,44,172,28,34,117,109,3,11,64,116\nGedling,E07000173,female,17,112,24,103,211,28,73,183,88,131,35,266,162,85,147,208,215,264,119,17,65,232,65,32,299,194,4,141,177,354,36,330,194,255,322,251,172,138,186,72,93,381,212,14,97,84,206,288,381,5,105,39,314,388,326,53,330,422,170,345,144,136,352,107,199,131,117,187,250,317,99,195,142,299,207,131,105,96,223,47,7,23,25,51,122,42,21,76,69,67,237\nMansfield,E07000174,female,104,58,208,122,142,262,286,237,179,315,259,178,274,25,215,149,19,26,38,159,57,224,105,197,276,77,5,143,2,33,12,145,46,73,357,134,341,225,93,94,108,194,18,259,145,226,118,29,191,318,52,83,126,52,95,49,384,269,96,319,53,73,223,342,181,225,90,101,107,165,152,137,287,116,69,20,14,95,39,171,152,16,100,145,43,110,63,3,46,38,231\nNewark and Sherwood,E07000175,female,83,70,8,104,139,182,15,298,297,176,44,61,182,280,302,92,97,53,220,10,38,190,76,15,242,222,121,19,51,48,284,379,157,299,46,307,198,130,263,108,204,53,104,308,286,151,293,0,41,126,233,373,423,94,294,367,187,42,104,328,163,379,321,351,261,58,233,248,346,277,112,112,338,375,18,170,19,173,273,124,121,201,199,17,19,69,8,66,90,81,299\nRushcliffe,E07000176,female,14,167,188,1,275,219,110,179,294,91,173,167,230,134,253,21,157,249,218,81,244,163,190,270,43,297,74,265,45,123,102,241,80,167,65,100,64,42,197,220,227,240,171,22,142,253,300,361,239,240,283,63,6,87,396,364,87,368,239,120,82,78,170,285,115,270,257,312,205,206,124,247,320,223,99,79,150,154,87,27,107,113,53,46,13,70,85,114,34,84,421\n\"Herefordshire, County of\",E06000019,female,70,258,371,40,248,362,224,214,171,296,324,310,352,10,248,179,19,115,427,138,49,76,248,193,185,270,114,273,184,447,11,367,536,505,102,341,206,228,102,160,392,296,301,275,9,400,550,316,446,441,194,309,459,95,140,528,295,471,508,377,31,162,36,85,647,445,565,654,140,342,365,571,651,562,236,387,46,367,281,2,20,17,269,331,272,95,236,149,26,16,481\nTelford and Wrekin,E06000020,female,460,185,137,193,240,366,114,365,215,401,332,191,486,133,30,233,3,207,291,123,450,355,88,532,296,396,44,11,605,270,442,174,47,233,405,307,89,43,501,448,601,287,258,31,347,274,402,51,630,461,409,204,398,490,99,490,650,517,489,519,155,155,379,481,281,368,239,349,298,143,137,240,103,439,207,75,355,346,158,90,153,131,97,94,81,21,89,49,99,57,106\nStoke-on-Trent,E06000021,female,482,295,7,425,287,686,482,448,131,581,598,702,737,197,173,309,328,164,166,56,596,545,473,3,577,7,708,818,228,494,631,852,407,872,311,23,192,443,57,209,364,673,132,556,41,117,148,432,620,651,695,122,818,495,483,711,514,476,147,21,229,333,431,64,707,632,97,291,242,556,266,485,564,114,39,376,454,400,387,24,353,240,259,269,7,17,65,103,129,58,189\nShropshire,E06000051,female,406,505,470,542,606,248,135,743,299,521,537,657,724,605,769,76,752,215,126,508,283,545,699,190,12,303,288,292,190,307,332,176,298,379,473,820,293,510,286,615,475,209,559,90,158,97,87,264,320,638,231,218,784,786,1015,346,331,1192,1209,101,381,418,1070,876,910,237,348,931,384,966,92,570,42,701,952,565,850,349,315,300,101,305,14,405,472,64,326,5,52,160,583\nCannock Chase,E07000192,female,200,218,106,4,136,58,211,254,135,200,194,65,103,95,122,1,58,156,162,95,86,168,225,273,284,214,59,132,359,160,65,78,353,179,12,186,16,29,25,292,224,209,183,222,72,243,210,321,235,98,356,140,393,363,171,147,48,273,244,259,207,40,39,68,117,72,168,83,198,187,32,142,121,293,209,149,105,67,182,30,129,7,19,114,124,4,7,4,50,64,91\nEast Staffordshire,E07000193,female,247,330,159,145,259,216,43,70,42,150,143,141,257,211,232,33,17,65,88,201,181,95,35,213,216,218,173,235,396,404,200,138,197,235,33,279,393,167,79,64,147,98,150,234,237,112,193,122,120,81,116,162,317,404,448,219,290,193,129,81,38,3,88,228,49,203,55,17,124,48,171,157,27,253,161,222,168,158,128,140,14,115,106,80,157,89,88,65,11,56,328\nLichfield,E07000194,female,236,137,130,95,93,28,207,165,192,247,92,216,210,24,100,237,38,180,58,22,106,63,115,257,224,13,124,41,295,30,85,65,108,235,251,0,137,26,55,139,311,126,13,35,178,284,71,251,177,230,209,131,268,331,82,354,397,319,385,69,147,316,307,79,25,103,292,64,192,148,102,54,78,13,317,82,239,147,260,160,58,134,91,105,135,133,73,97,87,36,196\nNewcastle-under-Lyme,E07000195,female,277,245,249,99,27,79,75,56,169,47,15,155,195,91,36,93,227,79,361,541,486,366,65,186,199,258,151,279,13,101,195,17,99,307,6,129,179,303,35,51,264,184,184,200,124,20,348,40,178,50,195,51,297,13,350,341,156,144,200,385,260,167,203,362,301,361,308,10,226,279,253,18,126,7,242,281,58,286,42,75,176,47,145,5,142,55,86,107,20,75,215\nSouth Staffordshire,E07000196,female,21,31,179,66,40,111,228,174,162,136,167,50,193,208,233,36,67,190,186,151,132,215,43,94,67,67,113,77,194,133,33,38,179,103,267,5,5,269,210,90,284,257,18,249,7,130,30,146,177,33,132,289,330,202,343,179,111,327,434,256,409,157,107,114,331,222,204,82,46,275,141,55,83,42,62,220,54,90,150,215,139,120,145,8,70,158,117,126,46,20,347\nStafford,E07000197,female,25,94,251,218,272,348,252,224,173,106,46,59,207,267,120,115,258,291,218,243,190,234,151,315,259,224,151,339,185,49,251,247,4,216,409,380,218,1,194,88,407,395,386,115,128,103,148,167,99,37,344,15,83,122,202,193,55,300,492,60,165,325,86,89,244,199,225,364,174,393,44,269,205,82,349,75,345,97,152,154,197,193,29,62,189,163,1,120,87,13,128\nStaffordshire Moorlands,E07000198,female,134,27,22,9,137,82,94,178,152,131,221,57,117,40,15,111,142,159,91,27,54,76,25,135,203,193,19,103,217,196,82,178,198,75,237,168,54,237,249,155,76,138,30,17,142,141,114,153,219,133,102,107,165,245,185,57,353,177,340,189,198,257,16,61,103,267,69,1,89,275,171,142,4,216,261,258,26,41,153,75,81,89,23,155,67,123,90,96,17,6,107\nTamworth,E07000199,female,158,33,113,141,180,77,154,184,151,195,128,157,67,145,9,84,63,105,169,142,110,138,3,191,111,85,79,162,38,93,265,162,47,96,266,72,216,217,222,242,249,123,183,175,91,179,155,54,146,67,112,273,256,83,99,57,215,230,255,228,200,205,129,82,197,70,132,26,208,141,177,113,17,104,96,24,137,167,146,102,101,7,5,80,46,55,4,48,47,29,158\nNorth Warwickshire,E07000218,female,146,118,29,104,37,26,88,14,19,60,77,82,51,82,49,142,172,64,10,31,46,125,88,71,66,52,168,97,43,87,146,22,183,7,151,191,3,28,64,144,76,98,64,105,63,72,103,133,195,98,31,152,159,129,153,7,65,11,34,162,70,132,58,149,128,43,31,94,29,18,16,152,22,166,27,126,73,92,78,111,65,38,75,93,82,48,49,55,34,34,139\nNuneaton and Bedworth,E07000219,female,229,358,15,359,197,322,100,152,94,144,280,353,333,339,205,162,6,336,90,130,8,41,276,316,13,280,332,68,261,444,160,491,411,173,99,21,372,19,185,72,345,70,159,352,304,81,5,174,44,109,169,13,216,499,321,383,397,274,267,346,43,317,152,61,9,209,294,97,186,50,192,181,288,239,112,99,54,174,102,190,14,145,123,167,125,39,39,103,58,8,25\nRugby,E07000220,female,281,89,70,66,27,203,237,97,131,36,97,191,76,31,128,122,220,63,131,61,48,193,43,176,265,317,27,128,94,187,165,384,412,62,249,335,350,49,361,315,158,342,11,137,144,249,78,0,12,145,122,45,322,4,96,190,317,217,93,182,177,152,38,178,131,154,166,185,103,148,53,1,134,214,150,161,191,74,185,162,113,4,108,38,21,4,93,60,29,17,164\nStratford-on-Avon,E07000221,female,236,92,216,87,147,95,18,258,134,80,292,308,23,281,362,170,50,127,64,162,116,1,239,130,27,135,43,207,3,20,327,132,252,299,67,11,99,193,347,261,331,294,222,47,228,305,28,406,20,466,323,256,463,225,355,90,312,239,356,152,232,81,56,378,366,290,13,68,403,262,17,189,212,397,420,96,46,359,309,172,144,10,96,252,93,158,131,136,145,55,496\nWarwick,E07000222,female,220,102,259,278,67,347,326,196,347,410,155,254,219,164,337,48,170,63,183,212,433,591,265,178,29,264,2,445,199,47,118,170,437,278,41,208,397,375,336,200,260,434,205,37,349,44,90,158,425,473,148,462,13,166,287,317,456,240,31,470,378,59,340,98,26,364,166,140,84,106,310,344,198,356,319,271,116,244,31,45,157,57,187,98,91,152,115,30,121,48,311\nBromsgrove,E07000234,female,33,201,107,120,278,105,247,91,5,3,85,156,73,161,46,117,287,177,111,30,106,42,175,94,106,168,227,67,114,129,114,30,206,173,67,214,101,279,13,261,70,160,80,82,272,280,57,130,27,43,246,35,252,170,71,136,370,306,67,94,147,88,198,117,166,31,120,204,131,264,201,112,208,124,13,185,193,35,107,28,23,54,20,107,99,111,73,26,63,35,37\nMalvern Hills,E07000235,female,46,98,3,142,102,153,121,47,168,95,141,106,223,49,81,38,179,134,173,22,53,124,141,130,1,173,49,28,107,147,39,203,123,90,105,48,4,55,67,5,163,86,126,44,174,151,131,192,30,121,260,246,177,171,314,179,284,277,317,39,192,86,295,173,199,85,108,40,193,18,58,54,231,162,174,122,45,210,155,82,38,73,20,77,26,77,14,12,66,46,238\nRedditch,E07000236,female,167,111,85,220,138,58,122,194,125,172,71,77,29,32,78,104,29,129,108,25,53,131,107,58,76,237,217,44,145,252,252,260,326,112,221,160,20,289,227,285,123,92,104,189,38,61,74,95,70,44,20,234,95,130,8,132,24,224,142,25,165,83,96,3,155,206,19,83,212,144,116,150,101,194,58,78,111,80,117,18,55,90,30,92,72,3,27,21,17,39,182\nWorcester,E07000237,female,39,162,156,189,226,128,82,161,264,142,99,265,127,122,174,56,105,209,62,334,383,330,316,117,50,134,109,12,6,305,282,322,97,29,108,285,79,308,249,67,150,154,243,238,114,258,45,188,267,103,240,8,105,244,199,12,244,267,340,4,63,261,239,44,189,219,118,104,162,113,68,104,111,196,82,7,109,149,166,171,75,149,25,82,38,73,34,72,60,66,85\nWychavon,E07000238,female,78,230,53,10,213,93,63,58,353,209,276,331,11,109,9,45,30,333,83,220,48,87,173,305,70,215,232,3,327,291,73,124,338,327,22,41,37,144,213,122,180,336,240,246,166,237,40,387,217,65,361,133,162,109,155,377,26,8,289,68,9,150,4,47,50,339,432,167,421,319,190,330,279,194,167,369,1,45,216,210,148,78,244,192,70,48,70,5,25,40,251\nWyre Forest,E07000239,female,49,85,86,176,79,38,220,89,56,257,175,66,227,80,50,238,106,73,45,85,23,160,156,22,218,4,207,108,259,298,137,96,278,288,232,253,285,94,16,169,307,144,15,103,131,27,99,214,177,216,270,288,214,302,92,7,31,74,167,123,313,288,39,81,139,10,265,99,55,2,132,190,85,334,204,209,199,184,99,70,24,47,136,156,79,57,22,84,58,81,190\nBirmingham,E08000025,female,1019,793,119,1930,2140,863,2339,49,1996,2475,100,2684,2082,472,1329,1360,362,3382,2789,4222,2504,159,908,453,2439,1302,632,3352,1160,3062,4314,2636,453,2170,508,539,2652,1005,2883,239,3618,2301,927,1475,1619,1054,2284,2203,2286,1123,1628,2286,142,198,119,3014,426,2534,475,473,1456,160,1698,1554,854,1575,1814,2132,2073,1773,23,1112,414,357,685,353,1456,1185,461,764,63,1102,597,745,599,552,259,550,275,329,637\nCoventry,E08000026,female,535,737,618,945,998,134,83,206,321,474,70,327,348,393,194,681,549,497,704,727,43,1167,237,494,984,484,548,612,417,70,159,237,368,97,1052,20,1045,1165,266,587,935,220,441,679,9,276,63,71,914,622,383,979,454,784,483,994,326,585,219,91,66,365,370,352,322,176,699,343,589,457,29,267,493,440,318,77,41,226,102,183,124,35,152,78,71,283,122,189,47,158,369\nDudley,E08000027,female,542,168,51,618,527,594,202,219,125,132,71,339,223,353,292,150,166,334,459,521,332,76,309,360,371,271,839,687,1074,315,922,431,902,29,243,379,690,811,156,294,347,732,857,59,20,414,765,651,504,95,572,438,649,1104,681,389,465,278,987,713,742,423,540,116,579,345,194,443,461,833,410,294,697,323,339,245,365,82,670,313,160,454,269,281,172,109,328,76,131,59,570\nSandwell,E08000028,female,212,105,894,26,824,129,450,928,1211,606,609,975,24,726,573,892,792,954,267,446,378,101,902,647,495,929,204,957,68,1061,861,430,3,558,901,1099,1127,909,268,1217,262,479,1092,371,848,269,619,208,588,325,949,1022,589,291,423,488,1089,1051,1008,825,528,643,613,689,283,108,451,619,78,408,618,538,50,60,624,472,85,81,508,306,338,59,132,64,257,199,83,81,99,169,318\nSolihull,E08000029,female,274,23,130,144,198,546,550,308,405,594,359,109,111,56,498,77,501,472,454,294,131,304,446,214,379,238,328,417,413,553,220,403,16,669,694,682,76,182,632,107,706,256,455,370,634,143,66,554,733,580,322,593,731,363,689,510,372,704,301,437,260,629,42,135,47,515,507,74,206,351,163,158,363,538,486,130,429,263,347,90,265,253,10,125,144,308,113,188,198,40,512\nWalsall,E08000030,female,392,186,808,108,59,155,878,831,131,520,276,932,584,852,153,192,712,611,149,472,402,229,816,651,174,607,831,228,152,299,944,752,911,901,761,935,513,841,351,57,807,57,537,781,787,438,228,854,293,275,658,88,868,484,319,41,836,480,760,53,630,282,590,342,62,139,636,270,62,492,356,413,20,543,612,38,72,406,423,115,222,161,167,154,103,56,105,195,199,201,407\nWolverhampton,E08000031,female,168,655,404,649,308,681,829,318,279,328,193,534,305,863,239,69,163,704,308,241,102,264,57,177,306,561,21,331,130,122,300,412,541,501,636,842,568,892,442,667,346,63,777,366,798,233,720,639,516,476,682,332,384,97,805,479,765,485,397,795,216,352,168,314,165,394,520,459,206,200,44,142,39,495,345,313,201,149,302,328,206,40,127,115,48,272,201,215,75,118,372\nPeterborough,E06000031,female,6,570,379,457,404,346,332,280,647,439,328,279,757,588,300,235,225,465,83,95,391,46,405,57,508,586,267,242,10,832,599,879,95,673,31,578,382,331,745,10,505,212,267,143,389,274,560,462,57,500,427,7,115,37,515,390,124,440,231,374,85,517,314,272,162,368,382,96,11,196,208,190,100,60,46,296,16,136,182,47,147,116,185,139,23,105,41,101,97,42,174\nLuton,E06000032,female,357,313,254,485,67,573,541,19,435,679,580,715,93,442,590,381,543,733,609,292,660,91,376,326,47,738,559,29,272,634,661,479,599,489,830,815,771,46,35,316,193,15,282,386,688,178,484,629,626,299,69,2,625,622,201,45,610,291,172,319,456,41,82,79,68,397,309,276,184,183,88,265,21,229,286,64,21,32,2,95,26,15,18,65,135,18,2,50,85,59,282\nSouthend-on-Sea,E06000033,female,494,235,368,117,356,44,288,329,79,254,362,325,257,461,97,479,440,70,279,142,131,306,427,2,71,313,197,272,162,387,195,70,533,535,204,229,579,565,410,304,350,120,201,178,80,570,464,565,560,404,232,556,369,248,558,222,226,531,142,281,160,11,297,373,151,13,77,70,293,399,236,16,86,351,261,125,144,337,295,303,214,247,157,79,152,91,171,81,63,89,243\nThurrock,E06000034,female,469,329,549,59,194,109,37,417,572,132,374,578,458,46,449,415,103,350,197,379,279,427,364,95,350,390,555,599,70,637,700,207,102,304,274,386,267,386,356,558,528,539,572,575,612,12,139,484,109,407,488,388,171,523,515,144,457,551,234,106,273,176,189,41,142,232,163,86,288,164,187,252,323,263,233,55,160,203,78,3,140,138,20,118,44,38,74,4,58,19,65\nBedford,E06000055,female,396,210,426,421,145,492,253,124,382,358,32,328,66,461,94,483,39,177,287,220,251,206,327,179,57,522,34,39,66,626,285,268,544,623,312,147,433,612,449,632,696,388,373,427,182,215,378,44,293,36,524,101,128,144,173,251,89,414,177,492,286,221,379,194,185,364,120,285,200,169,180,132,6,436,24,149,29,42,250,89,189,162,55,200,21,80,107,20,23,106,433\nCentral Bedfordshire,E06000056,female,300,243,771,439,32,8,350,397,725,268,708,867,218,693,388,54,783,389,98,292,180,410,469,679,240,166,679,856,641,483,54,1015,485,464,78,242,784,796,876,173,337,34,595,835,112,509,841,786,704,672,144,26,552,410,367,732,958,242,697,1014,216,328,266,498,666,121,766,229,451,199,617,207,150,285,424,525,281,89,405,315,209,206,375,255,188,232,257,123,68,103,577\nCambridge,E07000008,female,117,102,163,257,187,138,206,16,3,24,164,276,59,242,279,277,314,98,94,911,874,801,842,170,118,596,619,251,473,533,219,601,218,549,239,127,370,11,437,260,400,436,157,199,189,369,304,152,374,37,423,112,332,254,190,191,248,191,131,274,100,28,156,244,245,129,37,186,28,137,219,23,82,110,9,86,14,35,134,118,66,59,55,25,108,14,79,58,15,57,199\nEast Cambridgeshire,E07000009,female,46,145,54,208,177,208,18,47,240,79,154,158,176,73,58,165,23,155,177,108,54,117,150,123,77,11,195,135,228,119,177,142,85,288,60,193,281,256,211,43,141,174,61,160,53,258,137,35,208,129,106,208,42,12,26,86,221,213,239,263,279,138,12,4,96,81,63,5,258,37,87,8,28,195,204,168,217,26,97,16,97,54,11,40,38,66,91,40,48,69,268\nFenland,E07000010,female,185,129,41,249,251,154,179,28,117,6,10,248,139,99,3,242,148,8,10,5,121,151,5,114,187,38,108,149,215,94,266,157,251,108,261,221,132,145,99,183,244,209,126,198,264,138,186,204,315,353,251,17,258,26,232,363,41,269,313,75,174,212,177,42,319,219,78,306,228,237,261,145,217,317,201,185,194,137,26,150,104,38,61,97,67,94,71,18,51,11,101\nHuntingdonshire,E07000011,female,95,323,246,172,260,54,39,480,413,473,23,448,522,104,308,47,113,214,40,121,86,335,16,126,313,173,374,300,131,223,62,508,620,223,117,336,402,214,572,411,235,112,504,486,411,2,160,108,284,288,573,377,610,388,143,57,278,169,609,626,471,342,555,362,138,243,439,79,165,362,342,315,520,207,557,169,141,279,54,299,243,92,149,117,145,112,35,6,53,13,471\nSouth Cambridgeshire,E07000012,female,246,344,138,83,296,526,215,327,35,373,16,11,58,165,109,245,403,228,153,164,20,202,28,39,301,222,25,108,81,55,92,343,43,379,497,60,161,469,319,341,573,54,336,216,258,346,135,21,303,281,143,8,416,474,59,285,154,550,52,355,298,282,207,242,33,258,212,69,420,306,376,286,120,179,7,319,96,63,316,62,193,33,248,189,50,141,101,125,60,73,217\nBasildon,E07000066,female,447,110,348,133,75,534,266,587,571,415,166,26,544,376,368,391,305,237,329,83,4,208,78,267,22,532,473,153,85,264,409,274,719,474,145,542,238,236,115,272,28,81,420,244,329,65,355,367,599,200,221,536,398,658,584,374,55,108,377,14,202,145,316,475,185,258,296,136,9,5,238,257,353,148,111,70,198,152,274,182,221,187,109,22,85,88,55,104,121,116,248\nBraintree,E07000067,female,205,90,53,148,299,199,375,361,382,264,281,201,30,74,307,237,138,447,325,217,159,277,146,310,40,216,194,115,334,26,279,496,61,236,503,313,49,413,438,428,53,92,209,82,37,259,32,219,543,32,589,96,435,143,447,446,138,289,144,49,140,69,213,167,150,246,415,20,83,275,239,82,347,181,423,16,267,38,85,50,8,241,52,136,115,96,142,26,96,1,195\nBrentwood,E07000068,female,58,66,110,154,30,109,41,163,6,192,76,168,64,55,144,76,86,207,90,26,112,98,28,12,183,166,82,106,3,78,21,211,18,105,69,14,13,47,7,201,47,45,245,225,36,156,159,12,57,244,68,148,250,220,235,120,147,196,89,15,4,154,208,224,24,52,122,31,13,169,165,141,25,23,15,151,90,54,145,93,45,39,90,69,94,63,97,19,50,77,225\nCastle Point,E07000069,female,178,170,163,143,96,150,209,27,34,20,15,64,221,102,157,126,28,15,122,139,139,188,113,28,84,185,146,70,112,113,81,109,199,144,212,145,209,92,103,19,282,1,14,76,4,148,120,264,259,222,215,142,87,281,213,264,213,219,86,297,63,145,65,12,117,134,150,63,19,183,286,104,156,142,388,211,262,176,194,120,74,30,177,101,118,5,77,89,49,63,150\nChelmsford,E07000070,female,169,409,489,91,93,114,337,432,427,541,507,300,422,333,339,402,239,385,396,212,166,278,38,282,3,358,516,247,274,242,191,8,93,576,45,431,116,563,533,637,134,630,464,61,323,269,153,486,89,348,21,378,362,587,425,153,560,396,310,511,552,25,452,208,378,110,85,364,46,425,13,310,414,22,317,292,272,281,314,244,82,25,19,119,32,132,178,89,15,134,250\nColchester,E07000071,female,333,101,211,33,217,277,116,370,474,50,13,132,276,155,488,3,456,45,84,412,535,544,646,611,417,4,607,570,187,251,465,531,427,223,351,177,220,287,511,489,136,172,327,153,208,350,349,190,238,183,69,176,415,359,291,578,444,104,329,427,149,153,267,245,223,135,2,105,391,76,374,29,77,2,562,3,253,225,38,36,169,8,234,159,118,81,117,99,130,55,39\nEpping Forest,E07000072,female,350,167,180,216,211,89,183,267,248,309,338,236,5,2,30,315,289,76,296,171,143,23,84,196,192,63,332,98,373,281,148,162,204,278,3,299,371,165,429,160,242,318,420,222,77,318,176,344,22,386,355,72,11,467,443,161,178,204,144,314,182,250,183,171,376,280,57,262,169,238,302,24,129,371,80,165,222,156,39,162,82,149,78,31,85,53,96,96,93,135,46\nHarlow,E07000073,female,158,202,151,140,266,200,190,186,5,141,277,124,278,293,228,91,6,27,180,125,98,91,189,180,162,154,129,62,209,20,158,324,352,361,306,330,297,198,139,234,9,24,130,159,167,66,51,213,36,45,147,193,286,106,29,215,271,1,97,226,260,17,48,39,38,125,155,198,180,106,5,120,128,182,75,65,162,34,104,69,16,44,50,51,61,1,0,37,3,68,13\nMaldon,E07000074,female,133,127,96,145,14,109,77,49,89,150,61,175,57,146,128,135,151,80,151,91,34,48,80,134,54,155,109,126,8,153,49,8,116,178,83,113,40,97,123,37,33,144,32,138,139,112,34,50,110,152,183,125,263,40,111,81,226,39,38,140,224,74,39,201,217,39,5,107,15,8,141,89,87,261,19,179,29,25,98,86,97,26,51,67,54,54,33,18,38,19,205\nRochford,E07000075,female,193,211,155,62,173,127,126,125,142,48,178,152,34,79,136,89,191,116,13,53,95,166,149,121,161,42,217,72,53,241,211,130,118,126,124,98,110,5,201,210,25,5,86,139,57,163,172,206,89,161,189,197,217,145,312,293,241,241,96,92,251,250,246,114,222,39,25,49,217,95,231,109,106,305,338,245,161,201,185,181,42,7,67,138,87,26,66,33,61,23,117\nTendring,E07000076,female,63,57,110,199,355,215,122,263,150,181,169,56,70,33,227,180,193,223,326,14,284,26,253,353,217,242,300,307,36,250,94,364,331,312,248,325,10,321,200,137,26,319,249,71,67,17,115,317,324,291,187,75,125,280,464,533,461,467,553,297,410,536,531,485,202,5,431,343,345,356,467,301,290,183,219,440,270,304,205,21,204,347,63,12,270,95,140,91,29,21,475\nUttlesford,E07000077,female,52,30,123,184,52,192,143,226,217,227,231,301,199,67,108,195,49,128,111,57,54,153,23,44,180,211,36,7,82,80,202,234,268,218,118,53,26,234,275,122,249,14,51,83,167,213,60,54,174,9,230,168,238,109,273,314,14,207,96,150,201,224,11,270,125,25,58,34,216,225,95,30,250,124,118,120,80,137,123,119,8,143,128,51,93,113,11,45,9,19,285\nBroxbourne,E07000095,female,190,36,203,303,146,155,17,281,82,68,155,309,258,262,120,214,215,2,232,185,196,52,85,169,185,167,19,67,105,285,88,362,215,101,112,114,225,303,330,115,186,205,38,41,107,163,41,281,218,352,261,247,215,254,319,103,42,197,194,280,251,31,170,216,233,7,68,159,126,95,124,35,98,144,182,54,103,46,99,38,64,152,49,35,110,35,50,7,82,49,182\nDacorum,E07000096,female,3,70,56,181,177,235,277,298,126,88,204,399,333,362,71,202,393,99,279,54,21,193,68,343,174,57,351,60,290,72,5,537,112,568,163,512,156,313,183,112,532,486,365,359,431,223,507,193,354,438,556,117,138,492,7,56,227,361,160,26,137,409,397,173,133,240,165,300,287,152,7,189,122,159,184,152,18,192,177,165,80,94,83,69,43,93,49,59,32,131,323\nHertsmere,E07000098,female,203,209,85,176,35,45,153,316,2,97,106,170,5,187,86,164,294,262,213,160,37,77,116,12,278,80,91,101,218,301,5,49,326,95,279,278,199,179,175,83,333,325,111,281,288,34,83,233,315,213,13,218,385,315,118,33,161,114,312,64,236,240,90,232,256,77,4,16,63,7,148,237,198,167,287,163,2,79,132,33,105,153,87,22,3,66,1,93,39,22,313\nNorth Hertfordshire,E07000099,female,25,170,275,321,312,365,26,110,143,420,399,229,149,195,288,372,60,126,60,165,96,227,200,201,155,217,265,223,256,185,31,349,359,167,427,65,224,291,155,338,214,104,424,33,456,141,100,109,246,105,19,424,4,366,353,369,197,207,327,236,95,197,126,254,277,219,165,226,190,33,151,182,262,322,228,110,156,263,160,181,205,25,52,113,52,28,149,136,7,36,297\nThree Rivers,E07000102,female,198,34,36,38,32,105,225,38,120,120,265,52,151,52,312,120,9,67,161,110,96,136,8,209,74,229,99,73,117,234,91,167,285,124,165,45,34,363,103,229,336,226,343,331,93,31,153,84,26,365,282,35,347,285,77,29,334,205,110,305,228,67,123,49,42,187,227,202,113,78,49,216,89,80,209,93,48,1,158,39,3,93,125,82,94,106,24,1,85,31,53\nWatford,E07000103,female,74,151,293,30,295,271,155,197,289,25,305,145,66,22,168,110,297,217,215,41,179,144,159,40,36,195,172,182,86,258,129,392,119,21,21,447,463,319,381,346,415,356,102,328,202,194,4,70,120,322,169,57,39,337,72,161,267,242,205,21,75,103,11,11,102,109,77,102,160,137,5,141,94,16,117,86,43,102,12,33,6,64,38,71,18,49,49,28,46,7,98\nBreckland,E07000143,female,4,121,75,5,335,166,211,137,104,97,271,149,159,309,152,4,271,273,294,88,235,187,81,188,229,61,25,303,326,198,192,314,174,41,270,224,243,32,128,31,115,170,109,252,348,243,269,39,3,278,186,69,25,294,271,529,302,123,72,431,284,173,383,14,467,398,29,382,350,101,246,140,95,234,204,134,357,328,84,62,259,88,153,133,208,71,89,119,73,133,14\nBroadland,E07000144,female,103,169,49,119,141,333,143,10,4,159,31,292,211,74,257,193,109,122,72,190,3,52,26,211,149,301,247,7,166,8,256,331,20,161,17,81,52,217,19,172,277,120,19,73,229,365,236,282,432,299,389,287,139,394,57,217,412,244,341,44,323,421,167,254,395,8,147,52,368,121,186,360,333,412,150,76,302,94,303,207,97,146,177,64,227,5,65,120,19,100,43\nGreat Yarmouth,E07000145,female,32,156,53,178,241,116,13,176,212,34,97,199,173,130,27,22,147,58,23,27,91,153,226,234,154,107,70,267,289,9,154,196,97,23,23,54,1,58,62,141,214,175,188,126,215,75,275,114,289,117,69,187,104,220,364,39,103,223,226,57,15,222,294,153,73,238,77,230,53,115,239,173,120,58,46,112,70,215,214,83,55,158,12,68,81,7,71,14,23,90,130\nKing's Lynn and West Norfolk,E07000146,female,221,157,325,206,68,9,307,239,256,232,74,148,226,191,313,278,181,144,34,26,145,123,157,168,324,235,366,300,40,95,269,306,53,479,177,95,204,235,106,196,324,195,335,27,241,417,38,96,283,263,157,455,437,341,374,302,430,4,553,254,135,186,405,127,502,158,303,420,270,178,39,147,96,375,309,327,9,398,405,50,319,218,314,192,162,5,200,11,57,126,64\nNorth Norfolk,E07000147,female,87,137,167,73,134,175,57,136,138,164,170,21,100,32,143,84,200,85,7,122,74,13,100,119,30,181,28,160,109,147,84,17,128,169,216,230,165,96,67,79,15,141,126,211,1,74,241,50,222,192,81,141,106,177,261,253,80,415,223,323,429,453,422,406,158,328,8,58,161,229,234,242,260,255,415,99,222,193,193,176,171,164,152,205,158,27,47,148,120,19,102\nNorwich,E07000148,female,169,30,95,330,127,330,218,220,229,94,131,19,171,269,312,181,170,1,68,371,584,371,137,0,409,241,388,89,371,543,380,433,485,560,206,417,491,97,195,227,40,5,148,368,195,193,142,79,351,305,374,53,217,300,233,15,197,248,28,310,227,316,327,136,122,235,147,262,176,128,64,232,169,44,252,119,86,210,139,156,173,107,74,79,42,101,117,45,13,11,237\nSouth Norfolk,E07000149,female,95,41,184,264,282,152,116,136,382,226,379,60,252,357,157,202,12,234,162,230,168,176,314,119,311,180,60,108,333,299,395,331,182,169,1,63,151,136,189,198,219,45,312,107,177,431,113,352,378,249,477,196,318,462,123,354,272,46,153,483,15,266,140,142,117,422,313,370,31,298,50,218,359,500,80,344,51,273,316,86,105,37,198,189,93,43,15,166,46,83,544\nBabergh,E07000200,female,109,50,3,77,45,148,77,46,35,36,201,226,211,48,63,209,9,110,13,28,140,124,130,110,172,117,164,188,28,83,133,207,9,34,142,77,178,88,37,198,94,117,209,101,173,43,265,117,8,81,242,251,58,235,329,238,325,307,149,132,142,165,102,63,120,323,101,82,279,155,20,222,220,228,384,119,2,119,154,204,66,80,132,8,28,46,29,5,99,22,88\nIpswich,E07000202,female,355,232,39,102,337,142,49,297,165,184,294,162,153,271,113,138,298,371,184,328,50,252,270,393,52,198,154,214,33,419,520,484,179,306,343,283,177,263,241,345,279,420,248,83,7,24,176,114,134,232,399,203,75,111,310,62,246,25,258,170,251,223,294,215,268,74,253,279,307,178,117,225,104,206,328,110,47,132,52,31,162,13,125,1,133,109,62,13,64,47,150\nMid Suffolk,E07000203,female,201,103,46,92,140,172,23,253,156,51,19,84,163,78,210,176,66,78,127,10,64,147,146,185,185,160,54,192,88,25,122,225,281,244,11,6,62,39,200,258,26,38,107,216,219,171,69,281,124,362,138,265,122,122,417,279,154,369,62,30,385,40,310,247,218,330,178,349,172,257,49,180,182,35,22,130,287,64,42,98,130,148,182,173,114,77,55,57,23,18,130\nSt Albans,E07000240,female,219,212,21,335,40,6,193,264,432,68,370,323,412,416,68,19,271,243,280,28,100,48,204,353,27,303,251,40,104,179,275,72,120,111,445,369,16,97,355,233,430,304,556,436,529,432,356,543,429,557,82,535,510,112,482,432,517,159,346,183,177,228,192,13,225,286,144,252,216,51,186,149,325,83,210,191,99,124,2,177,119,82,95,190,98,67,1,102,50,22,247\nWelwyn Hatfield,E07000241,female,125,181,138,95,320,141,133,160,96,172,232,149,106,159,304,116,188,113,329,467,559,160,133,456,292,294,39,243,245,158,30,426,193,63,128,358,227,319,16,13,204,364,2,261,97,128,144,246,331,133,125,170,4,314,240,198,116,335,37,94,195,263,141,168,119,264,197,244,88,243,158,62,231,43,112,177,91,75,48,53,1,114,150,33,30,3,50,53,82,43,177\nEast Hertfordshire,E07000242,female,246,302,22,181,405,136,41,50,21,383,131,137,222,207,230,353,66,298,316,234,107,66,14,129,119,23,332,108,59,216,172,6,305,416,112,257,369,459,241,194,269,59,217,109,337,203,145,73,230,410,432,445,342,577,141,312,439,116,86,8,476,354,389,359,376,368,38,58,234,152,351,29,234,66,183,50,236,15,127,215,30,194,170,111,46,31,84,84,86,73,5\nStevenage,E07000243,female,101,220,172,35,47,43,143,29,42,290,145,96,225,208,44,174,103,52,85,99,142,157,71,32,28,59,278,99,152,32,255,101,102,366,336,106,254,312,249,83,32,309,13,76,157,77,14,177,1,227,195,254,248,132,121,28,114,94,197,116,58,254,242,141,102,64,81,140,77,136,16,151,78,59,183,79,3,116,35,55,16,64,63,106,97,41,20,58,53,35,27\nEast Suffolk,E07000244,female,427,381,357,427,87,38,310,240,440,124,646,209,241,263,149,647,598,527,71,403,363,274,331,190,76,297,443,84,212,477,405,129,294,26,297,85,92,17,174,555,648,149,599,482,77,160,317,146,77,83,334,275,365,468,505,344,956,36,131,709,297,623,665,31,346,803,251,98,208,649,703,353,816,672,765,630,645,342,605,186,158,201,144,178,352,264,135,18,110,139,345\nWest Suffolk,E07000245,female,3,8,207,387,351,145,477,107,448,71,342,391,346,201,302,249,48,424,357,26,207,192,473,276,448,293,300,288,305,518,212,0,300,3,85,514,82,212,396,136,168,476,348,291,414,490,311,502,540,322,441,170,259,394,580,291,75,515,286,360,92,377,432,371,123,381,366,388,77,225,51,149,452,96,68,94,173,327,37,286,56,136,29,30,108,82,20,143,11,112,267\nCity of London,E09000001,female,5,10,6,1,4,1,6,4,0,4,2,3,4,2,6,4,6,3,10,14,26,30,11,32,40,45,39,54,20,55,3,6,6,30,14,36,25,21,27,5,15,10,3,9,11,24,16,2,6,3,18,15,4,18,0,16,10,21,8,1,4,11,4,5,9,14,9,7,11,7,12,17,16,10,12,11,11,2,3,7,4,2,3,2,3,6,2,6,2,0,2\nBarking and Dagenham,E09000002,female,636,97,571,572,512,145,610,616,125,526,377,858,615,399,253,473,144,167,316,31,279,218,131,240,685,404,139,311,306,562,838,574,538,101,58,5,525,252,744,373,99,405,251,802,321,2,107,279,443,226,337,367,687,141,471,171,582,479,107,378,232,426,334,169,268,68,72,17,136,114,167,46,145,145,2,183,33,155,29,92,13,91,43,114,37,9,92,69,78,22,294\nBarnet,E09000003,female,759,894,35,102,44,753,276,485,1081,704,117,313,100,1246,1071,143,1194,1092,829,65,811,799,560,582,411,836,1118,1389,318,1518,168,1235,487,108,1191,198,592,1460,1069,490,516,980,244,1438,800,1006,581,1329,562,1251,1338,212,641,1096,1019,851,623,798,861,250,683,448,893,695,902,368,313,774,630,665,661,30,400,83,716,568,51,44,235,447,323,281,383,355,59,201,280,25,29,229,869\nBexley,E09000004,female,455,415,86,576,403,18,501,197,101,104,141,747,216,515,794,612,478,261,608,118,379,372,251,135,232,276,660,198,780,531,658,537,678,23,614,145,843,810,356,609,655,509,579,634,198,225,385,721,547,455,390,33,598,611,521,206,150,175,321,81,660,406,177,543,66,576,194,54,265,245,50,365,72,137,212,406,415,373,428,60,63,165,131,120,280,273,147,184,146,128,298\nBrent,E09000005,female,481,668,233,74,356,245,823,800,710,215,41,235,26,739,378,405,265,166,609,471,810,142,1232,287,1217,1434,933,615,867,436,1151,967,1471,536,1477,1097,1161,827,1198,773,1224,1084,1183,440,581,414,901,763,232,897,223,880,425,997,601,125,216,717,912,1032,619,865,392,734,155,274,519,95,6,388,565,239,264,479,445,41,138,12,34,25,157,230,249,160,266,214,63,104,18,46,276\nBromley,E09000006,female,58,324,297,538,961,680,765,706,362,566,379,922,879,743,231,917,951,688,122,19,46,318,490,651,105,708,792,873,143,15,198,590,1169,1281,859,166,174,437,296,590,72,586,425,1208,105,357,731,519,285,456,1090,124,1159,649,816,806,166,497,335,1036,362,473,807,662,229,622,280,174,514,704,623,202,273,131,281,428,178,191,352,509,464,224,426,219,52,25,87,29,220,84,134\nCamden,E09000007,female,317,74,147,135,421,387,326,84,89,367,50,53,148,313,381,436,1,354,61,883,1092,449,839,16,1109,997,559,1161,683,740,481,102,490,622,855,801,10,166,292,715,204,451,714,201,417,519,681,22,586,457,638,673,10,403,143,65,29,467,111,95,443,147,176,133,286,236,32,367,44,142,136,234,106,135,174,122,114,129,40,75,132,49,27,98,22,17,106,65,83,58,71\nCroydon,E09000008,female,204,992,1072,1094,362,618,538,804,940,1152,804,968,1209,347,847,450,1168,1048,206,169,540,88,491,824,381,200,814,1112,676,1211,1188,1382,1499,432,963,1390,522,1401,1469,470,61,357,490,1184,668,1303,609,334,880,932,333,1358,816,385,1414,256,1053,1044,125,71,1013,143,142,859,285,457,152,203,719,600,124,638,628,455,306,189,578,510,206,179,322,7,85,242,100,293,211,261,104,77,91\nEaling,E09000009,female,262,442,123,159,586,958,561,227,716,35,308,119,201,776,241,478,790,224,30,409,837,186,252,1183,898,759,1282,814,1090,410,826,495,932,74,1506,1193,1494,835,794,799,1046,102,122,438,975,1111,1315,377,1053,204,627,113,1001,293,1152,198,469,991,17,31,893,863,40,384,292,488,126,489,539,338,508,298,568,210,410,278,489,23,396,55,369,118,245,251,262,187,21,28,21,140,120\nEnfield,E09000010,female,464,307,205,496,971,673,775,272,784,1157,761,1100,930,146,618,703,60,567,643,441,417,764,244,585,442,428,580,841,895,698,209,60,538,1278,432,1095,348,80,919,44,978,368,534,17,776,7,396,41,247,440,1135,153,385,1086,515,601,229,906,67,2,601,477,678,202,151,131,19,171,370,347,605,590,362,416,400,303,128,2,269,152,31,296,43,84,201,34,200,180,27,162,749\nGreenwich,E09000011,female,535,855,375,78,230,679,584,220,770,453,545,250,679,170,583,719,261,712,718,241,363,392,376,343,797,993,138,312,94,477,1109,1349,38,1259,589,1147,749,1344,919,833,169,806,1135,395,991,351,9,381,866,733,788,144,716,568,153,470,826,25,587,307,394,200,478,492,412,335,82,143,242,217,70,361,210,13,381,15,342,25,71,78,13,206,82,46,19,21,23,120,48,25,51\nHackney,E09000012,female,411,535,437,213,689,687,137,477,105,704,9,61,35,128,627,34,391,310,511,462,343,545,689,798,892,108,493,611,1393,638,957,379,174,217,66,1376,301,536,391,540,466,276,337,330,727,118,582,717,213,564,387,703,549,23,361,736,247,428,3,381,155,118,92,123,321,397,286,123,114,106,1,250,139,13,135,202,75,6,185,78,74,123,81,42,39,32,10,11,11,28,261\nHammersmith and Fulham,E09000013,female,219,169,387,142,442,358,279,213,288,413,318,311,342,403,57,235,50,331,124,390,539,372,751,158,1137,270,39,335,75,480,56,795,651,55,359,591,127,623,173,667,613,549,20,300,643,583,208,234,518,609,360,330,619,528,31,425,288,368,55,382,239,370,15,68,169,135,270,185,197,216,165,230,223,174,23,76,28,180,59,54,145,70,4,7,111,36,92,19,18,9,131\nHaringey,E09000014,female,100,502,30,659,545,492,478,343,629,554,371,142,436,217,705,306,124,408,155,626,119,120,725,807,862,100,673,1159,839,520,185,997,618,120,603,277,354,600,200,1019,386,364,706,700,839,653,164,164,190,908,667,161,434,571,151,456,521,73,22,10,578,71,552,110,26,18,179,214,353,62,375,122,326,343,15,228,212,69,185,187,190,39,158,135,160,4,76,30,73,5,312\nHarrow,E09000015,female,8,317,23,162,346,133,589,379,548,120,428,68,437,485,611,264,663,438,424,393,265,460,295,503,76,827,440,770,830,771,933,100,197,955,734,751,519,10,715,255,255,435,464,654,171,460,465,9,68,121,304,523,657,573,748,53,309,151,192,466,188,395,191,632,406,12,321,29,146,420,470,279,343,17,495,157,158,283,295,201,170,154,88,7,4,215,134,32,94,149,664\nHavering,E09000016,female,326,106,747,533,790,220,580,526,311,227,469,742,716,537,2,708,13,375,19,282,297,430,307,51,557,61,314,639,563,469,15,707,494,313,20,942,847,575,958,848,381,479,749,459,301,771,278,329,356,529,469,64,506,247,529,113,312,317,383,424,554,126,691,310,292,511,47,517,366,213,281,210,179,199,329,161,230,301,340,182,176,354,102,362,226,6,115,161,220,63,374\nHillingdon,E09000017,female,367,385,81,72,68,748,979,97,883,357,707,732,457,430,124,221,558,47,114,804,554,938,304,299,172,458,375,89,315,604,514,788,5,22,596,260,893,586,337,231,18,558,813,928,484,487,186,157,838,258,855,378,356,564,230,171,412,460,403,123,564,137,405,508,485,60,525,512,52,376,212,480,214,38,152,66,90,233,348,183,121,24,12,278,122,229,195,16,142,92,367\nHounslow,E09000018,female,746,71,126,818,91,720,527,638,21,837,17,474,469,837,715,449,247,553,539,143,450,56,275,512,553,1012,528,558,914,573,163,686,533,1314,0,537,387,458,1177,565,720,927,69,668,852,172,1029,209,416,561,895,66,555,126,578,594,587,732,705,182,659,683,28,243,484,249,115,171,37,457,423,88,241,98,345,318,5,155,163,262,102,10,6,169,190,109,26,100,114,113,394\nIslington,E09000019,female,411,513,61,428,400,296,39,375,475,261,167,508,470,118,37,226,201,27,585,85,403,648,465,895,307,1395,800,687,593,1163,954,733,1220,1062,325,521,1063,516,399,461,619,744,619,20,254,409,181,461,599,373,6,543,19,292,135,605,415,579,61,530,409,420,140,115,44,37,32,213,239,113,165,85,210,5,61,19,197,120,142,17,19,132,64,80,86,79,27,78,6,39,237\nKensington and Chelsea,E09000020,female,64,133,328,226,253,219,31,131,183,144,12,33,150,17,272,260,152,125,182,214,208,21,359,660,710,545,499,359,351,370,339,178,226,105,445,231,364,242,369,92,55,176,354,444,221,491,285,483,169,220,152,322,564,106,400,524,191,531,474,503,345,0,38,244,58,225,233,194,62,146,7,71,174,136,83,70,163,194,100,53,86,94,65,81,72,4,64,61,51,71,302\nKingston upon Thames,E09000021,female,26,40,169,156,152,274,402,126,259,271,356,416,291,283,88,155,341,316,405,255,422,192,518,36,35,185,418,435,21,343,86,488,361,130,468,91,404,572,3,369,63,124,505,153,102,555,342,639,471,48,167,32,357,398,543,60,429,470,443,280,85,205,167,280,162,125,101,246,235,40,219,37,183,218,22,231,202,77,67,19,112,86,121,89,152,21,130,88,81,100,113\nLambeth,E09000022,female,546,273,240,359,190,142,241,366,772,379,750,100,251,230,196,255,537,674,659,602,461,681,1227,1544,11,390,33,1395,1131,1342,152,1834,1350,25,4,1192,778,320,899,750,787,52,570,1004,719,488,867,199,536,521,526,971,53,875,757,185,448,876,60,480,784,617,557,358,42,295,111,426,201,339,283,337,311,214,89,232,15,128,101,198,51,121,139,177,5,107,105,23,69,29,290\nLewisham,E09000023,female,545,2,191,328,45,722,402,167,499,112,543,79,254,497,729,762,684,446,17,402,374,119,228,81,784,356,21,460,1305,825,233,493,1626,632,233,833,242,600,556,136,805,784,633,1059,1063,895,994,843,227,10,833,821,272,255,635,395,186,109,441,177,649,329,225,571,402,96,184,220,407,335,75,334,338,107,165,103,39,160,16,19,186,221,153,137,110,134,76,125,19,98,131\nMerton,E09000024,female,197,613,34,486,538,134,150,513,103,345,514,317,495,67,300,276,386,224,356,248,156,1,254,189,342,52,11,402,738,857,626,563,170,993,529,15,250,554,768,418,313,105,44,531,328,122,25,415,165,293,197,550,530,195,279,603,596,357,314,358,533,44,214,225,14,10,121,400,332,93,9,209,14,96,32,279,183,231,97,90,11,38,52,60,107,66,85,39,95,74,289\nNewham,E09000025,female,394,1036,669,454,569,262,990,429,1046,1088,90,722,303,349,607,186,755,829,977,423,487,244,136,604,400,645,1749,1113,1294,851,1721,1049,1080,913,301,820,504,775,749,573,855,1403,707,239,628,284,385,1108,714,34,563,370,203,618,806,62,130,807,417,495,764,19,577,397,372,186,227,266,311,67,70,179,326,100,184,62,195,215,98,57,91,43,114,110,108,26,47,80,7,46,24\nRedbridge,E09000026,female,539,846,258,790,912,743,154,519,764,149,962,252,56,293,622,307,104,717,9,190,112,658,475,977,743,1053,210,566,542,1191,659,1276,1121,626,524,111,760,1327,1046,1145,1178,1330,485,969,433,390,802,112,714,54,751,1000,669,491,455,256,700,856,420,485,752,288,189,412,228,166,299,107,108,100,236,211,228,338,249,81,331,260,196,235,256,100,78,114,118,47,110,2,119,51,314\nRichmond upon Thames,E09000027,female,486,402,342,548,369,440,552,291,393,21,642,2,230,449,305,455,400,141,452,143,287,46,382,370,316,16,64,511,16,455,211,15,251,488,580,594,524,417,418,726,869,18,108,529,510,767,201,765,293,363,785,590,45,535,530,555,210,448,69,328,203,256,50,279,319,183,381,159,357,212,32,126,114,144,6,188,13,350,217,147,34,53,225,194,1,20,149,4,109,81,159\nSouthwark,E09000028,female,709,475,720,635,334,10,323,603,707,154,746,193,229,769,8,469,579,520,429,998,605,297,439,396,672,1225,1320,787,376,1920,1418,1450,305,1324,847,1292,149,86,949,229,55,1057,664,334,580,480,755,924,39,829,639,931,838,747,894,116,9,803,624,436,374,22,115,392,102,390,107,103,86,231,211,353,269,153,293,275,222,35,44,159,132,160,185,139,142,107,74,81,11,10,366\nSutton,E09000029,female,318,254,470,301,655,206,423,150,46,534,523,527,448,41,51,288,344,332,132,28,100,141,43,521,2,197,542,104,491,469,386,560,494,629,326,312,131,230,370,657,64,862,736,499,286,204,507,558,88,111,292,700,613,442,453,335,410,47,452,520,238,277,42,94,47,86,286,286,52,400,127,396,280,298,315,323,287,273,131,91,87,166,1,90,65,9,49,156,145,90,269\nTower Hamlets,E09000030,female,153,689,713,429,854,370,70,14,440,334,49,295,75,797,27,159,477,207,113,534,949,774,1043,1230,653,1755,56,786,1271,1334,1701,898,1602,1493,919,6,233,1444,648,264,360,901,435,121,890,532,385,564,515,345,605,197,124,227,288,125,158,245,64,316,239,15,237,352,307,87,185,297,187,125,15,57,64,64,15,103,129,87,107,48,55,122,22,82,80,34,28,53,26,9,85\nWaltham Forest,E09000031,female,379,287,324,68,362,134,523,435,227,465,13,203,631,720,553,369,185,352,647,517,59,204,606,656,355,891,586,0,99,231,227,524,1107,953,657,1294,347,1090,266,1185,617,594,963,134,381,972,250,739,89,93,739,855,155,332,555,371,540,503,465,306,586,64,215,314,94,33,163,262,155,245,103,313,278,346,89,152,241,117,292,52,196,157,173,105,7,129,34,7,106,99,234\nWandsworth,E09000032,female,796,113,383,711,605,479,716,191,475,430,361,719,200,70,182,141,609,510,44,428,363,367,652,478,211,1868,1453,1920,1892,47,2009,449,431,1589,161,1325,1136,351,423,117,1170,442,1009,721,119,89,4,320,506,217,104,51,710,942,517,919,663,528,97,572,648,555,3,37,134,118,237,247,233,286,163,348,418,268,281,172,225,87,218,97,137,180,127,114,122,31,96,122,16,98,373\nWestminster,E09000033,female,177,249,61,32,40,130,154,20,392,190,123,163,328,292,275,142,129,50,102,339,141,700,143,616,902,582,688,610,331,138,517,15,1075,345,420,456,451,557,554,190,637,466,273,63,88,455,633,264,443,417,160,411,677,306,499,159,361,445,170,531,502,250,82,452,303,125,28,320,241,341,174,303,166,93,138,48,190,166,131,52,142,154,106,47,102,18,94,77,54,14,171\nMedway,E06000035,female,13,750,830,783,351,145,726,628,222,454,518,522,377,716,281,591,555,507,572,209,617,709,155,153,318,103,449,400,294,732,33,980,575,31,462,291,194,81,445,139,273,635,299,271,475,194,2,265,731,494,104,254,266,194,565,220,449,528,737,122,403,338,202,343,313,675,626,152,410,204,74,568,79,270,552,389,266,345,94,76,299,14,230,195,229,155,169,155,60,156,408\nBracknell Forest,E06000036,female,82,64,109,267,141,57,35,263,374,268,298,80,73,199,117,385,144,294,104,170,178,10,279,217,123,68,372,70,81,407,236,126,120,246,7,453,150,295,144,268,144,496,270,71,247,54,61,315,192,394,461,253,106,40,416,239,1,132,183,100,119,178,196,78,77,251,138,228,95,248,134,165,240,7,277,155,89,180,97,68,120,24,66,19,26,84,75,77,43,21,17\nWest Berkshire,E06000037,female,112,380,66,326,1,190,140,30,462,318,50,333,388,8,89,325,417,179,382,238,184,145,168,340,62,109,161,244,350,376,50,249,256,93,19,382,170,163,74,22,126,507,336,447,376,457,457,431,34,184,284,30,407,363,121,239,157,264,561,94,99,69,426,395,56,228,221,115,196,28,88,370,214,375,320,17,138,89,204,11,8,93,3,80,64,162,72,72,110,10,215\nReading,E06000038,female,354,367,95,138,522,212,125,272,349,282,470,272,363,355,333,52,38,99,89,193,399,753,386,170,201,109,104,345,260,297,756,791,699,545,745,276,625,664,261,99,425,18,239,383,41,469,431,242,4,246,449,481,153,221,429,364,268,220,149,397,333,16,120,263,69,286,229,183,63,1,48,7,61,203,20,204,96,86,138,115,139,14,1,72,5,71,81,26,75,58,90\nSlough,E06000039,female,321,402,86,182,252,99,277,516,550,244,40,408,230,4,1,440,384,349,6,336,284,131,262,253,289,337,493,535,552,601,25,237,36,655,396,694,471,359,233,43,113,248,3,24,428,285,198,411,260,295,271,200,425,225,401,177,334,202,21,24,176,166,23,305,131,248,217,23,109,67,36,30,59,7,157,36,25,19,112,90,112,103,42,46,23,10,57,63,58,38,102\nWindsor and Maidenhead,E06000040,female,201,190,382,163,66,321,278,122,453,383,426,248,458,55,73,335,410,163,351,143,89,73,197,212,5,389,49,311,20,175,237,326,306,6,154,429,343,453,244,161,472,338,253,242,20,360,94,250,112,569,457,477,606,184,36,318,512,343,421,220,258,311,314,210,359,354,198,93,77,33,218,131,353,47,94,162,156,314,159,108,119,17,40,194,66,8,77,60,49,74,279\nWokingham,E06000041,female,383,179,140,367,240,31,339,157,354,7,521,509,431,225,251,18,430,473,138,262,62,148,340,227,352,276,217,377,287,92,128,413,340,594,485,512,167,43,397,517,118,563,608,305,563,416,149,499,2,65,380,420,592,435,193,460,81,220,469,506,176,157,179,330,53,209,369,175,57,19,320,298,197,339,472,36,232,281,224,223,174,74,71,92,83,150,153,63,23,46,472\nMilton Keynes,E06000042,female,53,93,830,693,602,99,770,560,67,485,816,505,6,28,129,147,112,423,464,303,29,37,352,359,364,758,758,754,205,55,339,395,389,1097,1134,543,619,613,321,478,253,908,589,619,133,679,860,654,449,52,661,814,961,819,9,781,662,198,91,720,246,83,481,615,217,228,545,328,591,386,77,63,181,305,269,356,304,60,186,273,176,89,92,163,87,131,153,50,81,23,162\nBrighton and Hove,E06000043,female,239,0,38,408,462,628,72,410,231,242,140,492,179,3,102,556,346,565,911,922,1495,110,1315,128,587,229,706,26,568,420,360,125,443,794,923,38,574,35,880,662,622,996,388,601,471,854,105,461,799,775,824,103,170,283,732,979,507,871,522,205,195,495,371,203,420,522,258,71,375,131,202,323,444,26,27,97,413,22,8,93,7,191,56,76,40,1,118,103,51,99,463\nPortsmouth,E06000044,female,91,249,338,504,71,315,461,5,421,361,331,222,195,310,243,426,460,491,515,754,967,880,643,107,212,448,426,576,5,303,105,605,699,686,156,501,311,250,485,40,115,437,171,66,59,317,474,462,553,553,685,254,250,524,211,210,38,76,147,96,359,354,309,375,156,223,395,114,274,175,350,367,250,48,391,129,245,181,119,192,182,43,53,236,125,193,169,69,38,71,404\nSouthampton,E06000045,female,127,283,672,129,413,243,449,182,418,376,425,350,77,389,143,257,327,94,74,685,1283,680,692,1002,388,552,171,569,649,874,294,82,850,331,876,439,678,526,164,453,706,288,463,291,443,433,240,486,365,299,339,455,448,188,91,582,103,479,383,298,358,203,492,398,107,105,145,91,44,283,276,423,125,94,131,385,197,190,272,296,223,261,153,27,151,211,46,123,143,32,456\nIsle of Wight,E06000046,female,130,170,226,80,164,58,19,76,110,150,71,183,116,101,234,236,307,171,66,132,198,46,43,56,119,170,76,111,301,319,23,35,292,351,189,259,260,85,328,96,177,17,243,105,349,289,307,78,369,97,437,372,438,84,543,6,215,294,337,425,505,512,246,135,477,151,521,390,295,144,395,296,573,94,135,264,416,14,377,272,40,47,100,93,208,174,58,106,24,14,453\nBuckinghamshire,E06000060,female,1307,1222,127,661,1294,1067,110,975,910,722,372,826,980,727,1719,902,1716,1129,1305,567,601,43,509,901,861,1446,130,1393,943,49,1338,934,107,713,608,744,1140,226,1278,1320,1619,1758,1863,1234,516,465,1445,1268,2040,221,566,1957,1934,870,1046,556,686,1510,755,284,373,339,1186,1359,265,1366,153,771,419,54,1126,449,894,62,146,1087,967,994,77,22,568,873,739,410,184,161,440,503,90,196,1063\nEastbourne,E07000061,female,6,73,54,124,116,265,12,220,45,257,84,16,42,167,40,51,65,140,83,214,85,53,100,82,78,268,84,256,207,286,88,241,242,164,297,49,27,312,96,209,47,196,168,124,98,30,28,259,124,355,112,138,334,86,261,243,250,98,149,106,64,235,117,196,187,293,137,125,97,191,269,274,287,65,250,205,42,245,87,120,51,114,155,152,203,69,160,104,125,11,334\nHastings,E07000062,female,217,183,183,88,90,236,24,2,103,58,42,234,207,5,126,111,200,1,103,45,80,101,210,107,105,86,49,287,223,195,176,299,123,116,119,195,130,57,38,244,201,97,57,57,194,9,97,46,287,265,312,222,272,376,322,276,148,344,285,58,75,187,135,290,138,257,229,218,144,76,191,205,171,30,225,73,49,97,9,30,70,19,9,45,26,27,58,33,30,8,138\nLewes,E07000063,female,103,77,62,17,108,123,158,220,19,172,141,141,87,240,222,52,16,171,217,54,109,46,116,112,12,66,172,170,103,121,124,263,161,266,215,224,92,266,101,45,42,27,293,150,60,148,240,137,40,5,211,299,228,103,203,122,254,4,52,324,296,104,140,22,156,327,108,254,40,90,187,82,309,43,3,136,210,37,110,32,161,81,209,179,47,65,97,121,86,42,371\nRother,E07000064,female,24,111,171,55,52,105,16,121,66,9,142,47,171,168,113,196,183,141,41,144,135,106,30,157,98,70,5,96,16,114,20,20,141,4,166,83,113,199,136,20,161,162,125,86,20,123,40,110,182,182,66,118,21,328,12,196,140,176,156,220,255,184,349,92,364,232,230,200,258,32,296,133,348,451,111,49,8,319,275,192,6,237,87,90,129,64,133,24,75,39,541\nWealden,E07000065,female,215,226,85,323,40,47,161,18,347,402,153,338,336,247,166,441,81,228,109,181,26,176,48,286,348,54,320,191,136,236,165,10,263,283,326,399,106,367,3,56,247,115,16,319,348,389,357,74,146,214,360,503,216,308,678,643,429,191,75,371,532,285,575,322,468,325,465,305,364,54,258,6,9,42,333,482,110,161,386,326,231,312,133,151,76,143,175,193,92,83,520\nBasingstoke and Deane,E07000084,female,473,157,412,496,299,339,520,383,94,176,309,208,378,361,497,251,252,347,119,180,157,286,152,397,211,167,566,488,444,103,71,710,600,705,215,394,390,499,455,400,106,563,505,466,241,450,107,243,642,259,338,157,376,391,350,336,116,188,492,79,100,272,105,211,21,312,224,328,333,420,297,184,29,502,361,129,268,328,73,141,63,242,36,0,125,173,5,121,108,17,272\nEast Hampshire,E07000085,female,237,84,109,29,162,124,274,231,141,32,117,255,216,209,165,156,46,353,19,153,39,88,83,116,1,151,130,92,49,218,126,201,104,202,339,86,51,25,235,261,100,176,122,123,204,248,289,119,171,441,12,244,399,436,327,133,447,168,229,227,241,11,89,130,45,204,124,140,328,124,36,71,267,424,257,110,168,183,279,138,111,226,4,58,108,120,124,127,123,98,25\nEastleigh,E07000086,female,202,21,304,84,298,7,96,223,6,55,137,64,49,385,389,359,190,100,187,79,112,214,210,314,4,12,290,373,194,449,175,422,383,338,241,86,393,411,45,145,84,17,192,383,117,263,306,337,403,291,327,94,85,143,342,36,437,421,433,376,358,239,285,157,366,274,145,208,255,182,12,85,156,199,139,82,120,63,225,146,204,63,5,17,24,153,84,125,85,38,342\nFareham,E07000087,female,89,77,152,228,97,213,54,3,218,230,36,52,294,143,157,110,151,1,14,125,23,196,229,9,139,114,121,258,178,6,117,202,99,370,39,92,86,126,267,133,318,22,53,153,4,52,95,323,158,127,30,249,12,398,437,347,426,317,245,254,78,139,25,210,273,233,193,140,315,321,277,321,321,321,268,255,239,279,87,88,141,159,145,96,189,115,143,24,69,71,58\nGosport,E07000088,female,158,90,39,176,63,183,36,159,20,33,83,26,188,201,161,27,144,209,159,22,153,12,110,188,156,66,171,193,242,53,32,99,178,164,126,236,235,245,6,10,101,220,203,150,209,39,225,1,228,126,235,253,88,48,194,163,61,155,197,164,216,28,295,258,155,215,151,235,223,22,8,178,130,170,123,126,204,36,176,104,4,130,81,89,36,45,43,70,77,10,235\nHart,E07000089,female,64,194,39,135,6,229,119,235,177,285,24,256,280,281,126,285,260,120,122,20,106,149,50,76,65,77,18,61,188,29,122,6,103,2,182,119,6,271,301,340,85,301,98,354,136,171,148,173,291,358,295,263,193,191,352,89,1,72,169,296,211,44,174,217,242,132,207,52,65,35,179,151,217,71,69,190,229,3,168,72,70,41,76,99,93,0,4,34,17,6,6\nHavant,E07000090,female,65,14,116,128,104,24,200,234,98,131,38,51,148,271,259,174,177,142,184,159,41,66,65,201,161,227,94,214,14,277,64,191,121,379,14,78,152,295,35,45,319,261,186,54,177,16,98,215,161,370,283,42,137,165,105,146,54,432,396,287,433,16,450,339,65,315,76,11,361,190,304,105,156,269,184,41,76,263,218,131,243,76,172,101,152,129,176,72,41,127,259\nNew Forest,E07000091,female,237,259,258,215,189,15,383,298,174,158,53,399,352,249,10,47,93,143,26,183,110,106,278,345,351,269,177,20,57,386,240,175,230,341,71,360,360,217,339,219,99,437,293,262,128,82,196,322,205,109,143,1,517,315,35,70,679,388,674,492,549,445,231,521,569,361,558,365,73,89,651,650,634,620,670,280,211,134,341,30,220,141,246,46,240,282,27,113,155,224,26\nRushmoor,E07000092,female,240,168,183,170,271,208,122,194,141,219,240,40,154,60,50,99,246,254,69,54,48,195,150,47,91,170,308,260,199,202,392,47,355,393,338,188,41,266,327,59,306,273,38,54,33,38,159,128,129,218,150,171,152,64,312,260,274,60,148,126,160,177,112,83,86,174,200,99,140,118,112,145,117,26,1,154,120,22,35,106,29,30,20,62,53,81,55,18,38,30,6\nTest Valley,E07000093,female,73,177,170,101,192,64,202,343,353,312,147,179,115,205,282,226,95,39,50,0,74,218,54,23,145,214,129,345,269,300,355,247,113,419,27,405,247,276,360,24,76,312,42,173,318,83,225,239,3,454,169,222,384,413,1,368,106,422,278,356,405,94,5,214,292,151,32,108,90,275,198,154,376,366,118,243,319,129,171,200,110,47,196,210,180,131,9,7,119,13,392\nWinchester,E07000094,female,72,31,257,146,152,110,296,175,179,56,52,134,254,263,189,332,139,290,140,288,72,482,45,348,175,212,129,82,178,71,203,47,322,98,88,182,282,60,44,50,145,410,324,131,161,34,55,27,191,451,273,421,392,309,267,132,469,11,38,320,259,253,304,136,64,184,177,296,280,171,283,186,242,182,313,137,115,206,183,53,108,186,153,176,172,149,132,119,1,91,22\nAshford,E07000105,female,44,325,335,105,244,287,286,298,334,157,320,259,336,350,354,330,354,275,134,65,200,199,69,135,121,335,47,77,293,141,371,48,459,398,415,89,431,307,357,306,24,87,122,326,112,140,228,333,398,259,153,94,264,247,428,469,358,367,150,131,316,270,50,328,59,39,274,273,323,256,327,54,302,375,388,173,5,198,64,57,173,191,124,161,102,84,99,45,102,24,309\nCanterbury,E07000106,female,235,62,283,238,29,148,100,26,41,348,162,244,10,175,345,37,389,231,640,182,1161,632,551,443,222,306,132,70,287,240,302,371,5,304,295,229,251,7,309,99,258,223,192,377,299,301,187,25,35,412,185,497,499,110,250,450,63,89,74,310,349,161,226,212,282,329,20,212,423,193,52,237,440,354,202,96,421,203,265,270,2,76,101,104,120,85,87,168,45,71,281\nDartford,E07000107,female,29,343,59,259,93,295,216,137,295,55,301,86,346,47,333,104,163,308,216,131,199,46,11,224,290,189,149,408,54,167,275,214,251,335,268,471,416,459,218,38,112,77,87,342,17,242,176,74,154,199,347,136,53,286,320,92,367,141,150,311,18,42,274,261,192,117,99,121,55,45,25,147,205,251,201,131,181,20,55,119,34,127,5,82,13,60,70,71,22,35,75\nDover,E07000108,female,103,237,103,154,174,134,160,211,329,54,175,123,318,59,28,163,51,264,55,108,137,145,208,294,48,95,111,223,249,288,313,288,264,41,203,216,259,308,322,245,104,292,286,70,301,204,210,165,268,161,313,59,366,191,146,462,402,80,154,49,352,252,252,289,250,382,368,27,369,255,128,99,237,36,184,53,104,206,37,110,78,200,11,75,90,62,7,29,85,82,5\nGravesham,E07000109,female,251,82,72,103,196,347,65,203,163,24,312,102,272,38,256,190,187,186,45,75,65,229,174,195,77,281,2,149,306,325,289,329,247,258,294,0,155,372,260,87,350,234,231,41,65,112,20,104,23,253,89,269,113,71,181,353,4,35,85,312,172,43,75,136,133,103,178,234,123,231,46,132,60,45,145,60,108,166,23,13,61,53,135,42,18,85,5,98,28,31,166\nMaidstone,E07000110,female,193,113,304,276,186,508,82,430,349,338,38,241,444,136,191,378,390,200,380,56,63,353,45,411,139,500,46,476,378,438,603,548,397,265,378,41,557,350,596,540,300,364,454,224,352,16,144,528,621,366,1,337,509,167,64,272,229,312,428,132,22,404,80,45,237,382,169,206,38,263,374,413,182,341,392,167,172,73,41,141,184,113,187,54,122,175,11,167,45,16,418\nSevenoaks,E07000111,female,30,78,207,6,44,180,116,8,264,36,351,270,357,333,48,293,181,128,203,67,45,56,31,151,215,121,251,50,299,233,74,253,130,113,7,125,16,345,233,164,283,8,241,125,385,84,115,32,333,316,267,314,179,45,189,154,24,23,402,364,406,18,134,87,302,157,306,207,74,245,319,347,8,61,213,101,222,214,161,50,187,109,169,109,32,116,14,122,125,96,353\nFolkestone and Hythe,E07000112,female,136,241,172,150,11,202,184,78,238,100,227,252,194,92,243,267,153,167,146,93,26,146,4,86,137,254,187,97,169,132,30,148,67,188,280,215,275,127,128,60,307,89,146,129,191,125,174,177,185,203,48,47,327,182,31,201,7,343,55,180,308,256,319,344,66,313,319,237,95,350,109,33,407,289,46,306,283,87,37,15,76,97,65,136,22,43,95,104,122,53,425\nSwale,E07000113,female,9,423,17,445,399,178,111,195,146,445,301,57,17,333,77,313,251,294,244,55,145,43,311,375,157,95,83,153,223,189,451,75,192,292,72,82,397,102,457,56,418,102,193,78,397,238,66,118,487,219,476,74,250,513,469,130,280,221,48,145,239,345,71,25,309,30,89,64,267,337,128,431,94,369,102,182,48,165,196,137,50,69,40,92,121,73,49,12,16,1,299\nThanet,E07000114,female,81,41,119,331,177,365,345,16,241,16,7,226,135,240,173,288,331,152,91,1,227,52,155,204,219,211,244,62,54,24,409,393,428,141,198,247,334,373,231,36,108,91,263,161,75,411,117,96,164,342,149,323,167,274,422,197,91,481,152,226,56,335,68,106,14,270,442,174,119,294,342,97,293,228,427,81,172,71,327,186,228,145,144,24,143,27,123,150,11,73,131\nTonbridge and Malling,E07000115,female,273,145,286,375,183,322,167,108,49,256,68,115,48,194,185,114,53,232,70,65,179,105,182,59,145,196,167,57,249,396,42,372,402,137,26,33,104,455,214,2,324,426,425,202,391,82,199,66,383,76,465,207,235,192,144,513,496,216,107,233,157,302,56,57,149,221,231,290,100,44,180,181,101,327,100,189,70,214,118,38,153,48,181,87,60,22,71,92,94,39,335\nTunbridge Wells,E07000116,female,116,92,206,18,78,157,175,218,194,182,61,260,30,46,199,114,293,103,181,154,134,33,187,41,30,15,31,19,303,133,241,268,83,206,203,64,317,133,11,227,309,371,53,205,321,16,35,200,124,16,423,360,223,348,9,367,158,218,181,77,2,318,133,70,107,155,69,232,248,176,237,50,209,2,274,229,59,64,73,29,34,33,134,100,20,58,19,82,52,55,336\nCherwell,E07000177,female,20,391,398,345,454,278,415,214,417,281,2,332,46,38,345,291,372,104,223,49,136,141,297,155,207,434,307,99,189,485,392,80,450,107,402,267,280,517,186,466,552,249,449,201,473,313,156,118,21,387,478,482,394,558,489,4,521,393,178,333,375,451,273,24,142,41,23,375,326,20,34,255,236,283,80,173,45,122,43,208,200,54,222,15,101,120,128,73,9,97,407\nOxford,E07000178,female,167,365,236,297,36,167,107,19,92,196,336,368,54,165,62,52,45,269,122,733,1287,169,482,578,61,170,309,756,630,445,656,170,10,217,98,139,546,63,478,219,60,381,80,421,111,220,228,55,65,107,40,158,260,398,16,36,121,326,381,210,109,11,278,93,226,155,199,124,179,21,52,248,73,87,250,55,53,150,163,148,6,83,17,23,88,41,90,32,76,14,36\nSouth Oxfordshire,E07000179,female,121,184,108,111,401,109,235,206,136,47,278,257,123,179,234,83,181,16,173,138,168,229,130,254,222,384,143,111,126,270,392,143,46,108,185,408,309,421,363,442,159,105,176,98,109,226,244,125,403,338,125,129,256,377,364,65,385,68,190,365,54,169,180,42,85,8,272,128,290,269,112,306,362,129,187,259,327,250,140,127,60,191,78,109,140,46,159,19,22,71,209\nVale of White Horse,E07000180,female,78,68,53,110,346,336,361,221,398,294,84,9,416,224,100,142,140,167,13,141,64,229,1,322,119,314,316,34,306,442,342,345,287,346,138,306,12,300,411,280,415,422,36,298,445,162,300,31,147,333,377,162,90,269,143,205,442,237,112,22,326,88,429,390,173,186,134,308,152,16,31,158,271,25,255,106,146,162,187,150,147,117,76,29,34,167,103,108,85,35,350\nWest Oxfordshire,E07000181,female,229,7,134,36,231,106,215,243,329,25,56,191,291,229,313,206,300,247,71,21,6,24,51,167,196,206,125,150,276,247,101,182,165,1,113,182,206,231,312,227,371,48,94,225,97,340,171,75,200,316,331,376,150,345,443,91,417,303,205,370,164,267,64,204,51,274,106,283,145,56,109,242,301,78,138,58,71,81,120,164,87,212,60,135,5,5,76,73,110,54,267\nElmbridge,E07000207,female,199,348,80,61,7,98,25,159,43,250,283,431,296,61,173,105,268,268,212,61,112,110,88,307,249,140,262,233,121,65,184,363,21,334,322,425,109,494,393,36,383,68,558,353,471,192,305,550,584,222,222,204,46,476,161,13,472,47,318,138,147,379,40,148,113,46,5,81,96,147,297,69,234,138,311,42,239,190,241,132,116,138,26,117,132,70,148,122,86,34,75\nEpsom and Ewell,E07000208,female,108,82,96,3,113,204,16,247,129,138,139,88,102,228,150,60,40,85,144,26,108,92,11,195,168,203,130,210,191,102,57,239,49,40,109,194,91,268,15,324,5,285,71,187,171,42,55,112,160,75,319,39,123,135,141,232,187,245,75,245,90,155,10,58,184,58,59,115,81,101,178,151,153,165,100,12,105,85,135,19,63,51,69,66,85,52,80,53,33,62,109\nGuildford,E07000209,female,61,39,118,147,184,258,105,120,247,311,273,21,149,96,174,275,30,73,534,132,346,481,363,494,330,381,82,18,220,248,300,215,353,42,269,199,33,52,288,115,276,183,439,132,83,66,3,382,363,16,215,225,225,252,330,502,410,394,44,264,151,98,22,307,248,264,233,236,102,91,266,31,43,37,277,80,276,147,46,76,108,113,190,51,80,68,33,66,7,102,131\nMole Valley,E07000210,female,187,20,107,104,132,208,167,74,214,165,138,235,117,233,17,96,254,189,20,86,109,94,143,129,95,53,118,28,84,162,151,69,88,93,63,177,101,155,170,227,179,169,151,285,202,279,196,235,249,230,215,80,288,217,233,6,44,45,343,171,56,80,76,217,224,190,91,259,72,58,18,175,230,62,57,132,190,218,117,68,9,142,33,41,110,38,4,55,10,33,335\nReigate and Banstead,E07000211,female,297,339,333,301,47,56,273,352,323,414,237,101,177,29,289,439,242,423,277,17,21,6,281,321,194,373,361,392,231,57,97,251,15,284,457,231,326,475,296,376,147,156,37,292,341,480,438,239,188,473,246,248,461,518,349,274,82,455,394,57,87,374,166,228,253,316,189,225,74,234,106,294,207,318,262,276,52,111,179,230,113,49,171,95,59,130,44,2,70,34,550\nRunnymede,E07000212,female,1,124,188,122,70,234,62,54,164,67,140,69,80,114,167,3,27,99,27,147,338,288,73,13,21,38,85,157,120,97,226,104,245,285,147,296,176,188,234,85,97,209,64,148,178,202,19,279,120,224,246,140,286,105,29,152,259,46,124,231,209,10,184,201,142,118,53,168,50,65,154,110,106,151,142,97,62,23,40,52,24,22,58,90,49,44,96,38,4,56,217\nSpelthorne,E07000213,female,218,69,19,188,292,183,185,176,148,138,287,79,16,25,124,58,50,262,74,148,25,134,121,55,154,132,273,14,262,171,228,332,102,191,114,280,37,107,320,219,169,355,262,29,90,52,82,268,343,166,117,215,153,277,380,243,262,175,252,304,32,21,26,181,269,237,220,213,142,112,10,38,122,36,94,175,122,147,37,167,123,122,28,89,14,74,79,67,21,40,200\nSurrey Heath,E07000214,female,149,99,176,135,140,22,196,84,49,200,95,42,99,239,103,240,20,135,70,101,73,49,152,32,210,120,25,249,176,143,88,13,58,7,184,10,208,170,59,140,181,35,63,37,82,260,8,200,82,280,86,223,108,350,300,190,143,133,181,141,251,148,107,43,102,161,160,215,147,92,58,220,108,189,4,67,10,102,4,81,67,40,7,73,103,65,37,76,96,69,177\nTandridge,E07000215,female,55,105,44,40,244,193,183,218,193,113,56,217,135,263,271,54,81,56,22,95,2,1,51,176,183,109,108,48,110,175,142,150,123,198,86,83,294,205,13,59,14,57,27,29,70,45,209,146,60,87,277,35,135,29,68,18,95,14,90,257,116,131,276,18,50,93,59,153,35,17,26,109,24,38,39,49,212,86,148,4,149,57,21,76,3,36,16,60,46,39,126\nWaverley,E07000216,female,263,46,77,140,292,155,232,52,28,393,45,97,189,412,354,170,80,406,325,56,92,208,188,117,246,235,74,22,82,69,106,180,326,215,112,145,270,9,2,137,400,414,98,366,167,62,10,90,253,207,278,119,419,404,441,462,377,352,379,239,416,151,272,107,202,325,124,309,66,9,201,224,351,126,37,129,242,160,147,80,166,117,203,27,153,156,8,101,76,87,341\nWoking,E07000217,female,4,36,151,85,7,179,199,202,344,319,313,152,283,141,217,246,151,274,55,45,135,150,224,250,235,171,157,156,120,342,289,161,262,44,94,31,141,59,24,275,382,128,119,22,373,335,278,362,30,294,65,174,244,32,250,113,109,263,167,162,287,9,116,264,224,141,35,160,113,144,96,41,139,94,154,8,161,68,38,84,98,40,92,106,46,90,70,84,36,73,169\nAdur,E07000223,female,46,117,162,61,23,168,140,31,88,108,114,111,4,57,114,36,163,141,116,96,35,69,99,18,31,100,28,65,66,168,136,179,160,59,72,177,158,88,158,193,161,35,11,209,60,176,143,8,174,194,220,140,212,34,185,199,110,6,194,74,107,138,163,211,163,75,141,121,8,170,41,189,165,191,126,124,56,136,81,102,36,63,23,114,41,85,72,47,20,50,34\nArun,E07000224,female,207,234,89,86,303,297,55,99,99,168,133,365,407,145,201,239,279,244,257,27,87,142,192,271,134,252,144,284,282,397,27,415,172,27,424,39,113,51,1,429,259,282,165,106,228,339,103,168,27,103,152,175,249,423,214,251,356,343,152,128,336,400,529,140,189,134,24,57,495,447,452,173,94,214,177,120,17,373,99,270,86,57,345,327,30,42,149,228,155,30,800\nChichester,E07000225,female,4,179,150,193,201,17,295,209,260,0,309,7,291,129,83,119,23,255,34,291,224,98,15,176,141,73,76,73,29,57,329,55,312,260,112,91,61,58,283,89,306,272,52,284,248,221,89,169,281,263,132,341,211,469,285,201,306,115,13,84,21,135,188,206,16,172,306,339,86,230,349,180,232,429,277,172,152,201,52,100,63,69,234,49,78,70,126,15,150,73,564\nCrawley,E07000226,female,280,282,231,242,275,215,210,295,269,342,325,334,84,140,155,53,62,167,41,199,29,116,201,191,294,25,221,213,301,262,140,473,183,158,7,228,50,402,357,234,467,251,122,236,316,330,151,161,357,35,302,353,243,309,169,254,80,339,315,12,60,277,248,267,149,264,125,99,197,155,181,117,215,103,50,32,102,82,85,47,74,81,8,23,83,63,81,73,69,31,16\nHorsham,E07000227,female,308,58,54,161,281,347,189,4,358,317,411,375,87,111,195,190,85,256,125,4,143,94,61,137,171,88,174,322,147,113,165,278,341,188,47,138,103,18,311,3,359,321,420,192,414,103,427,15,425,144,302,481,548,352,65,493,190,480,391,229,81,388,354,363,324,126,14,161,46,361,325,90,224,165,466,307,262,320,44,4,179,272,229,186,57,2,102,18,5,80,63\nMid Sussex,E07000228,female,231,375,378,94,388,293,426,30,185,436,161,436,241,358,300,272,320,114,110,208,86,73,18,321,82,175,283,385,375,332,166,32,441,471,77,154,482,103,153,275,536,523,231,457,322,488,190,130,418,61,341,87,449,358,83,244,151,135,519,344,426,386,128,83,206,329,154,240,271,117,14,16,352,306,208,247,211,176,148,215,19,11,157,131,15,15,115,158,73,50,457\nWorthing,E07000229,female,23,248,171,75,131,268,204,227,220,144,24,220,249,12,278,39,102,123,129,115,124,61,189,64,117,58,38,80,162,19,158,90,184,127,254,143,36,306,337,347,11,355,185,176,263,47,157,138,313,314,327,179,233,202,14,57,123,38,24,263,279,152,124,121,316,182,57,140,77,75,166,256,14,268,259,94,50,77,251,37,51,151,175,22,119,94,37,148,100,87,569\nBath and North East Somerset,E06000022,female,225,272,205,147,31,316,465,316,86,409,189,285,249,365,128,275,44,464,792,755,856,637,398,532,26,287,95,209,102,150,484,375,420,482,444,106,208,555,11,203,513,536,68,496,52,14,385,252,215,370,231,141,515,618,663,222,200,234,421,129,508,214,423,261,447,96,434,142,241,91,252,473,465,45,286,248,151,75,152,18,144,293,157,51,146,197,41,170,5,100,661\n\"Bristol, City of\",E06000023,female,308,364,573,234,311,883,218,1147,1019,101,380,829,867,899,1006,870,553,393,153,1942,149,513,1990,281,1420,1910,999,1360,301,853,471,1095,51,518,390,222,680,298,1192,1596,1358,1271,576,1354,989,503,934,1247,811,609,495,1013,1073,1135,306,885,86,1173,99,111,309,146,491,700,903,723,557,596,755,87,172,455,799,244,227,244,83,278,91,386,102,415,134,372,146,236,323,199,152,3,326\nNorth Somerset,E06000024,female,239,283,313,401,96,316,589,428,561,184,385,540,343,63,398,181,528,463,2,14,116,378,325,342,294,97,437,148,23,476,362,436,264,378,10,485,504,434,290,68,266,30,264,457,565,604,303,144,490,657,553,685,6,63,419,354,233,552,752,317,198,658,468,492,45,612,119,577,253,76,326,612,357,503,632,156,233,439,317,84,314,241,338,135,36,128,10,263,48,243,702\nSouth Gloucestershire,E06000025,female,434,491,379,404,301,467,411,584,84,439,348,308,259,754,427,276,38,528,653,750,385,318,418,12,697,181,856,867,67,435,869,570,316,842,169,538,768,225,137,180,59,429,3,395,122,322,183,10,782,518,563,733,291,183,4,970,287,7,51,696,535,584,37,283,407,116,650,391,466,322,236,254,45,746,581,80,281,421,569,63,161,63,212,81,64,86,23,266,202,217,196\nPlymouth,E06000026,female,218,37,13,420,14,132,122,261,56,289,571,726,313,332,674,264,590,668,43,866,824,936,860,701,559,659,70,761,52,471,612,245,535,680,599,637,540,26,152,307,159,69,780,532,151,708,339,786,453,688,73,717,861,3,388,498,472,111,690,819,205,55,214,75,272,506,491,535,593,223,292,459,14,53,40,548,410,369,421,392,121,397,12,237,174,130,192,6,33,67,475\nTorbay,E06000027,female,84,57,142,185,54,221,67,230,85,159,186,249,62,174,289,22,71,28,196,0,35,15,53,301,148,127,97,138,122,29,174,183,48,16,106,83,266,86,138,295,120,394,237,167,110,322,377,297,163,454,429,362,488,123,270,237,90,481,451,344,352,178,94,150,197,126,51,237,106,157,344,448,316,519,283,265,27,357,353,121,229,27,52,172,23,44,130,110,81,5,199\nSwindon,E06000030,female,332,606,459,187,250,50,187,532,404,215,218,473,688,324,162,567,103,23,496,230,266,140,44,302,311,205,482,626,411,294,764,809,619,203,402,227,424,572,474,261,748,447,498,477,467,665,82,408,256,644,606,783,608,635,219,305,782,531,542,551,256,241,224,459,554,521,291,348,316,422,455,8,429,267,439,357,308,288,337,172,250,268,118,47,59,157,26,77,76,124,513\nCornwall,E06000052,female,264,873,600,380,913,754,287,1230,1121,1010,388,799,554,1041,12,1310,192,941,452,1088,1265,470,282,991,1217,391,1369,5,1274,324,612,1439,1199,1716,710,883,147,1328,446,1539,917,1110,12,996,737,146,1243,1344,1516,1421,535,1258,182,1631,1003,930,451,1554,427,384,1197,1711,1061,187,972,1819,1008,42,668,756,1068,1385,1028,1085,463,671,1602,865,1220,190,766,470,102,659,226,255,56,463,195,218,626\nIsles of Scilly,E06000053,female,0,4,9,2,4,1,6,4,1,3,1,3,1,5,0,1,0,1,2,1,4,2,1,1,5,3,4,3,3,3,2,4,1,3,4,3,7,4,4,4,1,4,0,2,7,6,0,1,6,6,4,1,4,9,2,3,10,1,1,4,1,2,0,6,1,1,6,3,4,5,3,0,0,6,1,4,5,5,4,1,1,8,2,3,1,1,1,0,1,1,0\nWiltshire,E06000054,female,998,238,486,566,570,138,711,885,4,208,1316,1154,969,436,919,1254,1353,157,1190,772,843,517,301,640,1039,1037,1067,120,316,1084,1455,340,194,305,438,169,511,1066,923,1587,873,1332,1327,1320,1356,1452,145,39,1661,979,1328,1072,1678,298,452,406,1691,1888,1435,306,524,1020,1296,67,812,889,817,975,570,449,1411,57,856,1455,1031,854,711,604,135,460,524,21,230,118,433,108,195,510,137,116,132\n\"Bournemouth, Christchurch and Poole\",E06000058,female,229,103,871,907,932,223,856,572,690,256,956,794,353,483,79,625,298,853,1049,578,432,1417,732,135,616,644,672,615,105,996,473,387,50,1029,816,860,1064,1165,834,873,521,576,1219,377,944,328,289,703,637,1084,1292,74,200,589,20,570,71,901,1179,466,972,513,15,6,243,267,1107,102,262,188,884,580,522,921,366,65,873,206,766,439,126,152,415,13,62,488,209,46,166,196,890\nDorset,E06000059,female,452,68,598,603,733,697,389,744,427,418,924,846,292,615,67,493,330,833,168,141,64,66,412,579,649,64,433,812,446,485,832,857,254,435,334,414,118,783,571,644,419,968,596,32,355,416,979,172,1111,499,109,725,186,308,1362,203,1358,1253,657,1248,107,1212,506,568,1222,1170,1425,1433,851,49,1003,384,721,272,656,605,849,817,922,722,810,402,236,354,257,450,490,167,420,388,646\nEast Devon,E07000040,female,28,265,173,215,322,19,261,135,318,301,176,262,55,172,186,178,13,356,228,24,175,13,172,236,215,268,311,117,19,333,258,36,381,175,86,34,316,67,300,267,51,166,182,216,357,301,243,300,60,424,309,157,7,252,26,308,145,114,161,150,148,61,556,294,392,244,290,422,183,127,512,560,280,358,520,283,228,252,109,108,263,47,154,132,198,53,114,149,41,73,528\nExeter,E07000041,female,15,241,27,250,261,286,31,124,253,26,127,86,166,160,206,94,75,35,585,866,609,482,434,37,90,207,38,440,303,336,318,325,104,438,328,40,251,263,132,190,227,89,234,309,35,241,213,342,83,339,90,69,190,291,314,368,328,375,222,58,285,221,180,247,121,44,34,280,119,261,60,40,180,95,291,177,239,124,122,153,24,118,78,1,16,50,104,79,57,88,390\nMid Devon,E07000042,female,97,112,44,81,189,110,138,128,218,81,231,130,188,22,53,141,176,155,100,55,129,113,183,112,133,98,190,37,15,143,94,135,119,251,191,15,182,130,109,99,222,64,244,115,94,34,142,139,89,123,191,100,180,246,110,141,24,184,55,149,117,252,273,280,20,127,270,23,41,38,56,59,82,9,232,23,40,160,124,134,88,88,85,76,123,24,40,38,35,79,108\nNorth Devon,E07000043,female,148,38,198,150,176,147,42,159,161,259,112,157,21,173,61,245,210,158,67,23,54,122,99,84,121,69,141,112,26,59,209,64,264,183,38,63,117,203,206,92,56,150,37,189,31,264,240,193,260,102,9,334,12,256,102,45,191,111,44,32,222,291,285,318,91,233,127,20,90,265,108,350,25,18,72,47,87,35,94,63,20,48,31,90,122,43,64,107,27,98,277\nSouth Hams,E07000044,female,120,112,69,72,39,17,134,165,230,108,169,120,127,145,68,194,135,153,91,82,42,69,126,49,18,164,85,40,141,17,42,155,204,211,143,177,138,178,74,73,80,36,101,150,123,89,201,115,195,201,203,311,326,48,362,184,223,282,174,377,327,73,104,37,58,148,293,3,318,264,325,294,287,219,41,11,288,244,80,182,12,67,72,41,143,50,115,98,21,4,71\nTeignbridge,E07000045,female,183,23,177,68,64,23,212,49,268,335,291,213,315,201,89,137,80,158,19,161,98,223,254,213,151,281,175,16,268,309,40,328,181,282,217,49,119,333,213,16,165,200,152,217,27,229,19,3,122,249,129,123,382,280,492,236,28,264,103,252,103,459,230,486,487,456,169,406,317,390,91,392,44,35,549,120,265,124,168,189,67,144,117,134,41,193,106,187,148,124,352\nTorridge,E07000046,female,36,96,75,68,32,108,45,100,47,160,4,85,87,66,94,63,67,51,0,89,81,29,104,84,85,67,3,52,28,157,152,72,129,175,101,70,47,17,140,83,60,173,98,39,52,146,33,128,182,4,199,105,222,0,48,67,201,217,209,195,4,250,287,47,188,33,26,144,45,244,191,50,126,17,156,197,163,23,123,4,64,123,8,51,52,70,34,15,4,20,98\nWest Devon,E07000047,female,84,5,96,91,38,107,10,106,84,47,144,21,163,2,2,19,91,75,113,34,27,94,73,72,71,39,72,66,23,45,21,48,18,27,99,12,120,26,1,71,33,10,33,90,18,25,29,11,72,152,177,32,22,81,8,95,28,239,53,104,89,203,212,161,201,156,119,49,78,1,120,84,132,221,232,120,70,60,90,11,44,14,85,0,55,77,73,71,13,52,28\nCheltenham,E07000078,female,112,64,38,175,194,237,101,177,154,216,104,25,123,100,268,136,52,329,10,339,206,183,204,145,102,277,25,318,115,312,124,257,267,14,395,364,170,377,316,250,139,196,328,109,81,267,272,242,350,140,137,128,87,205,369,361,238,33,84,161,17,161,207,300,255,83,281,52,162,45,157,155,279,36,183,27,130,112,52,24,107,79,80,57,12,54,101,29,50,63,134\nCotswold,E07000079,female,62,89,53,151,38,177,161,180,204,34,12,188,162,95,60,153,170,221,54,170,34,41,103,115,12,85,140,15,167,199,141,191,26,242,240,135,111,117,184,166,31,9,98,163,8,46,200,300,103,168,304,151,158,224,322,88,385,248,99,228,49,33,93,210,117,199,268,303,162,144,91,202,136,246,272,93,166,70,139,115,58,162,188,41,65,79,108,78,99,56,167\nForest of Dean,E07000080,female,161,67,112,58,120,72,187,196,119,165,206,62,2,189,58,72,102,200,89,20,85,19,10,167,150,66,133,147,34,90,203,214,145,240,20,243,62,218,186,73,142,91,161,29,63,137,41,209,205,76,286,207,126,182,23,258,293,262,314,237,311,237,155,295,75,8,149,114,296,151,127,194,118,89,61,183,217,11,183,55,15,117,34,138,126,50,19,65,44,27,62\nGloucester,E07000081,female,241,220,139,148,177,151,90,258,0,6,164,77,356,229,354,281,60,163,255,49,379,342,423,214,243,197,23,373,240,416,480,297,299,200,112,115,207,233,108,336,424,353,146,252,198,284,16,15,60,222,187,330,404,357,8,242,21,265,314,51,366,73,197,342,106,104,18,260,158,143,284,41,49,18,48,252,167,95,225,101,85,122,117,77,8,101,59,54,87,58,14\nStroud,E07000082,female,164,207,1,262,20,86,217,175,18,71,176,114,313,83,284,172,282,191,37,157,181,99,153,103,241,172,50,210,181,110,10,322,88,126,207,178,86,213,281,262,58,143,137,251,357,266,54,59,410,437,411,418,319,112,167,388,89,304,220,352,155,14,192,302,87,83,260,343,227,265,186,71,300,236,262,114,250,209,209,148,102,103,81,37,68,140,114,57,46,24,29\nTewkesbury,E07000083,female,211,124,146,10,213,141,209,130,53,234,181,134,142,50,63,147,231,158,20,135,142,72,12,110,192,5,175,6,81,222,210,197,299,258,216,185,157,292,45,205,146,6,265,118,79,53,18,22,84,145,175,88,28,299,157,181,291,337,25,5,314,184,89,105,37,252,228,85,123,92,248,205,217,227,144,113,215,158,122,184,107,160,52,88,90,14,31,76,72,51,326\nMendip,E07000187,female,132,94,101,168,74,112,71,67,57,88,131,179,55,319,313,310,176,269,68,72,34,140,198,130,87,76,238,194,287,131,1,345,34,284,190,219,75,159,137,225,227,316,176,148,16,111,1,300,159,233,243,321,208,325,80,410,434,231,397,223,345,91,93,46,373,202,238,253,311,17,277,100,252,404,338,263,250,113,134,46,38,204,10,68,103,153,124,41,106,88,374\nSedgemoor,E07000188,female,9,285,75,84,77,145,78,26,90,295,45,56,151,137,119,242,48,275,52,181,4,230,189,173,207,158,305,129,245,234,12,296,251,233,269,108,285,248,89,18,170,221,317,170,256,231,237,157,1,88,33,28,23,205,441,496,85,48,431,294,125,159,403,95,300,343,128,361,253,49,166,198,275,265,400,239,29,36,298,214,65,128,55,67,128,58,124,34,129,41,346\nSouth Somerset,E07000189,female,43,117,100,10,89,170,191,428,259,1,193,446,30,420,208,28,271,202,68,199,30,247,318,281,285,392,206,138,227,203,281,366,333,487,309,30,25,390,105,152,336,384,161,126,410,41,309,514,296,381,49,308,265,46,170,245,494,156,133,179,141,25,120,189,348,1,209,36,242,411,232,520,30,251,7,83,224,275,357,193,163,238,7,148,131,121,89,143,113,88,648\nSomerset West and Taunton,E07000246,female,227,10,6,342,122,274,218,287,121,398,185,20,0,357,305,5,253,147,336,91,31,279,31,278,25,254,106,377,12,280,40,49,330,130,210,380,184,352,220,168,388,229,56,351,172,245,420,307,476,128,387,551,171,320,534,342,362,156,71,402,270,63,412,81,284,306,252,46,463,43,121,505,134,335,314,118,100,45,380,181,48,293,5,199,222,231,46,69,82,72,32\nIsle of Anglesey,W06000001,female,87,100,124,60,121,96,14,14,115,45,70,148,6,186,102,139,60,26,8,47,111,121,99,89,164,10,29,134,80,117,55,5,178,59,159,38,43,36,5,74,147,156,60,89,42,23,66,122,50,231,77,201,101,174,164,117,39,241,124,29,229,80,174,197,108,88,12,215,78,221,97,69,106,48,76,201,91,29,185,89,56,124,14,63,37,95,2,8,57,5,68\nGwynedd,W06000002,female,181,98,48,184,184,265,26,143,22,217,276,113,181,14,274,138,6,80,134,47,23,225,39,373,76,81,294,174,165,186,246,26,306,75,175,122,159,198,310,220,2,179,212,275,251,244,96,354,319,208,152,236,375,114,297,331,390,142,345,314,66,40,256,229,15,200,222,290,254,285,116,178,292,89,224,86,90,184,46,49,16,146,48,98,128,54,53,34,59,67,235\nConwy,W06000003,female,49,184,195,146,71,278,47,153,143,14,263,149,324,180,100,260,15,262,57,86,97,19,34,232,142,43,140,9,119,228,327,34,59,128,272,17,225,86,276,228,204,220,163,54,6,168,292,220,310,10,191,28,46,303,371,282,325,378,411,165,297,69,386,399,94,207,185,356,71,308,269,157,187,391,307,82,23,212,179,107,9,227,94,159,57,153,66,130,137,130,59\nDenbighshire,W06000004,female,6,116,74,161,199,5,189,163,154,212,18,185,89,105,60,175,160,130,57,152,37,68,168,67,153,101,170,195,63,149,169,8,241,164,68,244,51,18,8,147,83,262,144,173,128,190,163,137,289,184,219,259,374,23,137,5,195,346,154,108,274,123,20,134,148,183,232,196,166,217,1,25,60,175,68,110,33,186,1,74,106,11,17,105,22,62,102,60,12,3,324\nFlintshire,W06000005,female,42,40,89,330,299,191,213,47,298,226,272,130,398,399,339,76,400,274,324,247,23,74,299,51,201,7,402,393,436,205,108,175,444,406,231,97,270,38,181,115,445,129,114,76,82,393,415,313,377,266,550,569,413,9,386,600,177,229,477,58,63,317,49,163,290,154,228,388,394,164,82,385,8,77,335,121,341,193,195,112,18,173,106,252,40,50,108,58,34,39,211\nWrexham,W06000006,female,244,179,139,93,281,45,183,155,29,224,404,221,123,144,120,377,7,112,259,180,172,230,8,55,200,339,266,87,4,105,257,190,365,391,282,107,273,253,122,91,295,136,165,200,195,47,18,192,2,106,108,85,346,14,270,177,318,270,256,126,73,106,304,6,99,127,178,98,371,207,50,60,105,246,305,61,47,171,153,174,15,144,64,107,139,105,29,40,46,40,176\nCeredigion,W06000008,female,62,115,13,122,4,1,54,31,68,27,172,56,50,82,125,78,98,75,158,136,88,9,38,47,167,147,149,58,106,15,58,148,129,115,92,104,117,44,27,30,39,61,155,50,14,69,73,43,25,73,104,196,138,216,219,91,174,196,233,186,218,176,20,151,10,113,106,75,131,113,210,181,0,250,72,92,217,114,88,58,49,76,90,97,73,41,59,72,27,44,85\nPembrokeshire,W06000009,female,210,218,251,119,257,125,45,243,346,105,353,138,221,217,330,227,239,184,126,58,2,165,87,187,43,181,27,301,146,248,266,246,93,243,262,288,102,167,234,15,315,290,119,219,294,63,229,9,77,271,8,128,428,331,222,13,453,198,290,92,421,336,204,167,322,119,173,98,421,351,19,249,255,366,389,263,219,156,46,182,78,15,121,173,170,52,157,40,98,60,31\nCarmarthenshire,W06000010,female,347,167,170,305,122,421,455,436,210,63,183,68,15,196,383,58,22,240,335,199,255,261,415,143,75,102,449,181,274,11,405,1,416,250,290,46,495,252,334,23,450,343,376,261,75,255,306,276,109,291,639,122,540,138,648,294,9,707,608,470,686,674,300,256,501,664,636,479,74,546,302,549,380,226,247,290,188,225,128,0,311,135,80,279,183,40,61,59,104,62,127\nSwansea,W06000011,female,487,552,264,447,11,470,104,564,122,50,81,647,346,550,85,428,353,72,68,945,150,688,660,430,409,649,3,136,534,682,243,439,604,190,40,202,245,18,212,594,719,537,231,278,315,378,470,184,448,526,262,556,346,77,301,384,622,491,343,118,135,499,107,614,201,563,429,434,593,409,173,246,518,48,702,303,479,329,447,279,117,410,278,205,30,290,214,53,195,150,395\nNeath Port Talbot,W06000012,female,39,223,2,355,369,244,322,227,299,69,350,41,164,409,380,202,166,265,363,412,161,153,269,208,129,166,249,161,252,468,185,288,21,66,255,74,156,188,412,117,259,6,253,20,106,323,111,248,415,389,160,366,444,89,1,421,549,288,17,324,0,59,483,324,82,382,145,417,295,298,234,163,407,218,187,135,84,165,178,8,178,173,29,20,131,120,69,3,14,113,95\nBridgend,W06000013,female,221,88,0,84,105,80,242,155,99,64,236,297,36,356,81,134,372,316,72,200,161,267,258,68,341,377,371,109,391,274,382,187,252,259,263,41,451,435,239,182,404,45,320,358,27,139,12,436,142,528,367,489,56,284,19,269,559,113,24,303,75,102,212,110,437,170,403,160,97,410,178,107,328,420,271,192,293,307,23,155,63,195,166,58,191,88,146,8,48,46,119\nVale of Glamorgan,W06000014,female,67,98,276,303,350,280,372,273,250,25,380,100,282,344,252,311,17,216,98,46,33,110,260,195,42,33,199,219,95,316,198,329,336,41,201,332,344,233,130,119,400,203,370,74,21,32,58,113,27,132,457,2,207,368,139,119,176,190,208,334,465,419,257,77,300,67,316,255,143,238,309,316,110,140,423,88,282,305,210,86,181,9,112,16,56,33,43,145,37,22,284\nCardiff,W06000015,female,675,484,555,117,39,24,374,507,219,458,209,473,868,560,160,319,460,510,564,2013,551,1678,1267,1361,114,432,73,239,637,204,644,1207,24,839,1127,1260,969,1140,937,45,177,572,474,951,568,673,369,417,954,134,73,571,471,402,1009,1046,456,1051,989,136,779,123,248,381,671,24,321,14,379,178,121,472,185,536,735,336,367,106,317,180,42,271,54,342,302,32,100,260,195,72,871\nRhondda Cynon Taff,W06000016,female,319,490,412,144,392,672,566,624,571,84,162,548,608,327,19,493,515,388,489,599,144,123,512,148,52,522,224,654,361,75,602,192,356,739,558,68,543,2,763,145,427,240,383,345,305,199,595,245,189,846,421,749,199,479,679,832,693,617,703,735,237,17,515,556,297,27,264,632,643,228,467,378,245,1,317,190,382,52,502,22,16,141,279,111,126,90,205,19,139,79,616\nCaerphilly,W06000018,female,147,296,284,163,119,149,99,210,48,140,123,135,210,499,363,102,157,57,172,85,226,248,157,131,154,116,44,273,476,172,303,470,272,244,441,248,230,85,260,258,64,92,258,131,280,12,434,470,506,336,343,101,577,62,232,566,641,414,102,151,300,393,379,502,57,283,471,429,417,414,334,382,106,402,44,391,126,198,60,252,213,14,174,200,150,190,102,15,66,8,380\nBlaenau Gwent,W06000019,female,92,118,124,21,70,61,60,149,163,40,123,140,133,160,148,124,90,121,98,73,3,71,18,152,110,78,5,226,122,207,70,197,132,78,45,107,68,120,168,139,199,109,198,5,34,68,130,192,144,161,202,29,14,14,244,208,23,5,107,169,196,92,160,95,10,63,5,101,108,139,120,140,18,28,8,14,106,51,36,100,85,99,103,4,1,50,17,43,26,31,48\nTorfaen,W06000020,female,21,104,36,97,257,7,48,56,17,266,139,86,80,93,45,74,7,200,41,18,114,77,18,1,225,209,64,292,52,302,282,90,312,28,14,183,1,276,74,264,105,30,152,37,125,22,177,72,124,47,176,5,46,23,312,344,112,252,64,110,220,111,235,113,68,138,10,233,284,140,244,133,122,42,222,50,148,119,151,86,111,95,113,1,46,117,106,45,38,54,114\nMonmouthshire,W06000021,female,40,9,66,63,102,202,166,43,166,195,195,30,62,12,160,122,241,93,4,95,139,106,57,9,206,47,59,128,114,205,81,226,94,6,235,238,30,74,235,121,84,226,148,67,56,111,249,229,256,158,217,214,256,321,231,430,225,221,192,24,218,294,283,49,330,18,285,272,109,273,107,136,102,325,172,240,263,201,130,157,52,56,105,127,127,111,58,41,58,51,265\nNewport,W06000022,female,219,361,404,138,499,174,95,49,113,138,16,269,59,475,235,98,105,206,215,330,36,106,52,294,190,491,176,265,323,209,419,254,505,597,294,502,153,369,410,389,231,80,392,61,206,438,68,72,437,151,456,304,35,301,174,488,3,188,327,117,90,100,222,347,284,176,366,160,340,168,130,253,252,189,326,90,280,21,113,146,74,113,119,44,46,123,60,85,12,48,361\nPowys,W06000023,female,202,11,43,63,213,301,156,78,286,161,253,307,56,56,63,288,183,3,177,180,83,231,262,241,278,205,190,201,246,16,344,305,294,181,23,236,284,112,286,41,257,173,163,55,61,198,336,183,1,245,48,384,280,473,510,37,494,269,224,466,134,442,138,334,501,271,123,343,51,165,101,393,119,40,148,388,92,119,331,230,254,166,227,165,75,89,154,67,54,129,308\nMerthyr Tydfil,W06000024,female,71,45,94,73,46,13,64,83,164,75,143,56,20,117,97,132,89,77,118,32,83,80,129,127,89,65,176,15,105,18,68,18,118,216,20,156,120,185,67,39,101,175,4,126,109,81,166,9,112,13,104,170,194,157,123,97,160,27,172,130,16,11,108,39,108,112,36,99,131,3,1,61,12,28,20,55,13,67,64,12,21,6,30,33,38,61,18,29,16,19,6\nHartlepool,E06000001,male,207,111,90,83,134,88,174,263,10,151,200,79,219,2,53,187,258,107,211,185,6,206,111,188,94,239,8,247,101,204,243,31,12,49,239,231,237,191,203,72,82,14,161,214,76,60,86,228,257,140,157,110,60,149,56,307,155,314,31,45,32,80,86,114,10,120,69,99,19,180,35,108,8,259,146,119,150,76,73,108,60,24,90,44,6,45,17,36,19,0,88\nMiddlesbrough,E06000002,male,256,297,8,22,350,290,12,494,26,245,504,23,450,338,396,31,223,252,88,156,325,200,420,402,146,308,29,431,8,150,387,53,339,186,407,115,225,421,149,329,254,329,80,107,95,257,289,77,214,401,90,67,115,180,121,41,215,253,209,358,268,297,1,68,206,30,109,214,249,19,127,264,207,148,190,117,65,8,134,76,68,31,19,44,11,40,56,60,31,18,5\nRedcar and Cleveland,E06000003,male,113,222,213,269,334,192,214,100,248,161,68,136,186,77,14,284,212,110,162,101,202,7,310,80,124,219,31,148,72,324,365,288,341,325,137,83,9,5,298,337,318,332,51,247,121,170,70,23,187,283,6,248,99,316,524,451,250,403,82,12,31,147,387,326,124,37,362,154,152,362,346,292,110,275,274,165,329,283,52,101,195,178,50,88,28,22,35,3,25,24,200\nStockton-on-Tees,E06000004,male,431,429,364,474,196,332,595,432,392,140,470,568,548,58,466,182,562,56,167,391,313,142,84,253,262,97,372,431,320,483,525,245,451,379,629,477,228,234,230,409,394,354,618,201,458,240,262,119,301,309,154,658,531,126,594,31,411,462,98,294,536,170,376,537,237,255,377,406,399,362,178,410,237,54,430,221,297,132,51,228,98,146,152,197,142,102,35,13,18,51,230\nDarlington,E06000005,male,0,27,87,108,89,35,296,29,27,249,277,197,215,289,231,201,131,257,64,143,61,73,110,181,174,99,215,119,180,67,311,149,125,229,293,56,194,252,298,93,225,174,349,199,107,291,293,137,337,186,365,287,225,121,150,395,135,246,252,351,74,300,262,266,12,207,231,81,250,15,131,216,154,148,4,168,134,190,26,115,130,35,2,112,7,1,54,48,30,9,49\nCounty Durham,E06000047,male,392,56,983,1184,666,671,796,473,373,1207,1439,1441,181,180,615,760,399,633,447,306,766,839,793,613,653,1320,1052,110,880,540,1099,627,1335,420,917,1213,788,813,634,112,35,717,228,234,938,332,432,464,1643,1517,1443,1562,837,478,538,972,1871,1813,515,583,1167,1329,871,919,367,1407,765,1350,867,402,1094,263,266,1372,1016,208,628,324,151,781,540,18,347,174,522,156,301,334,165,129,65\nNorthumberland,E06000057,male,665,178,169,588,97,134,424,117,678,46,415,57,708,378,783,299,61,667,293,584,152,314,298,690,333,632,372,587,442,139,595,343,55,738,472,68,816,386,7,484,14,519,508,378,719,677,152,293,844,455,103,270,581,580,509,44,319,310,353,842,122,794,216,462,1022,512,901,450,382,665,545,847,1055,175,535,181,847,170,102,363,142,34,115,149,1,102,3,21,128,39,39\nNewcastle upon Tyne,E08000021,male,621,148,201,194,209,98,112,15,703,394,451,558,79,577,752,317,631,397,646,771,1774,1637,1445,1458,271,810,299,959,663,599,350,376,420,374,327,49,795,305,306,243,148,419,391,341,355,409,783,129,53,112,83,92,187,746,278,811,461,522,468,310,694,525,342,234,182,40,152,118,574,518,307,278,86,430,345,294,239,155,309,210,47,119,25,177,98,34,80,145,79,9,47\nNorth Tyneside,E08000022,male,56,332,38,115,250,367,103,389,420,265,497,29,420,182,27,25,63,165,478,154,312,390,200,220,392,211,130,504,608,79,415,453,3,600,581,655,398,118,50,512,299,40,319,176,443,330,628,211,280,110,267,640,203,54,355,240,60,387,755,584,427,94,443,333,218,28,361,202,375,119,205,482,61,578,427,343,319,275,266,219,95,234,142,55,91,115,126,122,23,32,80\nSouth Tyneside,E08000023,male,282,267,32,405,183,97,320,316,314,59,348,59,22,34,6,221,372,163,250,282,12,113,247,3,12,222,289,96,76,368,86,132,368,145,402,328,57,338,299,288,292,341,178,186,125,36,200,167,110,209,43,459,143,374,462,293,402,363,354,310,94,386,274,257,336,128,109,27,77,194,72,155,6,130,103,211,17,26,213,125,64,9,98,51,58,68,102,18,77,1,19\nSunderland,E08000024,male,80,636,450,128,88,74,5,708,269,409,701,345,512,683,425,416,248,412,523,145,549,529,486,203,351,355,623,36,257,12,707,506,159,335,762,358,513,407,446,187,717,95,616,32,619,539,380,643,97,58,171,689,760,143,743,626,644,849,96,436,537,727,879,811,33,660,427,655,194,13,127,664,439,246,436,62,92,95,419,18,154,231,90,158,216,116,1,55,32,102,39\nGateshead,E08000037,male,158,95,149,158,220,219,205,448,363,119,495,513,330,489,216,446,122,387,251,455,23,428,468,500,576,530,543,299,291,281,515,462,117,352,110,253,360,141,262,93,235,339,309,525,396,122,134,408,444,236,232,371,185,224,489,405,250,549,136,639,508,125,311,161,539,235,290,293,47,388,30,5,185,55,222,328,307,232,256,189,154,114,240,184,192,39,11,35,94,91,24\nHalton,E06000006,male,236,123,141,222,150,262,315,101,342,25,125,254,378,74,93,292,265,144,216,278,133,189,126,87,41,344,343,122,266,70,224,213,38,74,204,281,99,372,52,234,272,215,332,153,170,24,250,264,97,162,450,410,126,214,38,159,178,444,404,351,124,151,185,232,12,31,6,5,297,249,324,30,234,248,64,77,149,27,113,19,115,49,15,61,23,80,51,44,12,36,79\nWarrington,E06000007,male,262,270,262,273,529,170,271,471,175,172,514,593,623,102,416,551,144,304,314,39,335,215,331,527,227,460,578,560,169,354,662,34,644,521,285,130,666,634,639,296,602,129,229,524,438,127,52,256,563,385,643,322,704,117,430,55,675,437,647,476,414,195,152,101,273,219,47,380,364,430,128,73,188,346,95,353,367,277,128,90,142,266,61,62,181,27,36,90,27,53,57\nBlackburn with Darwen,E06000008,male,253,486,358,319,375,69,83,53,110,157,49,237,1,355,379,135,304,229,312,32,389,7,365,90,417,174,436,17,370,259,275,43,306,38,143,430,328,416,84,447,455,405,452,57,159,231,103,30,291,330,67,99,10,174,109,365,30,246,92,413,245,262,402,288,287,15,105,11,202,278,130,168,223,118,45,101,169,114,68,62,93,34,126,69,81,25,11,1,37,20,44\nBlackpool,E06000009,male,159,232,126,146,239,354,368,277,130,258,306,88,143,262,298,21,396,334,152,55,318,56,173,129,161,311,322,158,357,202,68,445,300,430,196,379,324,17,307,212,384,14,248,94,329,82,194,231,259,65,342,172,316,191,43,546,369,462,391,452,341,41,348,124,267,406,39,37,286,199,167,298,347,74,160,132,232,228,196,184,191,35,115,156,41,62,42,77,75,19,119\nCheshire East,E06000049,male,921,846,28,384,133,386,967,1113,630,109,59,189,895,1039,720,173,111,903,141,638,263,637,286,778,640,119,319,871,120,942,387,467,832,360,760,689,552,260,319,469,529,227,417,350,98,865,481,213,1254,855,1280,1096,1457,53,958,1053,1228,863,1375,568,688,1166,1123,48,714,647,646,430,143,814,202,344,703,298,998,811,538,661,156,65,511,78,284,176,448,281,81,261,207,171,96\nCheshire West and Chester,E06000050,male,8,625,249,603,289,84,576,383,522,573,203,439,849,585,148,796,610,167,465,546,488,327,24,428,406,836,610,1041,413,903,445,1085,308,993,767,490,983,671,901,902,673,646,374,605,832,1008,855,956,811,455,1154,93,356,1115,671,1275,681,1074,638,8,76,163,1027,335,896,476,309,350,654,689,131,797,60,788,922,612,69,505,246,338,414,142,237,105,353,286,54,192,21,111,73\nAllerdale,E07000026,male,126,83,61,41,79,111,122,203,96,28,178,106,115,250,97,133,51,246,74,56,27,181,107,112,42,121,127,52,131,77,186,200,21,132,234,187,130,153,225,112,106,21,20,176,216,31,175,262,105,269,358,257,34,221,55,284,293,331,329,89,32,270,141,39,175,8,117,267,145,250,143,172,199,320,3,73,169,159,168,74,112,67,65,92,77,93,88,37,43,42,101\nBarrow-in-Furness,E07000027,male,123,160,79,139,39,77,145,139,72,121,32,80,121,137,185,19,179,115,39,179,69,154,96,101,142,56,155,140,94,189,152,18,131,190,90,111,108,54,38,144,72,179,4,41,17,143,177,178,79,39,57,22,8,145,84,89,35,8,190,159,117,199,133,59,88,34,17,100,174,51,39,75,195,43,127,131,18,53,18,103,75,92,66,39,55,33,32,39,21,18,61\nCarlisle,E07000028,male,222,225,198,65,197,278,301,194,78,112,304,260,77,30,205,266,6,151,41,36,1,127,160,11,235,24,113,197,161,190,29,231,54,328,317,62,157,5,105,68,82,57,9,112,37,125,258,74,123,304,46,43,106,316,141,293,308,402,376,215,49,68,59,236,31,258,85,284,156,195,152,114,13,23,104,182,91,116,135,153,79,37,44,106,56,13,7,35,29,16,75\nCopeland,E07000029,male,151,16,6,61,153,51,126,121,7,91,43,182,44,103,26,16,140,162,98,97,17,118,9,54,157,7,163,166,27,199,117,77,50,98,57,160,104,29,72,57,30,145,9,145,95,57,124,184,203,173,145,141,246,140,184,29,137,168,155,168,228,238,4,168,234,193,125,192,63,41,33,203,122,218,49,13,66,83,83,66,76,93,22,90,74,50,9,32,38,30,21\nEden,E07000030,male,4,30,81,2,107,108,7,88,34,111,136,24,99,88,6,49,132,147,98,86,34,93,42,96,84,11,113,54,133,8,100,118,24,36,119,87,108,127,9,1,14,133,20,23,48,128,133,0,32,106,94,107,165,163,169,185,254,143,91,14,194,109,27,93,108,31,43,169,3,2,28,109,166,184,146,110,73,66,47,3,63,32,49,49,47,22,16,26,33,16,42\nSouth Lakeland,E07000031,male,92,69,44,119,125,110,127,230,115,119,17,25,149,16,93,70,197,84,177,163,173,203,82,177,212,113,85,95,28,163,101,254,18,23,223,140,189,52,182,257,49,72,78,175,205,157,111,102,128,80,56,350,210,203,180,150,394,242,410,128,103,153,255,301,32,268,253,298,282,115,164,47,282,414,304,104,201,92,57,202,166,149,95,155,100,125,56,20,36,50,102\nBurnley,E07000117,male,271,180,12,21,73,282,203,72,39,309,69,162,170,258,61,19,274,173,220,51,189,147,2,252,152,172,257,259,122,71,45,280,99,323,137,46,160,278,72,252,85,270,2,207,228,70,20,68,234,140,89,69,56,123,16,217,210,191,271,265,271,248,177,107,205,49,114,204,68,131,42,28,48,126,218,143,57,78,105,72,49,29,28,91,31,46,53,6,13,17,23\nChorley,E07000118,male,40,190,292,271,199,166,52,81,224,186,87,208,226,44,32,210,74,125,243,232,108,62,114,122,138,235,166,316,189,353,256,149,145,344,179,236,392,8,198,235,297,111,262,28,202,216,340,270,170,411,45,196,299,25,24,337,333,47,382,109,267,39,51,156,187,55,177,15,167,184,45,58,121,55,222,187,14,46,131,132,39,22,89,44,54,80,11,43,16,51,41\nFylde,E07000119,male,121,160,159,141,145,121,2,37,186,163,194,95,118,10,152,116,119,169,38,118,117,36,27,70,130,27,78,163,17,157,38,17,81,108,38,116,106,97,157,143,89,177,108,178,177,145,180,121,84,66,4,206,156,282,91,173,191,151,151,17,146,164,53,253,54,104,92,258,9,55,81,29,180,209,22,207,142,75,164,160,44,64,93,52,22,26,54,74,17,60,178\nHyndburn,E07000120,male,34,63,64,65,222,53,110,40,214,212,93,89,231,158,218,199,136,108,102,38,195,208,201,54,130,89,16,196,3,249,188,275,82,36,109,154,82,254,143,117,141,40,17,47,93,156,190,136,108,171,292,194,85,181,35,30,216,215,27,218,128,219,151,62,40,83,83,119,19,4,188,80,110,2,115,23,47,69,93,36,65,13,71,22,16,29,7,23,5,25,36\nLancaster,E07000121,male,223,244,158,291,160,180,342,13,321,204,252,285,2,378,215,220,187,123,58,662,37,472,290,134,72,366,378,216,309,391,271,307,94,234,253,132,96,212,271,53,378,5,283,3,327,62,304,133,309,349,44,324,91,38,405,306,93,117,149,262,296,1,24,230,244,41,265,350,304,253,111,82,182,31,90,12,226,13,218,117,96,124,78,155,38,29,24,83,48,0,216\nPendle,E07000122,male,192,157,88,279,243,121,4,96,363,180,327,151,29,43,213,227,238,210,7,192,124,203,223,38,167,127,207,82,93,261,66,6,123,212,181,70,212,237,81,192,51,297,225,272,238,144,174,3,295,79,21,194,15,23,89,294,23,221,138,10,114,203,195,27,107,93,208,164,152,197,120,101,128,163,101,76,22,21,131,103,113,61,45,71,42,22,6,22,38,18,75\nPreston,E07000123,male,413,3,52,222,68,325,316,137,90,145,379,208,331,264,391,209,348,160,470,129,417,104,169,103,573,267,152,154,320,304,320,69,209,28,93,126,348,211,304,347,395,502,98,309,101,215,399,146,269,8,299,3,314,421,231,257,339,335,355,195,438,200,81,231,132,130,285,17,159,186,62,191,171,143,132,73,159,181,167,26,13,66,18,84,48,35,86,32,53,6,163\nRibble Valley,E07000124,male,111,120,118,69,23,28,70,51,95,117,124,173,164,62,9,182,98,58,149,80,96,92,124,83,62,49,38,120,126,99,32,129,122,22,85,88,161,57,107,135,51,140,76,28,161,106,47,21,143,138,206,62,184,72,17,102,235,2,90,74,61,104,184,131,90,20,89,8,56,140,124,38,196,85,177,93,114,81,126,67,42,60,61,37,61,49,61,24,30,18,39\nRossendale,E07000125,male,28,120,4,133,88,204,197,139,122,185,139,157,153,156,14,167,103,160,133,7,93,86,158,110,1,139,109,25,89,132,119,120,5,27,113,151,59,146,92,96,178,94,112,78,179,158,95,215,46,127,41,157,138,213,157,138,74,96,4,98,12,89,97,149,140,163,157,49,84,13,136,10,12,147,40,152,3,68,65,72,52,64,58,49,20,32,18,13,12,11,72\nSouth Ribble,E07000126,male,74,122,249,49,189,249,171,306,61,87,88,96,27,138,124,61,232,189,250,91,108,91,10,180,143,76,54,120,53,178,20,302,234,96,55,264,150,127,73,43,207,22,90,258,118,28,296,173,1,220,101,359,134,7,64,365,106,176,413,130,182,262,185,130,154,28,114,297,288,212,292,236,158,160,333,42,36,204,10,67,117,130,62,27,101,27,43,31,44,34,42\nWest Lancashire,E07000127,male,103,60,202,193,220,223,113,215,241,110,20,152,207,81,212,324,256,297,265,406,428,284,145,45,146,62,5,235,288,124,89,76,150,200,2,77,229,91,100,296,205,30,215,85,250,253,297,300,99,192,301,160,392,322,154,300,459,35,209,72,88,244,190,290,109,278,228,146,117,191,15,63,158,136,96,206,45,211,37,90,176,128,48,147,58,110,90,17,56,6,17\nWyre,E07000128,male,100,62,49,223,35,49,87,159,116,208,42,27,142,124,170,258,183,99,219,93,131,69,182,201,278,20,95,107,232,151,245,219,188,170,93,41,28,105,23,197,142,167,179,90,192,7,232,202,29,103,242,149,95,113,135,88,228,399,326,405,378,64,302,47,382,303,377,226,71,244,131,24,80,311,123,249,309,234,112,24,60,155,202,104,90,42,28,46,40,72,226\nBolton,E08000001,male,511,140,111,764,773,19,662,1035,371,991,1,169,702,933,543,61,825,670,149,433,632,199,147,567,852,43,670,524,475,320,289,766,611,446,560,595,576,874,51,323,20,313,893,388,773,745,779,312,12,786,74,931,517,26,706,542,788,347,834,643,276,544,196,655,406,149,655,601,672,320,618,267,344,65,390,487,230,181,231,285,210,98,64,11,125,173,163,85,122,92,169\nBury,E08000002,male,494,25,91,202,497,403,163,578,254,39,497,585,190,313,94,99,284,339,110,118,387,177,378,425,424,124,297,322,74,368,423,333,422,418,127,478,297,443,29,243,153,125,146,420,225,125,108,174,651,25,512,475,613,44,556,11,242,395,34,510,501,8,197,209,71,410,190,332,383,52,79,171,309,145,116,109,189,113,3,99,99,83,113,55,72,59,43,85,24,2,87\nManchester,E08000003,male,376,709,282,164,1750,1316,1466,869,833,1384,1280,298,1416,999,396,201,1127,1007,1217,1470,2920,2988,971,586,628,1879,1429,391,741,1037,243,2384,199,2263,2067,1400,1657,128,332,1647,785,1059,230,157,78,949,930,514,1481,737,1455,760,1329,165,291,24,989,1136,480,392,985,889,483,677,140,858,84,392,37,308,685,369,355,300,72,426,70,141,14,336,98,239,52,68,187,0,26,74,12,86,87\nOldham,E08000004,male,96,48,786,362,104,210,768,554,55,749,14,83,651,436,206,760,588,839,122,105,10,673,217,362,572,627,165,325,583,42,97,168,14,3,93,462,43,214,557,565,440,509,119,122,642,248,604,355,695,238,402,370,609,330,533,551,27,340,422,55,576,606,569,544,418,184,275,62,367,200,155,1,398,332,472,147,339,384,296,75,89,113,150,30,116,138,41,38,46,36,101\nRochdale,E08000005,male,316,359,728,304,677,385,236,154,764,438,228,120,725,478,345,402,152,334,227,364,191,494,472,236,524,599,135,82,326,403,70,478,460,346,93,148,740,616,127,375,560,332,556,549,480,110,415,8,264,689,611,14,485,98,438,653,502,525,546,10,200,125,154,493,521,49,484,509,531,419,134,448,427,136,257,49,56,316,136,193,155,16,73,29,39,34,88,94,46,11,125\nSalford,E08000006,male,321,775,22,588,878,55,4,397,443,385,312,166,223,461,69,693,268,112,39,868,112,146,251,450,358,54,270,710,1376,1363,1306,901,744,1021,79,475,1075,705,766,657,329,879,600,148,206,712,86,3,109,271,772,226,512,344,708,509,381,36,324,427,358,254,562,513,319,381,433,136,168,72,370,359,126,274,111,89,2,255,171,259,186,95,93,3,163,82,26,15,46,32,216\nStockport,E08000007,male,714,738,144,115,410,44,716,883,784,55,282,181,61,132,388,254,428,98,297,41,318,209,538,305,146,712,637,89,617,396,180,711,416,317,254,90,439,775,933,76,58,703,147,457,23,196,839,818,131,354,337,148,67,811,27,284,614,498,978,240,880,352,63,108,348,153,690,538,111,148,93,360,469,621,661,407,243,41,216,324,364,113,231,294,216,160,231,193,161,145,7\nTameside,E08000008,male,120,664,549,698,409,630,597,269,319,186,648,561,54,291,93,93,126,522,598,152,241,161,499,192,514,162,521,418,112,123,635,411,757,284,102,126,282,742,396,169,494,628,598,240,147,292,86,673,295,308,802,787,659,55,13,321,120,213,137,396,225,341,604,281,527,153,463,242,65,112,387,78,352,359,479,236,43,209,70,33,216,163,106,52,43,100,34,50,26,6,133\nTrafford,E08000009,male,278,425,288,77,150,460,344,248,726,276,74,781,672,404,439,77,79,293,229,129,40,77,489,488,351,291,96,104,53,25,107,183,388,391,213,390,801,323,654,110,843,262,549,744,184,412,190,336,520,555,317,181,74,271,584,759,399,617,156,25,412,11,37,614,257,189,488,515,347,186,277,197,280,315,369,350,346,247,303,61,245,155,187,175,197,90,155,112,145,24,246\nWigan,E08000010,male,393,493,330,733,82,746,185,137,138,593,684,1012,783,621,697,37,386,336,196,550,494,187,268,847,262,313,205,528,472,597,1009,1056,484,429,919,195,234,934,978,461,4,427,649,285,575,718,850,275,165,849,330,526,354,378,302,886,208,958,838,685,386,426,780,54,71,356,381,352,373,90,539,86,105,18,245,181,561,161,303,525,300,112,157,221,240,49,83,95,105,17,240\nKnowsley,E08000011,male,315,139,242,416,454,341,241,194,192,371,432,344,151,53,425,204,463,29,33,113,237,220,323,228,290,195,217,278,281,288,509,71,470,110,191,473,211,359,284,421,260,144,264,91,20,221,48,153,160,62,337,357,280,445,82,459,202,55,156,154,30,163,102,438,16,70,24,127,309,101,248,178,300,13,71,218,36,7,166,128,74,117,40,91,20,17,72,43,13,10,138\nLiverpool,E08000012,male,749,1250,608,498,1286,1277,34,1293,750,1003,630,4,596,685,5,707,421,359,664,1268,2789,2276,903,1458,921,530,1112,736,869,933,1257,693,54,1173,1600,1453,1264,500,1168,583,394,258,271,903,1086,1205,986,876,455,384,853,1273,936,1384,214,1080,1390,533,640,370,809,808,585,8,669,1019,465,72,131,572,192,583,173,356,262,333,224,183,91,59,278,150,29,213,232,188,47,65,160,102,245\nSt. Helens,E08000013,male,39,356,186,394,402,95,107,155,416,464,484,116,493,68,476,175,169,23,48,150,386,204,303,463,341,100,332,504,28,319,210,483,499,9,65,369,275,486,362,169,298,380,381,324,475,275,548,219,565,514,237,82,394,337,515,60,497,216,47,107,172,28,182,458,490,416,143,422,227,341,344,382,473,317,372,225,401,326,107,119,142,17,104,7,21,143,21,67,68,39,118\nSefton,E08000014,male,36,688,542,120,603,282,2,538,683,457,511,389,32,401,494,366,703,459,341,304,452,553,532,399,29,572,6,117,728,671,759,538,44,733,493,244,208,569,745,551,625,664,745,338,419,452,667,630,706,416,595,508,983,458,951,527,1052,477,380,177,326,91,138,272,203,655,486,751,372,756,476,624,204,459,254,77,475,397,461,201,449,225,323,344,300,35,77,23,169,107,251\nWirral,E08000015,male,709,748,764,674,846,669,477,663,883,1051,792,97,179,868,900,559,524,862,614,101,225,374,317,55,78,227,127,152,240,574,341,840,797,277,676,142,797,584,114,956,202,735,571,225,364,383,668,438,344,33,500,647,420,35,856,703,969,199,667,823,1038,393,380,622,113,730,691,471,10,598,41,576,791,693,506,286,522,402,389,233,321,453,120,247,24,79,36,7,145,119,297\n\"Kingston upon Hull, City of\",E06000010,male,252,720,300,137,113,507,785,25,47,745,352,413,647,455,526,345,565,560,740,380,131,612,549,610,533,10,523,803,68,190,289,243,705,202,587,559,706,829,270,634,20,343,370,257,387,226,335,576,364,180,6,99,484,150,615,124,177,374,624,483,574,513,352,442,9,217,321,312,413,158,528,164,164,516,536,158,329,299,225,95,221,82,35,157,82,154,70,6,21,77,167\nEast Riding of Yorkshire,E06000011,male,259,509,628,797,504,431,441,461,605,663,43,441,80,165,705,116,421,456,585,430,34,657,760,361,512,401,695,773,411,559,592,543,321,519,513,508,494,388,633,421,238,332,382,483,194,547,136,13,337,640,226,435,738,475,673,362,1182,253,311,375,1189,774,1067,238,488,987,272,1083,420,833,854,1008,113,889,764,519,529,514,298,0,208,429,262,517,140,108,48,235,160,151,53\nNorth East Lincolnshire,E06000012,male,166,416,8,437,417,246,91,0,96,75,357,273,236,225,116,230,332,278,180,157,115,350,198,86,335,123,13,47,184,48,177,38,237,17,236,235,322,276,22,90,371,297,330,72,351,100,173,427,69,80,488,239,420,346,336,530,66,450,262,223,404,319,442,188,286,302,343,54,402,223,394,271,313,358,186,28,66,207,123,245,105,24,64,24,49,71,135,57,33,38,30\nNorth Lincolnshire,E06000013,male,280,409,15,394,308,442,451,439,168,51,213,185,431,48,26,246,391,306,220,103,229,152,403,389,127,440,77,71,82,41,365,525,266,394,410,47,503,480,407,288,278,290,207,274,308,410,448,444,536,94,106,69,312,373,623,547,680,520,304,449,189,136,434,334,449,86,153,418,246,160,372,73,422,203,7,124,123,305,155,31,16,183,203,152,167,158,58,101,99,1,226\nYork,E06000014,male,362,166,410,116,176,3,439,107,300,489,458,507,311,441,262,180,456,294,291,305,272,214,317,636,687,146,161,125,54,416,641,537,614,17,245,408,296,460,593,309,220,307,44,552,129,222,113,111,87,159,647,358,261,576,562,252,631,178,317,405,526,270,517,339,296,369,393,267,210,25,313,106,60,124,195,135,108,184,189,11,160,245,162,137,40,12,37,54,65,49,55\nCraven,E07000163,male,75,96,59,58,77,111,18,35,124,73,133,103,1,29,86,18,36,69,125,6,48,93,56,24,65,78,87,84,133,4,23,122,84,135,54,46,108,61,27,114,100,62,1,102,31,58,79,106,168,21,62,73,145,208,202,48,209,189,53,50,7,190,190,121,109,56,198,42,45,53,131,118,62,88,179,41,24,93,146,74,69,40,59,8,7,61,32,35,11,33,84\nHambleton,E07000164,male,72,20,176,205,6,76,15,179,59,137,167,121,160,140,161,15,244,115,118,122,105,144,162,208,26,39,107,194,124,68,216,157,213,120,143,135,29,174,78,181,113,90,56,21,108,159,100,66,63,65,167,217,257,279,72,187,313,71,116,171,176,293,266,174,275,37,30,227,89,113,283,97,61,147,6,92,163,17,10,149,58,64,93,121,70,14,12,69,60,60,46\nHarrogate,E07000165,male,117,59,319,233,118,120,29,299,263,303,96,316,187,143,289,269,184,109,151,71,223,283,98,113,72,153,344,146,128,314,62,252,155,41,277,440,404,122,245,440,71,227,395,432,344,241,212,324,82,276,388,306,393,111,31,1,593,349,10,67,332,283,488,465,304,371,113,424,298,46,230,374,445,37,124,110,330,280,72,84,220,116,4,142,123,82,33,53,18,76,148\nRichmondshire,E07000166,male,9,73,111,61,19,115,23,124,69,1,78,22,34,19,6,94,22,109,122,182,194,20,12,129,19,160,12,99,55,128,107,2,49,7,2,131,70,31,86,67,86,53,101,82,86,59,78,64,134,145,165,66,14,105,164,151,102,105,165,94,101,108,77,150,132,91,24,77,13,103,47,27,8,159,6,41,118,6,18,38,19,11,29,3,36,37,36,36,23,5,39\nRyedale,E07000167,male,87,34,94,68,31,117,106,41,104,2,29,97,125,8,109,28,4,115,124,74,78,78,56,89,86,103,48,40,120,84,2,20,83,6,20,51,90,98,22,92,68,85,28,56,84,49,32,33,117,13,144,97,113,190,22,126,137,17,168,222,116,77,117,44,87,129,144,161,32,181,196,106,84,190,102,72,117,75,7,9,52,27,52,35,59,10,46,43,23,29,44\nScarborough,E07000168,male,124,70,184,189,246,245,8,104,238,167,99,114,280,206,101,7,229,221,205,98,100,6,189,110,205,33,47,79,182,61,151,121,251,187,251,171,41,245,230,63,199,2,209,122,68,32,7,208,163,116,326,79,45,72,151,254,168,361,34,122,199,164,174,318,153,237,293,194,105,186,20,315,123,229,178,240,200,187,167,59,38,13,172,92,90,34,68,19,14,21,63\nSelby,E07000169,male,134,140,101,260,181,189,112,189,139,166,204,91,194,114,31,47,136,48,170,165,148,106,50,50,199,149,125,78,199,259,109,40,272,188,144,12,223,112,212,148,247,121,79,24,109,155,118,85,180,260,197,126,270,142,11,33,257,65,133,197,55,159,117,222,175,55,150,178,84,80,39,222,216,106,260,97,19,159,151,30,31,26,29,75,74,35,17,18,5,30,81\nBarnsley,E08000016,male,511,652,381,303,208,2,135,466,513,758,600,199,125,739,20,274,92,431,309,349,96,314,446,526,700,497,96,357,309,31,136,631,619,786,148,321,470,91,271,72,454,62,290,302,484,239,353,394,50,179,95,267,738,593,385,146,581,608,695,765,21,65,383,570,216,592,528,444,326,103,505,16,29,506,269,94,163,408,234,107,268,45,92,75,55,115,49,114,3,55,48\nDoncaster,E08000017,male,852,668,235,869,76,681,194,875,850,113,391,853,278,698,210,383,803,268,310,452,558,425,234,128,700,825,408,979,201,929,650,1071,311,963,928,650,1032,848,489,658,968,278,392,172,636,847,12,887,5,894,534,743,551,834,615,805,232,840,140,619,65,1003,557,369,595,79,772,310,263,653,206,640,154,801,489,433,345,132,55,68,394,83,65,290,53,214,44,141,106,122,73\nRotherham,E08000018,male,12,212,317,134,769,318,284,556,368,122,487,446,56,525,599,257,135,193,75,175,532,345,487,555,346,682,720,750,691,789,89,624,167,297,701,743,245,774,340,316,627,48,144,144,511,486,340,74,39,545,353,925,141,934,487,792,589,840,858,848,520,172,354,521,33,45,12,135,515,376,448,212,552,520,124,129,147,428,123,235,226,43,139,273,28,110,157,91,81,54,254\nSheffield,E08000019,male,1343,774,535,888,770,474,825,900,826,130,5,802,732,1126,758,381,229,1062,93,501,1717,1578,446,1099,1748,2000,726,1694,1540,1740,837,455,1266,902,195,587,769,1054,256,1429,1406,1173,1010,267,247,385,1175,340,596,75,1175,532,1716,954,492,1641,655,309,799,893,320,747,442,1460,809,81,625,114,306,7,777,329,1140,583,2,44,257,102,289,5,567,584,176,552,96,183,57,105,150,85,599\nBradford,E08000032,male,1109,1555,789,1326,463,1429,1283,552,162,1771,284,1469,70,127,87,1960,1880,1622,316,584,1307,1598,921,917,1001,578,284,1391,322,193,1031,892,437,144,898,770,1285,1324,783,156,1297,279,1068,44,1185,1359,1230,373,1649,158,211,377,1132,283,1562,1383,1532,131,1455,1451,804,1080,289,19,24,480,520,889,434,239,519,92,227,373,1033,499,275,209,231,389,114,481,293,293,356,75,281,120,88,109,76\nCalderdale,E08000033,male,393,52,563,272,185,566,247,565,443,430,567,175,615,122,616,385,603,575,82,250,275,380,436,75,270,62,111,490,547,171,231,362,494,83,148,428,366,612,326,64,358,21,4,394,399,425,101,409,584,446,465,84,501,512,633,708,243,531,660,90,563,398,510,65,181,466,466,324,365,195,134,3,91,90,334,361,151,259,319,235,25,39,12,155,58,7,84,89,58,42,18\nKirklees,E08000034,male,727,1014,928,574,226,682,108,323,1296,437,792,387,242,492,891,789,1104,85,663,1003,973,1059,99,184,729,1222,259,405,765,140,646,1106,956,275,1304,603,775,806,1014,803,274,91,395,990,164,129,1245,1319,864,377,711,1465,1148,1352,1397,1251,1371,828,147,842,25,931,921,674,1083,636,683,117,866,368,436,907,801,197,114,151,256,75,424,167,181,17,173,97,338,33,116,34,31,129,13\nLeeds,E08000035,male,2142,2214,984,1769,1777,242,1733,2201,278,611,1258,745,611,380,2191,437,1830,921,95,2762,666,777,862,992,2960,1994,1377,961,2490,1654,2342,2216,2363,475,326,341,842,2412,990,1548,1453,1665,2444,881,130,74,1740,1375,1538,2509,1674,2286,881,2371,25,1366,1192,2290,123,660,221,1221,416,235,1515,1172,1376,911,421,1564,619,1158,192,1404,299,271,253,433,12,707,542,376,249,173,289,177,40,374,228,23,159\nWakefield,E08000036,male,682,434,859,568,635,553,796,678,353,716,764,707,75,322,91,558,660,917,646,310,276,410,398,672,935,356,606,620,1159,921,453,599,373,443,204,523,1099,1120,194,272,431,53,914,598,40,472,592,217,157,1007,942,981,513,913,814,507,846,18,458,435,46,935,245,662,112,488,300,157,814,465,762,692,480,187,743,646,546,327,228,141,383,358,338,28,130,154,3,81,107,19,235\nDerby,E06000015,male,353,303,722,144,266,2,15,352,814,234,93,464,54,421,628,435,421,386,575,472,191,862,48,228,677,675,459,499,852,11,392,308,365,391,370,104,703,100,721,284,702,586,381,637,372,461,394,553,795,867,818,352,297,411,367,547,723,236,456,56,435,337,350,390,348,368,191,26,518,398,1,183,315,305,315,307,339,23,18,34,20,254,235,38,218,179,105,94,59,27,295\nLeicester,E06000016,male,20,234,5,435,1138,770,105,1003,1080,390,321,247,939,31,299,742,845,680,472,1419,889,1992,653,941,1136,1232,224,533,113,730,902,185,773,737,954,710,21,419,1250,686,1205,309,427,1078,190,829,135,63,164,1109,26,1063,638,843,276,457,547,46,405,855,667,684,200,210,98,250,294,314,550,578,340,320,303,380,151,110,107,130,229,212,91,238,108,15,73,29,133,106,80,59,47\nRutland,E06000017,male,32,41,19,18,23,88,16,8,74,12,106,100,59,35,61,31,164,78,54,10,42,34,42,17,61,26,33,112,116,95,112,79,41,9,105,10,89,42,68,34,66,42,60,27,41,122,96,42,100,142,133,85,47,128,68,136,123,65,45,96,29,44,84,111,4,105,58,6,51,23,27,29,58,99,154,90,44,19,22,13,49,37,51,17,34,25,19,24,2,1,64\nNottingham,E06000018,male,360,760,914,689,246,809,93,555,496,286,589,641,616,552,115,402,582,97,1325,1600,2280,1450,555,748,61,595,949,207,417,586,401,1036,656,506,632,698,1020,112,631,909,162,593,290,829,796,486,537,834,779,353,505,367,129,729,872,553,25,330,465,219,217,230,614,600,387,160,150,68,210,82,128,122,141,297,443,276,6,98,206,112,195,82,138,209,95,3,100,107,90,49,300\nNorth Northamptonshire,E06000061,male,342,926,1019,787,1017,312,23,589,159,91,499,499,297,334,902,909,88,689,828,149,794,26,262,628,929,240,239,517,1050,923,151,22,16,667,369,167,542,902,224,313,1245,894,927,620,201,457,947,517,1043,278,1065,546,1117,474,986,719,1215,187,308,929,732,57,73,786,615,611,210,691,170,123,208,323,406,646,525,272,16,383,214,96,215,371,362,124,214,222,148,3,5,31,16\nWest Northamptonshire,E06000062,male,584,1105,130,1000,85,1052,651,405,178,402,1310,12,871,945,1064,410,510,137,1123,463,74,378,579,417,239,1063,291,736,994,377,1143,998,615,1117,1154,404,35,1017,346,917,761,360,1379,657,1116,1252,164,535,943,1024,927,988,385,1460,110,942,678,940,381,751,596,925,372,278,433,755,438,902,779,53,379,260,718,1074,514,405,152,112,465,457,359,179,215,144,313,14,74,153,51,21,97\nAmber Valley,E07000032,male,47,126,295,23,313,78,2,128,267,292,17,115,111,220,13,71,135,208,168,170,7,263,157,170,191,233,204,163,321,217,269,96,311,157,193,1,109,126,89,255,210,115,269,279,195,278,401,145,207,26,155,421,331,326,117,269,440,416,325,76,302,348,152,328,277,120,117,149,13,213,296,75,340,373,364,14,153,131,277,123,27,148,165,61,95,108,40,30,69,53,4\nBolsover,E07000033,male,175,98,10,40,96,145,172,103,80,201,41,151,127,104,138,42,72,61,66,68,56,137,137,135,133,139,177,224,206,88,175,180,183,250,101,55,8,123,138,88,117,165,169,40,82,182,230,89,173,131,250,137,232,96,22,263,286,169,300,92,258,183,154,92,126,56,124,7,193,98,198,120,162,197,1,86,20,126,23,82,4,80,33,40,0,2,36,5,39,10,24\nChesterfield,E07000034,male,195,44,212,12,179,140,255,159,95,237,97,31,36,279,38,118,149,160,251,32,169,129,72,183,128,46,181,9,254,130,311,36,128,280,85,85,24,87,74,41,275,146,51,216,5,98,25,263,178,313,35,44,344,370,80,316,260,320,211,249,281,132,5,119,206,48,30,110,227,8,256,40,56,114,36,212,7,79,194,108,90,51,102,7,78,2,39,9,59,1,151\nDerbyshire Dales,E07000035,male,28,70,6,118,92,106,152,86,32,9,186,1,149,140,173,138,46,10,147,107,50,33,120,121,88,61,131,15,110,165,18,19,132,60,28,19,131,9,92,115,23,15,29,26,132,2,30,30,227,82,99,57,117,53,4,123,220,15,297,262,35,142,93,77,68,46,55,79,174,180,121,228,164,18,117,36,53,170,162,92,15,97,5,73,29,26,55,7,25,22,84\nErewash,E07000036,male,86,85,63,245,221,224,317,295,169,210,134,186,28,279,165,3,25,188,247,113,74,182,65,132,67,61,69,188,6,0,325,221,169,250,202,243,154,167,212,102,60,214,80,274,174,91,98,259,223,215,132,403,167,159,236,25,331,401,23,131,42,306,275,207,57,196,145,101,46,282,88,171,127,38,2,203,234,143,9,73,56,104,56,88,11,34,50,15,14,57,118\nHigh Peak,E07000037,male,11,104,134,148,20,69,130,60,26,172,130,4,140,220,210,78,232,54,131,28,126,76,126,163,10,85,46,201,97,85,69,208,42,107,254,196,168,27,239,151,131,60,230,209,117,0,276,123,199,32,347,190,143,348,296,288,213,221,33,7,222,309,144,206,38,271,12,49,44,195,72,225,226,185,175,210,156,91,44,99,64,53,110,31,20,49,12,18,40,26,34\nNorth East Derbyshire,E07000038,male,133,73,54,33,135,215,251,229,52,227,167,123,60,2,45,182,141,175,174,21,37,49,38,109,187,48,159,73,173,182,7,46,113,141,144,195,87,194,259,36,186,296,214,221,168,214,142,96,214,110,34,330,304,311,316,131,366,275,244,300,15,54,152,75,285,275,12,108,236,224,237,263,277,145,101,219,237,20,183,15,174,78,132,132,1,82,42,53,7,27,60\nSouth Derbyshire,E07000039,male,10,169,82,13,125,200,91,260,237,231,26,175,284,212,244,158,148,96,246,46,10,168,149,268,108,6,47,155,130,321,202,231,197,19,286,64,107,216,271,90,253,289,91,287,267,98,30,81,308,285,280,13,373,95,66,210,257,296,151,163,175,128,243,227,151,222,41,111,199,93,49,6,233,266,5,68,234,185,65,90,113,70,94,80,51,53,39,40,19,0,35\nBlaby,E07000129,male,55,12,15,261,156,212,38,263,122,300,219,118,1,116,66,272,108,189,200,197,180,177,90,96,78,109,262,42,262,248,117,202,184,133,13,258,129,273,326,177,79,45,82,1,283,68,51,3,156,242,18,37,205,315,114,103,59,210,66,292,58,125,180,282,83,248,188,43,90,44,6,266,71,138,25,172,195,20,159,7,104,108,17,35,89,7,6,58,64,9,32\nCharnwood,E07000130,male,210,86,106,27,16,155,384,76,291,37,253,494,75,428,446,35,149,484,679,481,773,774,323,147,424,404,502,431,539,243,358,147,419,404,271,566,211,405,246,335,346,261,473,256,365,372,483,525,381,481,169,6,228,283,538,115,333,154,313,362,43,489,251,446,354,470,422,321,382,293,342,361,106,82,444,39,343,199,130,142,205,112,186,77,59,80,87,85,4,12,80\nHarborough,E07000131,male,65,236,100,16,85,265,81,166,105,222,67,170,254,208,30,102,197,312,67,185,6,213,152,109,219,58,263,189,57,36,169,50,184,167,22,105,74,16,217,35,292,190,97,23,19,52,17,283,134,236,254,10,277,322,214,58,277,150,51,232,341,281,58,14,106,14,251,3,123,129,199,128,54,192,118,22,151,149,61,4,15,109,142,36,34,24,65,48,33,33,155\nHinckley and Bosworth,E07000132,male,66,182,44,277,131,136,235,100,231,187,263,95,62,278,171,140,51,32,76,220,24,230,280,24,140,70,211,70,211,129,309,315,165,32,106,11,99,296,18,127,105,192,284,218,45,142,133,326,154,73,171,158,259,227,225,296,172,326,107,270,88,50,13,26,243,163,194,100,73,212,188,225,198,244,192,21,226,95,214,37,123,103,59,88,117,52,74,50,73,40,163\nMelton,E07000133,male,91,59,20,23,52,51,105,82,6,42,76,142,78,77,58,46,63,109,81,46,103,65,47,73,43,114,18,100,116,118,116,14,60,59,63,105,50,31,22,45,52,119,72,33,20,44,10,84,48,126,136,18,110,208,88,115,37,81,124,43,149,36,64,81,83,32,92,163,170,110,19,161,64,173,55,54,89,58,89,41,50,8,52,61,10,17,27,2,15,7,38\nNorth West Leicestershire,E07000134,male,228,255,213,262,41,267,167,196,303,266,112,294,139,91,269,186,250,57,249,228,124,198,105,225,70,218,273,17,44,61,328,289,325,241,93,51,294,292,56,130,17,65,141,92,168,308,81,15,179,161,150,263,199,55,7,335,20,282,242,181,140,100,165,68,112,62,73,235,24,151,206,21,34,72,206,171,195,87,36,118,36,12,45,24,51,46,38,26,24,7,11\nOadby and Wigston,E07000135,male,27,66,130,137,122,151,38,97,91,94,10,163,21,178,122,106,167,77,49,5,86,98,24,27,122,53,80,0,108,142,20,102,19,76,45,34,108,7,124,20,177,142,133,146,112,93,36,95,43,97,139,111,60,121,101,154,16,118,66,68,63,57,119,46,30,4,79,2,65,49,40,55,13,22,135,50,49,76,27,19,52,79,43,18,38,33,17,13,5,1,77\nBoston,E07000136,male,80,89,66,64,96,195,110,178,137,215,76,36,177,41,121,144,98,165,27,99,90,146,61,2,51,151,132,141,76,104,3,186,162,215,42,4,93,170,112,215,43,34,49,15,108,119,68,93,203,118,204,90,232,97,221,181,73,49,120,173,117,172,84,210,197,38,147,138,87,77,29,140,85,186,110,99,111,91,52,32,15,73,36,49,52,7,47,3,20,22,29\nEast Lindsey,E07000137,male,153,107,202,126,135,280,123,170,13,339,320,266,83,155,141,10,64,336,318,257,170,29,153,122,304,206,348,121,191,257,226,38,277,41,197,69,62,182,6,234,158,199,310,41,216,301,153,124,122,259,365,254,189,202,56,299,85,161,64,546,36,284,408,285,484,349,250,376,204,313,103,338,121,59,235,409,475,123,100,326,267,156,165,259,18,105,69,90,49,18,240\nLincoln,E07000138,male,210,18,273,164,107,165,127,4,163,57,124,193,236,189,214,155,162,122,211,533,307,690,396,376,214,62,366,247,68,369,216,84,364,389,361,135,146,213,180,75,208,221,10,154,164,201,292,131,138,141,30,288,210,134,21,161,39,109,61,19,185,212,234,19,26,163,88,85,107,156,89,112,172,44,34,118,34,112,36,7,78,36,4,11,29,1,48,30,33,23,48\nNorth Kesteven,E07000139,male,75,100,256,38,313,328,123,271,144,248,91,29,49,179,133,315,225,134,135,191,202,154,1,313,278,96,187,117,94,98,330,61,142,227,159,8,263,264,122,39,250,296,321,119,88,107,226,119,53,80,217,327,439,263,75,156,232,58,104,192,196,229,153,345,194,301,275,285,179,325,312,305,34,312,123,164,195,188,129,122,37,105,35,72,80,2,21,47,28,65,95\nSouth Holland,E07000140,male,191,114,228,96,48,102,57,8,272,119,82,257,124,140,161,194,225,102,33,138,23,97,188,93,147,135,175,133,104,2,225,294,52,179,63,81,129,207,239,243,221,176,236,11,91,160,56,69,199,177,39,312,93,333,39,195,188,313,349,181,3,158,287,168,39,197,244,232,10,208,191,175,212,15,75,114,201,131,134,83,88,112,117,24,134,31,34,56,11,56,130\nSouth Kesteven,E07000141,male,315,206,179,316,312,310,169,252,215,433,257,419,260,238,134,245,405,411,187,53,136,169,121,141,328,321,327,227,27,22,36,275,194,250,49,316,2,108,50,400,238,41,108,201,55,269,115,29,56,244,378,461,524,368,30,121,473,400,77,38,81,114,224,85,99,279,111,69,257,95,60,200,218,420,403,208,124,184,23,239,93,108,134,43,119,39,68,20,12,7,3\nWest Lindsey,E07000142,male,194,133,28,140,227,226,95,55,201,7,148,217,225,247,95,236,113,148,105,167,32,149,72,214,197,180,82,140,22,147,128,198,206,233,12,12,224,178,204,153,150,83,153,194,199,118,252,273,161,162,310,174,88,113,60,43,25,273,244,350,329,218,113,83,248,217,239,178,66,88,63,162,157,72,75,196,189,42,12,104,110,100,48,75,84,27,44,26,49,43,10\nAshfield,E07000170,male,119,183,302,222,65,93,121,278,339,412,404,111,206,25,152,93,231,202,201,165,268,40,279,119,17,227,84,46,125,153,163,233,172,169,148,167,207,283,175,137,331,139,208,296,89,243,269,393,165,267,458,149,116,295,51,30,132,82,424,185,2,194,188,335,307,290,70,212,141,154,94,94,322,309,77,43,96,155,163,139,125,113,47,79,95,29,63,3,50,34,26\nBassetlaw,E07000171,male,179,199,141,205,60,234,149,193,102,311,221,290,196,267,49,61,216,221,40,97,148,270,275,63,148,253,186,139,78,27,186,188,25,211,372,322,147,162,256,257,65,99,214,276,208,277,59,351,356,111,360,207,264,220,210,301,478,361,121,398,414,309,265,178,86,174,116,165,209,267,170,292,258,167,96,0,102,42,234,124,116,82,106,130,47,23,43,13,3,43,29\nBroxtowe,E07000172,male,45,202,78,115,93,224,283,181,314,211,161,246,161,312,95,213,231,202,209,210,161,322,237,294,164,159,266,180,309,307,15,324,174,42,172,364,210,12,160,88,17,131,168,192,179,66,167,151,141,96,296,291,319,379,84,314,44,192,114,190,219,115,30,159,238,118,68,29,263,22,35,191,220,136,348,46,225,230,209,10,76,65,140,5,5,57,62,84,72,52,74\nGedling,E07000173,male,211,55,133,39,203,115,239,244,279,99,116,63,216,180,287,34,329,33,30,196,23,130,193,97,169,187,275,141,6,261,67,274,97,203,110,313,295,181,91,164,174,164,122,85,16,73,179,18,111,260,254,340,295,182,183,395,127,118,21,294,112,87,346,23,228,232,200,4,62,96,1,98,41,116,69,199,46,169,140,167,161,10,10,109,2,25,2,53,45,11,114\nMansfield,E07000174,male,214,273,76,103,20,255,283,98,162,213,163,80,55,223,127,53,125,156,6,8,155,15,199,13,41,308,280,321,309,166,181,328,348,20,315,237,296,365,230,51,178,6,121,185,40,55,54,103,333,393,334,156,334,353,87,105,267,30,6,122,308,2,148,94,26,247,203,260,40,274,177,96,260,97,165,145,67,123,8,76,26,122,111,26,76,41,18,51,43,19,37\nNewark and Sherwood,E07000175,male,266,76,233,70,18,63,33,170,153,232,148,192,209,95,205,22,197,247,141,57,124,28,5,104,103,269,129,161,48,180,288,42,359,305,254,279,98,278,314,72,116,5,163,264,246,251,342,310,231,414,430,295,144,181,381,97,94,251,166,406,112,79,277,174,77,233,176,182,171,45,330,234,127,189,73,139,145,233,140,12,9,129,147,84,73,106,80,79,10,8,176\nRushcliffe,E07000176,male,205,91,256,3,68,128,284,189,22,183,226,326,204,122,120,107,85,231,120,192,318,146,261,219,152,164,159,218,37,39,162,50,307,26,318,256,293,19,336,316,130,350,357,215,244,299,210,247,36,428,163,238,286,399,389,153,135,371,56,301,109,191,160,18,80,244,297,26,24,290,77,313,35,15,328,130,194,91,25,49,89,138,29,17,66,10,92,60,59,73,203\n\"Herefordshire, County of\",E06000019,male,135,411,174,236,4,247,27,475,105,190,473,390,458,305,468,329,180,97,195,143,233,354,48,305,8,356,96,442,113,265,326,461,512,109,203,38,150,204,422,58,209,435,304,119,353,371,62,73,202,210,435,569,512,636,47,353,672,444,369,516,187,317,75,430,11,499,136,1,197,27,389,580,173,418,557,93,459,145,330,47,12,285,96,229,49,13,164,120,46,125,108\nTelford and Wrekin,E06000020,male,353,124,95,11,58,514,481,548,495,135,346,22,357,439,407,319,89,384,39,259,495,111,85,84,212,130,9,54,254,621,380,435,527,567,9,77,170,424,536,192,548,403,392,3,146,359,500,61,263,263,222,339,148,552,103,174,330,426,457,498,419,90,240,113,432,261,270,230,279,354,74,409,279,177,88,161,201,122,176,18,68,202,141,155,0,103,95,6,72,39,84\nStoke-on-Trent,E06000021,male,7,257,495,297,742,25,108,160,193,337,524,660,331,518,679,581,549,476,379,633,747,187,61,30,707,19,566,232,277,46,804,720,293,759,220,68,322,565,391,768,767,652,84,158,561,460,170,608,175,592,772,37,603,240,503,212,319,730,190,471,311,114,611,366,659,14,346,62,175,219,66,509,31,290,487,444,153,285,351,206,220,37,84,215,73,103,2,66,56,5,226\nShropshire,E06000051,male,310,340,669,439,282,345,158,80,259,311,878,835,734,337,810,431,76,49,847,710,319,473,656,681,458,31,484,334,224,632,238,11,548,888,628,667,35,74,609,383,503,233,579,573,708,202,12,762,297,1142,742,683,360,350,349,885,132,267,479,911,224,232,444,995,704,1002,120,1087,109,301,988,203,12,228,465,849,326,479,684,439,99,555,19,330,87,220,27,90,190,190,601\nCannock Chase,E07000192,male,95,207,209,126,226,88,12,284,222,211,211,90,202,150,128,26,260,72,179,206,147,81,196,97,199,100,298,236,150,145,189,275,330,203,299,236,27,17,157,1,257,29,283,193,30,114,8,258,249,155,185,233,11,245,169,134,28,125,153,249,323,183,240,169,58,23,128,61,233,26,99,227,252,149,252,171,137,24,127,64,28,49,91,103,71,38,19,22,31,13,107\nEast Staffordshire,E07000193,male,35,61,312,312,237,144,86,326,47,105,350,395,194,168,119,329,90,146,202,179,149,179,21,46,183,118,325,100,44,132,159,26,153,168,189,123,168,330,70,258,37,186,95,117,261,177,328,9,99,392,456,78,139,295,427,383,257,239,49,254,4,143,21,40,15,122,82,24,123,76,13,55,247,122,47,93,151,140,122,42,17,152,30,132,32,41,39,0,58,14,91\nLichfield,E07000194,male,83,215,192,241,238,63,247,213,86,2,221,287,147,123,278,81,279,6,90,197,11,271,228,4,113,273,259,285,26,3,52,65,80,175,40,135,51,128,227,63,269,213,3,179,160,84,128,65,248,111,316,214,270,12,36,302,383,304,352,277,184,167,129,278,92,60,64,72,240,89,242,301,329,171,40,228,78,100,210,106,86,166,72,129,47,32,58,40,49,25,103\nNewcastle-under-Lyme,E07000195,male,44,158,96,215,204,19,119,261,158,270,299,42,209,313,186,93,7,59,278,11,64,335,234,129,16,39,19,10,295,134,166,185,273,304,127,166,55,190,328,212,331,55,300,27,288,220,88,308,326,138,121,173,231,59,26,1,302,151,128,171,272,281,47,71,235,87,298,264,23,10,315,112,47,81,352,255,284,36,153,22,109,155,158,101,5,62,96,56,12,33,163\nSouth Staffordshire,E07000196,male,203,98,110,119,91,109,136,15,52,242,70,215,135,58,253,104,236,237,31,102,40,129,230,182,169,215,180,44,179,244,74,109,250,61,289,94,23,217,105,68,24,61,122,62,131,80,85,229,125,253,356,295,406,46,104,394,127,286,362,274,80,321,254,239,128,296,108,53,128,17,124,75,137,57,199,23,133,29,208,24,38,29,150,181,60,118,96,38,58,43,24\nStafford,E07000197,male,90,263,348,21,108,345,200,222,182,52,323,343,283,382,149,158,280,309,286,88,43,57,54,38,359,103,111,38,17,150,140,394,9,178,338,310,93,10,199,403,155,142,33,99,130,310,396,416,357,315,49,431,472,492,104,319,257,89,304,438,55,149,392,237,205,241,187,286,280,149,203,392,262,309,268,4,238,265,49,233,164,66,58,131,84,133,126,31,28,36,104\nStaffordshire Moorlands,E07000198,male,186,17,12,54,222,212,197,218,200,192,5,196,75,118,86,77,154,95,25,36,22,138,207,13,158,206,158,114,10,1,81,153,69,178,23,162,180,200,76,155,140,65,66,28,76,159,60,174,199,66,290,43,19,251,324,143,92,273,208,211,190,346,24,18,79,82,115,303,258,277,215,321,54,114,4,18,30,7,171,12,33,130,24,108,2,82,93,50,30,37,165\nTamworth,E07000199,male,157,146,35,97,56,174,91,192,84,23,57,46,98,7,188,58,42,83,178,114,103,170,130,189,164,154,0,222,126,276,178,222,135,3,67,146,146,81,179,230,97,6,186,47,74,38,117,114,25,46,125,78,12,125,124,3,16,70,132,201,195,20,163,133,158,20,164,104,166,121,25,136,84,150,167,82,24,137,87,49,55,91,11,11,61,3,22,12,23,16,45\nNorth Warwickshire,E07000218,male,60,26,72,104,61,67,6,67,30,67,53,130,111,154,58,27,51,10,94,3,28,48,133,73,78,55,37,81,93,62,30,71,40,207,136,189,20,5,118,119,1,122,45,35,111,10,177,56,63,16,54,172,159,119,122,110,76,229,42,28,55,90,14,24,197,159,91,75,116,157,121,161,18,84,116,15,133,139,131,30,81,60,18,41,8,2,11,16,8,15,31\nNuneaton and Bedworth,E07000219,male,39,122,80,234,389,227,145,229,295,33,120,312,288,199,381,191,277,79,18,181,249,36,144,238,51,225,92,217,250,322,4,294,159,209,359,160,135,333,179,374,105,112,148,38,175,77,373,240,274,44,372,405,231,28,357,293,449,323,80,218,305,248,371,273,74,158,302,74,21,296,273,347,30,310,194,100,170,123,138,90,138,49,59,125,83,26,24,67,3,8,97\nRugby,E07000220,male,38,239,200,111,72,73,224,355,234,96,374,338,67,165,338,291,64,50,264,65,39,225,120,102,53,220,325,329,164,112,275,296,45,176,344,261,251,338,112,414,71,2,348,216,56,177,237,87,181,356,160,25,140,143,372,194,88,302,185,168,142,123,213,125,16,11,14,62,68,154,48,15,135,68,58,203,192,123,134,85,18,48,1,36,25,77,72,39,3,35,44\nStratford-on-Avon,E07000221,male,187,247,91,127,216,360,63,109,227,18,301,69,6,297,327,39,238,236,45,78,10,187,64,206,275,251,183,236,35,140,78,229,86,80,48,115,153,238,144,38,298,355,180,3,157,377,298,281,79,22,56,89,290,385,159,20,479,442,158,352,398,254,393,117,211,201,66,125,401,110,328,397,205,15,331,248,246,329,164,27,20,39,189,136,10,79,50,89,3,63,70\nWarwick,E07000222,male,358,82,310,295,288,98,373,90,374,69,331,207,144,223,66,139,168,22,424,368,498,552,284,289,232,134,199,300,60,370,120,447,493,481,144,389,418,275,138,127,18,123,239,139,6,347,219,130,298,429,18,17,125,47,339,196,59,56,26,273,335,162,13,300,167,46,155,23,263,10,194,296,302,15,44,43,29,139,134,183,101,65,75,61,121,42,55,17,70,2,213\nBromsgrove,E07000234,male,30,52,23,192,193,91,206,237,96,40,33,23,150,4,17,78,77,269,75,104,139,52,42,2,71,112,109,18,77,162,224,5,196,55,95,54,233,214,275,102,144,95,252,156,179,95,30,270,196,259,235,268,26,214,172,172,100,261,18,343,52,195,9,127,237,11,56,22,13,57,19,183,82,41,89,136,84,129,25,150,50,102,3,11,21,99,9,55,12,7,81\nMalvern Hills,E07000235,male,138,142,34,4,87,129,91,1,182,92,109,23,208,198,43,112,202,193,113,44,95,19,25,173,171,33,24,157,100,114,161,176,163,115,90,42,91,72,28,60,184,104,44,125,5,21,7,16,75,270,25,10,174,247,13,20,50,151,237,166,156,203,85,98,264,66,15,147,180,260,211,244,145,22,289,198,21,191,77,16,124,96,22,18,81,70,65,46,37,3,125\nRedditch,E07000236,male,231,3,12,158,189,231,15,183,150,157,208,246,213,111,238,91,251,145,177,112,71,29,212,102,245,130,202,114,112,206,189,71,15,7,30,165,161,184,120,186,145,165,230,73,89,205,244,101,233,12,274,236,191,245,240,6,110,127,67,64,11,95,146,128,124,152,124,17,143,192,84,105,222,65,94,15,142,12,120,103,90,2,29,54,50,15,14,3,19,27,46\nWorcester,E07000237,male,190,93,246,96,6,141,215,155,10,4,23,82,84,150,45,23,37,171,29,301,283,137,256,179,180,52,77,162,84,192,169,256,50,109,182,204,166,48,64,312,131,335,197,29,209,29,136,115,346,339,10,52,304,141,240,145,275,360,88,142,48,255,4,126,121,134,171,48,106,213,82,128,166,48,71,77,37,162,52,14,111,13,23,48,40,33,6,37,23,26,34\nWychavon,E07000238,male,122,144,204,101,344,96,263,297,230,102,176,102,326,10,303,18,252,347,289,69,83,165,111,47,315,83,39,166,210,348,247,219,352,147,77,336,336,174,341,51,219,283,271,304,155,167,81,321,144,114,329,14,23,295,118,290,433,476,374,487,107,223,72,385,151,234,271,32,317,263,165,81,74,357,430,46,304,90,74,87,142,83,25,177,181,98,2,71,73,74,6\nWyre Forest,E07000239,male,23,187,208,230,239,135,190,98,138,18,282,213,282,8,269,104,55,145,81,78,131,90,171,26,98,5,136,245,137,224,226,154,266,139,131,176,86,36,7,225,71,282,152,146,182,119,255,228,300,96,112,259,158,265,308,339,210,359,175,1,50,292,149,15,278,110,65,145,56,45,109,179,80,103,83,216,35,93,152,40,105,148,60,17,64,95,52,37,9,23,36\nBirmingham,E08000025,male,471,2302,31,1330,2839,1989,312,167,4063,4174,2198,663,1188,554,1185,862,3436,1162,3367,4602,3326,1972,4555,1064,3347,449,1180,616,618,1534,1199,2287,966,2451,3434,2203,1546,728,3354,1695,2683,712,511,1885,2960,3312,2987,101,398,1479,324,116,734,1419,776,1764,1422,1906,1242,670,1,2097,1644,2168,464,489,460,1337,696,1655,955,1625,502,1061,1150,155,548,1037,456,539,488,933,878,156,746,471,530,304,104,148,778\nCoventry,E08000026,male,32,1025,56,488,436,398,27,581,837,420,834,691,64,513,451,906,979,23,908,674,1041,1839,1422,796,1123,354,10,48,237,851,870,1192,1166,1250,159,543,219,1040,768,94,836,409,112,297,263,606,929,831,754,757,57,160,1076,1071,748,710,802,772,1002,13,256,604,572,33,100,153,403,24,297,560,468,395,11,274,567,354,49,317,52,244,81,93,316,52,182,117,32,139,54,112,7\nDudley,E08000027,male,766,311,144,944,730,419,128,704,186,662,579,357,524,203,282,113,183,744,810,149,541,545,393,388,666,776,690,998,846,956,645,475,182,397,960,916,726,387,704,99,7,467,164,784,605,793,12,289,533,191,191,155,859,879,593,304,422,873,260,379,188,448,317,464,643,733,729,211,91,659,209,204,466,307,432,147,604,147,435,511,305,10,155,203,35,179,217,167,90,87,435\nSandwell,E08000028,male,897,964,191,298,657,33,938,327,431,108,958,101,1103,503,132,115,691,1157,902,777,200,387,729,809,800,577,797,411,1077,1145,4,412,301,423,87,880,1067,316,228,1076,142,592,919,197,958,305,271,353,176,775,638,125,953,695,898,30,706,113,51,760,986,183,129,276,518,201,238,426,421,151,235,126,83,171,432,313,233,414,102,123,205,189,151,80,168,77,87,147,130,19,290\nSolihull,E08000029,male,405,135,36,647,592,447,441,34,2,458,667,613,178,708,76,337,152,623,97,54,341,385,239,112,257,315,564,247,63,478,84,187,321,212,240,66,204,401,129,545,106,255,62,105,345,353,296,201,413,512,583,69,625,365,328,663,780,421,547,199,418,171,207,545,137,152,473,95,173,266,39,392,282,136,69,211,370,353,107,270,244,259,195,113,20,161,33,7,28,104,47\nWalsall,E08000030,male,358,203,274,302,464,321,56,960,43,669,12,653,862,168,373,419,899,516,451,127,661,65,244,603,552,523,701,89,37,629,833,98,342,677,896,178,72,140,882,511,558,749,652,140,495,326,21,719,432,859,877,14,851,433,327,896,142,477,124,812,382,289,493,659,36,362,559,447,410,198,53,458,518,470,584,302,63,151,299,36,363,148,108,62,57,137,82,19,10,106,50\nWolverhampton,E08000031,male,10,564,131,55,460,559,224,510,354,876,621,529,87,783,399,777,758,710,559,264,68,703,816,464,468,567,398,287,19,480,470,87,614,347,325,625,111,716,198,612,464,678,637,697,526,167,422,728,38,476,504,379,30,359,886,403,209,422,624,353,496,237,235,71,452,96,365,564,421,210,259,112,200,320,318,239,348,32,189,230,129,189,1,15,5,19,48,74,96,68,179\nPeterborough,E06000031,male,139,26,250,625,595,193,753,160,788,141,265,482,702,98,175,651,561,589,56,333,182,289,544,610,285,187,167,184,368,411,123,620,813,623,409,811,188,562,374,226,666,24,358,633,421,448,64,591,712,70,560,602,157,208,646,286,441,167,32,6,118,52,61,449,338,283,274,137,276,19,37,305,33,158,38,71,3,207,189,100,121,16,166,97,152,103,27,4,19,68,16\nLuton,E06000032,male,747,246,534,391,744,30,82,894,518,814,863,851,5,784,456,784,609,664,499,51,567,212,619,650,262,255,161,682,80,33,518,686,583,776,662,310,472,650,285,660,698,25,452,253,116,701,67,498,719,460,497,502,314,150,257,130,611,108,183,308,94,65,473,385,149,209,371,13,3,126,96,65,220,34,213,222,206,174,82,12,139,28,107,144,136,11,10,34,27,45,62\nSouthend-on-Sea,E06000033,male,461,273,173,440,493,537,170,310,318,445,103,484,124,297,330,94,183,98,330,228,319,277,281,173,260,293,437,301,421,262,47,85,261,387,27,137,204,552,529,117,368,313,431,417,396,193,328,203,287,149,51,482,555,494,272,256,595,246,338,189,575,388,122,285,354,284,226,254,10,397,38,70,33,381,117,316,148,54,134,114,191,83,209,22,77,3,58,81,91,10,154\nThurrock,E06000034,male,121,342,585,486,482,615,75,535,407,507,670,233,236,183,518,152,322,449,34,152,284,421,305,361,197,402,469,139,554,65,30,45,99,98,484,347,333,517,584,522,488,103,99,103,401,326,524,459,427,317,208,93,24,400,160,342,244,18,469,319,395,415,407,44,318,262,189,184,242,48,48,217,286,110,234,156,190,125,65,71,50,64,80,93,47,13,65,23,17,45,52\nBedford,E06000055,male,282,482,41,509,309,389,172,232,131,309,167,542,136,530,319,528,217,96,368,174,252,177,343,495,481,479,542,27,446,283,154,386,499,596,313,25,260,162,599,196,394,404,138,120,134,243,68,590,270,159,640,100,544,479,373,59,493,139,344,295,41,58,72,207,418,75,249,146,375,360,119,136,300,208,316,280,89,74,110,148,174,155,68,91,67,60,119,45,48,27,127\nCentral Bedfordshire,E06000056,male,452,697,349,777,295,659,35,823,77,224,660,905,845,758,712,564,355,552,462,179,580,516,661,382,418,309,351,588,452,917,884,912,945,681,130,642,398,706,1020,972,923,964,910,289,569,398,426,65,851,923,343,955,583,105,1017,281,614,38,332,956,285,53,149,447,764,621,701,92,186,346,606,200,496,199,746,297,158,381,138,366,296,70,216,43,9,165,112,34,35,81,352\nCambridge,E07000008,male,117,97,148,130,49,206,183,214,64,25,136,134,237,344,10,253,154,296,558,615,534,673,659,351,751,305,874,486,605,217,817,625,515,557,268,558,413,364,343,371,93,437,378,108,202,46,126,29,66,146,166,283,307,96,107,44,226,147,274,343,90,229,102,151,189,189,186,201,143,157,26,47,14,18,120,87,3,84,31,110,50,74,98,27,41,34,2,8,33,43,71\nEast Cambridgeshire,E07000009,male,60,29,120,83,190,253,8,185,170,37,96,130,83,252,223,80,258,164,219,60,29,43,177,164,56,2,167,223,174,88,120,240,47,53,86,86,14,166,125,205,26,73,59,49,288,5,33,15,236,174,35,20,207,258,200,242,270,62,8,115,60,111,156,0,69,93,86,142,136,60,188,138,92,99,16,185,36,18,39,19,38,19,90,31,34,35,51,50,17,22,6\nFenland,E07000010,male,190,38,104,48,197,51,56,117,147,119,120,182,267,230,191,104,152,208,69,111,201,111,36,208,234,143,169,216,157,145,161,153,174,57,200,288,248,27,94,177,279,143,101,231,224,30,167,127,42,336,109,109,320,320,78,190,237,85,94,246,53,264,294,37,210,261,21,156,124,278,150,98,153,258,167,204,17,6,69,179,106,11,20,11,73,15,53,52,5,4,142\nHuntingdonshire,E07000011,male,92,165,85,27,309,78,67,173,387,28,159,511,474,213,195,54,498,3,153,112,74,324,288,248,236,21,357,69,164,563,101,554,452,552,308,228,359,338,79,58,125,94,553,528,274,0,53,195,249,579,485,281,324,19,511,47,148,506,6,355,489,42,255,375,469,112,422,331,348,57,420,177,284,81,280,394,414,21,232,238,37,166,90,101,26,128,129,91,8,6,33\nSouth Cambridgeshire,E07000012,male,214,253,154,454,198,106,22,281,253,254,242,310,11,403,351,18,126,396,65,116,37,101,319,147,187,185,221,33,347,227,230,113,22,455,203,198,220,413,504,181,352,269,174,114,92,237,342,393,144,406,380,94,381,347,496,383,80,484,382,335,378,104,172,219,258,142,133,52,128,200,378,9,19,422,186,145,184,153,191,104,111,95,128,69,38,133,80,101,90,23,92\nBasildon,E07000066,male,92,233,413,618,570,495,20,254,165,338,466,137,43,582,355,203,470,87,66,174,159,171,293,370,475,112,176,217,192,234,515,164,338,669,196,423,518,24,58,580,425,442,227,353,202,259,536,116,22,458,222,250,218,497,38,289,473,591,325,59,99,164,351,95,26,403,38,49,248,269,260,68,96,324,301,306,46,94,160,1,7,86,105,116,40,108,79,3,37,41,179\nBraintree,E07000067,male,303,315,5,346,62,287,341,243,72,17,68,273,386,249,291,470,308,343,275,252,46,175,165,90,352,132,268,251,329,154,267,361,237,437,311,13,191,24,401,136,182,198,141,24,431,416,319,202,404,477,181,92,325,514,482,114,93,327,201,510,196,154,288,414,189,299,254,117,181,117,35,337,287,27,131,132,102,143,79,46,70,99,111,149,70,37,13,17,11,53,98\nBrentwood,E07000068,male,44,30,23,66,213,178,216,183,177,211,201,211,40,57,85,179,161,84,121,97,95,155,94,168,145,179,28,39,8,221,148,46,157,78,22,1,146,157,49,26,221,224,77,82,153,133,257,199,23,84,35,101,168,142,260,4,141,224,1,262,5,154,44,201,49,41,92,163,107,81,102,160,144,91,60,31,62,10,111,69,4,16,45,41,21,33,46,14,47,28,97\nCastle Point,E07000069,male,85,83,106,61,87,18,35,5,195,117,239,41,48,167,46,145,157,114,112,103,113,187,102,10,215,209,146,69,106,136,154,132,84,121,114,74,63,187,5,108,198,232,25,173,80,97,118,58,260,167,218,13,69,122,116,59,34,69,227,184,43,177,108,193,10,212,143,43,182,131,101,3,118,113,175,220,193,217,147,66,60,82,65,6,35,66,47,65,31,20,64\nChelmsford,E07000070,male,264,448,204,73,448,460,35,128,245,143,223,263,121,151,232,456,435,267,215,375,373,208,458,282,180,368,298,463,456,397,114,453,266,326,557,196,482,467,65,312,106,136,508,76,404,77,605,142,320,641,305,152,316,85,395,245,300,133,242,41,60,132,126,302,196,439,273,321,343,211,161,216,214,467,259,350,240,238,152,112,219,213,174,214,190,131,128,49,34,85,162\nColchester,E07000071,male,102,66,63,220,36,415,198,468,167,43,79,60,104,65,510,195,98,60,197,308,306,556,500,474,221,254,124,254,282,221,175,44,385,390,298,381,93,239,473,310,54,547,556,5,297,466,528,45,337,603,557,352,108,481,305,420,263,282,517,556,282,104,325,25,337,374,233,301,391,46,297,56,403,403,9,30,72,252,290,247,22,125,192,35,34,72,122,16,20,58,149\nEpping Forest,E07000072,male,114,323,28,8,316,146,146,272,46,367,305,386,363,247,103,198,40,55,207,272,283,194,116,67,327,16,222,52,209,154,133,273,313,414,409,308,282,275,164,163,310,79,305,310,60,170,117,379,347,233,425,28,104,310,265,173,259,434,97,150,68,223,262,95,39,289,263,142,298,92,215,88,109,191,38,51,89,120,121,32,123,160,156,58,117,65,39,38,33,31,10\nHarlow,E07000073,male,306,150,280,182,200,131,220,257,285,72,140,164,127,67,159,64,43,218,30,54,154,31,25,52,236,214,133,130,78,201,171,115,9,161,298,132,367,215,250,103,41,323,270,129,210,101,32,180,171,149,89,28,13,143,93,179,258,265,88,151,186,125,213,178,175,46,23,134,157,109,48,10,67,23,108,38,7,104,34,35,56,1,54,54,34,13,5,10,34,15,50\nMaldon,E07000074,male,121,124,25,39,76,5,135,14,5,91,122,48,2,51,173,16,37,55,20,68,13,113,105,12,67,175,144,112,65,130,69,90,19,39,151,88,128,37,3,17,121,95,125,117,88,186,168,79,102,50,227,57,207,209,233,99,141,184,193,150,65,103,14,190,131,16,150,18,73,75,41,197,81,114,181,176,79,8,68,68,70,10,2,81,10,77,44,27,13,2,82\nRochford,E07000075,male,164,156,138,200,183,199,47,108,79,51,173,116,27,215,210,41,170,141,130,89,71,20,107,205,192,31,132,187,43,51,71,118,173,163,18,243,121,170,139,212,62,65,245,88,173,145,154,31,171,21,93,158,12,229,295,3,287,197,254,153,64,22,112,64,43,64,193,217,80,153,154,229,212,72,58,149,92,18,87,87,45,127,36,109,8,32,19,77,60,16,48\nTendring,E07000076,male,27,197,204,353,176,248,96,12,267,197,0,93,301,215,120,81,312,31,210,249,175,47,132,172,236,239,242,104,205,23,295,110,310,359,98,46,174,260,119,57,360,148,129,82,3,36,319,139,212,94,443,262,423,479,505,75,129,374,466,49,472,383,429,66,52,152,48,295,369,249,289,354,373,300,563,301,307,460,249,143,73,219,181,210,132,137,164,113,13,87,318\nUttlesford,E07000077,male,179,216,237,99,17,104,16,170,262,187,240,195,36,106,232,156,78,89,180,167,40,128,194,163,126,44,86,144,106,65,86,150,224,157,169,227,116,160,35,194,83,219,18,155,76,162,175,179,36,72,227,95,121,21,74,277,305,110,102,18,54,131,118,29,168,124,106,100,172,19,58,157,215,93,218,72,43,55,84,31,11,26,66,14,1,17,14,49,27,39,53\nBroxbourne,E07000095,male,223,214,73,58,68,146,246,84,127,10,241,151,171,134,154,132,161,278,257,116,204,217,240,210,169,57,232,126,72,59,136,132,112,168,121,142,26,268,56,306,183,315,113,74,233,118,310,72,296,235,41,230,97,200,213,182,316,278,276,271,271,175,248,175,137,209,154,63,40,102,21,139,162,49,133,74,144,97,114,46,50,92,1,100,49,37,10,61,42,32,106\nDacorum,E07000096,male,55,377,262,257,185,183,442,216,294,329,234,299,474,125,296,294,314,263,186,137,278,183,239,61,394,212,202,87,402,73,19,207,60,260,131,420,255,265,145,134,355,198,367,253,308,182,388,163,516,269,206,25,542,293,307,288,143,144,300,281,68,309,95,142,177,368,225,142,126,193,131,219,219,58,224,242,43,154,177,157,10,168,50,25,11,57,49,28,7,34,232\nHertsmere,E07000098,male,189,125,216,30,59,194,322,117,285,274,246,5,195,47,275,246,217,69,252,76,59,81,263,127,34,257,213,216,185,135,30,103,34,101,117,94,122,115,181,287,269,365,223,170,150,203,88,6,179,309,24,300,194,267,43,346,303,270,299,77,110,248,143,91,249,30,223,178,138,187,148,145,199,26,157,86,52,42,80,67,60,29,63,7,103,50,37,40,4,39,177\nNorth Hertfordshire,E07000099,male,56,81,106,124,263,61,376,28,67,385,191,150,121,384,47,96,234,188,92,160,109,59,40,155,211,268,229,356,356,352,165,74,368,43,180,233,369,246,142,196,142,212,421,439,72,402,288,116,104,221,319,446,175,32,27,451,113,363,78,59,80,353,375,51,259,237,205,9,18,180,41,185,209,177,16,114,212,117,64,131,71,94,105,37,130,19,107,37,17,25,147\nThree Rivers,E07000102,male,88,46,242,10,131,21,223,165,125,186,53,216,75,324,95,241,85,262,41,158,133,45,143,19,33,90,125,211,184,32,178,233,17,25,191,143,155,189,266,212,283,241,59,228,211,100,117,115,119,317,329,118,93,274,289,50,262,192,30,49,38,264,131,86,135,128,27,148,120,104,139,98,172,156,63,93,140,47,71,93,57,1,12,66,6,68,34,7,54,36,35\nWatford,E07000103,male,144,228,232,138,24,192,219,338,158,318,151,86,265,170,94,193,250,81,56,20,148,234,60,215,173,263,167,132,141,218,216,176,153,221,330,314,318,195,118,264,192,20,89,113,280,306,361,53,188,17,277,327,293,7,74,151,14,119,29,60,76,180,123,204,77,64,15,92,17,144,104,4,98,56,43,126,79,68,53,41,60,21,17,46,65,3,13,1,19,19,84\nBreckland,E07000143,male,5,124,309,322,23,371,304,92,131,176,9,136,236,93,327,43,23,70,253,1,30,114,59,268,125,367,311,240,133,51,210,344,416,372,8,196,298,46,376,315,415,53,291,39,333,53,218,150,151,430,38,271,281,214,437,393,267,48,264,205,198,361,38,283,209,400,185,154,144,305,214,7,10,482,427,54,220,250,127,77,78,187,5,33,185,100,18,113,84,40,184\nBroadland,E07000144,male,127,105,3,69,34,213,145,44,264,176,115,257,100,281,237,155,219,100,25,163,232,13,284,18,90,118,304,222,150,148,58,325,142,49,288,95,151,145,199,289,72,226,282,290,39,14,343,282,279,98,246,327,390,88,218,13,16,261,394,147,278,240,70,269,257,267,267,102,385,223,233,286,390,476,42,134,49,291,33,36,159,94,111,25,30,37,55,53,8,78,200\nGreat Yarmouth,E07000145,male,221,124,116,159,56,99,39,167,46,293,111,42,155,216,18,27,175,257,222,6,157,82,7,239,244,278,62,91,121,178,228,13,11,73,217,223,146,94,63,128,222,254,0,57,77,74,159,153,191,79,106,303,7,52,115,195,118,177,155,177,60,153,249,215,205,193,80,283,76,216,28,224,321,117,133,188,253,28,157,99,22,1,138,96,109,62,8,0,43,54,136\nKing's Lynn and West Norfolk,E07000146,male,240,284,140,9,369,20,387,329,189,165,186,67,398,378,154,314,381,188,171,311,284,309,331,332,108,401,48,287,158,403,176,391,75,186,383,42,134,142,44,89,28,75,70,265,178,87,153,162,420,335,89,447,134,308,82,528,175,469,95,479,398,220,231,200,158,345,71,127,265,192,131,376,168,110,484,124,23,198,213,123,90,80,216,5,215,140,134,66,76,5,254\nNorth Norfolk,E07000147,male,71,134,115,19,94,83,25,40,218,127,141,222,121,160,50,104,64,148,122,139,82,35,13,70,182,66,60,95,206,95,32,93,172,226,2,49,33,63,208,133,145,152,59,142,188,132,32,40,131,3,255,91,325,64,56,245,72,227,315,345,127,99,256,47,204,215,401,47,304,132,350,314,242,477,427,168,381,29,68,235,192,217,40,96,131,62,117,74,24,39,242\nNorwich,E07000148,male,118,257,231,209,190,272,46,271,358,135,5,33,269,225,163,5,295,333,70,375,880,670,355,209,142,292,161,592,243,402,521,407,246,23,219,499,44,378,40,195,125,72,386,240,399,236,130,152,106,129,309,322,343,291,99,186,327,303,10,143,236,240,145,200,76,90,264,184,204,143,147,159,205,197,81,187,186,34,72,44,0,19,24,16,15,61,32,55,20,14,149\nSouth Norfolk,E07000149,male,97,316,297,296,73,241,177,306,78,281,276,359,274,255,308,277,170,151,27,75,240,197,158,127,129,256,43,134,34,64,244,244,342,108,95,271,399,57,13,8,36,53,197,263,27,68,331,70,200,429,284,146,216,23,395,404,67,221,182,119,242,162,198,256,290,217,300,245,280,302,228,181,64,404,441,357,332,191,72,91,39,186,45,91,84,59,90,25,65,63,145\nBabergh,E07000200,male,166,194,29,176,197,116,219,71,133,159,225,191,155,28,111,6,91,112,43,94,122,169,78,213,118,56,21,192,76,159,128,89,218,145,211,97,22,80,181,191,38,214,33,179,206,61,197,177,15,208,300,237,164,257,198,145,116,217,298,125,214,278,322,130,90,132,140,278,173,136,154,286,140,53,320,167,146,183,181,171,62,14,84,46,82,77,47,15,46,45,44\nIpswich,E07000202,male,116,275,195,322,347,180,303,50,148,363,227,382,286,394,141,361,386,132,161,118,212,242,154,80,400,89,47,475,82,370,175,348,187,172,278,211,120,24,394,191,211,126,19,209,81,342,364,394,333,48,253,362,395,154,360,374,339,8,390,238,275,346,305,11,243,286,145,154,115,183,36,170,124,216,27,140,175,50,70,97,92,63,98,5,76,19,57,59,45,9,185\nMid Suffolk,E07000203,male,215,225,207,54,202,86,227,98,74,89,236,209,290,46,139,66,139,264,99,118,147,143,33,186,145,283,290,16,58,217,91,210,105,151,179,197,57,104,217,49,102,258,265,11,110,273,223,46,60,72,21,305,256,196,81,219,254,181,331,36,19,70,166,243,328,254,261,325,62,277,163,179,331,251,253,225,36,206,141,117,32,118,101,76,29,74,64,30,19,32,192\nSt Albans,E07000240,male,226,289,254,168,53,215,390,374,209,205,533,232,335,530,242,231,274,461,252,37,142,130,96,25,339,217,185,15,209,208,341,18,286,56,290,290,392,74,393,197,382,28,284,277,103,447,261,232,568,519,453,284,71,436,485,256,72,82,412,192,407,276,307,62,192,336,280,57,127,213,220,49,86,75,63,34,49,140,132,21,125,187,165,127,10,111,51,28,4,21,60\nWelwyn Hatfield,E07000241,male,281,104,248,49,334,157,212,277,185,269,208,129,187,18,23,140,111,124,279,402,250,107,515,178,436,264,221,338,69,227,385,38,235,28,229,225,160,89,201,190,234,321,117,95,205,144,195,55,317,97,189,76,352,177,37,275,216,64,190,229,5,291,105,128,73,208,171,113,139,162,156,163,195,109,190,9,65,159,49,94,21,80,48,23,7,22,49,62,44,0,106\nEast Hertfordshire,E07000242,male,84,174,377,4,24,361,236,221,191,65,230,234,335,410,291,450,346,238,225,104,216,50,89,153,242,134,145,108,56,312,115,78,274,453,61,419,155,334,280,439,374,320,423,233,362,366,347,497,523,537,388,514,287,381,324,328,170,442,312,329,420,260,204,140,297,163,212,93,311,207,140,206,18,250,325,96,124,116,39,92,114,148,92,159,40,15,13,17,6,74,210\nStevenage,E07000243,male,31,224,250,255,237,159,172,95,244,287,290,95,274,139,160,108,92,51,89,43,117,142,127,8,235,125,9,271,78,146,142,210,177,29,179,199,310,137,251,238,150,258,164,80,196,171,223,36,261,63,121,88,241,74,190,6,270,240,291,259,239,48,151,91,182,94,51,11,92,127,20,48,120,22,165,46,42,32,88,39,63,59,34,42,26,7,4,2,30,18,107\nEast Suffolk,E07000244,male,84,202,228,77,551,492,501,36,282,166,461,40,228,287,189,108,365,470,119,137,19,67,364,285,38,368,267,399,313,455,121,333,64,633,225,449,144,474,174,494,35,527,5,43,240,486,351,652,677,49,26,566,135,547,756,289,105,798,806,789,492,67,451,598,498,365,581,680,307,8,736,641,215,451,838,595,666,390,341,476,68,6,6,302,326,184,145,21,109,102,178\nWest Suffolk,E07000245,male,90,167,382,440,407,462,277,348,320,40,436,34,131,143,14,47,370,279,109,187,389,568,567,585,589,41,233,390,353,624,232,356,475,542,365,307,376,556,481,493,540,18,564,340,258,211,272,452,547,293,90,114,78,206,305,497,425,360,335,248,202,244,53,205,67,68,352,204,153,237,90,164,229,84,343,293,337,341,190,12,76,237,233,108,186,65,89,21,47,8,4\nCity of London,E09000001,male,9,7,3,2,5,7,4,6,9,7,5,8,7,2,6,8,6,7,8,3,18,21,26,37,46,14,56,29,62,21,46,3,29,50,4,36,4,26,6,32,29,12,16,12,3,23,6,25,22,31,15,18,40,11,16,1,23,0,5,9,12,10,17,10,8,13,7,1,1,1,5,8,9,7,4,10,6,0,4,4,10,4,3,3,2,2,1,0,2,4,9\nBarking and Dagenham,E09000002,male,439,432,550,88,825,629,659,435,356,580,275,131,948,923,744,748,628,199,201,225,78,485,494,646,145,664,532,155,487,257,636,194,506,829,710,58,36,143,844,381,450,59,264,243,665,547,644,463,519,137,31,433,470,663,428,528,17,47,197,402,0,75,386,226,296,292,11,272,109,180,127,193,102,180,22,110,136,23,119,10,15,69,0,47,13,70,0,38,6,24,10\nBarnet,E09000003,male,237,471,304,748,459,689,729,429,611,640,1168,1184,158,248,998,1101,779,986,450,592,680,682,429,1229,498,480,757,93,641,830,93,170,1120,479,540,582,4,881,816,54,279,264,713,451,390,538,402,954,1174,341,857,1142,290,561,936,492,575,1014,115,104,630,417,168,537,450,772,300,173,602,523,470,282,648,638,414,433,40,148,55,64,151,63,37,100,76,81,127,200,126,75,22\nBexley,E09000004,male,512,25,24,553,276,766,589,92,387,78,705,361,810,707,463,459,244,15,523,472,368,617,379,74,495,164,303,394,265,154,116,284,485,360,94,528,376,171,419,101,252,293,74,438,59,579,1,197,462,755,640,33,694,642,221,739,819,200,538,716,205,579,158,281,77,524,29,447,34,60,4,370,279,134,510,89,128,206,299,174,67,254,225,91,13,125,40,53,69,31,321\nBrent,E09000005,male,352,713,672,62,262,867,378,205,574,847,1055,217,512,63,8,404,174,292,322,534,841,797,476,1043,1227,548,1419,1276,310,1379,596,518,232,808,215,882,1296,1238,1116,1448,868,682,1074,962,781,468,853,677,775,506,36,404,63,472,330,196,968,648,641,318,5,390,436,133,674,499,316,108,432,217,335,7,408,389,331,22,131,7,155,22,249,194,26,152,144,9,154,96,71,77,214\nBromley,E09000006,male,280,56,855,786,158,427,640,241,924,963,225,470,716,169,443,930,947,635,332,321,128,557,631,231,62,766,628,575,439,116,260,917,672,263,608,310,145,151,791,999,555,955,374,244,398,479,611,580,348,676,511,346,387,230,10,297,665,341,136,684,898,269,680,548,700,271,218,261,322,17,278,542,633,708,750,87,63,245,210,154,241,109,55,250,265,256,93,4,64,77,138\nCamden,E09000007,male,508,212,417,342,294,450,294,481,359,262,348,344,325,308,444,476,484,108,238,597,404,307,647,691,355,779,648,37,518,971,157,449,552,91,124,215,180,613,255,509,530,458,89,156,120,414,183,436,421,426,606,38,124,197,4,375,260,587,370,419,163,99,5,142,218,352,117,300,21,171,296,11,39,143,65,174,12,128,48,122,45,100,82,8,26,67,68,47,52,25,125\nCroydon,E09000008,male,135,689,81,1212,185,801,1198,204,840,146,474,48,320,1141,560,428,1235,1223,350,88,336,865,514,762,140,905,958,894,1243,345,712,154,1416,462,1099,11,225,465,783,347,1327,371,102,404,934,390,40,408,410,219,1216,1146,848,446,355,366,917,136,319,841,402,508,588,814,612,616,138,650,586,590,347,32,26,324,142,154,232,128,55,315,278,326,299,197,79,201,143,114,40,82,227\nEaling,E09000009,male,29,87,436,822,697,758,96,658,870,440,811,764,306,495,65,70,161,522,370,187,81,484,935,445,92,1130,445,65,898,537,1170,159,625,1322,614,619,465,1303,1050,1426,414,427,298,98,213,1061,452,742,778,971,568,433,242,521,377,1027,855,849,1030,43,928,140,105,592,360,418,389,616,443,235,11,203,197,491,376,216,205,147,189,288,136,163,4,205,204,126,25,122,72,62,201\nEnfield,E09000010,male,194,988,863,598,9,283,1014,292,579,1232,548,9,450,877,876,233,284,937,801,339,721,890,281,546,542,789,468,705,34,244,649,56,692,366,612,699,177,11,605,384,170,267,334,510,37,777,932,360,624,67,735,369,6,290,736,489,962,391,424,576,355,264,657,88,294,537,505,104,337,25,12,355,443,109,219,306,101,205,317,21,207,12,89,205,221,66,21,118,26,47,255\nGreenwich,E09000011,male,379,892,459,53,74,786,846,493,767,129,872,761,486,869,886,58,761,381,430,316,635,574,320,789,675,557,199,655,1084,1123,1062,618,1067,996,373,576,371,779,238,1090,17,596,1016,342,20,929,244,295,526,586,3,687,937,8,580,25,93,63,685,588,373,563,121,177,147,518,327,30,348,244,196,166,67,57,133,266,257,255,111,44,57,41,102,75,56,37,25,71,59,42,67\nHackney,E09000012,male,650,685,101,729,371,274,696,463,685,486,599,106,365,48,676,504,295,559,310,345,513,445,709,62,194,465,1105,1145,891,1351,1120,308,273,596,1256,603,788,887,900,583,728,938,417,352,203,580,46,187,278,425,684,405,373,446,339,140,267,424,114,4,394,87,464,246,143,186,273,160,74,50,264,164,182,207,136,105,124,61,75,33,80,43,94,35,35,27,25,57,19,34,38\nHammersmith and Fulham,E09000013,male,297,148,371,315,386,269,143,260,315,313,182,36,77,15,289,74,53,392,228,93,514,546,484,757,172,852,267,38,344,226,707,96,297,526,57,241,462,479,532,622,517,371,21,279,348,351,157,532,7,519,366,383,388,408,186,456,108,396,102,389,81,78,287,72,24,102,230,85,87,34,72,112,110,150,0,165,36,35,114,1,71,2,89,25,72,64,45,32,24,8,75\nHaringey,E09000014,male,641,22,30,346,724,571,506,281,543,721,381,566,156,670,523,111,361,407,628,397,91,605,334,119,609,319,695,849,484,1207,653,847,1208,1023,604,930,1143,804,511,294,177,821,892,128,66,47,347,473,445,495,828,567,609,289,344,258,76,496,82,554,297,231,456,377,440,339,297,380,192,9,319,144,285,131,248,89,147,147,66,99,58,58,153,115,6,47,50,25,8,9,48\nHarrow,E09000015,male,416,181,225,667,777,48,620,431,321,795,474,315,3,389,408,423,742,622,656,290,6,593,618,759,306,505,175,749,107,785,814,1001,859,164,565,914,809,108,583,355,984,844,515,877,280,762,163,404,124,624,45,78,421,415,283,466,265,42,690,229,343,337,208,601,283,310,38,152,267,59,25,450,75,189,34,50,213,305,225,34,253,241,5,53,77,87,57,11,72,43,93\nHavering,E09000016,male,328,812,483,71,426,188,297,413,10,67,443,208,619,105,225,706,176,626,683,474,391,403,621,548,711,511,608,597,430,609,548,749,656,396,675,577,692,278,491,652,900,432,48,179,253,298,387,319,629,64,361,556,498,90,293,519,443,468,314,789,199,646,21,289,437,543,330,377,13,400,90,58,68,385,246,18,316,25,341,200,170,144,182,160,188,36,67,114,1,10,301\nHillingdon,E09000017,male,766,496,572,40,1013,768,903,20,394,447,785,573,46,883,41,15,62,12,855,935,358,749,706,861,212,857,226,522,627,176,339,569,232,106,706,601,1004,1052,921,780,620,932,342,451,350,136,667,449,193,62,72,605,874,69,239,648,108,700,839,495,755,284,589,662,112,448,369,220,83,233,438,412,333,2,84,200,191,3,121,255,140,178,209,28,59,97,63,25,89,25,179\nHounslow,E09000018,male,718,171,270,231,399,705,258,909,865,424,559,862,153,769,714,702,102,244,500,680,732,413,632,421,298,957,8,749,13,672,798,1079,407,532,567,357,338,182,50,98,746,761,987,446,86,245,197,945,835,442,123,971,224,761,865,434,733,787,431,608,592,523,458,431,1,469,141,157,236,144,117,354,97,382,147,81,228,23,216,150,80,62,78,64,49,104,27,42,73,11,18\nIslington,E09000019,male,76,351,165,504,404,417,241,100,196,459,141,195,66,372,90,80,405,446,449,340,528,275,266,299,67,605,40,626,1092,351,223,247,569,802,925,996,969,58,550,624,155,142,141,15,106,504,205,390,221,103,15,491,69,141,531,118,532,249,369,106,117,425,215,84,169,30,113,204,229,262,250,220,14,110,200,76,26,31,129,16,88,116,35,16,58,36,56,9,30,3,43\nKensington and Chelsea,E09000020,male,104,223,200,33,61,165,229,171,288,156,266,233,324,87,150,154,38,210,193,209,91,3,139,544,402,375,249,149,549,382,205,299,253,60,155,143,90,67,169,66,368,228,158,306,323,340,294,431,204,468,239,368,334,422,511,455,178,108,202,218,119,62,222,337,275,75,265,76,237,51,214,213,214,217,104,61,143,75,89,24,89,62,95,79,29,57,72,49,15,10,123\nKingston upon Thames,E09000021,male,149,62,306,317,5,134,472,256,305,262,321,141,129,293,474,90,347,294,34,325,389,471,397,208,325,395,399,117,244,402,369,365,284,284,316,103,111,410,343,564,575,201,375,445,528,434,600,160,588,550,216,588,20,531,83,437,238,513,117,22,347,269,86,197,50,48,281,293,42,77,224,290,178,27,190,78,16,39,96,132,67,94,9,33,85,38,29,0,24,14,186\nLambeth,E09000022,male,651,705,577,704,217,56,639,743,58,102,218,344,385,483,806,660,440,332,282,694,703,691,508,150,641,1291,1282,2041,1241,474,1501,1152,1202,1649,1416,1344,900,903,199,659,429,351,782,662,929,441,106,367,578,521,490,568,787,419,206,940,738,845,253,723,615,8,474,586,536,106,87,364,363,101,187,221,177,92,110,168,83,95,4,12,152,133,42,70,51,22,48,31,50,0,8\nLewisham,E09000023,male,276,72,913,774,709,622,198,496,729,563,736,325,414,353,309,556,542,745,632,336,200,58,531,186,961,966,385,158,992,13,319,1060,981,986,580,158,605,857,508,57,536,234,389,125,297,629,939,45,358,554,528,200,827,211,337,252,275,33,5,252,109,318,643,97,202,236,105,423,18,217,108,256,122,38,96,30,188,167,61,148,63,24,55,87,92,31,57,94,73,46,90\nMerton,E09000024,male,481,507,656,642,619,526,271,365,389,174,523,615,416,596,14,357,275,27,160,323,159,212,476,294,95,99,220,394,301,155,652,662,310,657,738,857,406,361,448,70,36,59,205,24,447,703,589,171,734,289,489,182,331,515,595,391,79,72,424,367,197,201,422,367,242,314,334,281,289,22,240,254,274,238,312,101,104,17,106,105,3,24,80,130,55,13,2,64,70,9,17\nNewham,E09000025,male,510,718,644,654,856,610,789,1071,1183,226,1018,880,427,1051,805,597,971,247,82,829,728,747,798,1624,542,309,373,1738,1335,11,1808,709,117,650,399,397,766,1339,930,727,998,1114,983,196,85,172,852,48,612,153,908,989,407,832,9,678,431,712,420,449,451,480,591,69,492,413,24,339,15,51,54,5,192,48,31,180,166,95,66,38,12,77,18,103,40,33,74,42,27,15,138\nRedbridge,E09000026,male,5,541,110,997,969,735,30,564,198,855,698,201,911,984,343,670,845,136,128,871,37,871,246,538,617,846,831,352,772,766,3,190,299,691,504,75,1213,1239,940,365,924,313,861,797,562,880,473,352,349,455,523,267,546,944,198,501,212,301,363,451,350,231,406,68,215,202,190,262,406,397,30,262,299,138,62,270,162,32,132,230,181,109,157,131,167,102,77,82,22,59,119\nRichmond upon Thames,E09000027,male,215,422,296,341,388,237,10,105,61,626,318,131,682,550,311,49,422,90,89,290,87,341,243,283,7,304,298,267,469,79,44,476,57,310,384,449,587,606,535,368,396,13,639,509,284,143,573,515,697,244,676,413,610,343,336,93,114,80,47,590,415,335,382,117,44,276,141,350,347,80,11,80,302,111,384,252,123,3,49,10,18,38,14,3,44,87,43,83,53,54,145\nSouthwark,E09000028,male,114,105,125,105,180,728,186,371,750,342,665,578,846,550,110,563,77,23,305,67,277,835,827,608,696,1656,222,77,646,1237,561,1751,1078,1253,860,221,1252,178,271,389,1091,617,717,715,587,262,518,364,524,735,902,950,931,295,264,546,221,716,581,191,458,285,431,356,47,100,18,107,58,271,253,27,130,213,317,64,86,31,24,153,72,103,7,20,16,33,73,41,52,0,120\nSutton,E09000029,male,224,122,377,627,57,679,189,415,59,21,557,398,541,536,142,377,666,512,283,140,36,127,412,111,98,393,370,271,599,447,421,515,610,130,487,728,54,162,500,44,719,272,223,302,506,281,89,189,730,569,162,135,397,62,41,144,496,491,234,229,128,93,193,9,132,122,279,156,74,169,251,279,364,128,355,62,44,214,146,4,72,18,47,136,1,146,7,87,9,1,13\nTower Hamlets,E09000030,male,367,173,854,11,799,269,723,338,719,4,555,277,41,592,22,655,183,640,701,345,6,248,510,466,1817,780,1131,1864,2047,1324,2048,185,1237,186,753,1256,683,480,81,463,342,1165,23,676,245,247,626,648,513,805,549,338,35,19,173,55,417,150,515,381,183,476,165,293,335,17,169,120,223,88,48,86,181,63,152,80,85,7,18,72,13,1,30,49,64,22,32,18,5,9,66\nWaltham Forest,E09000031,male,332,522,497,813,275,869,818,289,66,727,286,95,670,329,122,818,584,637,13,187,49,72,309,24,588,697,1016,948,832,433,431,439,89,504,969,510,1194,1076,860,379,569,225,121,882,422,514,898,267,77,574,85,595,362,437,428,421,258,351,209,405,617,210,318,189,490,130,169,75,309,310,129,122,142,327,248,119,37,146,42,160,25,90,0,75,45,3,91,41,60,43,26\nWandsworth,E09000032,male,551,624,87,738,661,528,475,745,654,296,513,513,619,744,369,630,404,169,129,7,291,658,432,34,1361,1356,1187,475,1880,270,1255,366,1429,1281,1251,1437,3,898,765,711,1269,555,56,43,445,810,567,151,79,469,155,733,386,167,211,408,223,619,160,164,244,14,501,240,250,78,253,243,102,322,295,182,226,238,3,183,228,211,111,4,75,34,47,95,127,38,8,55,49,7,135\nWestminster,E09000033,male,384,94,263,164,266,179,131,290,10,406,62,340,304,453,199,330,298,12,348,418,440,584,189,174,781,933,857,630,639,107,12,821,797,569,703,146,220,86,153,74,350,678,168,110,518,31,207,638,609,204,364,191,230,148,396,394,475,194,115,13,143,158,78,356,399,50,192,244,275,59,213,70,12,147,264,138,158,9,122,161,112,79,141,63,68,19,33,14,14,29,148\nMedway,E06000035,male,763,332,100,756,236,1,796,625,160,796,824,190,131,300,287,641,707,794,516,594,722,6,448,665,484,597,710,658,344,847,534,267,136,190,923,120,213,399,321,65,157,503,391,427,346,98,510,168,537,172,482,312,894,74,94,550,846,462,860,591,541,702,119,414,367,19,349,281,329,201,257,129,450,426,636,1,460,244,264,269,122,191,162,149,183,17,76,44,56,30,188\nBracknell Forest,E06000036,male,162,177,328,76,7,32,185,29,170,323,203,186,94,298,357,399,18,286,275,22,87,204,114,193,335,389,62,237,184,139,93,332,402,367,369,142,137,221,210,321,49,211,252,392,411,77,237,120,428,384,68,75,242,368,198,98,339,145,157,319,368,113,249,303,4,176,112,96,176,161,207,153,63,21,203,172,101,15,76,50,99,12,101,96,40,55,9,31,21,38,64\nWest Berkshire,E06000037,male,231,231,126,408,439,171,205,311,313,365,224,514,141,335,343,258,217,344,282,86,331,287,376,226,367,59,371,288,261,270,363,230,349,464,3,365,250,84,455,121,327,476,147,483,54,474,129,458,46,142,153,328,550,19,381,402,561,280,534,358,294,250,436,182,300,340,193,69,281,238,270,264,21,231,286,120,165,53,200,94,119,80,20,43,53,56,46,45,3,43,234\nReading,E06000038,male,433,392,140,95,368,547,237,244,492,490,5,499,58,401,369,82,209,332,419,635,462,314,174,320,67,487,182,215,395,574,580,25,240,547,624,152,356,502,260,606,679,349,562,180,562,3,196,292,141,300,484,441,152,385,297,250,321,342,8,373,16,70,157,302,39,0,42,262,265,139,4,91,7,275,35,184,13,24,5,25,13,46,0,12,105,86,66,34,45,15,70\nSlough,E06000039,male,5,410,486,506,551,224,298,242,70,318,259,557,64,668,106,305,358,149,396,305,204,295,318,414,166,283,464,252,357,217,369,189,111,180,157,187,480,237,383,155,532,697,679,531,45,514,434,498,91,332,362,35,113,396,273,267,191,109,354,238,311,331,285,287,178,208,137,53,244,27,47,60,42,139,39,12,91,67,19,2,68,79,9,49,19,59,12,49,45,26,71\nWindsor and Maidenhead,E06000040,male,68,279,84,291,329,430,120,341,378,191,59,444,454,466,152,528,144,333,11,223,84,122,169,332,142,189,335,15,157,224,41,435,340,127,364,52,198,8,320,462,423,43,102,63,209,514,228,480,318,514,587,379,510,141,50,242,72,11,141,83,105,3,285,80,210,84,267,326,133,297,245,92,56,85,4,175,238,178,166,191,64,114,152,29,117,27,60,45,86,17,153\nWokingham,E06000041,male,317,71,80,472,319,425,492,366,494,408,591,459,157,21,21,168,94,143,372,50,96,190,330,367,312,375,206,18,314,84,260,289,480,390,179,452,166,548,606,291,639,223,567,256,612,166,326,631,240,601,234,504,65,382,536,132,177,375,215,323,354,287,472,201,74,287,365,127,11,110,187,51,127,154,187,120,305,298,126,74,123,120,42,92,137,6,46,42,93,75,141\nMilton Keynes,E06000042,male,208,32,201,616,264,792,487,828,827,1108,29,538,61,945,190,898,591,382,67,452,97,124,761,757,114,23,899,836,393,176,486,472,871,776,934,893,612,522,217,253,127,469,1103,260,649,695,654,971,278,186,653,196,26,371,478,187,745,519,442,471,288,677,219,409,91,562,257,329,154,485,276,438,368,324,303,184,240,40,15,227,178,114,19,34,73,13,23,82,9,35,117\nBrighton and Hove,E06000043,male,335,320,199,372,346,336,433,383,175,97,488,563,563,240,330,514,104,151,406,1134,1129,341,293,234,617,839,546,563,699,48,685,144,143,731,303,857,544,890,711,699,566,112,899,497,46,831,508,268,966,400,411,438,164,878,774,245,947,318,386,501,582,675,267,454,544,45,230,461,92,124,121,331,4,128,55,139,119,157,220,12,196,71,115,104,170,17,71,41,55,15,76\nPortsmouth,E06000044,male,315,253,91,207,374,578,563,183,347,499,77,355,136,8,225,370,33,214,841,410,1112,67,596,51,20,39,103,32,734,641,292,106,491,485,492,316,377,363,138,222,329,164,501,287,322,147,193,306,55,265,10,547,329,9,521,304,264,479,594,80,1,150,184,206,142,384,85,393,55,121,302,9,279,75,17,146,161,244,72,145,12,125,144,84,137,75,16,82,8,24,130\nSouthampton,E06000045,male,566,409,288,389,546,13,257,91,198,9,574,392,462,123,549,553,403,505,333,241,835,595,1380,1191,438,148,10,639,4,617,474,692,640,883,801,551,938,605,74,866,140,546,778,300,275,578,260,402,234,208,97,623,196,661,695,211,571,399,3,387,508,184,114,489,192,121,336,128,149,35,177,78,224,138,277,281,115,239,182,169,93,101,3,51,81,41,90,37,47,38,147\nIsle of Wight,E06000046,male,131,264,52,82,232,315,240,295,278,77,187,211,277,116,72,274,218,74,182,169,118,83,248,228,133,184,49,259,9,87,312,271,120,154,78,118,277,278,17,296,167,156,35,271,108,318,82,15,308,101,438,328,318,197,168,225,128,110,394,123,304,19,253,37,207,300,230,188,384,86,126,59,451,382,70,25,104,365,292,69,53,287,233,140,97,162,71,136,17,26,226\nBuckinghamshire,E06000060,male,280,901,1256,1335,1201,1402,454,397,1091,1260,85,1870,1296,248,407,1492,1547,1537,369,799,619,44,1210,687,121,1362,353,177,256,432,586,418,340,79,889,1405,1413,1329,1037,1526,746,1889,1861,850,627,1673,453,758,411,811,1322,24,1426,1955,358,621,1457,290,516,340,1001,111,417,1124,899,85,297,521,1099,871,1001,677,1164,701,482,976,485,511,198,781,511,144,478,202,372,49,108,9,313,210,213\nEastbourne,E07000061,male,203,170,167,83,76,123,234,102,137,167,80,227,191,171,29,153,32,42,232,28,181,139,239,90,4,191,12,199,133,109,96,187,18,73,105,19,152,143,249,180,297,12,218,38,156,243,220,55,186,277,109,28,115,58,232,38,91,193,283,64,193,190,266,70,126,242,60,227,96,129,186,129,116,229,8,142,86,143,77,90,49,37,50,117,38,27,75,84,52,37,60\nHastings,E07000062,male,14,40,213,167,201,241,57,199,258,40,215,15,68,27,65,53,82,221,73,119,66,95,233,117,233,192,137,9,191,256,119,107,137,24,111,18,35,226,45,101,73,101,183,169,156,129,213,87,48,180,55,104,115,257,12,161,213,273,129,52,20,244,234,36,62,252,160,144,157,151,247,139,155,172,206,54,181,143,30,3,53,80,47,14,31,8,30,20,14,14,1\nLewes,E07000063,male,211,91,121,2,249,58,172,228,102,275,128,298,191,78,14,156,141,155,160,28,131,111,42,239,184,56,42,128,27,147,132,189,48,206,70,148,89,66,72,96,246,245,180,15,160,143,151,264,324,166,183,289,135,64,349,108,193,189,337,176,80,134,3,146,136,23,180,1,69,139,228,135,101,102,308,102,172,85,218,15,137,67,67,83,8,113,89,70,62,69,33\nRother,E07000064,male,171,144,176,145,70,147,65,61,113,232,204,46,94,74,3,143,252,203,18,129,25,85,98,152,149,156,127,63,101,22,175,172,168,88,146,16,160,93,3,21,203,122,1,132,40,33,54,72,33,85,109,95,289,130,272,194,183,275,39,288,72,12,197,79,204,28,61,172,319,56,300,267,40,249,116,116,16,245,83,6,99,91,33,8,166,3,24,62,11,75,196\nWealden,E07000065,male,172,307,23,26,36,278,126,11,200,349,245,33,120,427,188,351,328,15,55,229,277,217,291,284,9,21,44,75,279,354,352,216,347,225,244,112,95,121,158,201,221,103,55,274,280,167,294,159,198,377,92,330,299,59,151,172,443,411,268,55,421,29,399,271,261,163,246,308,33,327,142,342,214,129,145,287,412,60,139,288,243,174,105,156,33,98,11,128,20,70,46\nBasingstoke and Deane,E07000084,male,91,468,12,457,411,430,517,304,318,316,397,529,336,311,235,205,103,35,227,209,2,62,303,330,292,171,50,303,545,120,403,589,374,121,600,655,471,293,395,432,359,596,110,477,562,358,642,84,495,623,14,534,338,106,480,188,242,360,136,101,428,82,272,68,145,31,81,256,152,69,163,83,245,327,162,178,320,234,11,186,4,118,166,92,52,4,7,39,49,37,153\nEast Hampshire,E07000085,male,268,92,129,149,83,32,29,284,82,144,253,246,160,296,301,325,360,254,298,237,52,59,228,34,117,75,182,172,225,41,317,223,65,228,83,199,171,32,62,224,199,250,218,282,297,86,338,169,106,339,391,298,100,83,230,270,445,292,250,253,182,85,418,168,140,218,161,109,121,204,181,285,334,191,193,288,135,176,34,154,36,22,119,43,93,78,58,77,33,25,196\nEastleigh,E07000086,male,278,128,295,256,306,169,2,123,15,326,372,88,7,322,6,396,386,8,330,19,230,103,88,5,355,336,86,104,284,75,133,116,308,430,64,440,449,418,330,353,93,64,307,138,283,28,77,342,300,253,123,98,219,198,361,49,443,217,254,181,131,368,35,272,80,89,235,318,63,21,78,130,315,140,23,130,61,236,180,13,173,148,79,18,52,119,83,78,51,68,223\nFareham,E07000087,male,44,52,143,180,55,72,293,211,196,102,135,4,182,96,30,127,298,154,227,215,117,138,165,56,128,182,231,11,68,160,202,257,171,263,320,286,302,166,248,190,205,268,292,221,291,59,144,56,280,116,151,149,335,74,345,42,190,205,2,426,214,47,87,180,162,298,176,155,185,74,70,259,324,369,392,1,201,246,120,36,44,33,156,67,66,86,106,51,22,15,122\nGosport,E07000088,male,74,108,58,124,166,70,213,159,96,58,56,20,154,149,29,205,114,194,26,175,185,42,209,138,126,175,118,27,39,6,186,177,128,34,138,146,20,134,153,108,162,19,78,179,1,202,200,119,185,122,182,118,3,100,268,36,249,199,110,19,26,98,135,197,107,155,201,222,17,149,156,94,109,171,130,84,2,137,53,64,105,7,3,12,54,68,7,36,37,44,130\nHart,E07000089,male,202,90,223,197,218,294,180,184,301,33,24,85,74,200,140,2,148,171,41,20,191,196,114,195,153,62,248,52,182,145,279,220,143,157,209,249,171,78,48,270,277,111,158,154,37,4,197,13,72,363,324,168,26,39,201,211,186,5,103,322,80,240,53,194,115,163,35,202,213,38,45,32,223,24,129,26,105,61,113,41,138,89,84,15,70,83,72,38,3,12,20\nHavant,E07000090,male,130,70,124,253,321,93,181,330,188,178,281,267,157,115,199,298,103,335,114,119,107,25,80,20,207,142,270,38,72,85,205,7,266,30,110,206,106,233,274,175,269,220,231,138,171,64,178,192,275,215,190,47,86,269,425,215,98,379,402,229,361,74,201,200,71,307,279,19,204,224,179,113,94,218,412,287,2,244,119,93,14,157,160,128,19,78,98,9,109,39,21\nNew Forest,E07000091,male,274,304,194,202,114,298,260,259,205,461,175,2,24,380,263,423,453,197,162,252,311,206,266,225,262,338,6,256,13,238,120,369,292,159,12,258,133,286,119,282,430,104,316,194,75,417,3,212,444,164,550,223,164,439,87,353,391,522,163,277,532,363,237,364,424,146,122,42,462,455,421,425,335,688,594,460,51,327,278,142,226,187,124,233,197,49,137,24,10,107,46\nRushmoor,E07000092,male,16,85,229,217,94,6,325,138,148,239,106,175,123,288,205,103,96,80,156,137,149,150,99,266,74,46,18,195,186,120,335,37,32,230,203,96,305,109,52,261,210,198,145,110,174,168,205,134,69,73,225,280,150,190,108,8,218,257,301,199,22,211,54,74,120,35,66,75,19,115,143,63,50,181,45,116,82,82,50,75,63,62,69,73,10,27,17,23,21,25,1\nTest Valley,E07000093,male,188,154,316,297,30,373,377,229,390,46,133,118,283,260,97,150,46,266,50,209,53,108,53,12,303,167,33,75,10,40,48,143,238,147,361,384,192,242,141,49,406,343,51,284,3,369,106,362,241,356,39,354,136,378,266,497,20,353,12,65,294,89,367,65,359,329,131,118,231,25,79,130,317,37,301,268,208,135,200,207,22,168,120,81,100,102,12,62,45,34,93\nWinchester,E07000094,male,269,191,164,262,325,181,2,258,83,374,244,178,329,368,101,370,383,168,258,364,431,277,277,261,251,262,4,7,169,279,165,238,37,149,302,176,201,67,264,210,181,225,103,189,191,306,69,44,96,277,80,89,4,366,234,308,135,135,290,323,107,111,7,157,157,45,257,257,126,120,101,172,17,154,270,142,290,85,155,122,80,156,88,41,138,75,67,79,70,38,126\nAshford,E07000105,male,234,350,319,227,160,31,114,174,359,322,318,93,41,174,312,203,402,160,129,238,103,218,188,187,165,106,367,71,252,328,88,135,95,91,105,358,285,223,161,222,177,292,299,361,261,295,63,78,151,16,188,12,226,450,183,464,295,267,60,186,263,84,224,74,137,60,38,195,171,81,139,36,167,212,218,180,95,2,2,165,179,149,4,31,62,64,105,17,22,25,84\nCanterbury,E07000106,male,79,99,163,198,283,288,381,278,183,38,187,383,75,342,25,315,25,364,559,659,512,34,478,325,196,293,335,82,226,120,354,318,14,232,107,77,62,77,60,176,282,265,343,281,284,85,54,34,226,237,189,437,342,145,200,24,387,192,379,66,256,355,293,18,154,112,233,149,322,261,377,154,260,183,457,340,343,116,268,219,32,125,33,180,146,24,37,71,26,57,70\nDartford,E07000107,male,267,90,303,145,402,90,179,68,323,10,410,76,353,321,89,160,126,51,134,220,23,101,112,74,149,37,218,10,69,77,407,428,349,221,266,266,155,322,134,360,71,104,12,333,93,200,366,292,198,100,130,100,361,352,111,205,304,296,139,273,221,230,236,74,106,113,9,82,59,25,125,102,11,166,158,61,121,25,46,41,68,43,35,65,80,21,9,38,21,16,122\nDover,E07000108,male,9,17,215,199,182,98,174,65,166,49,169,108,48,131,216,130,69,265,143,87,124,249,86,292,139,99,211,258,186,140,269,304,275,241,247,43,54,196,224,64,257,172,4,263,33,294,120,136,109,142,377,146,18,232,310,396,24,329,20,324,220,35,402,104,136,284,157,236,4,319,167,128,319,14,402,38,124,22,233,142,79,180,119,109,81,35,0,17,21,52,133\nGravesham,E07000109,male,142,162,210,327,38,4,276,55,259,135,36,35,175,182,246,362,173,322,124,22,57,255,255,120,175,238,253,62,321,243,275,181,207,125,151,146,118,262,96,228,37,52,131,167,73,267,40,193,142,168,45,313,117,126,228,249,227,194,276,27,60,218,252,108,129,213,1,158,111,72,166,36,193,231,70,121,172,52,145,63,98,122,35,39,17,75,29,30,32,44,117\nMaidstone,E07000110,male,294,131,274,417,108,13,35,129,196,388,366,514,281,403,319,351,289,103,221,70,150,207,333,14,149,438,15,326,326,187,164,429,444,545,224,75,60,549,246,576,142,449,54,161,322,322,43,130,169,103,412,106,319,544,172,190,438,326,374,188,455,252,115,463,65,382,347,155,185,364,57,201,210,327,142,35,74,222,167,181,18,129,68,27,4,69,11,97,39,82,169\nSevenoaks,E07000111,male,62,73,146,14,123,24,330,35,269,7,125,305,57,276,45,240,359,292,293,150,24,168,98,45,246,229,93,138,209,12,119,256,160,14,32,20,118,161,134,106,329,141,56,26,277,360,379,128,183,61,1,73,361,131,438,91,144,178,384,135,57,10,78,229,209,23,141,102,109,134,135,208,311,180,235,65,43,127,39,87,110,134,119,92,87,8,82,81,25,15,204\nFolkestone and Hythe,E07000112,male,154,164,145,216,150,196,151,251,107,157,273,116,56,14,77,211,194,221,132,182,98,92,44,10,267,272,202,186,177,140,229,178,107,210,202,230,176,248,18,35,42,205,171,70,225,85,84,152,270,167,320,139,41,386,228,103,281,67,300,330,212,107,44,316,273,4,193,242,198,216,184,274,162,256,399,62,52,207,151,183,64,10,17,13,21,56,18,52,37,30,91\nSwale,E07000113,male,189,425,57,169,366,383,245,385,500,395,140,319,35,18,286,314,360,70,115,4,299,123,75,144,433,306,1,206,157,294,136,281,511,337,340,477,34,325,186,271,331,111,202,235,188,266,85,338,176,351,430,421,179,197,289,159,435,440,329,413,277,257,314,12,362,278,109,191,162,29,291,103,341,337,131,275,35,168,141,192,27,77,55,76,68,24,13,19,29,55,4\nThanet,E07000114,male,280,226,157,144,218,128,156,89,67,413,280,93,338,321,277,209,25,19,285,50,271,160,49,268,310,17,339,127,138,249,315,67,252,70,117,170,29,42,365,2,89,249,292,85,179,164,343,149,423,181,380,38,49,23,346,435,10,92,258,421,169,347,49,444,346,357,386,367,116,91,383,297,392,221,178,219,135,44,216,159,181,90,31,50,18,54,35,30,8,72,49\nTonbridge and Malling,E07000115,male,313,11,243,103,27,159,89,214,245,211,273,160,307,254,202,83,313,224,301,122,113,166,210,169,170,128,158,126,80,72,175,40,148,137,84,118,177,198,260,81,22,172,205,23,215,201,297,44,67,115,262,219,448,141,466,171,333,342,120,81,73,35,265,81,13,106,227,142,180,37,208,189,108,155,207,226,42,154,46,16,174,159,43,20,52,14,95,39,24,4,85\nTunbridge Wells,E07000116,male,264,274,10,98,86,207,178,87,212,319,185,62,11,283,275,148,173,64,72,179,1,78,114,144,32,106,133,201,142,155,92,26,146,32,23,128,292,161,88,38,102,283,23,168,181,79,397,65,419,252,363,26,348,376,424,273,303,140,163,324,204,122,226,33,238,33,126,201,126,124,128,213,261,214,257,133,144,43,160,158,95,58,39,15,78,89,76,77,51,49,155\nCherwell,E07000177,male,193,190,108,142,113,215,266,478,206,424,217,395,386,99,472,449,147,231,276,193,197,130,195,236,37,177,284,356,284,519,104,362,485,360,470,39,82,228,64,387,492,300,335,21,89,442,104,0,145,159,265,242,307,428,378,567,2,336,455,321,490,250,414,195,387,195,211,18,139,88,126,265,88,268,43,140,136,95,53,23,33,171,101,141,58,39,4,76,15,65,79\nOxford,E07000178,male,34,362,199,34,86,183,287,212,43,19,408,265,65,53,215,327,360,273,581,962,554,420,146,161,790,737,187,268,600,558,338,405,205,297,385,560,420,206,83,149,68,511,313,430,9,359,12,54,347,243,126,42,207,258,228,89,312,103,75,65,279,37,128,109,71,256,219,135,45,14,89,118,0,204,181,85,149,122,71,32,84,104,48,16,87,45,57,33,16,38,158\nSouth Oxfordshire,E07000179,male,356,101,5,296,188,193,425,45,341,360,323,14,33,122,370,23,166,200,286,87,69,224,15,138,57,36,385,118,256,2,90,344,9,380,211,82,439,256,416,175,410,201,418,317,182,22,415,52,426,204,163,458,2,235,429,8,381,406,311,442,351,269,256,41,124,180,59,208,145,329,19,351,334,228,69,16,23,89,169,11,14,112,110,98,57,97,3,70,45,39,217\nVale of White Horse,E07000180,male,57,315,349,30,335,203,360,130,141,390,82,335,147,200,195,274,337,435,319,273,8,119,195,249,289,50,11,254,175,298,7,267,340,270,152,121,170,451,367,169,131,68,233,298,232,174,328,134,288,143,7,384,262,5,168,82,347,107,27,286,64,118,149,247,61,343,23,106,131,2,262,254,246,252,86,111,295,27,113,8,51,3,100,89,148,19,33,15,54,24,141\nWest Oxfordshire,E07000181,male,19,76,226,38,248,178,113,284,221,88,194,127,156,150,117,167,209,67,49,65,145,135,112,263,57,316,164,211,114,278,65,76,66,367,333,126,83,149,255,324,75,227,161,20,262,6,268,18,328,123,202,86,234,151,107,212,167,3,271,50,143,131,229,24,85,39,228,129,191,163,11,260,275,107,61,98,177,103,62,164,120,87,36,6,35,40,74,4,29,63,101\nElmbridge,E07000207,male,140,210,123,317,159,411,123,116,49,309,504,453,392,121,389,397,429,224,128,99,78,37,170,159,196,173,137,252,208,132,225,262,201,254,134,208,211,123,355,259,165,59,291,489,145,450,485,118,118,550,172,106,85,464,180,308,261,340,172,211,120,74,85,90,324,16,162,119,76,196,241,129,13,95,124,24,191,188,174,23,133,63,99,13,57,94,39,7,12,11,69\nEpsom and Ewell,E07000208,male,150,178,119,2,136,152,201,195,224,244,160,193,51,109,227,46,189,217,80,9,52,31,193,163,116,126,22,87,84,188,18,217,101,35,76,198,31,185,111,171,208,74,135,133,148,53,205,65,173,163,3,74,94,128,148,269,7,154,136,223,217,170,12,192,106,33,53,59,68,22,145,180,105,62,178,139,130,63,20,31,58,40,78,44,54,1,47,8,28,41,35\nGuildford,E07000209,male,175,101,238,12,219,282,266,64,104,416,320,384,317,204,354,211,187,154,529,433,573,440,572,234,395,369,83,37,2,180,241,39,8,17,228,277,344,16,376,344,217,333,109,69,332,411,289,41,140,131,97,180,92,321,410,282,88,192,93,164,253,174,26,189,332,119,6,220,219,94,205,139,95,134,18,234,36,81,201,116,79,150,96,119,66,61,90,0,46,50,213\nMole Valley,E07000210,male,44,16,25,118,125,76,105,31,127,20,73,203,110,242,13,223,98,8,29,13,16,115,163,188,5,87,8,180,115,49,92,93,115,56,124,41,85,122,52,175,96,122,224,199,118,148,274,267,258,229,289,54,28,104,138,119,340,214,234,94,158,98,136,216,180,135,78,44,103,169,57,207,117,4,85,193,217,112,46,20,73,132,59,37,103,42,65,21,2,58,9\nReigate and Banstead,E07000211,male,316,68,330,359,346,69,109,437,179,443,320,161,432,386,281,116,240,395,333,68,36,197,230,17,119,171,33,139,169,389,147,303,467,418,180,323,349,10,455,99,471,436,210,528,318,135,168,91,478,84,314,37,195,318,70,42,159,345,1,355,267,351,293,8,326,278,19,307,140,128,20,258,153,331,282,213,99,70,129,163,69,104,10,30,29,63,47,14,68,16,142\nRunnymede,E07000212,male,168,205,198,66,86,59,93,58,174,192,234,53,34,48,87,65,134,116,351,234,462,294,85,139,11,95,16,33,21,5,159,55,96,148,101,45,143,35,294,255,206,67,33,35,127,59,140,100,24,62,92,173,296,242,218,265,19,257,70,23,223,204,104,153,89,121,19,28,169,56,50,139,128,195,146,76,137,57,14,84,3,50,17,49,72,77,12,28,17,27,133\nSpelthorne,E07000213,male,152,3,54,199,275,168,64,245,113,143,207,223,286,177,72,249,216,288,200,41,107,0,233,199,214,273,162,83,54,40,245,207,271,240,277,100,27,127,129,140,112,169,21,312,244,299,307,119,311,41,24,227,325,44,143,362,211,208,8,213,343,127,206,81,65,197,212,175,146,160,143,159,17,26,218,108,132,81,2,90,111,97,103,64,87,29,32,56,44,24,128\nSurrey Heath,E07000214,male,173,121,88,213,16,78,24,89,263,216,186,275,168,262,108,221,150,17,2,33,130,151,34,29,146,9,110,161,31,114,242,44,152,22,238,201,142,35,194,233,21,75,65,206,237,123,201,17,210,143,276,217,62,109,127,185,244,115,302,25,116,10,188,99,164,185,187,147,32,184,151,128,81,226,151,74,43,162,47,29,103,101,46,57,27,64,20,18,56,15,92\nTandridge,E07000215,male,186,93,173,145,55,215,45,119,41,2,65,184,260,255,178,183,33,270,67,31,67,74,122,140,134,102,98,75,162,13,206,44,186,15,68,11,50,141,212,89,211,156,191,179,93,245,159,194,171,86,195,85,127,271,223,94,39,168,124,42,90,257,15,51,15,115,140,58,1,172,110,98,133,75,64,61,48,36,136,63,51,11,55,88,23,29,1,2,63,26,82\nWaverley,E07000216,male,102,134,88,125,234,229,180,228,207,113,406,236,16,451,130,298,131,326,136,104,189,119,57,76,10,76,52,95,32,153,255,97,33,257,230,220,101,44,6,177,201,317,108,172,344,331,229,325,30,209,358,242,271,458,119,245,22,193,417,207,26,278,278,97,218,113,257,290,254,167,186,20,56,291,246,64,88,286,135,50,65,13,96,40,139,28,35,17,96,18,277\nWoking,E07000217,male,252,123,245,101,153,70,17,125,25,349,195,241,268,88,94,54,272,201,26,15,186,63,190,248,193,93,16,269,252,230,242,281,91,132,318,251,261,295,49,137,362,253,46,253,195,253,293,316,236,263,313,96,188,323,295,206,138,96,236,64,279,270,165,26,42,184,74,80,80,22,43,192,131,72,51,134,91,151,79,30,81,28,73,39,37,36,33,62,24,44,27\nAdur,E07000223,male,76,95,71,54,10,43,151,37,191,120,171,21,134,210,125,179,2,22,84,71,96,15,46,23,28,118,2,8,125,67,81,67,14,150,150,92,105,12,57,64,117,150,94,33,62,172,59,51,56,205,60,18,78,167,131,7,224,78,53,195,124,185,163,101,73,88,48,154,166,159,140,109,101,30,103,97,98,42,66,56,74,63,59,13,11,54,19,26,34,19,123\nArun,E07000224,male,163,202,63,83,169,81,154,171,93,369,241,73,313,383,287,300,339,252,148,246,13,160,324,169,169,140,4,180,58,2,277,454,164,360,319,55,154,281,192,405,33,160,431,228,352,41,310,327,205,132,19,284,93,442,387,327,510,560,485,296,501,486,389,10,232,300,198,219,382,513,438,403,487,64,549,204,235,172,428,153,26,203,304,95,179,121,129,58,42,79,12\nChichester,E07000225,male,234,8,243,169,93,111,106,256,126,211,8,164,59,253,48,25,216,242,145,108,231,134,254,317,195,150,179,294,266,59,183,298,233,121,162,270,338,221,229,223,247,6,35,96,119,230,99,210,13,260,67,173,369,291,414,134,296,24,42,238,134,3,321,252,285,127,207,234,135,284,295,365,221,113,219,53,232,132,254,214,110,158,66,126,98,109,45,100,34,67,194\nCrawley,E07000226,male,236,303,52,80,92,135,235,81,404,349,264,99,125,120,364,214,201,332,293,307,160,0,280,302,153,113,275,378,124,262,420,50,164,103,61,301,110,89,434,388,286,63,246,210,242,258,372,4,246,79,221,295,185,374,255,114,101,265,226,114,134,1,86,91,56,33,48,81,5,150,139,16,23,193,25,81,125,7,29,21,29,8,14,8,9,41,49,15,2,10,64\nHorsham,E07000227,male,72,151,145,239,89,9,199,35,311,20,146,19,471,169,21,403,237,80,340,236,102,126,12,160,89,18,34,259,224,42,21,64,373,131,142,219,111,293,369,32,461,84,374,399,5,380,25,251,315,12,244,467,413,459,515,517,270,192,489,503,427,301,91,54,429,421,244,211,169,290,233,221,374,231,320,27,261,223,216,22,91,3,64,0,102,26,83,18,60,2,279\nMid Sussex,E07000228,male,65,233,184,272,454,472,121,423,67,270,368,477,463,96,138,75,215,217,167,63,239,263,71,45,6,226,27,233,213,212,316,311,57,416,223,251,309,312,80,442,203,194,457,191,150,25,465,29,259,148,404,319,428,568,298,175,476,30,251,119,306,5,299,15,176,382,135,84,347,342,85,223,192,345,101,138,209,71,40,89,83,139,153,107,64,8,45,10,45,25,25\nWorthing,E07000229,male,137,96,9,69,117,98,303,53,71,89,180,139,165,88,9,38,264,193,262,79,188,59,195,148,196,10,162,317,212,261,3,4,291,204,260,315,50,282,149,260,206,51,134,129,193,117,195,141,187,34,294,197,83,193,333,28,71,363,133,208,193,115,208,170,78,21,0,87,96,119,146,81,56,260,277,57,30,196,0,117,87,158,61,132,87,47,78,10,38,51,183\nBath and North East Somerset,E06000022,male,436,227,425,355,21,125,275,502,403,422,410,28,268,235,309,23,113,93,170,656,195,989,872,604,71,381,217,153,263,434,159,232,444,322,403,542,242,428,228,23,496,256,458,329,304,459,2,306,437,554,138,241,399,282,147,130,33,501,539,336,230,372,471,124,118,420,251,255,212,211,211,84,470,27,245,320,122,219,231,88,141,48,146,164,38,12,123,132,120,43,18\n\"Bristol, City of\",E06000023,male,780,176,376,582,154,1087,125,963,1102,1346,127,1252,828,128,324,592,396,198,371,2008,28,1818,700,613,107,63,177,511,70,1726,1179,949,1095,210,1795,313,1981,956,898,913,1230,1130,1487,1052,1120,589,185,1295,1046,1340,207,961,496,755,1270,1001,1018,277,638,649,644,702,341,738,713,107,125,705,220,430,763,542,417,704,366,140,165,333,482,53,203,276,215,174,213,174,109,62,155,56,242\nNorth Somerset,E06000024,male,452,354,125,108,474,434,574,191,328,422,110,339,347,381,158,614,527,116,429,216,128,31,319,32,370,199,308,326,518,380,91,527,315,86,82,46,412,75,130,60,590,78,304,276,590,596,233,616,485,136,336,686,663,32,405,479,303,193,174,687,173,522,361,96,349,577,244,157,12,259,612,326,73,85,274,319,330,359,179,83,368,49,176,32,249,101,42,144,76,48,411\nSouth Gloucestershire,E06000025,male,376,512,233,270,249,189,804,764,134,227,783,148,29,395,70,17,331,743,223,870,949,494,190,784,273,610,770,454,480,807,968,162,946,794,854,554,676,31,292,565,154,719,850,247,795,554,664,549,316,778,956,925,417,254,103,805,298,269,571,471,36,200,77,321,537,17,510,653,241,454,120,635,185,73,251,343,260,359,265,12,48,273,244,268,101,179,139,154,58,67,242\nPlymouth,E06000026,male,262,243,19,34,47,178,11,276,128,126,126,728,463,312,315,620,406,480,656,927,9,334,1108,717,217,164,129,889,770,531,199,500,476,804,530,436,520,132,76,192,568,115,567,210,335,255,459,47,280,86,27,151,22,147,682,851,643,678,146,81,483,446,74,408,424,96,379,276,510,300,122,74,355,147,288,397,298,42,129,170,132,171,38,208,107,85,128,70,132,48,357\nTorbay,E06000027,male,120,207,209,314,301,215,346,68,356,12,319,22,267,269,123,102,191,136,204,107,108,231,262,307,108,246,28,176,169,274,222,41,66,130,73,167,63,58,15,14,293,257,275,197,1,24,94,209,53,178,83,225,493,147,119,349,134,283,473,309,222,414,150,186,448,416,0,39,365,311,239,202,100,351,150,299,291,173,124,222,178,212,142,89,179,30,24,32,29,31,36\nSwindon,E06000030,male,527,34,401,429,401,359,628,439,524,477,307,661,409,279,590,281,109,191,291,9,338,258,5,239,657,280,298,540,726,514,485,262,578,346,528,391,496,773,575,617,442,173,125,213,384,589,591,798,138,376,619,75,22,694,321,113,831,154,703,130,216,247,664,172,495,93,164,11,166,284,107,348,172,127,385,275,35,237,212,181,83,212,39,143,27,98,112,56,99,84,64\nCornwall,E06000052,male,203,1198,378,1020,827,887,210,661,301,329,533,646,1467,990,366,117,385,422,618,1336,1379,1317,213,736,345,496,1161,1300,106,937,1477,889,775,660,1082,1105,660,445,169,1389,1440,32,1162,206,172,606,1101,720,375,1238,1636,1773,13,913,550,1995,1629,114,1884,239,215,1946,1834,737,1383,895,906,1253,8,975,178,1122,976,1478,119,336,1499,1222,1023,631,829,730,379,770,523,60,509,118,90,238,364\nIsles of Scilly,E06000053,male,3,2,3,0,3,4,6,0,6,1,1,3,1,1,3,3,1,1,0,2,4,1,3,1,5,3,4,2,2,4,1,1,7,4,4,2,0,1,2,0,1,6,1,11,1,4,4,0,2,4,5,6,1,5,3,4,1,2,5,2,1,2,0,6,0,1,2,1,3,1,4,1,1,6,5,2,9,0,2,4,5,6,1,2,3,0,1,0,2,1,3\nWiltshire,E06000054,male,131,845,78,608,440,412,1483,1236,1333,609,54,544,1216,470,516,198,870,402,1425,272,122,1123,1189,255,730,1346,169,353,1338,630,1442,147,575,235,1105,7,580,1024,1382,1465,722,1217,231,1072,459,471,418,1296,451,889,839,1173,645,410,1590,1670,1192,404,1410,87,44,1394,966,321,178,867,28,417,905,1233,520,1099,31,206,1193,167,651,993,113,573,489,415,64,220,495,492,56,104,73,180,628\n\"Bournemouth, Christchurch and Poole\",E06000058,male,879,891,793,543,337,210,167,1026,1031,1145,642,913,997,252,1007,76,11,306,733,99,528,1435,1088,595,1150,1004,327,538,109,384,622,1147,158,84,1136,57,201,894,250,643,1076,544,621,527,1010,219,971,343,796,561,1318,682,971,188,508,78,715,56,757,1088,791,353,465,115,1016,216,485,611,222,956,314,209,694,738,158,430,504,44,302,291,241,222,218,494,414,236,145,29,32,66,406\nDorset,E06000059,male,516,756,742,68,37,775,498,5,272,526,893,361,238,850,993,391,911,72,338,48,460,319,617,796,515,555,786,705,733,778,284,536,450,362,13,404,79,301,100,367,502,932,146,68,629,249,322,64,426,634,1063,161,768,349,99,70,1002,220,673,502,925,511,290,642,83,123,803,922,797,1171,278,369,238,1271,1237,921,398,659,547,136,716,563,298,82,261,461,121,232,95,76,644\nEast Devon,E07000040,male,193,237,204,231,244,302,48,149,278,184,53,85,353,209,275,199,167,234,122,266,290,241,8,91,62,175,175,80,64,254,274,197,181,297,231,321,283,211,4,174,307,280,303,125,248,361,50,188,438,441,215,86,507,232,297,499,280,93,34,82,476,219,324,319,400,132,221,133,449,394,284,80,68,394,200,159,464,215,119,184,245,127,291,81,91,58,82,74,113,39,395\nExeter,E07000041,male,172,91,116,75,99,237,115,184,165,326,49,160,129,97,1,205,251,318,697,267,61,554,115,483,284,277,273,189,392,180,430,110,446,289,66,403,375,314,69,166,317,239,91,118,158,139,120,127,337,1,161,124,349,354,197,287,305,277,316,75,8,208,114,287,121,96,186,191,164,244,49,72,3,101,243,180,90,6,60,69,125,73,78,120,59,52,63,72,16,3,96\nMid Devon,E07000042,male,187,195,64,143,155,8,118,192,133,6,221,75,24,34,154,245,163,165,46,88,88,37,166,192,174,192,180,48,81,101,149,170,57,16,78,4,144,23,132,14,118,15,146,142,21,54,205,232,48,159,1,105,8,154,221,167,4,229,213,184,227,213,123,69,126,56,33,252,84,163,134,221,3,50,84,13,85,166,180,167,13,71,89,66,101,74,29,4,46,36,78\nNorth Devon,E07000043,male,40,101,165,33,86,58,74,221,284,206,131,48,276,159,195,166,106,264,92,228,140,166,39,135,199,154,183,140,192,92,150,57,47,222,172,175,106,148,75,93,119,114,31,101,66,14,7,271,108,283,333,207,313,258,314,243,205,76,194,102,23,70,307,103,327,221,168,304,185,236,220,283,30,117,14,226,30,132,128,17,160,14,44,84,70,19,74,28,7,33,15\nSouth Hams,E07000044,male,142,27,144,105,95,159,82,93,1,235,148,154,217,175,133,232,236,1,28,73,117,36,28,158,23,96,11,83,146,62,159,1,133,137,207,37,120,60,187,63,5,203,138,177,185,83,202,30,64,6,208,61,52,267,259,31,36,13,98,354,246,178,88,317,315,138,62,223,12,66,62,299,69,92,291,92,143,228,176,18,45,89,25,70,74,20,95,21,18,47,13\nTeignbridge,E07000045,male,242,251,141,61,264,304,132,296,219,209,126,81,206,276,329,70,8,219,20,157,163,155,179,241,81,74,298,118,206,206,266,126,150,313,77,182,107,65,340,266,232,345,188,125,31,249,275,176,275,265,433,66,31,56,137,239,381,347,422,499,370,340,217,11,213,247,30,277,266,424,434,88,264,386,173,131,55,101,15,181,85,132,61,39,117,87,132,34,78,9,236\nTorridge,E07000046,male,108,11,131,62,118,89,160,156,179,57,101,98,109,152,69,169,103,68,24,85,61,74,70,36,0,60,139,12,161,144,27,21,121,19,111,158,99,46,143,108,143,111,1,92,105,109,105,100,97,19,218,70,116,81,19,11,88,106,45,95,146,21,244,24,159,67,231,134,33,200,96,71,33,191,260,38,69,2,76,36,52,3,25,52,69,37,36,11,23,12,62\nWest Devon,E07000047,male,43,2,23,106,49,70,77,93,9,134,3,17,64,96,47,78,154,134,127,93,16,103,70,85,53,117,20,64,57,77,41,34,91,119,77,65,84,35,122,96,74,129,117,83,3,59,129,111,135,32,20,113,49,187,180,136,69,181,94,104,95,6,1,96,214,100,125,51,7,154,128,15,86,89,17,135,101,111,56,100,34,65,27,67,80,62,4,18,18,16,73\nCheltenham,E07000078,male,55,244,197,13,233,145,299,202,78,288,139,176,45,272,70,6,246,308,256,235,229,285,359,120,381,256,120,315,267,366,332,402,15,192,311,202,0,386,37,387,59,266,341,161,211,331,82,188,231,297,271,181,287,235,343,45,315,262,270,267,31,304,253,281,8,137,7,192,129,130,71,121,98,4,23,146,80,63,41,16,9,59,87,125,109,87,76,55,34,50,181\nCotswold,E07000079,male,33,168,85,216,2,114,98,206,229,59,96,88,142,76,20,180,114,210,209,62,26,132,136,129,140,41,163,169,128,118,41,12,47,4,103,11,29,196,206,149,80,79,152,28,156,34,15,129,283,243,13,111,141,53,105,353,364,315,70,222,36,57,71,177,100,268,265,55,98,17,186,133,288,22,202,104,2,150,125,65,156,152,141,96,4,50,14,82,1,43,118\nForest of Dean,E07000080,male,88,171,57,141,54,146,86,132,210,236,202,84,171,121,157,157,150,261,142,183,188,62,91,221,136,61,142,26,83,48,247,242,7,64,204,108,18,80,131,146,147,78,56,159,186,10,13,105,223,280,71,91,123,127,102,141,286,46,11,155,87,123,207,18,69,179,218,10,265,190,217,226,172,2,72,108,190,18,24,18,133,143,5,26,1,0,50,22,19,20,64\nGloucester,E07000081,male,101,164,374,166,62,113,154,249,299,275,62,345,59,136,329,388,230,10,105,137,184,100,23,12,347,367,208,324,294,361,240,400,147,350,355,353,426,132,167,157,259,90,377,176,328,227,269,53,408,194,25,44,405,365,349,17,257,242,100,79,367,351,14,173,172,250,24,24,209,243,224,247,124,12,173,76,103,92,150,92,116,137,65,65,62,20,58,19,55,52,29\nStroud,E07000082,male,202,96,173,256,175,222,283,1,227,149,139,133,190,95,99,327,324,299,20,55,171,55,189,172,29,175,116,37,219,270,172,109,88,84,172,138,179,251,25,67,351,330,224,18,261,52,73,329,314,60,217,337,382,347,18,375,298,321,317,352,283,420,254,386,118,14,167,155,231,338,42,124,292,81,173,281,4,152,251,199,21,81,9,46,111,34,89,35,2,41,196\nTewkesbury,E07000083,male,145,50,80,44,213,249,72,133,194,25,236,156,83,67,240,50,24,218,92,144,180,74,62,121,154,122,77,248,136,69,4,2,219,67,182,28,84,8,207,227,113,140,263,64,148,59,110,30,261,264,254,168,134,11,231,39,258,290,65,51,38,23,83,1,87,5,241,69,114,48,153,240,56,65,178,107,138,173,18,5,33,72,104,120,62,35,54,31,19,31,157\nMendip,E07000187,male,169,71,31,13,95,230,2,58,293,251,106,276,280,25,92,109,355,315,122,151,86,140,136,182,142,93,34,234,213,70,103,226,1,125,3,46,280,43,175,78,202,270,34,89,83,195,292,77,31,26,0,52,311,325,230,54,79,420,441,203,410,102,295,86,159,229,116,202,11,314,272,347,11,70,21,257,120,213,62,192,27,76,51,87,82,44,49,62,19,15,226\nSedgemoor,E07000188,male,167,173,124,96,136,116,249,1,232,191,177,294,354,167,313,300,73,186,105,200,193,203,41,271,133,234,5,142,60,292,150,257,45,142,140,272,266,318,108,256,69,290,154,211,315,37,346,22,287,401,15,406,37,395,293,391,230,270,389,243,87,212,385,261,208,64,135,329,208,325,302,371,2,17,264,66,140,155,4,238,59,68,57,19,42,96,83,4,18,0,227\nSouth Somerset,E07000189,male,331,346,255,179,243,132,220,261,260,195,334,490,76,127,444,203,83,243,401,21,64,411,67,353,69,373,433,425,244,329,385,26,347,38,370,61,357,53,395,394,305,224,257,312,39,137,349,141,308,524,11,505,31,387,42,176,562,193,435,320,423,527,37,215,48,241,500,467,205,373,287,84,69,296,421,165,334,285,216,56,117,251,48,194,174,148,13,124,68,12,159\nSomerset West and Taunton,E07000246,male,204,91,1,314,241,323,260,37,357,422,127,6,256,65,374,193,25,302,338,290,199,107,46,130,265,279,365,208,306,94,331,329,233,201,121,117,117,133,204,135,256,68,259,17,245,129,92,292,294,43,68,220,470,108,154,226,201,189,157,420,251,17,426,251,407,70,62,3,137,476,438,259,204,342,378,156,380,177,239,258,229,232,194,74,127,40,117,94,50,108,147\nIsle of Anglesey,W06000001,male,147,14,34,77,27,87,145,1,88,117,34,115,22,100,187,103,189,23,92,124,72,93,165,132,23,65,134,143,133,3,109,36,84,35,168,143,39,166,111,54,165,98,115,71,78,171,54,176,66,33,191,7,218,160,112,93,157,95,202,215,116,13,91,142,163,187,33,85,164,18,151,76,27,254,172,97,104,93,106,67,17,31,98,41,47,71,20,29,15,9,133\nGwynedd,W06000002,male,68,72,148,290,133,81,263,163,332,138,68,66,251,189,274,15,310,4,253,401,184,362,378,95,47,14,230,257,206,78,52,28,261,191,271,14,54,58,279,280,163,263,44,212,119,136,283,46,183,157,164,233,321,269,114,50,268,163,152,5,169,332,213,131,230,67,48,0,118,184,307,55,158,140,91,202,180,1,120,28,58,186,38,9,16,60,13,12,11,14,12\nConwy,W06000003,male,237,89,46,81,3,199,142,94,274,171,108,144,62,122,54,25,260,150,30,33,210,220,81,79,34,6,7,158,190,200,60,85,7,287,179,75,175,88,159,156,144,271,212,87,6,126,261,67,270,76,143,48,256,140,411,167,318,245,150,72,69,360,188,302,234,188,25,3,156,352,97,191,220,73,345,179,136,34,183,56,182,155,165,42,57,79,11,84,10,48,70\nDenbighshire,W06000004,male,188,118,47,13,15,135,90,65,21,15,113,147,279,30,155,173,70,113,109,3,102,36,222,35,62,16,82,27,49,123,32,161,173,137,254,233,173,83,50,100,99,108,8,37,135,195,49,7,247,285,224,162,243,175,37,12,220,148,76,269,221,194,92,247,243,87,189,258,106,97,3,109,325,348,120,82,157,221,44,185,19,144,36,29,42,7,3,14,39,5,65\nFlintshire,W06000005,male,315,207,146,209,182,337,305,214,386,257,32,305,187,176,132,3,391,255,32,171,149,363,64,210,403,274,306,244,212,315,292,459,366,79,405,371,6,320,118,11,129,379,91,130,291,192,158,86,349,416,435,533,565,27,500,221,432,185,52,136,130,495,127,176,1,2,236,178,162,244,129,212,448,202,115,253,291,84,39,99,161,214,6,74,76,11,70,86,67,20,196\nWrexham,W06000006,male,77,38,1,148,222,99,189,89,103,236,49,287,50,258,385,403,291,391,174,139,239,178,191,301,383,241,72,367,246,325,311,103,51,190,406,168,337,268,200,200,162,103,378,282,191,262,266,274,13,303,488,50,174,422,423,107,217,8,132,129,345,38,253,255,321,89,17,298,272,140,288,106,186,21,199,272,219,101,150,111,55,7,11,99,96,27,49,62,4,34,124\nCeredigion,W06000008,male,122,65,0,68,43,101,126,157,78,141,74,136,124,141,130,133,22,92,99,150,368,123,197,227,187,154,71,0,153,16,63,28,3,52,121,25,80,39,60,91,131,80,119,67,138,7,114,81,34,127,55,19,209,30,197,114,38,29,83,149,51,19,235,223,173,210,15,169,64,190,211,2,135,174,231,14,171,10,168,55,42,92,98,11,9,47,19,15,11,3,123\nPembrokeshire,W06000009,male,48,199,44,283,37,38,289,44,179,199,211,263,226,248,94,244,128,302,39,213,64,213,76,206,205,119,26,39,314,33,83,289,151,59,291,272,245,254,153,202,252,223,78,119,164,45,209,210,36,301,344,341,160,231,284,95,314,5,445,255,385,227,457,304,130,2,91,316,358,174,416,412,371,232,233,96,39,144,263,234,178,73,9,104,77,58,114,6,91,38,131\nCarmarthenshire,W06000010,male,92,315,19,29,262,166,20,55,310,103,395,229,508,406,443,214,275,187,13,176,36,47,386,295,456,458,30,100,468,462,81,184,157,3,9,61,189,313,408,67,167,113,113,249,421,477,14,149,303,481,249,398,452,171,105,337,662,440,89,14,384,393,581,596,604,268,217,80,164,65,560,85,407,332,524,244,310,161,282,62,26,32,39,115,172,185,144,140,16,28,160\nSwansea,W06000011,male,284,393,103,557,622,217,564,459,669,450,134,193,569,566,343,521,417,225,443,391,851,1126,875,175,110,65,136,456,97,244,146,199,655,423,652,416,690,376,604,643,287,757,127,472,287,555,675,100,450,618,84,561,524,661,778,598,704,399,140,104,396,264,664,61,314,186,55,12,68,318,120,4,216,319,262,160,426,288,368,184,223,251,20,6,137,97,71,31,131,69,218\nNeath Port Talbot,W06000012,male,210,266,83,179,118,44,89,142,348,302,130,319,171,147,312,104,262,145,65,283,4,29,382,153,83,85,139,19,280,103,221,276,373,111,97,66,71,23,200,392,21,345,301,363,42,309,276,32,92,14,464,396,144,356,261,517,71,194,93,28,318,292,102,215,156,120,176,241,135,215,340,127,140,142,208,205,150,182,130,151,94,131,144,51,8,128,51,81,68,27,135\nBridgend,W06000013,male,279,253,2,1,99,359,66,411,99,281,409,97,130,48,337,114,273,281,255,270,61,339,319,313,230,18,292,42,346,114,394,37,423,305,492,10,285,284,300,223,11,236,104,364,136,244,143,46,169,24,358,357,431,428,335,30,531,6,215,449,403,144,156,94,423,387,64,216,146,27,60,172,171,155,236,140,92,280,221,211,19,101,30,50,104,116,113,7,65,28,167\nVale of Glamorgan,W06000014,male,289,103,351,195,91,331,104,127,205,276,26,65,354,395,170,135,243,230,320,143,100,216,257,45,90,130,63,181,73,73,182,97,180,153,226,88,253,317,189,104,88,321,63,302,0,285,209,296,212,59,174,50,164,325,50,353,428,415,367,118,272,158,300,302,324,5,29,233,169,182,64,190,183,319,70,104,239,105,201,168,110,55,128,118,59,90,105,95,52,24,22\nCardiff,W06000015,male,214,469,676,860,552,173,968,613,1060,5,312,500,224,809,392,436,191,690,591,695,1825,1669,1324,1076,16,21,89,586,1056,1176,497,82,466,893,1192,1110,4,760,823,505,766,148,109,417,770,314,158,950,506,533,50,998,108,776,375,282,238,903,746,279,273,198,288,662,290,142,2,469,472,41,659,105,43,586,312,116,487,334,252,223,141,178,262,27,123,131,173,43,15,36,386\nRhondda Cynon Taff,W06000016,male,6,495,249,345,192,309,354,137,99,13,51,49,42,463,338,610,487,62,265,442,227,361,706,439,689,653,167,609,685,410,47,559,609,384,301,137,29,107,526,451,506,83,486,419,250,267,510,607,156,659,184,241,222,622,517,135,57,24,327,73,62,425,43,675,257,217,548,507,29,348,499,295,244,182,82,264,476,53,167,30,278,226,156,201,69,89,32,37,95,79,150\nCaerphilly,W06000018,male,76,179,125,185,352,75,26,291,486,265,381,159,468,292,163,199,46,437,179,36,197,359,336,152,153,431,84,82,331,38,47,480,378,497,235,168,291,494,288,409,413,299,26,17,66,196,294,3,444,122,606,68,302,334,251,122,244,12,137,304,15,55,90,525,436,442,209,78,384,69,337,259,65,284,331,210,219,304,85,181,205,187,176,195,118,77,120,70,33,52,162\nBlaenau Gwent,W06000019,male,24,118,140,46,76,112,72,63,182,159,104,165,130,181,0,8,5,55,120,11,154,62,172,114,105,143,95,133,61,63,166,1,217,177,192,121,71,144,26,130,172,132,109,123,11,87,49,35,45,58,217,122,244,222,182,140,80,198,167,94,40,35,7,11,19,16,48,13,81,107,162,113,183,135,189,139,62,4,19,47,28,45,26,33,3,33,15,8,16,24,62\nTorfaen,W06000020,male,202,171,246,132,202,151,9,238,131,69,58,59,157,254,238,110,50,125,236,99,171,123,205,247,280,10,190,14,85,268,188,166,276,43,90,173,59,253,271,177,196,22,72,131,46,20,119,236,247,218,99,213,271,145,35,42,291,43,303,142,16,43,89,205,112,124,79,258,42,59,247,15,156,136,110,56,31,35,98,70,1,55,3,17,54,1,23,23,13,31,96\nMonmouthshire,W06000021,male,102,24,137,130,219,117,52,32,89,237,218,1,173,161,157,154,55,261,147,55,157,58,31,139,12,68,94,212,181,222,177,57,193,78,192,11,227,12,204,20,100,72,90,226,32,170,39,58,7,37,321,183,187,317,131,63,50,74,346,201,239,8,184,312,144,124,280,10,246,257,33,106,103,140,52,138,80,147,27,123,35,7,139,6,88,8,36,26,77,59,150\nNewport,W06000022,male,181,467,422,352,493,55,369,421,308,406,202,286,47,3,33,180,242,115,215,35,114,83,340,231,239,176,50,205,354,240,136,591,209,547,608,194,494,203,462,8,189,287,431,262,110,406,184,309,264,354,453,245,469,388,117,330,312,221,33,242,200,314,440,185,379,140,85,189,320,49,170,204,90,302,133,210,112,231,57,97,72,61,129,53,116,68,91,66,25,43,197\nPowys,W06000023,male,227,56,253,330,169,96,309,331,148,235,26,177,327,351,349,259,194,111,220,145,265,204,78,236,309,49,48,204,170,33,322,32,35,210,37,152,195,135,121,161,234,124,149,241,164,216,185,82,3,286,306,64,99,81,139,452,126,460,185,437,0,77,74,166,150,120,335,435,163,27,169,373,239,207,393,138,271,358,260,23,59,143,10,86,67,34,116,64,42,41,215\nMerthyr Tydfil,W06000024,male,69,64,129,190,51,98,85,161,90,32,189,168,64,30,177,52,121,113,12,22,30,51,117,52,5,59,8,186,55,64,133,17,95,154,49,89,165,89,117,170,28,184,155,47,22,28,138,35,137,4,155,16,54,111,37,91,129,41,178,46,165,143,160,38,147,3,45,76,88,133,118,26,97,135,87,38,65,8,87,59,70,41,25,16,45,40,20,16,2,19,40"
        },
        "range-plot": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"legendLabels\": { \"min\": \"2015-2019\", \"max\": \"2020\" },\n\t\t//the keys match the column names\n\t\t\"colour_palette\": [\"#8D8C8E\", \"#206095\"],\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\":\n\t\t\t\"Here is the screenreader text describing the chart.\",\n\t\t\"numberFormat\": \".0f\",\n\t\t\"xAxisTickFormat\": \".0f\",\n\t\t\"xAxisLabel\": \"x axis label\",\n\t\t\"xDomain\": [0, 100],\n\t\t// either auto or a custom domain as an array e.g [0,100]\n\t\t\"showDataLabels\": true\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 5,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 20,\n\t\t\t\t\"left\": 100\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 5,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 20,\n\t\t\t\t\"left\": 100\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 5,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 40,\n\t\t\t\t\"left\": 100\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 40,\n\t\t\t\"md\": 40,\n\t\t\t\"lg\": 40\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\n\tgroups = d3.groups(graphic_data, (d) => d.group);\n\n\tif (config.essential.xDomain == 'auto') {\n\t\tlet min = 1000000;\n\t\tlet max = 0;\n\t\tfor (i = 2; i < graphic_data.columns.length; i++) {\n\t\t\tmin = d3.min([\n\t\t\t\tmin,\n\t\t\t\td3.min(graphic_data, (d) => +d[graphic_data.columns[i]])\n\t\t\t]);\n\t\t\tmax = d3.max([\n\t\t\t\tmax,\n\t\t\t\td3.max(graphic_data, (d) => +d[graphic_data.columns[i]])\n\t\t\t]);\n\t\t}\n\t\txDomain = [min, max];\n\t} else {\n\t\txDomain = config.essential.xDomain;\n\t}\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]).domain(xDomain);\n\n\tconst colour = d3\n\t\t.scaleOrdinal()\n\t\t.range(config.essential.colour_palette)\n\t\t.domain(Object.keys(config.essential.legendLabels));\n\n\t// create the y scale in groups\n\tgroups.map(function (d) {\n\t\t//height\n\t\td[2] = config.optional.seriesHeight[size] * d[1].length;\n\n\t\t// y scale\n\t\td[3] = d3\n\t\t\t.scalePoint()\n\t\t\t.padding(0.5)\n\t\t\t.range([0, d[2]])\n\t\t\t.domain(d[1].map((d) => d.name));\n\t\t//y axis generator\n\t\td[4] = d3.axisLeft(d[3]).tickSize(0).tickPadding(10);\n\t});\n\n\t//set up xAxis generator\n\tlet xAxis = d3.axisBottom(x)\n\t\t.ticks(config.optional.xAxisTicks[size])\n\t\t.tickFormat(d => d3.format(config.essential.xAxisTickFormat)(d));\n\n\tdivs = graphic.selectAll('div.categoryLabels').data(groups).join('div');\n\n\tdivs\n\t\t.append('p')\n\t\t.attr('class', 'groupLabels')\n\t\t.html((d) => d[0]);\n\n\tsvgs = divs\n\t\t.append('svg')\n\t\t.attr('class', 'chart')\n\t\t.attr('height', (d) => d[2] + margin.top + margin.bottom)\n\t\t.attr('width', chart_width + margin.left + margin.right);\n\n\tcharts = svgs\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tcharts.each(function (d) {\n\t\td3.select(this)\n\t\t\t.append('g')\n\t\t\t.attr('class', 'y axis')\n\t\t\t.call(d[4])\n\t\t\t.selectAll('text')\n\t\t\t.call(wrap, margin.left - 10);\n\n\t\td3.select(this)\n\t\t\t.append('g')\n\t\t\t.attr('transform', (d) => 'translate(0,' + d[2] + ')')\n\t\t\t.attr('class', 'x axis')\n\t\t\t.each(function () {\n\t\t\t\td3.select(this)\n\t\t\t\t\t.call(xAxis.tickSize(-d[2]))\n\t\t\t\t\t.selectAll('line')\n\t\t\t\t\t.each(function (e) {\n\t\t\t\t\t\tif (e == 0) {\n\t\t\t\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\tcharts\n\t\t.selectAll('line.between')\n\t\t.data((d) => d[1])\n\t\t.join('line')\n\t\t.attr('class', 'between')\n\t\t.attr('x1', (d) => x(d.min))\n\t\t.attr('x2', (d) => x(d.max))\n\t\t.attr('y1', (d, i) => groups.filter((e) => e[0] == d.group)[0][3](d.name))\n\t\t.attr('y2', (d, i) => groups.filter((e) => e[0] == d.group)[0][3](d.name))\n\t\t.attr('stroke', '#c6c6c6')\n\t\t.attr('stroke-width', '3px');\n\n\tcharts\n\t\t.selectAll('circle.min')\n\t\t.data((d) => d[1])\n\t\t.join('circle')\n\t\t.attr('class', 'min')\n\t\t.attr('cx', (d) => x(d.min))\n\t\t.attr('cy', (d) => groups.filter((f) => f[0] == d.group)[0][3](d.name))\n\t\t.attr('r', 6)\n\t\t.attr('fill', colour('min'));\n\n\tcharts\n\t\t.selectAll('circle.max')\n\t\t.data((d) => d[1])\n\t\t.join('circle')\n\t\t.attr('class', 'max')\n\t\t.attr('cx', (d) => x(d.max))\n\t\t.attr('cy', (d) => groups.filter((f) => f[0] == d.group)[0][3](d.name))\n\t\t.attr('r', 6)\n\t\t.attr('fill', colour('max'));\n\n\tif (config.essential.showDataLabels) {\n\t\tcharts\n\t\t\t.selectAll('text.min')\n\t\t\t.data((d) => d[1])\n\t\t\t.join('text')\n\t\t\t.attr('class', 'dataLabels')\n\t\t\t.attr('x', (d) => x(d.min))\n\t\t\t.attr('y', (d) => groups.filter((f) => f[0] == d.group)[0][3](d.name))\n\t\t\t.text((d) => d3.format(config.essential.numberFormat)(d.min))\n\t\t\t.attr('fill', colour('min'))\n\t\t\t.attr('dy', 6)\n\t\t\t.attr('dx', (d) => (+d.min < +d.max ? -8 : 8))\n\t\t\t.attr('text-anchor', (d) => (+d.min < +d.max ? 'end' : 'start'));\n\n\t\tcharts\n\t\t\t.selectAll('text.max')\n\t\t\t.data((d) => d[1])\n\t\t\t.join('text')\n\t\t\t.attr('class', 'dataLabels')\n\t\t\t.attr('x', (d) => x(d.max))\n\t\t\t.attr('y', (d) => groups.filter((f) => f[0] == d.group)[0][3](d.name))\n\t\t\t.text((d) => d3.format(config.essential.numberFormat)(d.max))\n\t\t\t.attr('fill', colour('max'))\n\t\t\t.attr('dy', 6)\n\t\t\t.attr('dx', (d) => (+d.min > +d.max ? -8 : 8))\n\t\t\t.attr('text-anchor', (d) => (+d.min > +d.max ? 'end' : 'start'));\n\t}\n\n\n\n\t// This does the x-axis label\n\tcharts.each(function (d, i) {\n\t\tif (i == groups.length - 1) {\n\t\t\td3.select(this)\n\t\t\t\t.append('text')\n\t\t\t\t.attr('x', chart_width)\n\t\t\t\t.attr('y', (d) => d[2] + 35)\n\t\t\t\t.attr('class', 'axis--label')\n\t\t\t\t.text(config.essential.xAxisLabel)\n\t\t\t\t.attr('text-anchor', 'end');\n\t\t}\n\t});\n\n\t// Set up the legend\n\tlet legenditem = d3\n\t\t.select('#legend')\n\t\t.selectAll('div.legend--item')\n\t\t.data(\n\t\t\td3.zip(\n\t\t\t\tObject.values(config.essential.legendLabels),\n\t\t\t\tconfig.essential.colour_palette\n\t\t\t)\n\t\t)\n\t\t.enter()\n\t\t.append('div')\n\t\t.attr('class', 'legend--item');\n\n\tlegenditem\n\t\t.append('div')\n\t\t.attr('class', 'legend--icon--circle')\n\t\t.style('background-color', function (d) {\n\t\t\treturn d[1];\n\t\t});\n\n\tlegenditem\n\t\t.append('div')\n\t\t.append('p')\n\t\t.attr('class', 'legend--text')\n\t\t.html(function (d) {\n\t\t\treturn d[0];\n\t\t});\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "data_csv": "name,group,min,max\nEngland,Group name 1,44.79967469,65.51485629\nWales,Group name 1,19.5544272,86.4112192\nNorth East,Group name 2,21.04544788,55.54073662\nNorth West,Group name 2,39.13579896,51.13881403\nYorkshire and The Humber,Group name 2,30.57469086,95.726681\nEast Midlands,Group name 2,29.36591976,51.76293031\nWest Midlands,Group name 2,39.86949419,80.18516748\nEast,Group name 2,17.64884078,83.95086243\nLondon,Group name 2,43.91069538,57.87608769\nSouth West,Group name 2,9.379207492,64.9079148\nSouth East,Group name 2,8.973142806,61.1748033\nAnother name,Group name 3,65.58717189,24.79415817\nAnd another,Group name 3,80.32467139,42.56371279",
            "chart_css": "line.between{\n  stroke:#c6c6c6;\n  stroke-width:3px;\n}\n\n.dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n\np.groupLabels{\n  padding-top:15px;\n  font-weight: 600;\n}\n",
            "comparison_csv": null
        },
        "ridgeline-plot": {
            "chart_css": ".dataLabels{\n  font-weight: 600;\n  font-size: 14px;\n}\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\n\tlet keys = Object.keys(graphic_data[0]).filter((d) => d !== 'date');\n\n\tlet height = config.optional.seriesHeight[size] * keys.length + 10 * (keys.length - 1) + 12;\n\n\tlet layers = keys.map(key => graphic_data.map(d => ({date: d.date, value: d[key]})));\n\n\tconst x = d3.scaleTime()\n\t\t.range([0, chart_width])\n\t\t.domain(d3.extent(graphic_data, d => d.date));\n\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height)\n\t\t.tickFormat(d3.format('.0%'))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\tlet y = d3.scalePoint()\n\t\t.domain(keys)\n\t\t.range([height, 0])\n\t\t.padding(1);\n\n\tlet z = d3.scaleSequential(d3.interpolateCool).domain([0, keys.length]);\n\n\tlet yAxis = d3.axisLeft(y).tickSize(0).tickPadding(10);\n\n\tlet y_scale = d3.scaleLinear()\n\t\t.range([config.optional.seriesHeight[size], 0])\n\t\t.domain([0, d3.max(layers, layer => d3.max(layer, d => d.value))]);\n\n\tlet areaGenerator = d3.area()\n\t\t.x((d) => x(d.date))\n\t\t.y0(y_scale(0))\n\t\t.y1((d) => y_scale(d.value));\n\n\tchart_g = graphic\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\tchart_g\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t//.call(xAxis)\n\t\t.call(xAxis.tickFormat(d3.timeFormat('%H:%M')))\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t\tchart_g\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('text')\n\t\t.attr('dy', '15px') // Adjust the vertical position of the labels using pixels\n\t\t.attr('transform', 'translate(-5, 0)') // Adjust the horizontal position of the labels\n\t\t.call(wrap, margin.left); \n\t\n\n\tlet series = chart_g.selectAll('.series')\n\t\t.data(layers)\n\t\t.enter().append('g')\n\t\t.attr('class', 'series')\n\t\t//.attr('fill', (d, i) => z(i)) // change this line from interpolateViridis to z(i) to map correctly with z color scale\n\t\t.attr('fill', '#206095')\n\t\t.attr('transform', (d, i) => `translate(0,${y(keys[i])})`);\n\n\tseries.append('path')\n\t\t.attr('class', 'area') // forgot to specify class for your path\n\t\t.attr('d', areaGenerator);\n\n\tchart_g\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.append('text')\n\t\t.attr('x', chart_width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//create link to source\n\td3.select('#source').text('Source – ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = text.attr('x'),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\tlet parseTime = d3.timeParse(config.essential.dateFormat);\n\n\tdata.forEach((d) => {\n\t\td.date = parseTime(d.date);\n\n\t\tfor (let prop in d) {\n\t\t\tif (prop !== 'date') {\n\t\t\t\td[prop] = +d[prop];\n\t\t\t}\n\n\t\t}\n\t});\n\t// console.log(\"original data \",graphic_data);\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#206095\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"dataLabels\": {\n\t\t\t\"show\": true,\n\t\t\t\"numberFormat\": \".0%\"\n\t\t},\n\t\t\"xDomain\": \"auto\",\n\t\t\"dateFormat\": \"%d-%m-%Y %-I:%M:%S\",\n\t\t// either \"auto\" or an array for the x domain e.g. [0,100]\n\t\t\"xAxisLabel\": \"x axis label\"\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 15,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 120\n\t\t\t}\n\t\t},\n\t\t\"seriesHeight\": {\n\t\t\t\"sm\": 30,\n\t\t\t\"md\": 30,\n\t\t\t\"lg\": 30\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 4,\n\t\t\t\"md\": 8,\n\t\t\t\"lg\": 10\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 0 },\n\t\"chart_build\": {}\n};\n",
            "data_csv": "date,Sleep and rest,Personal care,Paid work,Travel,Unpaid household work,Unpaid care,Watching television,Entertainment and leisure,Education and study,Other\r\n01-01-1990 4:00:00,97.1,0.9,0.7,0.1,0.2,0.1,0.2,0.3,0.0,0.4\r\n01-01-1990 4:10:00,97.1,0.8,0.7,0.1,0.2,0.1,0.2,0.3,0.0,0.4\r\n01-01-1990 4:20:00,97.1,0.9,0.7,0.1,0.2,0.1,0.2,0.4,0.0,0.4\r\n01-01-1990 4:30:00,96.6,0.9,0.7,0.1,0.4,0.1,0.2,0.4,0.0,0.5\r\n01-01-1990 4:40:00,96.3,1.1,0.7,0.2,0.3,0.1,0.2,0.4,0.0,0.5\r\n01-01-1990 4:50:00,96.0,1.3,0.7,0.2,0.3,0.1,0.3,0.4,0.0,0.5\r\n01-01-1990 5:00:00,94.4,2.0,0.8,0.4,0.7,0.1,0.3,0.7,0.0,0.5\r\n01-01-1990 5:10:00,94.3,1.9,0.8,0.5,0.9,0.1,0.3,0.7,0.0,0.5\r\n01-01-1990 5:20:00,93.7,2.2,0.8,0.6,0.7,0.1,0.3,0.7,0.0,0.8\r\n01-01-1990 5:30:00,91.6,3.2,1.0,1.1,0.8,0.2,0.3,0.8,0.0,0.9\r\n01-01-1990 5:40:00,90.7,3.5,1.1,1.7,0.8,0.2,0.4,0.9,0.0,0.7\r\n01-01-1990 5:50:00,90.0,3.4,1.6,1.7,0.9,0.2,0.4,1.1,0.0,0.7\r\n01-01-1990 6:00:00,82.5,7.7,2.5,1.3,2.4,0.6,0.4,1.8,0.1,0.7\r\n01-01-1990 6:10:00,80.7,7.8,2.6,1.7,3.0,0.5,0.5,2.2,0.1,1.0\r\n01-01-1990 6:20:00,78.5,9.0,2.8,2.0,3.2,0.6,0.5,2.6,0.1,0.7\r\n01-01-1990 6:30:00,71.0,13.7,3.5,2.6,4.4,0.9,0.5,3.2,0.0,0.3\r\n01-01-1990 6:40:00,69.1,14.5,3.6,2.7,4.7,1.1,0.6,3.5,0.0,0.2\r\n01-01-1990 6:50:00,67.8,14.0,4.1,3.0,5.1,1.1,1.1,3.6,0.0,0.2\r\n01-01-1990 7:00:00,52.6,21.5,5.8,4.2,8.3,2.2,1.0,3.9,0.0,0.5\r\n01-01-1990 7:10:00,50.4,21.0,6.4,4.8,8.5,2.3,1.3,4.7,0.1,0.5\r\n01-01-1990 7:20:00,48.7,20.5,6.8,5.8,8.8,2.4,1.3,5.1,0.1,0.6\r\n01-01-1990 7:30:00,40.6,23.3,8.6,7.4,10.2,2.4,1.4,5.5,0.0,0.6\r\n01-01-1990 7:40:00,38.9,22.9,9.5,8.9,9.8,2.5,1.5,5.5,0.1,0.4\r\n01-01-1990 7:50:00,37.6,22.1,10.9,9.4,9.7,2.7,1.7,5.2,0.1,0.6\r\n01-01-1990 8:00:00,26.4,24.7,16.3,10.0,11.3,2.7,1.6,5.8,0.3,0.8\r\n01-01-1990 8:10:00,24.8,24.7,17.5,10.3,11.2,2.7,1.6,6.5,0.3,0.5\r\n01-01-1990 8:20:00,23.3,22.8,19.1,11.1,11.7,2.7,1.6,6.7,0.3,0.7\r\n01-01-1990 8:30:00,18.3,22.5,24.2,11.8,11.5,1.9,1.4,7.5,0.3,0.6\r\n01-01-1990 8:40:00,17.6,21.1,26.0,11.4,11.1,1.5,2.1,7.9,0.4,0.8\r\n01-01-1990 8:50:00,17.0,19.3,27.7,10.5,12.4,1.7,2.0,8.4,0.4,0.7\r\n01-01-1990 9:00:00,11.3,17.5,34.4,7.5,15.2,1.7,2.2,7.7,1.7,0.9\r\n01-01-1990 9:10:00,10.6,16.9,35.8,6.6,16.2,1.7,2.1,7.8,1.6,0.7\r\n01-01-1990 9:20:00,10.4,15.6,36.9,6.3,16.3,1.6,2.1,8.5,1.6,0.8\r\n01-01-1990 9:30:00,8.2,13.5,38.7,6.0,18.3,1.4,2.4,8.9,1.7,1.0\r\n01-01-1990 9:40:00,8.2,12.9,39.4,5.4,18.2,1.5,2.2,9.3,1.7,1.1\r\n01-01-1990 9:50:00,8.1,11.8,39.4,5.6,18.4,1.9,2.4,9.7,1.8,1.1\r\n01-01-1990 10:00:00,5.9,12.3,40.2,5.5,19.4,1.7,2.3,10.0,1.8,1.0\r\n01-01-1990 10:10:00,5.6,11.1,40.5,5.6,19.7,2.0,2.6,10.0,2.0,0.9\r\n01-01-1990 10:20:00,5.3,10.7,40.8,5.2,19.6,2.1,2.5,10.7,2.0,1.0\r\n01-01-1990 10:30:00,4.6,10.0,40.6,6.6,19.1,2.4,2.3,11.3,2.1,1.0\r\n01-01-1990 10:40:00,4.6,9.3,41.3,6.1,19.9,2.5,2.2,10.6,2.3,1.1\r\n01-01-1990 10:50:00,4.7,8.9,41.4,5.6,20.4,2.6,2.1,10.8,2.4,1.1\r\n01-01-1990 11:00:00,3.5,9.8,41.0,6.7,21.0,2.4,1.7,10.8,2.2,0.9\r\n01-01-1990 11:10:00,3.3,10.0,41.1,5.8,21.7,2.1,1.9,10.9,2.4,0.9\r\n01-01-1990 11:20:00,3.3,9.6,41.1,6.0,22.2,2.1,1.8,10.6,2.2,1.0\r\n01-01-1990 11:30:00,2.9,8.4,41.0,6.6,22.6,2.0,2.1,11.1,2.2,1.0\r\n01-01-1990 11:40:00,2.9,8.8,40.8,6.1,22.7,2.1,2.1,11.3,2.2,0.9\r\n01-01-1990 11:50:00,2.9,8.7,40.8,5.9,23.0,2.3,2.2,11.1,2.2,0.9\r\n01-01-1990 12:00:00,2.2,12.4,37.1,5.8,23.8,2.4,2.7,10.5,2.1,1.0\r\n01-01-1990 12:10:00,2.0,14.0,36.8,5.3,22.9,2.2,2.7,10.9,2.2,1.0\r\n01-01-1990 12:20:00,1.9,15.2,36.2,5.6,22.5,1.7,3.0,10.9,2.1,0.9\r\n01-01-1990 12:30:00,1.7,17.8,33.3,5.8,22.2,1.7,3.2,11.4,2.0,1.0\r\n01-01-1990 12:40:00,1.7,18.4,33.2,5.9,20.7,1.8,3.5,11.4,2.0,1.3\r\n01-01-1990 12:50:00,1.9,19.1,33.2,5.4,21.1,2.3,3.8,10.4,1.9,1.1\r\n01-01-1990 13:00:00,2.2,18.2,33.5,5.4,20.9,2.0,4.2,9.8,2.3,1.3\r\n01-01-1990 13:10:00,2.5,19.1,33.4,5.4,19.4,1.8,4.5,10.4,2.3,1.2\r\n01-01-1990 13:20:00,2.7,18.4,33.2,5.2,19.4,1.8,4.6,11.1,2.5,1.2\r\n01-01-1990 13:30:00,3.0,15.5,34.4,4.7,20.0,2.1,4.9,12.0,2.2,1.1\r\n01-01-1990 13:40:00,2.9,14.1,35.0,5.1,20.1,2.2,5.3,12.2,2.3,1.0\r\n01-01-1990 13:50:00,2.8,13.1,36.2,5.0,20.3,1.9,5.4,12.2,2.3,0.9\r\n01-01-1990 14:00:00,2.7,8.9,38.9,6.5,20.6,1.8,5.4,11.9,2.5,0.8\r\n01-01-1990 14:10:00,2.6,8.3,39.7,6.3,20.0,1.7,5.7,12.2,2.5,1.0\r\n01-01-1990 14:20:00,2.9,7.5,40.0,5.8,19.7,1.8,6.0,12.7,2.7,0.9\r\n01-01-1990 14:30:00,2.6,7.3,39.4,6.5,19.7,1.9,6.0,13.0,2.9,0.9\r\n01-01-1990 14:40:00,2.7,7.0,39.2,6.9,18.9,2.0,6.3,13.5,2.8,0.7\r\n01-01-1990 14:50:00,2.7,6.0,39.3,7.7,19.0,2.2,6.1,13.2,2.8,0.9\r\n01-01-1990 15:00:00,2.9,6.1,37.7,9.3,17.8,2.8,5.8,13.4,2.9,1.4\r\n01-01-1990 15:10:00,2.9,6.7,37.7,8.8,17.2,3.2,5.9,13.5,2.6,1.3\r\n01-01-1990 15:20:00,3.0,5.8,37.7,9.0,16.8,3.5,6.3,14.5,2.4,1.0\r\n01-01-1990 15:30:00,3.3,5.0,37.1,8.5,16.7,4.2,6.6,15.0,2.7,1.0\r\n01-01-1990 15:40:00,3.4,5.1,36.9,7.5,17.7,4.2,6.6,14.7,2.8,1.1\r\n01-01-1990 15:50:00,3.4,5.4,36.5,6.6,18.7,4.3,6.5,14.9,2.9,0.9\r\n01-01-1990 16:00:00,2.8,5.9,34.1,8.2,19.8,4.4,7.1,14.3,2.5,0.8\r\n01-01-1990 16:10:00,3.0,6.5,33.6,6.9,19.7,4.6,7.0,14.9,2.5,1.2\r\n01-01-1990 16:20:00,3.1,6.6,32.6,7.7,19.8,5.0,6.7,14.5,2.6,1.4\r\n01-01-1990 16:30:00,3.2,6.2,28.1,10.9,21.8,4.7,6.6,14.8,2.5,1.2\r\n01-01-1990 16:40:00,3.3,6.8,27.7,10.5,22.2,4.5,6.7,14.6,2.3,1.3\r\n01-01-1990 16:50:00,3.3,7.4,27.2,9.9,22.9,4.6,6.9,14.8,1.8,1.2\r\n01-01-1990 17:00:00,3.2,9.8,21.0,11.1,25.1,4.6,7.3,14.9,1.7,1.4\r\n01-01-1990 17:10:00,2.9,11.2,19.6,10.2,25.4,4.8,7.6,15.1,1.7,1.4\r\n01-01-1990 17:20:00,2.9,12.0,18.4,9.9,26.0,4.7,8.3,14.8,1.6,1.4\r\n01-01-1990 17:30:00,2.7,15.3,14.0,10.2,27.0,4.4,8.6,15.0,1.6,1.1\r\n01-01-1990 17:40:00,2.6,16.3,13.5,9.9,27.3,4.0,9.2,15.2,1.4,0.7\r\n01-01-1990 17:50:00,2.5,17.1,13.1,9.4,26.2,4.2,9.9,15.4,1.4,0.9\r\n01-01-1990 18:00:00,2.0,21.0,9.8,8.7,25.1,4.3,12.1,14.8,1.3,0.9\r\n01-01-1990 18:10:00,2.2,22.0,9.1,7.2,23.7,4.0,13.3,15.6,1.3,1.6\r\n01-01-1990 18:20:00,2.4,21.6,8.7,6.7,23.6,4.1,13.9,16.1,1.3,1.6\r\n01-01-1990 18:30:00,2.4,21.0,7.2,7.5,21.8,4.8,15.2,17.1,1.3,1.6\r\n01-01-1990 18:40:00,2.2,20.1,6.8,7.1,21.7,5.1,16.2,17.9,1.4,1.5\r\n01-01-1990 18:50:00,2.0,19.2,6.2,6.9,21.2,5.4,17.3,18.9,1.3,1.6\r\n01-01-1990 19:00:00,2.4,19.6,5.6,6.2,18.8,5.7,20.4,18.7,1.3,1.4\r\n01-01-1990 19:10:00,2.3,19.3,5.3,5.6,17.3,6.3,21.8,19.6,1.3,1.2\r\n01-01-1990 19:20:00,2.1,17.9,5.3,4.9,16.8,6.2,24.4,19.8,1.2,1.1\r\n01-01-1990 19:30:00,1.9,17.8,5.1,3.9,14.9,5.6,28.2,20.2,1.2,1.3\r\n01-01-1990 19:40:00,2.2,16.4,5.0,3.6,13.0,5.3,30.8,21.1,1.2,1.4\r\n01-01-1990 19:50:00,2.2,15.5,5.0,3.5,12.2,5.1,32.4,21.1,1.4,1.5\r\n01-01-1990 20:00:00,2.7,14.1,4.1,3.6,11.1,4.4,38.1,19.0,1.4,1.6\r\n01-01-1990 20:10:00,2.8,12.8,3.9,2.8,10.8,4.2,39.7,19.8,1.5,1.8\r\n01-01-1990 20:20:00,3.2,12.1,4.0,2.3,9.7,3.9,41.1,20.6,1.3,1.9\r\n01-01-1990 20:30:00,3.9,10.8,3.7,2.2,9.1,3.1,42.9,20.7,1.2,2.4\r\n01-01-1990 20:40:00,4.2,10.4,3.6,1.7,8.5,2.8,44.0,21.1,1.2,2.4\r\n01-01-1990 20:50:00,5.0,9.4,3.5,2.3,8.1,2.6,44.6,20.9,1.2,2.5\r\n01-01-1990 21:00:00,8.0,9.6,3.0,2.7,6.9,2.4,42.6,20.9,1.1,2.6\r\n01-01-1990 21:10:00,8.9,9.9,2.8,2.0,6.1,2.4,43.7,20.5,1.0,2.7\r\n01-01-1990 21:20:00,9.9,9.2,2.7,1.6,5.7,2.1,43.6,21.2,1.0,3.0\r\n01-01-1990 21:30:00,12.6,10.0,2.7,1.9,3.8,1.8,42.3,21.1,0.9,2.7\r\n01-01-1990 21:40:00,14.5,9.2,2.8,2.2,3.5,1.8,41.1,21.8,0.8,2.3\r\n01-01-1990 21:50:00,15.8,8.7,2.8,1.9,4.1,1.2,40.5,21.7,0.6,2.5\r\n01-01-1990 22:00:00,27.6,9.7,2.1,2.3,3.8,1.1,31.4,19.0,0.2,2.7\r\n01-01-1990 22:10:00,31.4,7.9,2.1,2.2,3.5,1.2,29.7,19.2,0.2,2.7\r\n01-01-1990 22:20:00,35.3,7.0,2.0,2.3,2.6,1.1,27.3,19.1,0.4,3.0\r\n01-01-1990 22:30:00,43.9,7.7,1.6,2.1,2.9,1.1,20.5,16.9,0.6,2.7\r\n01-01-1990 22:40:00,48.0,6.8,1.6,1.8,2.9,0.9,18.5,16.3,0.7,2.7\r\n01-01-1990 22:50:00,52.2,6.0,1.6,1.2,2.5,0.9,17.1,15.2,0.6,2.5\r\n01-01-1990 23:00:00,64.5,5.3,1.4,1.4,2.1,0.4,11.1,10.9,0.6,2.3\r\n01-01-1990 23:10:00,68.1,4.3,1.4,1.5,1.9,0.4,9.8,9.7,0.6,2.2\r\n01-01-1990 23:20:00,71.4,3.8,1.4,1.2,2.0,0.4,8.7,8.3,0.5,2.3\r\n01-01-1990 23:30:00,77.8,3.2,1.3,0.8,1.3,0.4,6.6,6.2,0.4,2.0\r\n01-01-1990 23:40:00,80.4,2.0,1.3,0.8,1.1,0.3,5.7,6.1,0.3,2.0\r\n01-01-1990 23:50:00,82.2,1.4,1.3,0.7,1.2,0.3,5.0,5.6,0.3,2.0\r\n02-01-1990 0:00:00,87.0,1.5,1.0,0.3,0.6,0.2,2.9,4.2,0.2,2.2\r\n02-01-1990 0:10:00,88.4,1.2,0.9,0.3,0.4,0.3,2.4,3.7,0.2,2.2\r\n02-01-1990 0:20:00,89.7,1.1,0.9,0.2,0.5,0.2,2.2,3.0,0.2,2.0\r\n02-01-1990 0:30:00,90.8,1.1,1.0,0.2,0.3,0.2,1.6,2.7,0.2,1.9\r\n02-01-1990 0:40:00,91.9,0.8,1.0,0.1,0.3,0.2,1.5,2.4,0.1,1.8\r\n02-01-1990 0:50:00,92.0,0.8,1.0,0.2,0.3,0.2,1.5,2.2,0.1,1.8\r\n02-01-1990 1:00:00,93.1,0.6,1.0,0.2,0.0,0.3,1.2,1.8,0.0,1.6\r\n02-01-1990 1:10:00,93.4,0.5,1.0,0.2,0.1,0.2,1.2,1.8,0.0,1.7\r\n02-01-1990 1:20:00,93.5,0.4,1.0,0.2,0.1,0.1,1.0,2.0,0.0,1.7\r\n02-01-1990 1:30:00,94.0,0.4,1.1,0.0,0.0,0.1,1.0,1.7,0.0,1.7\r\n02-01-1990 1:40:00,94.1,0.4,1.0,0.0,0.0,0.1,1.0,1.6,0.0,1.7\r\n02-01-1990 1:50:00,94.3,0.4,1.0,0.0,0.1,0.1,1.0,1.5,0.0,1.6\r\n02-01-1990 2:00:00,95.0,0.2,0.9,0.1,0.1,0.2,0.7,1.1,0.0,1.7\r\n02-01-1990 2:10:00,94.9,0.4,0.9,0.1,0.1,0.2,0.6,1.1,0.0,1.7\r\n02-01-1990 2:20:00,95.2,0.3,0.9,0.1,0.1,0.1,0.6,1.0,0.0,1.7\r\n02-01-1990 2:30:00,95.9,0.3,0.9,0.1,0.1,0.1,0.4,0.6,0.0,1.6\r\n02-01-1990 2:40:00,95.8,0.4,0.9,0.0,0.1,0.1,0.4,0.6,0.0,1.6\r\n02-01-1990 2:50:00,95.8,0.3,0.9,0.0,0.1,0.1,0.4,0.6,0.0,1.7\r\n02-01-1990 3:00:00,95.9,0.3,0.9,0.0,0.2,0.1,0.3,0.5,0.0,1.8\r\n02-01-1990 3:10:00,95.9,0.3,0.8,0.1,0.2,0.1,0.3,0.4,0.0,1.8\r\n02-01-1990 3:20:00,95.6,0.6,0.8,0.0,0.3,0.2,0.3,0.3,0.0,1.8\r\n02-01-1990 3:30:00,95.3,0.7,0.8,0.0,0.3,0.3,0.2,0.4,0.0,2.0\r\n02-01-1990 3:40:00,95.0,0.7,0.8,0.0,0.3,0.3,0.2,0.6,0.0,2.0\r\n02-01-1990 3:50:00,94.8,0.9,0.8,0.0,0.4,0.2,0.2,0.6,0.0,2.0",
            "comparison_csv": null
        },
        "scatter-plot": {
            "config_js": "config={\n  \"essential\": {\n    \"graphic_data_url\": \"data.csv\",\n    \"colour_palette\": [\"#206095\",\"#3fb0b3\"],\n    \"fillOpacity\":0.5,\n    \"strokeOpacity\":1,\n        \"radius\": \"4\",\n    \"sourceText\": \"Office for National Statistics\",\n    \"accessibleSummary\":\"Here is the screenreader text describing the chart.\",\n    \"xDomain\":\"auto\",\n    \"yDomain\":\"auto\",\n    // either \"auto\" or an array for the x/y domain e.g. [0,100]\n    \"xAxisLabel\":\"Really long x axis label that is so long that is needs wrapping on mobile because it is so so so so so so so long\",\n    \"yAxisLabel\":\"y axis label\",\n    \"xAxisFormat\":\".0%\",\n    \"yAxisFormat\":\".0%\"\n  },\n  \"optional\": {\n    \"margin\": {\n      \"sm\": {\n        \"top\": 30,\n        \"right\": 20,\n        \"bottom\": 75,\n        \"left\": 50\n      },\n      \"md\": {\n        \"top\": 30,\n        \"right\": 20,\n        \"bottom\": 75,\n        \"left\": 50\n      },\n      \"lg\": {\n        \"top\": 30,\n        \"right\":50,\n        \"bottom\": 75,\n        \"left\": 50\n      }\n    },\n    \"xAxisTicks\":{\n      \"sm\":4,\n      \"md\":8,\n      \"lg\":10\n    },\n    \"yAxisTicks\":{\n      \"sm\":4,\n      \"md\":4,\n      \"lg\":10\n    },\n    \"mobileBreakpoint\": 510,\n    \"mediumBreakpoint\": 600\n  },\n  \"elements\":{\"select\":0, \"nav\":0, \"legend\":0, \"titles\":0},\n  \"chart_build\":{}\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n  //population accessible summmary\n  d3.select('#accessibleSummary').html(config.essential.accessibleSummary)\n\n  let threshold_md = config.optional.mediumBreakpoint;\n  let threshold_sm = config.optional.mobileBreakpoint;\n  let colour = d3.scaleOrdinal(config.essential.colour_palette); //\n\n\n\n  //set variables for chart dimensions dependent on width of #graphic\n  if (parseInt(graphic.style(\"width\")) < threshold_sm) {\n    size = \"sm\"\n  } else if (parseInt(graphic.style(\"width\")) < threshold_md) {\n    size = \"md\"\n  } else {\n    size = \"lg\"\n  }\n\n  let margin = config.optional.margin[size]\n  let chart_width = parseInt(graphic.style(\"width\")) - margin.left - margin.right;\n  let height = 400 - margin.top - margin.bottom;\n\n  //set up scales\n  const x = d3.scaleLinear()\n    .range([0, chart_width]);\n\n  const y = d3.scaleLinear()\n     .range([height, 0])\n     \n\n  //create svg for chart\n  svg = d3.select('#graphic').append('svg')\n    .attr(\"width\", chart_width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .attr(\"class\", \"chart\")\n    .style(\"background-color\", \"#fff\")\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + (margin.top) + \")\")\n\n\n   // lets move on to setting up the legend for this chart. \nlet groups = [...new Set(graphic_data.map(item => item.group))]; // this will extract the unique groups from the data.csv\n\n\n// This code is meant to create a legend in the style of the scatterplot circle.\n\nlet legenditem = d3\n.select('#legend')\n.selectAll('div.legend-item')\n.data(groups)\n.enter()\n.append('div')\n.attr('class', 'legend--item');\n\nlegenditem \n .append('div')\n .attr('class', 'legend--icon--circle2')\n .style('background-color', (d) => {\n  let color = d3.color(colour(d));\n  color.opacity = 0.5;\n  return color;\n } )\n .style('border-color', (d) => colour(d));\n\nlegenditem\n .append('div')\n .append('p')\n .attr('class', 'legend--text')\n .html((d) => d);\n\n\n\n    // both of these are need to be looked at.\n\n  if(config.essential.xDomain==\"auto\"){\n    x.domain([0, d3.max(graphic_data,function(d){return d.xvalue})]);\n  }else{\n    x.domain(config.essential.xDomain)\n  }\n\n\n  if(config.essential.yDomain==\"auto\"){\n    y.domain([0, d3.max(graphic_data,function(d){return d.yvalue})]);\n  }else{\n    y.domain(config.essential.yDomain)\n  }\n\n  svg\n  .append('g')\n  .attr('class', 'x axis')\n  .attr('transform', `translate(0,${height})`)\n  .call(\n    d3.axisBottom(x)\n    .ticks(config.optional.xAxisTicks[size])\n    .tickSize(-height)\n    .tickPadding(10)\n    .tickFormat(d3.format(config.essential.xAxisFormat))\n  )\n\n  svg\n.append('g')\n.attr('class','axis numeric')\n.call(\n  d3.axisLeft(y)\n  .ticks(config.optional.yAxisTicks[size])\n  .tickSize(-chart_width)\n  .tickPadding(10)\n  .tickFormat(d3.format(config.essential.yAxisFormat))\n);\n\n\n\n  svg.selectAll('circle')\n      .data(graphic_data)\n      .join('circle')\n      .attr('cx',(d) => x(d.xvalue))\n      .attr('cy',(d) => y(d.yvalue))\n      .attr('r',config.essential.radius)\n      .attr(\"fill\", (d) => colour(d.group)) // This adds the colour to the circles based on the group\n      .attr('fill-opacity',config.essential.fillOpacity)\n      .attr('stroke',(d)=> colour(d.group))\n      .attr('stroke-opacity',config.essential.strokeOpacity);\n\n\n// This does the x-axis label\n    svg\n    .append('g')\n    .attr('transform', 'translate(0,' + height + ')')\n    .append('text')\n    .attr('x',chart_width)\n    .attr('y',40)\n    .attr('class','axis--label')\n    .text(config.essential.xAxisLabel)\n    .attr('text-anchor','end')\n    .call(wrap, chart_width);\n\n// This does the y-axis label\nsvg\n.append('g')\n.attr('transform', 'translate(0,0)')\n.append('text')\n.attr('x',-(margin.left-5))\n.attr('y',-10)\n.attr('class','axis--label')\n.text(config.essential.yAxisLabel)\n.attr('text-anchor','start');\n\n\n  //create link to source\n  d3.select(\"#source\")\n    .text(\"Source: \" + config.essential.sourceText)\n\n\n\n  //use pym to calculate chart dimensions\n  if (pymChild) {\n    pymChild.sendHeight();\n  }\n}\n\nfunction wrap(text, width) {\n        text.each(function() {\n          let text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1, // ems\n            y = text.attr(\"y\"),\n            x = text.attr(\"x\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr('x',x).attr('y',y);\n          while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n              line.pop();\n              tspan.text(line.join(\" \"));\n              line = [word];\n              tspan = text.append(\"tspan\").attr('x',x).attr(\"dy\", lineHeight + \"em\").text(word);\n            }\n          }\n          let breaks = text.selectAll(\"tspan\").size();\n          text.attr(\"y\", function(){return -6 * (breaks-1);});\n        });\n\n      }\n\n\nd3.csv(config.essential.graphic_data_url)\n  .then(data => {\n    //load chart data\n    graphic_data = data\n\n    //use pym to create iframed chart dependent on specified variables\n    pymChild = new pym.Child({\n      renderCallback: drawGraphic\n    });\n  });\n",
            "chart_css": ".grid line {\n  stroke: #ccc;\n  stroke-opacity: 0.7;\n}\n\n.grid .tick {\n  stroke: lightgrey;\n  stroke-opacity: 0.7;\n  shape-rendering: crispEdges;\n}\n\n.grid path {\n  stroke-width: 0;\n}",
            "data_csv": "name,xvalue,yvalue,group\r\nOther services,0.987848719,0.9,group1\r\nManufacturing,0.983661406,0.986,group1\r\nConstruction,0.681288045,0.4,group1\r\nArts,0.481757214,0.2,group1\r\nAdministrative,0.209665614,0.6,group1\r\nWholesale trade,0.176396639,0.4,group1\r\nAdministrative and supportive service activities,0.047910167,0.15,group1\r\nOther services,0.207848719,0.20,group2\r\nManufacturing,0.603661406,0.60,group2\r\nConstruction,0.21288045,0.20,group2\r\nArts,0.281757214,0.4,group2\r\nAdministrative,0.409665614,0.8,group2\r\nWholesale trade,0.276396639,0.5,group2\r\nAdministrative and supportive service activities,0.147910167,0.25,group2\r\n",
            "comparison_csv": null
        },
        "scatter-plot-animated": {
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\td3.select('#slider-simple').selectAll('*').remove();\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\n\tlet margin = config.optional.margin[size];\n\tlet chart_width =\n\t\tparseInt(graphic.style('width')) - margin.left - margin.right;\n\n\t//height is set by unique options in column name * a fixed height + some magic because scale band is all about proportion\n\tlet height = Math.ceil(\n\t\t(chart_width * config.optional.aspectRatio[size][1]) /\n\t\t\tconfig.optional.aspectRatio[size][0]\n\t);\n\n\t//Set the timepoints from the data for the slider labels and sort from oldest to newest\n\tlet timepoints = [...new Set(graphic_data.map((d) => d.year))].sort();\n\n\t//Takes the last data point from the date series\n\n\tlet timeLoad = config.essential.timeLoad;\n\n\t//set up scales\n\tconst x = d3.scaleLinear().range([0, chart_width]);\n\n\tconst y = d3.scaleLinear().range([height, 0]);\n\n\tfunction drawSliderButtons() {\n\t\t//Set the initial timepoint for the data load at from the config\n\n\t\tlet a = config.essential.timeLoad;\n\n\t\t//Set the date format for the slider label\n\n\t\tdateformat = d3.timeFormat(config.essential.dateFormat);\n\t\tdateparse = d3.timeParse(config.essential.dateParse);\n\n\t\t//Make the slider\n\n\t\tfunction makeSlider() {\n\t\t\tsliderDomain = [0, timepoints.length - 1]; //set the domain according to the length of the timepoints\n\n\t\t\t//Set the linear scale for the slider\n\n\t\t\tlet sliderScale = d3\n\t\t\t\t.scaleLinear()\n\t\t\t\t.domain(sliderDomain)\n\t\t\t\t.range([0, chart_width - margin.right]);\n\n\t\t\tsliderSimple = d3\n\t\t\t\t.sliderHorizontal(sliderScale)\n\t\t\t\t.step(1)\n\t\t\t\t.default(timepoints.indexOf(timeLoad)) //defaults the the slider to load with data from timeLoad in the config\n\t\t\t\t.width(chart_width - 150)\n\t\t\t\t.displayFormat(function (i) {\n\t\t\t\t\treturn dateformat(dateparse(timepoints[i]));\n\t\t\t\t}) //labels taken from timepoints\n\t\t\t\t.displayValue(true)\n\t\t\t\t.handle(d3.symbol().type(d3.symbolCircle).size(500)) //Handle colour is set in the chart.css file under parameter handle\n\t\t\t\t.fill('#206095')\n\t\t\t\t.ticks(0)\n\t\t\t\t.on('onchange', function (val) {\n\t\t\t\t\t// a is the master variable for the current timepoint\n\t\t\t\t\tif (a !== val) {\n\t\t\t\t\t\t// if a has changed\n\t\t\t\t\t\ta = val;\n\t\t\t\t\t}\n\t\t\t\t\tupdateVisuals(\n\t\t\t\t\t\tgraphic_data.filter(function (d) {\n\t\t\t\t\t\t\treturn d.year == timepoints[val];\n\t\t\t\t\t\t})\n\t\t\t\t\t); //update the chart according to the timepoint value from the slider by filtering on the timepoint\n\t\t\t\t});\n\n\t\t\t//call the slider\n\n\t\t\td3.select('#slider-simple')\n\t\t\t\t.append('svg')\n\t\t\t\t.attr('width', chart_width - 75)\n\t\t\t\t.attr('height', 100)\n\t\t\t\t.append('g')\n\t\t\t\t.attr('transform', 'translate(' + margin.left + ',19)')\n\t\t\t\t.call(sliderSimple);\n\n\t\t\td3.selectAll('.parameter-value text');\n\t\t}\n\n\t\t//Set the function of each play, forward and back buttons\n\n\t\tfunction setButtons() {\n\t\t\td3.select('#play').on('click', onPlay);\n\n\t\t\td3.select('#forward').on('click', fwd_animate);\n\n\t\t\td3.select('#back').on('click', rev_animate);\n\t\t}\n\n\t\t//Call the functions to set the buttons and make the slider\n\n\t\tsetButtons();\n\t\tmakeSlider();\n\n\t\t//Function to move the slider and retrieve the value from the slider\n\n\t\tfunction moveSliderToVal() {\n\t\t\tsliderSimple.silentValue(a);\n\t\t}\n\n\t\t//Forward animation function for the buttons\n\n\t\tfunction fwd_animate() {\n\t\t\t// go forwards in time and then back to the beginning once it reaches the end\n\t\t\tif (a < timepoints.length - 1) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = 0;\n\t\t\t}\n\t\t\tmoveSliderToVal(); //retrieves the value from the slider\n\t\t\tupdateVisuals(\n\t\t\t\tgraphic_data.filter(function (d) {\n\t\t\t\t\treturn d.year == timepoints[a];\n\t\t\t\t})\n\t\t\t); //update the chart according to the timepoint value from the slider by filtering on the timepoint\n\t\t}\n\n\t\t//Backwards animation function for the buttons\n\n\t\tfunction rev_animate() {\n\t\t\t// go back in time\n\t\t\tif (a > 0) {\n\t\t\t\ta = a - 1;\n\t\t\t} else {\n\t\t\t\ta = variables.length - 1;\n\t\t\t}\n\t\t\tmoveSliderToVal(); //retrieves the value from the slider\n\t\t\tupdateVisuals(\n\t\t\t\tgraphic_data.filter(function (d) {\n\t\t\t\t\treturn d.year == timepoints[a];\n\t\t\t\t})\n\t\t\t); //update the chart according to the timepoint value from the slider by filtering on the timepoint\n\t\t}\n\n\t\t//Function for clicking on the play button\n\n\t\tfunction onPlay() {\n\t\t\tfwd_animate(); // don't need a delay bfeore first animation\n\t\t\tanimating = setInterval(function () {\n\t\t\t\tfwd_animate();\n\t\t\t}, 1500); //sets an brief interval before moving the slider on one point\n\n\t\t\t// replace play control with pause\n\t\t\td3.select('#play')\n\t\t\t\t.select('span')\n\t\t\t\t.classed('glyphicon-play', false)\n\t\t\t\t.classed('glyphicon-pause', true);\n\n\t\t\t// switch id/class of play to pause\n\t\t\td3.select('#play').attr('id', 'pause');\n\t\t\t// change button event from play to pause\n\t\t\td3.select('#pause').on('click', onPause);\n\t\t}\n\n\t\t//Function for clicking on the pause button\n\t\tfunction onPause() {\n\t\t\t// replace pause symbol with play symbol\n\t\t\td3.select('#pause')\n\t\t\t\t.select('span')\n\t\t\t\t.classed('glyphicon-pause', false)\n\t\t\t\t.classed('glyphicon-play', true);\n\t\t\td3.select('#pause').attr('id', 'play');\n\t\t\t// make symbols clickable\n\t\t\tsetButtons(); //Resets the buttons\n\t\t\tclearInterval(animating); //stops the animation from moving forwards\n\t\t}\n\t}\n\n\t//if config drawSliderButtons is set to true, draw the buttons etc\n\n\tif (config.essential.drawSliderButtons === true) {\n\t\tdrawSliderButtons();\n\t} else {\n\t\td3.selectAll('.flex-container').remove();\n\t}\n\n\t//set up yAxis generator\n\tlet yAxis = d3\n\t\t.axisLeft(y)\n\t\t.tickSize(-chart_width - 10)\n\t\t.tickFormat(d3.format(config.essential.yDisplayFormat));\n\n\t//set up xAxis generator\n\tlet xAxis = d3\n\t\t.axisBottom(x)\n\t\t.tickSize(-height - 10)\n\t\t.tickFormat(d3.format(config.essential.xDisplayFormat))\n\t\t.ticks(config.optional.xAxisTicks[size]);\n\n\t//create svg for chart\n\tsvg = d3\n\t\t.select('#graphic')\n\t\t.append('svg')\n\t\t.attr('width', chart_width + margin.left + margin.right)\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n\t// Set the scales for the chart - auto calculates the scale from the data or you can select your own in the config\n\t//X scale\n\tif (config.essential.xDomain == 'auto') {\n\t\tx.domain([\n\t\t\td3.min(graphic_data, (d) => d.x),\n\t\t\td3.max(graphic_data, (d) => d.x)\n\t\t]);\n\t} else {\n\t\tx.domain(config.essential.xDomain);\n\t}\n\n\t//Y Scale\n\tif (config.essential.yDomain == 'auto') {\n\t\ty.domain([\n\t\t\td3.min(graphic_data, (d) => d.y),\n\t\t\td3.max(graphic_data, (d) => d.y)\n\t\t]);\n\t} else {\n\t\ty.domain(config.essential.yDomain);\n\t}\n\n\t//Draws the x axis zero line\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.attr('class', 'x axis')\n\t\t.call(xAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t});\n\n\t//Draws the y axis zero line\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'y axis')\n\t\t.call(yAxis)\n\t\t.selectAll('line')\n\t\t.each(function (d) {\n\t\t\tif (d == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t})\n\t\t.selectAll('text')\n\t\t.call(wrap, margin.left - 10);\n\n\t//remove the highlight stroke on mobile\n\tif (parseInt(graphic.style('width')) < threshold_md) {\n\t\td3.selectAll('.dots').attr('stroke', config.essential.colour_palette);\n\t}\n\n\t// // This does the y-axis label\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,0)')\n\t\t.append('text')\n\t\t.attr('x', -margin.left + 2)\n\t\t.attr('y', -20)\n\t\t.attr('class', 'axis--label')\n\t\t.attr('id', 'yAxisLabel')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n\t// // This does the x-axis label\n\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', 'translate(0,' + height + ')')\n\t\t.append('text')\n\t\t.attr('x', chart_width)\n\t\t.attr('y', 35)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//Initial draw of the chart with the data filtered on the timeLoad specified\n\n\tupdateVisuals(\n\t\tgraphic_data.filter(function (d) {\n\t\t\treturn d.year == timeLoad;\n\t\t})\n\t);\n\n\t//Function to update the visuals\n\n\tfunction updateVisuals(data) {\n\t\t// create a tooltip\n\t\tlet tooltip = d3\n\t\t\t.selectAll('body')\n\t\t\t.append('div')\n\t\t\t.attr('class', 'tooltip')\n\t\t\t.style('opacity', 0);\n\n\t\t//Set the date format\n\t\tlet data_format = d3.format('.1f');\n\n\t\t// Three functions that change the tooltip when user hover / move / leave the circle\n\n\t\tlet mouseover = function (d) {\n\t\t\ttooltip.style('opacity', 1);\n\t\t\td3.select(this).style('stroke', 'orange').style('opacity', 1);\n\t\t};\n\t\tlet mousemove = function (event, d) {\n\t\t\t// console.log(d3.pointer(event))\n\t\t\tif (parseInt(graphic.style('width')) > threshold_md) {\n\t\t\t\ttooltip\n\t\t\t\t\t.html(\n\t\t\t\t\t\t'<span style =\"color: #206095;font-size: 15px;\">' +\n\t\t\t\t\t\t\td.group +\n\t\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t\t'<br><br>' +\n\t\t\t\t\t\t\t'<span style=\"font-weight:500; opacity:1\">' +\n\t\t\t\t\t\t\t'Wage growth: ' +\n\t\t\t\t\t\t\tdata_format(d.y) +\n\t\t\t\t\t\t\t' p.p.' +\n\t\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t\t'<br>' +\n\t\t\t\t\t\t\t'<span style=\"font-weight:500; opacity:1\">' +\n\t\t\t\t\t\t\t'Median hourly pay (£): ' +\n\t\t\t\t\t\t\tdata_format(d.x) +\n\t\t\t\t\t\t\t'%' +\n\t\t\t\t\t\t\t'</span>'\n\t\t\t\t\t)\n\t\t\t\t\t.style(\n\t\t\t\t\t\t'left',\n\t\t\t\t\t\td3.pointer(event)[0] > chart_width - 200\n\t\t\t\t\t\t\t? d3.pointer(event)[0] - 200 + 'px'\n\t\t\t\t\t\t\t: d3.pointer(event)[0] + 25 + 'px'\n\t\t\t\t\t)\n\t\t\t\t\t.style(\n\t\t\t\t\t\t'top',\n\t\t\t\t\t\td3.pointer(event)[1] < 25\n\t\t\t\t\t\t\t? d3.pointer(event)[1] + 150 + 'px'\n\t\t\t\t\t\t\t: d3.pointer(event)[1] - 20 + 'px'\n\t\t\t\t\t);\n\t\t\t\t// .style(\"top\", (d3.pointer(event)[1]-20) + \"px\")\n\t\t\t} else {\n\t\t\t\ttooltip\n\t\t\t\t\t.html(\n\t\t\t\t\t\t'<span style =\"color: #206095; font-size: 15px;\">' +\n\t\t\t\t\t\t\td.group +\n\t\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t\t'<br><br>' +\n\t\t\t\t\t\t\t'<span style=\"font-weight:500; opacity:1\">' +\n\t\t\t\t\t\t\t'Wage growth: ' +\n\t\t\t\t\t\t\tdata_format(d.y) +\n\t\t\t\t\t\t\t' p.p.' +\n\t\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t\t'<br>' +\n\t\t\t\t\t\t\t'<span style=\"font-weight:500; opacity:1\">' +\n\t\t\t\t\t\t\t'Median hourly pay (£): ' +\n\t\t\t\t\t\t\tdata_format(d.x) +\n\t\t\t\t\t\t\t'%' +\n\t\t\t\t\t\t\t'</span>'\n\t\t\t\t\t)\n\t\t\t\t\t.style('right', 5 + 'px')\n\t\t\t\t\t.style('top', 0 + 'px');\n\t\t\t}\n\t\t};\n\t\tlet mouseleave = function (d) {\n\t\t\tif (parseInt(graphic.style('width')) > threshold_md) {\n\t\t\t\ttooltip.style('opacity', 0);\n\t\t\t\td3.select(this)\n\t\t\t\t\t.style('opacity', 0.75)\n\t\t\t\t\t.style('stroke', (d) =>\n\t\t\t\t\t\td.highlight == 0 ? config.essential.colour_palette : '#222222'\n\t\t\t\t\t);\n\t\t\t} else {\n\t\t\t\ttooltip.style('opacity', 0);\n\t\t\t\td3.select(this)\n\t\t\t\t\t.style('opacity', 0.75)\n\t\t\t\t\t.style('stroke', config.essential.colour_palette);\n\t\t\t}\n\t\t};\n\n\t\t//draw the circles with transition if slider is drawn\n\n\t\tt = d3.transition().duration(750).ease(d3.easeCircle);\n\n\t\tsvg\n\t\t\t.selectAll('circle')\n\t\t\t.data(data)\n\t\t\t.join('circle')\n\t\t\t.merge(d3.selectAll('circle'))\n\t\t\t.attr('class', 'dots')\n\t\t\t.transition(t)\n\t\t\t.attr('cx', (d) => x(d.x))\n\t\t\t.attr('cy', (d) => y(d.y))\n\t\t\t.attr('r', config.essential.size)\n\t\t\t.attr('fill', config.essential.colour_palette)\n\t\t\t.attr('opacity', 0.75)\n\t\t\t.attr('stroke-width', (d) => (d.highlight == 0 ? '1px' : '1.5px'))\n\t\t\t.attr('stroke', (d) =>\n\t\t\t\td.highlight == 0 ? config.essential.colour_palette : '#222222'\n\t\t\t);\n\n\t\td3.selectAll('.dots')\n\t\t\t.on('mouseover', mouseover)\n\t\t\t.on('mousemove', mousemove)\n\t\t\t.on('mouseleave', mouseleave)\n\t\t\t.on('click', function (event, d) {\n\t\t\t\td3.pointer(event)[0];\n\t\t\t});\n\n\t\t//draw legend on desktop\n\n\t\t//if screen is larger than medium threshold and highlight is true in config, add the labels\n\n\t\tif (\n\t\t\t(parseInt(graphic.style('width')) > threshold_md &&\n\t\t\t\tconfig.essential.highlight === true) === true\n\t\t) {\n\t\t\tdrawHighlight();\n\t\t} //end if for datalabels\n\n\t\t//if you have lots of labels, you can choose whether you want them to sit above, below or in the middle of the circle using the label_y column in data.csv\n\t\t//if you have lots of labels, you can choose whether you want them to start or end on the circle using the label_anchor column in data.csv\n\n\t\tfunction drawHighlight() {\n\t\t\t// d3.selectAll('.dataLabels').remove()\n\t\t\tsvg\n\t\t\t\t.selectAll('text.dataLabels')\n\t\t\t\t.data(data)\n\t\t\t\t.join('text')\n\t\t\t\t.merge(d3.selectAll('text.dataLabels'))\n\t\t\t\t.transition(t)\n\t\t\t\t.attr('class', 'dataLabels')\n\t\t\t\t.attr('id', function (d, i) {\n\t\t\t\t\treturn d.group;\n\t\t\t\t})\n\t\t\t\t.style('font-size', '14px')\n\t\t\t\t.style('font-weight', 500)\n\t\t\t\t.attr('x', function (d) {\n\t\t\t\t\tif (d.label_y == 'middle' && d.label_anchor == 'start') {\n\t\t\t\t\t\treturn x(d.x) + config.essential.size + 6;\n\t\t\t\t\t} // shifts to the side of the circle when text anchor is middle\n\t\t\t\t\telse if (d.label_y == 'middle' && d.label_anchor == 'end') {\n\t\t\t\t\t\treturn x(d.x) - config.essential.size - 6;\n\t\t\t\t\t} // shifts to the other side of the circle when text anchor is middle\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn x(d.x);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t// .attr('y',function(d) { return (y(d.y) < (topYTick) ? (y(d.y)+config.essential.size+15) : (y(d.y)-config.essential.size)-2 )})\n\t\t\t\t.attr('y', function (d) {\n\t\t\t\t\tif (d.label_y == 'top') {\n\t\t\t\t\t\treturn y(d.y) - config.essential.size - 6;\n\t\t\t\t\t} else if (d.label_y == 'bottom') {\n\t\t\t\t\t\treturn y(d.y) + config.essential.size + 15;\n\t\t\t\t\t} else if (d.label_y == 'middle') {\n\t\t\t\t\t\treturn y(d.y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn y(d.y) - config.essential.size - 2;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.style('text-anchor', function (d) {\n\t\t\t\t\tif (d.label_anchor == 'start') {\n\t\t\t\t\t\treturn d.label_anchor;\n\t\t\t\t\t} else if (d.label_anchor == 'middle') {\n\t\t\t\t\t\treturn d.label_anchor;\n\t\t\t\t\t} else if (d.label_anchor == 'end') {\n\t\t\t\t\t\treturn d.label_anchor;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'start';\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.text((d) => (d.highlight == 0 ? null : d.group));\n\t\t}\n\t} //end updateVisuals function\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n} ///END DRAW GRAPHIC\n\nfunction wrap(\n\ttext,\n\twidth,\n\tdyAdjust,\n\tlineHeightEms,\n\tlineHeightSquishFactor,\n\tsplitOnHyphen,\n\tcentreVertically\n) {\n\t// Use default values for the last three parameters if values are not provided.\n\tif (!lineHeightEms) lineHeightEms = 1.15;\n\tif (!lineHeightSquishFactor) lineHeightSquishFactor = 1;\n\tif (splitOnHyphen == null) splitOnHyphen = true;\n\tif (centreVertically == null) centreVertically = true;\n\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\tx = text.attr('x'),\n\t\t\ty = text.attr('y');\n\n\t\tlet words = [];\n\t\ttext\n\t\t\t.text()\n\t\t\t.split(/\\s+/)\n\t\t\t.forEach(function (w) {\n\t\t\t\tif (splitOnHyphen) {\n\t\t\t\t\tlet subWords = w.split('-');\n\t\t\t\t\tfor (let i = 0; i < subWords.length - 1; i++)\n\t\t\t\t\t\twords.push(subWords[i] + '-');\n\t\t\t\t\twords.push(subWords[subWords.length - 1] + ' ');\n\t\t\t\t} else {\n\t\t\t\t\twords.push(w + ' ');\n\t\t\t\t}\n\t\t\t});\n\n\t\ttext.text(null); // Empty the text element\n\n\t\t// `tspan` is the tspan element that is currently being added to\n\t\tlet tspan = text.append('tspan');\n\n\t\tlet line = ''; // The current value of the line\n\t\tlet prevLine = ''; // The value of the line before the last word (or sub-word) was added\n\t\tlet nWordsInLine = 0; // Number of words in the line\n\t\tfor (let i = 0; i < words.length; i++) {\n\t\t\tlet word = words[i];\n\t\t\tprevLine = line;\n\t\t\tline = line + word;\n\t\t\t++nWordsInLine;\n\t\t\ttspan.text(line.trim());\n\t\t\tif (tspan.node().getComputedTextLength() > width && nWordsInLine > 1) {\n\t\t\t\t// The tspan is too long, and it contains more than one word.\n\t\t\t\t// Remove the last word and add it to a new tspan.\n\t\t\t\ttspan.text(prevLine.trim());\n\t\t\t\tprevLine = '';\n\t\t\t\tline = word;\n\t\t\t\tnWordsInLine = 1;\n\t\t\t\ttspan = text.append('tspan').text(word.trim());\n\t\t\t}\n\t\t}\n\n\t\tlet tspans = text.selectAll('tspan');\n\n\t\tlet h = lineHeightEms;\n\t\t// Reduce the line height a bit if there are more than 2 lines.\n\t\tif (tspans.size() > 2)\n\t\t\tfor (let i = 0; i < tspans.size(); i++) h *= lineHeightSquishFactor;\n\n\t\ttspans.each(function (d, i) {\n\t\t\t// Calculate the y offset (dy) for each tspan so that the vertical centre\n\t\t\t// of the tspans roughly aligns with the text element's y position.\n\t\t\tlet dy = i * h;\n\n\t\t\tif (centreVertically) dy -= ((tspans.size() - 1) * h) / 2;\n\t\t\td3.select(this)\n\t\t\t\t.attr('y', y)\n\t\t\t\t.attr('x', x)\n\t\t\t\t.attr('dy', dy + 'em');\n\t\t});\n\t});\n} //end wrap\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tdata.forEach(function (d) {\n\t\td.x = +d.x;\n\t\td.y = +d.y;\n\t\td.size = +d.size;\n\t\td.highlight = +d.highlight;\n\t});\n\n\tgraphic_data = data;\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": \"#27A0CC\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"accessibleSummary\": \"Here is the screenreader text describing the chart.\",\n\t\t\"size\": 5,\n\t\t\"xDomain\": \"auto\", //auto for auto domain or array [0,50] to define your own\n\t\t\"yDomain\": \"auto\", //auto for auto domain or array [0,50] to define your own\n\t\t\"rDomain\": [25, 2700], //input the domain for the circles\n\t\t\"dateFormat\": \"%Y\", //format you want to display\n\t\t\"dateParse\": \"%Y\", //format you are loading the data in from csv,\n\t\t\"xDisplayFormat\": \".0f\", //x axis ticks display format\n\t\t\"yDisplayFormat\": \".0f\", //y axis ticks display format\n\t\t\"legendLabels\": [\"50 thousand people\", \"5 million people\"], //labels for the legend\n\t\t\"legendRadius\": [100, 3000], //how big you want the legend circles to be\n\t\t\"legendCX\": [-25, 160], //for adusting the legend circle X\n\t\t\"legendCY\": [-50, -25], //for adusting the legend circle X\n\t\t\"timeLoad\": \"2022\", //Input the time you want the chart to load on if there is a slider\n\t\t\"xAxisLabel\": \"Wage growth % year on year\",\n\t\t\"yAxisLabel\": \"Median hourly pay (£)\",\n\t\t\"drawSliderButtons\": true,\n\t\t\"highlight\": true //if you want to adjust where the highlight label goes, input top/bottom/middle for the relevant groups in the label_y column of the data file or start/middle/end to alter the text anchor in the label_anchor column\n\t},\n\t\"optional\": {\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 40,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 35\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 40,\n\t\t\t\t\"right\": 20,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 35\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 40,\n\t\t\t\t\"right\": 60,\n\t\t\t\t\"bottom\": 50,\n\t\t\t\t\"left\": 35\n\t\t\t}\n\t\t},\n\t\t\"aspectRatio\": {\n\t\t\t\"sm\": [16, 14],\n\t\t\t\"md\": [16, 12],\n\t\t\t\"lg\": [16, 12]\n\t\t},\n\t\t\"xAxisTicks\": {\n\t\t\t\"sm\": 2,\n\t\t\t\"md\": 4,\n\t\t\t\"lg\": 4\n\t\t},\n\t\t\"mobileBreakpoint\": 450, //if you update this, update the max-width on the @media css for the tooltip to size correctly\n\t\t\"mediumBreakpoint\": 600\n\t}\n};\n",
            "data_csv": "group,x,y,size,year,highlight,label_y,label_anchor\r\nAdministrative occupations,4.7,12.92,2516,2022,0,,\r\nAdministrative occupations,3.4,12.3,2576,2021,0,,\r\nAdministrative occupations,1.4,11.9,2291,2020,0,,\r\nAdministrative occupations,3.2,11.74,2426,2019,0,,\r\nBusiness and public service associate professionals,2.6,17.07,1981,2022,0,,\r\nBusiness and public service associate professionals,3.3,17.17,2379,2021,0,,\r\nBusiness and public service associate professionals,-2.8,16.63,2269,2020,0,,\r\nBusiness and public service associate professionals,1.9,17.1,2232,2019,0,,\r\n\"Business, media and public service professionals\",2.7,21.65,2154,2022,0,,\r\n\"Business, media and public service professionals\",3.5,21.63,1668,2021,0,,\r\n\"Business, media and public service professionals\",1.4,20.91,1566,2020,0,,\r\n\"Business, media and public service professionals\",3.4,20.63,1516,2019,0,,\r\nCaring personal service occupations,7,11.16,1809,2022,0,,\r\nCaring personal service occupations,2.8,10.43,2205,2021,0,,\r\nCaring personal service occupations,2.9,10.14,2057,2020,0,,\r\nCaring personal service occupations,5.7,9.85,2101,2019,0,,\r\nCommunity and civil enforcement occupations,4.4,13.24,27,2022,0,,\r\n\"Culture, media and sports occupations\",6.4,14.06,235,2022,0,,\r\n\"Culture, media and sports occupations\",0,13.29,260,2021,0,,\r\n\"Culture, media and sports occupations\",-2.9,13.29,274,2020,0,,\r\n\"Culture, media and sports occupations\",0.2,13.68,265,2019,0,,\r\nCustomer service occupations,8.6,11.37,500,2022,0,,\r\nCustomer service occupations,1.7,10.62,538,2021,0,,\r\nCustomer service occupations,0.2,10.44,565,2020,0,,\r\nCustomer service occupations,0.8,10.42,560,2019,0,,\r\nDirectors,4.3,24.47,2203,2022,1,top,start\r\nDirectors,0.3,22.82,2333,2021,1,bottom,start\r\nDirectors,-1,22.76,2395,2020,1,bottom,start\r\nDirectors,1.7,23,2395,2019,1,bottom,start\r\nElementary administration and service occupations,6.5,10.12,2523,2022,0,,\r\nElementary administration and service occupations,3.5,9.5,2321,2021,0,,\r\nElementary administration and service occupations,3.5,9.18,2082,2020,0,,\r\nElementary administration and service occupations,5.5,8.86,2573,2019,0,,\r\nElementary trades and related occupations,7.8,10.81,300,2022,0,,\r\nElementary trades and related occupations,3.3,10.07,356,2021,0,,\r\nElementary trades and related occupations,2.2,9.75,326,2020,0,,\r\nElementary trades and related occupations,3.7,9.54,353,2019,0,,\r\nHealth and social care associate professionals,4.1,12.87,600,2022,0,,\r\nHealth and social care associate professionals,2.2,13.5,474,2021,0,,\r\nHealth and social care associate professionals,0.6,13.21,433,2020,0,,\r\nHealth and social care associate professionals,2,13.13,386,2019,0,,\r\nHealth professionals,2.6,20.64,1844,2022,0,,\r\nHealth professionals,1.9,20.03,1651,2021,0,,\r\nHealth professionals,1,19.66,1628,2020,0,,\r\nHealth professionals,6.1,19.46,1605,2019,0,,\r\n\"Leisure, travel and related personal service occupations\",6.9,10.69,371,2022,0,,\r\n\"Leisure, travel and related personal service occupations\",3.8,10,338,2021,0,,\r\n\"Leisure, travel and related personal service occupations\",0.6,9.63,366,2020,0,,\r\n\"Leisure, travel and related personal service occupations\",6.1,9.57,422,2019,0,,\r\nOther managers and proprietors,6.5,16.01,539,2022,0,,\r\nOther managers and proprietors,0.7,14.96,477,2021,0,,\r\nOther managers and proprietors,0.1,14.86,450,2020,0,,\r\nOther managers and proprietors,4.8,14.84,450,2019,0,,\r\n\"Process, plant and machine operatives\",8.7,12.17,696,2022,0,,\r\n\"Process, plant and machine operatives\",4.2,11.27,632,2021,0,,\r\n\"Process, plant and machine operatives\",0,10.81,648,2020,0,,\r\n\"Process, plant and machine operatives\",3.1,10.82,705,2019,0,,\r\nProtective service occupations,0,19.71,447,2022,1,bottom,\r\nProtective service occupations,2.3,19.67,366,2021,1,bottom,\r\nProtective service occupations,2.9,19.23,340,2020,1,bottom,\r\nProtective service occupations,0.6,18.68,312,2019,1,bottom,\r\nSales occupations,4.2,10.19,1322,2022,0,,\r\nSales occupations,5.4,9.81,1435,2021,0,,\r\nSales occupations,4.9,9.31,1415,2020,0,,\r\nSales occupations,5,8.87,1454,2019,0,,\r\n\"Science, engineering and technology associate professionals\",4,14.9,808,2022,0,,\r\n\"Science, engineering and technology associate professionals\",0.5,14.37,775,2021,0,,\r\n\"Science, engineering and technology associate professionals\",-0.5,14.3,746,2020,0,,\r\n\"Science, engineering and technology associate professionals\",2,14.37,714,2019,0,,\r\n\"Science, research, engineering and technology professionals\",3.6,22.41,1844,2022,0,,\r\n\"Science, research, engineering and technology professionals\",3,21.99,1589,2021,0,,\r\n\"Science, research, engineering and technology professionals\",-0.6,21.35,1426,2020,0,,\r\n\"Science, research, engineering and technology professionals\",1.5,21.48,1388,2019,0,,\r\nSecretarial and related occupations,4.4,11.29,539,2022,0,,\r\nSecretarial and related occupations,4.1,10.78,587,2021,0,,\r\nSecretarial and related occupations,0.9,10.36,558,2020,0,,\r\nSecretarial and related occupations,2.7,10.27,601,2019,0,,\r\nSkilled agricultural and related trades,6.1,11.54,107,2022,0,,\r\nSkilled agricultural and related trades,3.7,10.8,100,2021,0,,\r\nSkilled agricultural and related trades,2.6,10.42,104,2020,0,,\r\nSkilled agricultural and related trades,4.4,10.15,103,2019,0,,\r\nSkilled construction and building trades,5.1,14.5,289,2022,0,,\r\nSkilled construction and building trades,8.6,13.7,300,2021,0,,\r\nSkilled construction and building trades,-5.1,12.62,296,2020,0,,\r\nSkilled construction and building trades,2.8,13.29,304,2019,0,,\r\n\"Skilled metal, electrical and electronic trades\",6.7,15.47,928,2022,1,middle,end\r\n\"Skilled metal, electrical and electronic trades\",5.5,14.62,879,2021,1,top,end\r\n\"Skilled metal, electrical and electronic trades\",-3.6,13.86,930,2020,1,top,start\r\n\"Skilled metal, electrical and electronic trades\",2.7,14.37,999,2019,1,top,end\r\nTeaching and educational professionals,2.5,24.5,1769,2022,1,bottom,start\r\nTeaching and educational professionals,2.7,24.17,1728,2021,1,top,start\r\nTeaching and educational professionals,1.6,23.53,1626,2020,1,top,start\r\nTeaching and educational professionals,2.1,23.16,1536,2019,1,top,start\r\n\"Textiles, printing and other skilled trades\",11.8,11,406,2022,0,,\r\n\"Textiles, printing and other skilled trades\",1.3,9.84,425,2021,0,,\r\n\"Textiles, printing and other skilled trades\",-1.8,9.71,429,2020,0,,\r\n\"Textiles, printing and other skilled trades\",5,9.88,511,2019,0,,\r\nTransport and mobile machine drivers and operatives,9,12.75,743,2022,0,,\r\nTransport and mobile machine drivers and operatives,6.3,11.69,695,2021,0,,\r\nTransport and mobile machine drivers and operatives,-2,11,692,2020,0,,\r\nTransport and mobile machine drivers and operatives,3.9,11.23,794,2019,0,,\r\n",
            "chart_css": "html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\nhtml {\n  -webkit-text-size-adjust: none;\n  /* prevent font scaling in landscape */\n}\n\nbody\n/* required */\n  {\n  font-family: 'Open Sans', sans-serif;\n  font-weight: 400;\n  max-width: 700px;\n  margin: 0px auto;\n}\n\ntext\n/* required */\n  {\n\n  font-family: 'Open Sans', sans-serif;\n  font-weight: 400;\n}\n\n/* chart */\n#graphic\n/* required */\n  {\n  width: 100%;\n}\n\n.timeControlButtons {\n  background: none;\n  border: none;\n  color: #206095;\n  font-size: 27px;\n}\n\n.glyphicon {\n  color: #206095;\n  font-size: 27px;\n}\n\n.parameter-value text {\n  font-size: 21px;\n  font-weight: 600;\n}\n\n\n/* axis tick labels */\nsvg.chart g.axis text\n/* sets all tick text as grey 100 */\n  {\n  font-size: 14px;\n  fill: #414042;\n}\n\n/* overwrites x-axis as grey 75 */\nsvg.chart g.x.axis text\n{\n  fill:#707071;\n}\n\n/* this sets the labels for the axis */\n.axis--label{\n  font-size: 14px;\n  fill: #707071;\n}\n\n\n/* do not show the line that runs the domain of the axis */\nsvg.chart g.axis path.domain\n/* required */\n{\n  display:none;\n}\n\n/* this sets the ticks */\nsvg.chart .axis line\n{\n  stroke: #d9d9d9;\n  shape-rendering: crispEdges;\n}\n\n/* this sets zero line */\n\ng.tick line.zero-line\n{\n  stroke: #B3B3B3;\n  stroke-width: 1.5px;\n  shape-rendering: crispEdges;\n}\n\n\n/* source */\n#source {\n  font-size: 16px;\n  margin: 16px 0 8px 0;\n  font-weight: 400;\n  color: #707071;\n}\n\n/* legend div */\n#legend{\n  display:flex;\n  flex-wrap: wrap;\n}\n\n.legend--item {\n  display:flex;\n  padding-right:40px;\n  padding-bottom: 12px;\n}\n\n.legend--icon {\n  height: 12px;\n  width: 12px;\n  border-radius: 50%;\n  align-self: center;\n\n}\n\n.legend--text{\n  color:#707070;\n  line-height: 14px;\n  font-size: 14px;\n  padding-left: 12px\n}\n\n@media (max-width: 450px) {\n  #legend{\n    flex-flow:column;\n  }\n\n  .legend--item{\n    padding-bottom: 8px;\n  }\n\n  div.tooltip {\t\n    position: absolute;\t\t\t\n    text-align: start;\t\t\t\n    font-weight: 600;\n    font-size: 14px;\n    color: #414042;\n    border: 0px;\t\t\n    border-radius: 8px;\t\t\t\n    pointer-events: none;\n    background-color: #FFF;\n    border: orange 2px solid;\n    padding: 5px;\n    max-width: 50%;\n    font-family: 'Open Sans', sans-serif;\n  }\n}\n\n\n/* for content that needs to be visible to a screenreader but invisible and take no space for users viewing the chart */\n.visuallyhidden{\n\tposition: absolute;\n\twidth: 1px;\n\theight: 1px;\n\tmargin: -1px;\n\tpadding: 0;\n\toverflow: hidden;\n \tclip: rect(0,0,0,0);\n\tborder: 0;\n}\n\n\n.dataLabels{\n  font-weight: 500;\n  font-size: 14px;\n  color: #414042;\n}\n\n\n.annotations{\n  font-size: 14px;\n  color: #414042;\n}\n\n.ticky11 text{\n  font-weight: 700;\n}\n\nh6 {\n  font-size: 16px;\n  margin: 16px 0 8px 0;\n  font-weight: 700;\n  color:#323132;\n}\n\ndiv.tooltip {\t\n  position: absolute;\t\t\t\n  text-align: start;\t\t\t\n  font-weight: 600;\n  font-size: 14px;\n  color: #414042;\n  border: 0px;\t\t\n  border-radius: 8px;\t\t\t\n  pointer-events: none;\n  background-color: #FFF;\n  border: orange 2px solid;\n  padding: 5px;\n  font-family: 'Open Sans', sans-serif;\n  max-width: 250px;\n}\n\n\n.zero-line\n{\n  stroke: #B3B3B3;\n  stroke-width: 1.5px;\n  shape-rendering: crispEdges;\n}\n\nhr {\n  border:none;\n  border-top:1px dashed #414042;\n  color:#fff;\n  background-color:#fff;\n  height:1px;\n  /* width:50%; */\n  }\n\n  br {\n    /* display: block;\n    margin-bottom: 2px;\n    font-size:2px; */\n    line-height: 20;\n  }\n\n\n  .legend{\n    width: 50%;\n    height: 110px;\n    margin-top: 10px;\n  }\n  \n  .legendcircle{\n    fill: none;\n    stroke: #222222;\n    stroke-width: 1.5;\n  }\n  \n  .legendline{\n    stroke: #222222;\n    stroke-width: 1.5;\n    stroke-dasharray: 5 2;\n  }\n  \n  .legendtext{\n    font-size: 14px;\n  }\n\n  .parameter-value path{\n    fill:#003C57;\n    stroke:white;\n    stroke-width:1.5px;\n  }\n  .parameter-value path:focus{\n    fill:#003C57;\n    stroke:orange;\n    stroke-width:3px;\n  }\n\n  .flex-container {\n    display: flex;\n    flex-direction: row;\n  }\n\n",
            "comparison_csv": null
        },
        "scatter-plot-sm": {
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n  //population accessible summmary\n  d3.select('#accessibleSummary').html(config.essential.accessibleSummary)\n\n  let threshold_md = config.optional.mediumBreakpoint;\n  let threshold_sm = config.optional.mobileBreakpoint;\n  let colour = d3.scaleOrdinal(config.essential.colour_palette); //\n\n\n\n  //set variables for chart dimensions dependent on width of #graphic\n  if (parseInt(graphic.style(\"width\")) < threshold_sm) {\n    size = \"sm\"\n  } else if (parseInt(graphic.style(\"width\")) < threshold_md) {\n    size = \"md\"\n  } else {\n    size = \"lg\"\n  }\n\n  const chartEvery = config.optional.chartEvery[size];\n\n  let margin = config.optional.margin[size]\n  let chart_width = (parseInt(graphic.style(\"width\"))/chartEvery) - margin.left - margin.right;\n  let height = 400 - margin.top - margin.bottom;\n\n  // lets move on to setting up the legend for this chart. \nlet legendGroups = [...new Set(graphic_data.map(item => item.group))]; // this will extract the unique groups from the data.csv\n\n\nlet legenditem = d3\n.select('#legend')\n.selectAll('div.legend-item')\n.data(legendGroups)\n.enter()\n.append('div')\n.attr('class', 'legend--item');\n\n// Hey fellow Brit - I know you might be looking at color and are tempted to change that to colour - don't! Sadly this is a d3 module. https://github.com/d3/d3-color\nlegenditem \n .append('div')\n .attr('class', 'legend--icon--circle2')\n .style('background-color', (d) => {\n  let color = d3.color(colour(d));\n  color.opacity = 0.5;\n  return color;\n })\n  .style('border-color', (d) => colour(d));\n\nlegenditem\n .append('div')\n .append('p')\n .attr('class', 'legend--text')\n .html((d) => d);\n\n\n\n  //set up scales\n  const x = d3.scaleLinear()\n    .range([0, chart_width]);\n\n  const y = d3.scaleLinear()\n     .range([height, 0])\n   \n  //group data on the basis of plot\n  grouped_data = d3.group(graphic_data, d => d.series)\n\n  let plots = [...new Set(d3.map(graphic_data, d => d.series))];\n \n  //create a svg for each chart\n  svg = d3.select('#graphic')\n     .selectAll('div')\n     .data(grouped_data)\n     .enter()\n     .append('svg')\n     .attr(\"width\", chart_width + margin.left + margin.right)\n     .attr(\"height\", height + margin.top + margin.bottom)\n     .attr(\"class\", \"chart\")\n     .style(\"background-color\", \"#fff\")\n     .append(\"g\")\n     .attr(\"transform\", \"translate(\" + margin.left + \",\" + (margin.top) + \")\")\n\n    // both of these are need to be looked at.\n\n  if(config.essential.xDomain==\"auto\"){\n    x.domain([0, d3.max(graphic_data,function(d){return d.xvalue})]);\n  }else{\n    x.domain(config.essential.xDomain)\n  }\n\n\n  if(config.essential.yDomain==\"auto\"){\n    y.domain([0, d3.max(graphic_data,function(d){return d.yvalue})]);\n  }else{\n    y.domain(config.essential.yDomain)\n  }\n\n  svg\n  .append('g')\n  .attr('class', 'x axis')\n  .attr('transform', `translate(0,${height})`)\n  .call(\n    d3.axisBottom(x)\n    .ticks(config.optional.xAxisTicks[size])\n    .tickSize(-height)\n    .tickPadding(10)\n    .tickFormat(d3.format(config.essential.xAxisFormat))\n  )\n\nsvg\n.append('g')\n.attr('class','axis numeric')\n.call(\n  d3.axisLeft(y)\n  .ticks(config.optional.yAxisTicks[size])\n  .tickSize(-chart_width)\n  .tickPadding(10)\n  .tickFormat(d3.format(config.essential.yAxisFormat))\n);\n\n\n\n  svg.selectAll('circle')\n      .data(graphic_data)\n      .join('circle')\n      .data(d => d[1])\n      .attr('cx',(d) => x(d.xvalue))\n      .attr('cy',(d) => y(d.yvalue))\n      .attr('r',config.essential.radius)\n      .attr(\"fill\", (d) => colour(d.group)) // This adds the colour to the circles based on the group\n      .attr('fill-opacity',config.essential.fillOpacity)\n      .attr('stroke',(d)=> colour(d.group))\n      .attr('stroke-opacity',config.essential.strokeOpacity);\n\n  // This does the chart title label\n  svg\n    .append('g')\n    .attr('transform', 'translate(0, 0)')\n    .append('text')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('dy', 20 - margin.top)\n    .attr('class', 'title')\n    .text(d => d[0])\n    .attr('text-anchor', 'start')\n    .call(wrap, chart_width);\n\n  // This does the x-axis label - just on the rightmost chart of each row\n  svg\n    .append('g')\n    .attr('transform', 'translate(0,' + height + ')')\n    .append('text')\n    .attr('x', chart_width)\n    .attr('y', 40)\n    .attr('class', 'axis--label')\n    .text((d, i) => i % chartEvery == chartEvery - 1 || plots.indexOf(d[0]) === plots.length - 1 ?\n      config.essential.xAxisLabel : \"\")\n    .attr('text-anchor', 'end');\n\n  // This does the y-axis label - just on the leftmost chart of each row\n  svg\n    .append('g')\n    .attr('transform', 'translate(0,0)')\n    .append('text')\n    .attr('x', -(margin.left - 5))\n    .attr('y', -10)\n    .attr('class', 'axis--label')\n    .text((d) => plots.indexOf(d[0]) % chartEvery == 0 ? config.essential.yAxisLabel : \"\")\n    .attr('text-anchor', 'start');\n\n\n  //create link to source\n  d3.select(\"#source\")\n    .text(\"Source: \" + config.essential.sourceText)\n\n\n\n  //use pym to calculate chart dimensions\n  if (pymChild) {\n    pymChild.sendHeight();\n  }\n}\n\nfunction wrap(text, width) {\n        text.each(function() {\n          let text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1, // ems\n            // y = text.attr(\"y\"),\n            x = text.attr(\"x\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr('x',x);\n          while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n              line.pop();\n              tspan.text(line.join(\" \"));\n              line = [word];\n              tspan = text.append(\"tspan\").attr('x',x).attr(\"dy\", lineHeight + \"em\").text(word);\n            }\n          }\n          let breaks = text.selectAll(\"tspan\").size();\n          text.attr(\"y\", function(){return -6 * (breaks-1);});\n        });\n\n      }\n\n\nd3.csv(config.essential.graphic_data_url)\n  .then(data => {\n    //load chart data\n    graphic_data = data\n\n    //use pym to create iframed chart dependent on specified variables\n    pymChild = new pym.Child({\n      renderCallback: drawGraphic\n    });\n  });\n",
            "config_js": "config={\n  \"essential\": { \n    \"graphic_data_url\": \"data.csv\",\n    \"colour_palette\": [\"#206095\",\"#3fb0b3\"],\n    \"fillOpacity\":0.5,\n    \"strokeOpacity\":1,\n        \"radius\": \"4\",\n    \"sourceText\": \"Office for National Statistics\",\n    \"accessibleSummary\":\"Here is the screenreader text describing the chart.\",\n    \"xDomain\":\"auto\",\n    \"yDomain\":\"auto\",\n    // either \"auto\" or an array for the x domain e.g. [0,100]\n    \"xAxisLabel\":\"x axis label\",\n    \"yAxisLabel\":\"y axis label\",\n    \"xAxisFormat\":\".0%\",\n    \"yAxisFormat\":\".0%\"\n  },\n  \"optional\": {\n    \"chartEvery\":{\n      \"sm\":1,\n      \"md\":1,\n      \"lg\":2\n    },\n    \"margin\": {\n      \"sm\": {\n        \"top\": 50,\n        \"right\": 20,\n        \"bottom\": 50,\n        \"left\": 50\n      },\n      \"md\": {\n        \"top\": 50,\n        \"right\": 20,\n        \"bottom\": 50,\n        \"left\": 50\n      },\n      \"lg\": {\n        \"top\": 50,\n        \"right\":50,\n        \"bottom\": 50,\n        \"left\": 50\n      }\n    },\n    \"xAxisTicks\":{\n      \"sm\":4,\n      \"md\":4,\n      \"lg\":4\n    },\n    \"yAxisTicks\":{\n      \"sm\":4,\n      \"md\":4,\n      \"lg\":10\n    },\n    \"mobileBreakpoint\": 510,\n    \"mediumBreakpoint\": 600,\n    \"dropYAxis\": true\n  },\n  \"elements\":{\"select\":0, \"nav\":0, \"legend\":0, \"titles\":0},\n  \"chart_build\":{}\n};\n",
            "chart_css": ".grid line {\n  stroke: #ccc;\n  stroke-opacity: 0.7;\n}\n\n.grid .tick {\n  stroke: lightgrey;\n  stroke-opacity: 0.7;\n  shape-rendering: crispEdges;\n}\n\n.grid path {\n  stroke-width: 0;\n}\n\n.title {\n  font-weight: 600;\n  fill: #414042;\n}",
            "data_csv": "name,series,xvalue,yvalue,group\nOther services,series1,0.987848719,0.9,group1\nManufacturing,series1,0.983661406,0.986,group1\nConstruction,series1,0.681288045,0.4,group1\nArts,series1,0.481757214,0.2,group1\nAdministrative,series1,0.209665614,0.6,group1\nWholesale trade,series1,0.176396639,0.4,group1\nAdministrative and supportive service activities,series1,0.047910167,0.15,group1\nOther services,series1,0.207848719,0.2,group2\nManufacturing,series1,0.603661406,0.6,group2\nConstruction,series1,0.21288045,0.2,group2\nArts,series1,0.281757214,0.4,group2\nAdministrative,series1,0.409665614,0.8,group2\nWholesale trade,series1,0.276396639,0.5,group2\nAdministrative and supportive service activities,series1,0.147910167,0.25,group2\nOther services,series2,0.058999591,0.9,group1\nManufacturing,series2,0.004739396,0.986,group1\nConstruction,series2,0.432883836,0.4,group1\nArts,series2,0.040419716,0.2,group1\nAdministrative,series2,0.173412393,0.6,group1\nWholesale trade,series2,0.07446541,0.4,group1\nAdministrative and supportive service activities,series2,0.025038262,0.15,group1\nOther services,series2,0.131980582,0.2,group2\nManufacturing,series2,0.419579481,0.6,group2\nConstruction,series2,0.177955165,0.2,group2\nArts,series2,0.167047386,0.4,group2\nAdministrative,series2,0.084334964,0.8,group2\nWholesale trade,series2,0.260463564,0.5,group2\nAdministrative and supportive service activities,series2,0.038412599,0.25,group2\n",
            "comparison_csv": null
        },
        "slope-chart": {
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette\": [\n\t\t\t\"#8D8C8E\",\n\t\t\t\"#206095\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"colour_palette_text\": [\n\t\t\t\"#8D8C8E\",\n\t\t\t\"#206095\",\n\t\t\t\"#1F80A3\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#6E7E26\",\n\t\t\t\"#F66068\",\n\t\t\t\"#118C7B\"\n\t\t],\n\t\t\"sourceText\": \"Census 2011 and Census 2021 from the Office for National Statistics\",\n\t\t\"accessibleSummary\": \"\",\n\t\t\"lineCurveType\": \"curveLinear\", \t\n\t\t\"yDomain\": [0,550000],\n\t\t// either \"auto\" or an array for the x domain e.g. [0,2000]\n\t\t\"xAxisTickFormat\": {\n\t\t\t\"sm\": \"%b %y\",\n\t\t\t\"md\": \"%b %y\",\n\t\t\t\"lg\": \"%B %Y\"\n\t\t},\n\t\t\"xAxisNumberFormat\": \".0f\",\n\t\t\"yAxisNumberFormat\": \",.0f\",\n\t\t\"dateFormat\": \"%d-%m-%Y\",\n\t\t\"yAxisLabel\": \"\",\n\t\t\"xAxisLabel\": \"\"\n\t},\n\t\"optional\": {\n\t\t// default is 75\n\t\t \"chartwidth\": {\n\t\t\t\"sm\": 75,\n\t\t\t\"md\": 75,\n\t\t\t\"lg\": 75\n\t\t},\n\t\t\"margin\": {\n\t\t\t\"sm\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t// \"right\": //Not needed - right margin calculated from chartwidth etc.\n\t\t\t\t\"bottom\": 25,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"md\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"bottom\": 15,\n\t\t\t\t\"left\": 70\n\t\t\t},\n\t\t\t\"lg\": {\n\t\t\t\t\"top\": 30,\n\t\t\t\t\"bottom\": 15,\n\t\t\t\t\"left\": 70\n\t\t\t}\n\t\t},\n\t\t\"mobileBreakpoint\": 510,\n\t\t\"mediumBreakpoint\": 600\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 1, \"titles\": 0 }\n};\n",
            "script_js": "let graphic = d3.select('#graphic');\n//console.log(`Graphic selected: ${graphic}`);\n\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t//Accessible summary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\t//\tconsole.log(`Accessible summary set: ${config.essential.accessibleSummary}`);\n\n\tlet threshold_md = config.optional.mediumBreakpoint;\n\tlet threshold_sm = config.optional.mobileBreakpoint;\n\n\t//set variables for chart dimensions dependent on width of #graphic\n\tif (parseInt(graphic.style('width')) < threshold_sm) {\n\t\tsize = 'sm';\n\t} else if (parseInt(graphic.style('width')) < threshold_md) {\n\t\tsize = 'md';\n\t} else {\n\t\tsize = 'lg';\n\t}\n\t// console.log(`Size set: ${size}`);\n\n\n\n\t// Define the dimensions and margin, width and height of the chart.\n\tlet margin = config.optional.margin[size];\n\t// let width = parseInt(graphic.style('width')) - margin.left - margin.right;\n\tlet height = 400 - margin.top - margin.bottom;\n\tlet width = config.optional.chartwidth[size];\n\t// console.log(parseInt(graphic.style('width')) - width - margin.left - 75)\n\t// console.log(`Margin, width, and height set: ${margin}, ${width}, ${height}`);\n\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\t//console.log(`Removed existing chart elements`);\n\n\t// Get categories from the keys used in the stack generator\n\tconst categories = Object.keys(graphic_data[0]).filter((k) => k !== 'date');\n\t// console.log(`Categories retrieved: ${categories}`);\n\n\tlet xDataType;\n\n\tif (Object.prototype.toString.call(graphic_data[0].date) === '[object Date]') {\n\t\txDataType = 'date';\n\t} else {\n\t\txDataType = 'numeric';\n\t}\n\n\t// console.log(xDataType)\n\n\t// Define the x and y scales\n\n\tlet x;\n\n\tif (xDataType == 'date') {\n\t\tx = d3.scaleTime()\n\t\t\t.domain(d3.extent(graphic_data, (d) => d.date))\n\t\t\t.range([0, width]);\n\t} else {\n\t\tx = d3.scaleLinear()\n\t\t\t.domain(d3.extent(graphic_data, (d) => +d.date))\n\t\t\t.range([0, width]);\n\t}\n\t//console.log(`x defined`);\n\n\tconst y = d3\n\t\t.scaleLinear()\n\t\t.range([height, 0]);\n\n\tif (config.essential.yDomain == \"auto\") {\n\t\tlet minY = d3.min(graphic_data, (d) => Math.min(...categories.map((c) => d[c])))\n\t\tlet maxY = d3.max(graphic_data, (d) => Math.max(...categories.map((c) => d[c])))\n\t\ty.domain([minY, maxY])\n\t\tconsole.log(minY, maxY)\n\t} else {\n\t\ty.domain(config.essential.yDomain)\n\t}\n\n\n\t// Create an SVG element\n\tconst svg = graphic\n\t\t.append('svg')\n\t\t.attr('width', parseInt(graphic.style('width')))\n\t\t.attr('height', height + margin.top + margin.bottom)\n\t\t.attr('class', 'chart')\n\t\t.style('background-color', '#fff')\n\t\t.append('g')\n\t\t.attr('transform', `translate(${margin.left},${margin.top})`);\n\t//console.log(`SVG element created`);\n\n\tconst lastDatum = graphic_data[graphic_data.length - 1];\n\tconst firstDatum = graphic_data[0];\n\n\t// Add the x-axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'x axis')\n\t\t.attr('transform', \"translate(0,\" + (height + 5) + \")\")\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisTop(x)\n\t\t\t\t// .tickValues(tickValues)\n\t\t\t\t.tickFormat((d) => xDataType == 'date' ? d3.timeFormat(config.essential.xAxisTickFormat[size])(d)\n\t\t\t\t\t: d3.format(config.essential.xAxisNumberFormat)(d))\n\t\t\t\t.tickValues([firstDatum.date, lastDatum.date])\n\t\t\t\t.tickSize(height + 10)\n\t\t);\n\t\t\n\t\t// Add text labels to the right of the circles\n\t\tlet xOffset = 8;\n\t\tlet text_length;\n\t\tlet rightWrapWidth = parseInt(graphic.style('width')) - margin.left - width - xOffset - 75;\n\n\t\t//Calculating where to place the category label\n\t\tfunction textLength(thing) {\n\t\t\t// text_length = thing._groups[0][0].clientWidth + xOffset; <-- this has some issues once in Florence/live - better method below\n\t\t\ttext_length = thing.node().getComputedTextLength() + xOffset;\n\n\t\t}\n\n\t// create lines and circles for each category\n\tcategories.forEach(function (category) {\n\t\tconst lineGenerator = d3\n\t\t\t.line()\n\t\t\t.x((d) => x(d.date))\n\t\t\t.y((d) => y(d[category]))\n\t\t\t.curve(d3[config.essential.lineCurveType]) // I used bracket notation here to access the curve type as it's a string\n\t\t\t.context(null);\n\t\t// console.log(`Line generator created for category: ${category}`);\n\n\t\tsvg\n\t\t\t.append('path')\n\t\t\t.datum(graphic_data)\n\t\t\t.attr('fill', 'none')\n\t\t\t.attr(\n\t\t\t\t'stroke',\n\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t]\n\t\t\t)\n\t\t\t.attr('stroke-width', 3)\n\t\t\t.attr('d', lineGenerator)\n\t\t\t.style('stroke-linejoin', 'round')\n\t\t\t.style('stroke-linecap', 'round');\n\t\t//console.log(`Path appended for category: ${category}`);\n\n\t\t// Add text labels to the right of the circles\n\t\tsvg\n\t\t\t.append('text')\n\t\t\t.attr(\n\t\t\t\t'transform',\n\t\t\t\t`translate(${x(lastDatum.date)}, ${y(lastDatum[category])})`\n\t\t\t)\n\t\t\t.attr('x', xOffset)\n\t\t\t.attr('dy', '.35em')\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.attr(\n\t\t\t\t'fill',\n\t\t\t\tconfig.essential.colour_palette_text[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette_text.length\n\t\t\t\t]\n\t\t\t)\n\t\t\t.text(d3.format(config.essential.yAxisNumberFormat)((lastDatum[category]))) /* (Math.round((lastDatum[category]) / 100) * 100) */\n\t\t\t.attr('id', 'lastDateLabel')\n\t\t\t.attr(\"class\", \"directLineLabelBold\")\n\t\t\t.call(textLength, this) //Work out the width of this bit of text for positioning the next bit\n\t\t\t.append('tspan')\n\t\t\t.attr('x', xOffset + text_length)\n\t\t\t.attr('dy', '.35em')\n\t\t\t.attr('text-anchor', 'start')\n\t\t\t.attr(\n\t\t\t\t'fill',\n\t\t\t\tconfig.essential.colour_palette_text[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette_text.length\n\t\t\t\t]\n\t\t\t)\n\t\t\t.text(category)\n\t\t\t.attr(\"class\", \"directLineLabelRegular\")\n\t\t\t.call(wrap, rightWrapWidth); //wrap function for the direct labelling.\n\n\t\t//Add text labels to the left of the first circles\n\t\tsvg\n\t\t\t.append('text')\n\t\t\t.attr(\n\t\t\t\t'transform',\n\t\t\t\t`translate(${x(firstDatum.date)}, ${y(firstDatum[category])})`\n\t\t\t)\n\t\t\t.attr('x', -xOffset)\n\t\t\t.attr('dy', '0.35em')\n\t\t\t.attr('text-anchor', 'end')\n\t\t\t.attr(\n\t\t\t\t'fill',\n\t\t\t\tconfig.essential.colour_palette_text[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette_text.length\n\t\t\t\t]\n\t\t\t)\n\t\t\t.text(d3.format(config.essential.yAxisNumberFormat)(firstDatum[category]))\n\t\t\t.attr(\"class\", \"directLineLabelBold\")\n\n\t\t//Add the circles\n\t\tsvg\n\t\t\t.append('circle')\n\t\t\t.attr('cx', x(firstDatum.date))\n\t\t\t.attr('cy', y(firstDatum[category]))\n\t\t\t.attr('r', 4)\n\t\t\t.attr(\n\t\t\t\t'fill',\n\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t]\n\t\t\t);\n\t\tsvg\n\t\t\t.append('circle')\n\t\t\t.attr('cx', x(lastDatum.date))\n\t\t\t.attr('cy', y(lastDatum[category]))\n\t\t\t.attr('r', 4)\n\t\t\t.attr(\n\t\t\t\t'fill',\n\t\t\t\tconfig.essential.colour_palette[\n\t\t\t\tcategories.indexOf(category) % config.essential.colour_palette.length\n\t\t\t\t]\n\t\t\t);\n\t\t// console.log(`Circle appended for category: ${category}`);\n\n\t});\n\n\t// add grid lines to y axis\n\tsvg\n\t\t.append('g')\n\t\t.attr('class', 'grid')\n\t\t.call(\n\t\t\td3\n\t\t\t\t.axisLeft(y)\n\t\t\t\t.tickValues([0])\n\t\t\t\t.tickSize(-width)\n\t\t\t\t.tickFormat('')\n\t\t)\n\t\t.lower();\n\n\td3.selectAll('g.tick line')\n\t\t.each(function (e) {\n\t\t\tif (e == 0) {\n\t\t\t\td3.select(this).attr('class', 'zero-line');\n\t\t\t}\n\t\t})\n\n\t// // Add the y-axis\n\t// svg\n\t// \t.append('g')\n\t// \t.attr('class', 'y axis')\n\t// \t.call(d3.axisRight(y).ticks(config.optional.yAxisTicks[size])\n\t// \t\t.tickValues([])\n\t// \t\t.tickFormat(d3.format(config.essential.yAxisNumberFormat)))\n\t// \t.attr('transform', \"translate(\" + margin.left + \", 0)\");\n\n\n\n\t// This does the y-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', `translate(0, 0)`)\n\t\t.append('text')\n\t\t.attr('x', -margin.left + 5)\n\t\t.attr('y', -15)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.yAxisLabel)\n\t\t.attr('text-anchor', 'start');\n\n\t// This does the x-axis label\n\tsvg\n\t\t.append('g')\n\t\t.attr('transform', \"translate(0, \" + (height + margin.bottom) + \")\")\n\t\t.append('text')\n\t\t.attr('x', width)\n\t\t.attr('y', -25)\n\t\t.attr('class', 'axis--label')\n\t\t.text(config.essential.xAxisLabel)\n\t\t.attr('text-anchor', 'end');\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\t// console.log(`Link to source created`);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n\t// console.log(`PymChild height sent`);\n}\n\n//text wrap function for the direct labelling\n\nfunction wrap(text, width) {\n\ttext.each(function () {\n\t\tlet text = d3.select(this),\n\t\t\twords = text.text().split(/\\s+/).reverse(),\n\t\t\tword,\n\t\t\tline = [],\n\t\t\tlineNumber = 0,\n\t\t\tlineHeight = 1.1, // ems\n\t\t\t// y = text.attr(\"y\"),\n\t\t\tx = parseFloat(text.attr('x')),\n\t\t\tdy = parseFloat(text.attr('dy')),\n\t\t\ttspan = text.text(null).append('tspan').attr('x', x);\n\t\twhile ((word = words.pop())) {\n\t\t\tline.push(word);\n\t\t\ttspan.text(line.join(' '));\n\t\t\tif (tspan.node().getComputedTextLength() > width) {\n\t\t\t\tline.pop();\n\t\t\t\ttspan.text(line.join(' '));\n\t\t\t\tline = [word];\n\t\t\t\ttspan = text\n\t\t\t\t\t.append('tspan')\n\t\t\t\t\t.attr('x', x)\n\t\t\t\t\t.attr('dy', lineHeight + 'em')\n\t\t\t\t\t.text(word);\n\t\t\t}\n\t\t}\n\t\tlet breaks = text.selectAll('tspan').size();\n\t\ttext.attr('y', function () {\n\t\t\treturn -6 * (breaks - 1);\n\t\t});\n\t});\n}\n\n// Load the data\nd3.csv(config.essential.graphic_data_url).then((rawData) => {\n\tgraphic_data = rawData.map((d) => {\n\t\tif (d3.timeParse(config.essential.dateFormat)(d.date) !== null) {\n\t\t\treturn {\n\t\t\t\tdate: d3.timeParse(config.essential.dateFormat)(d.date),\n\t\t\t\t...Object.entries(d)\n\t\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t\t.map(([key, value]) => [key, +value])\n\t\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t\t}\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tdate: (+d.date),\n\t\t\t\t...Object.entries(d)\n\t\t\t\t\t.filter(([key]) => key !== 'date')\n\t\t\t\t\t.map(([key, value]) => [key, +value])\n\t\t\t\t\t.reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})\n\t\t\t}\n\t\t}\n\t});\n\n\t// console.log(graphic_data);\n\n\t// console.log(`Data from CSV processed`);\n\n\t// console.log('Final data structure:');\n\t// console.log(graphic_data);\n\n\t// Use pym to create an iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n\t// console.log(`PymChild created with renderCallback to drawGraphic`);\n});\n",
            "chart_css": ".grid line {\n    stroke: #ccc;\n    stroke-opacity: 0.7;\n  }\n  \n  /* Need to discuss this with the team */\n  .axis path,\n  .axis line {\n    stroke: none; /* Changes the color of the axis lines */\n  }\n  \n  .grid .tick {\n    stroke: lightgrey; /* Changes the color of the gridlines */\n    stroke-opacity: 0.7;\n    shape-rendering: crispEdges; /* Makes the gridlines appear more crisp */\n  }\n  .grid path {\n    stroke-width: 0; /* Removes the line along the y-axis */\n  }\n  \n  .directLineLabelBold {\n    font-size: 14px;\n    font-weight: 700;\n  }\n  .directLineLabelRegular {\n    font-size: 14px;\n    font-weight: 500;\n  }",
            "data_csv": "date,All Sikh,Ethnic group and religion,Religion only,Ethnic group only\n2011,430020,76500,346658,6862\n2021,525865,97910,426230,1725\n",
            "comparison_csv": null
        },
        "split-bar-chart": {
            "script_js": "let graphic = d3.select('#graphic');\nlet legend = d3.select('#legend');\nlet pymChild = null;\n\nfunction drawGraphic() {\n\t// Remove any existing chart elements\n\tgraphic.selectAll('*').remove();\n\tlegend.selectAll('*').remove();\n\n\tif (parseInt(graphic.style('width')) < config.essential.threshold_sm) {\n\t\tsize = 'sm';\n\t} else {\n\t\tsize = 'not sm';\n\t}\n\n\t//population accessible summmary\n\td3.select('#accessibleSummary').html(config.essential.accessibleSummary);\n\n\tformatNo = d3.format(config.essential.numberFormat);\n\n\t// set up scale\n\tx = d3\n\t\t.scaleLinear()\n\t\t.range([0, 100])\n\t\t.domain([\n\t\t\td3.min([0, d3.min(graphic_data, (d) => +d.value)]),\n\t\t\td3.max(graphic_data, (d) => +d.value)\n\t\t]);\n\n\t// nest data\n\tgroupedData = d3.groups(\n\t\tgraphic_data,\n\t\t(d) => d.plot,\n\t\t(d) => d.ycategory\n\t);\n\n\t// unique columns\n\txcategories = [...new Set(graphic_data.map((d) => d.xcategory))];\n\n\tif (config.essential.colour_palette_type == 'categorical') {\n\t\tcolour = d3\n\t\t\t.scaleOrdinal()\n\t\t\t.range(config.essential.colour_palette_colours)\n\t\t\t.domain(xcategories);\n\n\t\tif (size == 'sm') {\n\t\t\t// Set up the legend\n\t\t\tlet legenditem = d3\n\t\t\t\t.select('#legend')\n\t\t\t\t.selectAll('div.legend--item')\n\t\t\t\t.data(d3.zip(xcategories, config.essential.colour_palette_colours))\n\t\t\t\t.enter()\n\t\t\t\t.append('div')\n\t\t\t\t.attr('class', 'legend--item');\n\n\t\t\tlegenditem\n\t\t\t\t.append('div')\n\t\t\t\t.attr('class', 'legend--icon--circle')\n\t\t\t\t.style('background-color', function (d) {\n\t\t\t\t\treturn d[1];\n\t\t\t\t});\n\n\t\t\tlegenditem\n\t\t\t\t.append('div')\n\t\t\t\t.append('p')\n\t\t\t\t.attr('class', 'legend--text')\n\t\t\t\t.html(function (d) {\n\t\t\t\t\treturn d[0];\n\t\t\t\t});\n\t\t}\n\t}\n\n\t// create div for each plot, here England, Wales\n\tplots = graphic\n\t\t.selectAll('div.plots')\n\t\t.data(groupedData)\n\t\t.join('div')\n\t\t.attr('class', 'plots');\n\n\tplots\n\t\t.append('p')\n\t\t.attr('class', 'plot--title')\n\t\t.html((d) => d[0]);\n\n\t// create a div for the chart\n\tchart = plots.append('div').attr('class', 'chart');\n\n\tif (size != 'sm') {\n\t\t// create a div for the headers\n\t\theaders = chart.append('div').attr('class', 'splitBar-label');\n\n\t\t// create div for the first square\n\t\theaders\n\t\t\t.append('div')\n\t\t\t.attr('class', 'rowLabel')\n\t\t\t.style('width', config.essential.rowWidth[size] + 'px');\n\n\t\t// create divs for the rest of the column headers\n\t\theaders\n\t\t\t.append('div')\n\t\t\t.attr('class', 'headers')\n\t\t\t.style('width', `calc(100% - ${config.essential.rowWidth[size]}px)`)\n\t\t\t.selectAll('div.column')\n\t\t\t.data(xcategories)\n\t\t\t.join('div')\n\t\t\t.attr('class', 'column')\n\t\t\t.style('width', 100 / xcategories.length + '%')\n\t\t\t.append('span')\n\t\t\t.html((d) => d);\n\t}\n\n\t// create divs as rows\n\trows = chart\n\t\t.selectAll('div.rows')\n\t\t.data((d) => d[1])\n\t\t.join('div')\n\t\t.attr('class', 'splitBar-row');\n\n\t// first div as separate\n\trows\n\t\t.append('div')\n\t\t.attr('class', 'rowLabel')\n\t\t.style('width', config.essential.rowWidth[size] + 'px')\n\t\t.append('span')\n\t\t.style('text-align', 'right')\n\t\t.html((d) => d[0]);\n\n\t// then create another div to hold all split bars\n\tsplitBar = rows\n\t\t.append('div')\n\t\t.attr('class', 'headers')\n\t\t.style('width', `calc(100% - ${config.essential.rowWidth[size]}px)`)\n\t\t.selectAll('div.splitBar')\n\t\t.data((d) => d[1])\n\t\t.join('div')\n\t\t// then add a div for each x category\n\t\t.attr('class', 'column')\n\t\t.style('width', 100 / xcategories.length + '%');\n\n\t// divs for inside the splitBar\n\tsplitBarInner = splitBar\n\t\t.append('div')\n\t\t.attr('class', 'splitBar-inner')\n\t\t// then div for the background\n\t\t.append('div')\n\t\t.attr('class', 'splitBar-inner--background');\n\n\t// add a div to help draw a line for 0\n\tsplitBarInner\n\t\t.append('div')\n\t\t.attr('class', 'splitBar-bar--value')\n\t\t.style('left', 0)\n\t\t.style('width', x(0) + '%')\n\t\t.style('border-right', '1.5px solid #b3b3b3')\n\t\t.style('height', 'calc(100% + 15px)')\n\t\t.style('top', '-8px');\n\n\t// then div for the value\n\tsplitBarInner\n\t\t.append('div')\n\t\t.attr('class', 'splitBar-bar--value')\n\t\t.style('left', (d) => (+d.value > 0 ? x(0) + '%' : x(+d.value) + '%'))\n\t\t.style('right', (d) =>\n\t\t\t+d.value > 0 ? 100 - x(+d.value) + '%' : 100 - x(0) + '%'\n\t\t)\n\t\t.style('background', function (d) {\n\t\t\tif (config.essential.colour_palette_type == 'mono') {\n\t\t\t\treturn config.essential.colour_palette_colours[0];\n\t\t\t} else if (config.essential.colour_palette_type == 'divergent') {\n\t\t\t\treturn +d.value > 0\n\t\t\t\t\t? config.essential.colour_palette_colours[0]\n\t\t\t\t\t: config.essential.colour_palette_colours[1];\n\t\t\t} else if (config.essential.colour_palette_type == 'categorical') {\n\t\t\t\treturn colour(d.xcategory);\n\t\t\t}\n\t\t})\n\t\t.append('div')\n\t\t// then a div to hold the value\n\t\t.attr('class', 'splitBar-bar--label')\n\t\t.style('margin-left', (d) => {\n\t\t\tif (d.value > 0) {\n\t\t\t\treturn Math.abs(+x(d.value) - x(0)) < 20 ? '100%' : 'calc(100% - 35px)'; // you'll need to adjust these calcs if you want to move the text slightly left or right\n\t\t\t} else {\n\t\t\t\treturn Math.abs(+x(d.value) - x(0)) > 20 ? '0%' : 'calc(0% - 35px)';\n\t\t\t}\n\t\t})\n\t\t.append('span')\n\t\t.style('color', (d) =>\n\t\t\tMath.abs(+x(d.value) - x(0)) < 20 ? '#222222' : '#fff'\n\t\t)\n\t\t.html((d) => formatNo(d.value));\n\n\t// final div for the zero indicator\n\tfinalrow = chart.append('div').attr('class', 'finalRow');\n\t// first div as separate\n\tfinalrow\n\t\t.append('div')\n\t\t.attr('class', 'rowLabel')\n\t\t.style('width', config.essential.rowWidth[size] + 'px');\n\n\tfinalrow\n\t\t.append('div')\n\t\t.attr('class', '')\n\t\t.style('margin-right', '-10px')\n\t\t.style('width', `calc(100% - ${config.essential.rowWidth[size]}px)`)\n\t\t.style('display', 'inline-block')\n\t\t.selectAll('div.column')\n\t\t.data(xcategories)\n\t\t.join('div')\n\t\t.attr('class', 'column')\n\t\t.style('width', 100 / xcategories.length + '%')\n\t\t.style('padding-right', '8px')\n\t\t.style('display', 'inline-block')\n\t\t.append('span')\n\t\t.style('position', 'relative')\n\t\t.style('left', 'calc(' + x(0) + '%' + ' - 5px)')\n\t\t.html(0);\n\n\t//create link to source\n\td3.select('#source').text('Source: ' + config.essential.sourceText);\n\n\t//use pym to calculate chart dimensions\n\tif (pymChild) {\n\t\tpymChild.sendHeight();\n\t}\n}\n\nd3.csv(config.essential.graphic_data_url).then((data) => {\n\t//load chart data\n\tgraphic_data = data;\n\n\t//use pym to create iframed chart dependent on specified variables\n\tpymChild = new pym.Child({\n\t\trenderCallback: drawGraphic\n\t});\n});\n",
            "config_js": "config = {\n\t\"essential\": {\n\t\t\"graphic_data_url\": \"data.csv\",\n\t\t\"colour_palette_type\": \"categorical\",\n\t\t// type can be mono, divergent, categorical\n\t\t\"colour_palette_colours\": [\n\t\t\t\"#206095\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\"\n\t\t],\n\t\t// colours is an array for the colours of the bars\n\t\t// e.g. if mono use [\"206095\"]\n\t\t// e.g if divergent you can use [\"#206095\",\"#F66068\"]\n\t\t// e.g if categorical [\"#206095\", \"#27A0CC\",\"#871A5B\", \"#A8BD3A\",\"#F66068\"]\n\t\t\"numberFormat\": \".0f\",\n\t\t\"rowWidth\": {\n\t\t\t\"sm\": 100,\n\t\t\t\"not sm\": 140\n\t\t},\n\t\t// rowWidth set the width of y category column in pixel\n\t\t\"accessibleSummary\":\n\t\t\t\"This chart has been hidden from screen readers. The main message of the chart is summarised in the chart title.\",\n\t\t\"sourceText\": \"Office for National Statistics\",\n\t\t\"threshold_sm\": 510\n\t},\n\t//Don't adjust this part - it only affects the chart build tool\n\t\"chart_build\": {\n\t\t\"graphic_data_url\": \"text\",\n\t\t\"colour_palette_type\": \"radio\",\n\t\t\"colour_palette_type_options\": [\"mono\", \"divergent\", \"categorical\"],\n\t\t\"colour_palette_colours\": \"colour\",\n\t\t\"colour_palette_colours_options\": [\n\t\t\t\"#206095\",\n\t\t\t\"#27A0CC\",\n\t\t\t\"#871A5B\",\n\t\t\t\"#A8BD3A\",\n\t\t\t\"#F66068\"\n\t\t],\n\t\t\"numberFormat\": \"dThreeFormat\",\n\t\t\"numberFormat_options\": [\".0f\"],\n\t\t\"rowWidth\": \"number\",\n\t\t\"accessibleSummary\": \"textarea\",\n\t\t\"sourceText\": \"text\",\n\t\t\"threshold_sm\": \"number\"\n\t},\n\t\"elements\": { \"select\": 0, \"nav\": 0, \"legend\": 0, \"titles\": 1 }\n};\n",
            "chart_css": "/* space between the plots */\ndiv.plots{\n    padding-bottom:20px;\n}\n\n/* styles for plot titles */\ndiv.plots p.plot--title{\n    font-weight: 700;\n    margin-bottom:0;\n}\n\ndiv.column{\n    padding-right:10px;\n    display:inline-block\n}\n\ndiv.rowLabel{\n    display: inline-block;\n}\n\ndiv.headers{\n    margin-right: -10px;\n    display: inline-block;\n}\n\ndiv.rowLabel span{\n    font-size: 14px;\n    color:#414042;\n    text-align: right;\n    vertical-align: middle;\n    display:block;\n    padding-right:10px;\n    height:30px;\n}\n\ndiv.column span{\n    font-weight: 600;\n    font-size: 14px;\n    color:#414042;\n}\n\ndiv.splitBar-inner--background{\n    background: #ececec;\n    height:30px;\n    position: relative;\n}\n\n\ndiv.splitBar-row{\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n}\n\n/* set the margin to 0 for the 2nd to last div so the zero is close */\ndiv.chart div:nth-last-child(2) {\n    margin-bottom: 0;\n}\n\ndiv.splitBar-bar--value{\n    position:absolute;\n    top:0;\n    height:100%;\n}\n\ndiv.splitBar-bar--label{\n    text-align: left;\n    padding:0 5px;\n    line-height: 27px;\n}\n\ndiv.splitBar-label{\n    margin-bottom:10px;\n}",
            "data_csv": "plot,ycategory,xcategory,value\nCountry,England,No cars or vans,66.45803492\nCountry,England,1 car or van,46.1170011\nCountry,England,2 cars or vans,23.3835249\nCountry,Wales,No cars or vans,49.44778165\nCountry,Wales,1 car or van,40.30512154\nCountry,Wales,2 cars or vans,13.759689\nRegion,London,No cars or vans,80.56518156\nRegion,London,1 car or van,67.74719392\nRegion,London,2 cars or vans,44.40901046\nRegion,South East,No cars or vans,-49.16281699\nRegion,South East,1 car or van,-72.58837136\nRegion,South East,2 cars or vans,63.46911119\nRegion,South West,No cars or vans,45.76204946\nRegion,South West,1 car or van,67.3660344\nRegion,South West,2 cars or vans,99.91081304\nRegion,East of England,No cars or vans,59.9605932\nRegion,East of England,1 car or van,21.77797177\nRegion,East of England,2 cars or vans,27.31446944\nRegion,East Midlands,No cars or vans,-12.77125895\nRegion,East Midlands,1 car or van,27.94089648\nRegion,East Midlands,2 cars or vans,51.54980878\nRegion,West Midlands,No cars or vans,44.79812224\nRegion,West Midlands,1 car or van,36.37235365\nRegion,West Midlands,2 cars or vans,30.67034815\nRegion,Yorkshire and The Humber,No cars or vans,20.67288064\nRegion,Yorkshire and The Humber,1 car or van,71.36896294\nRegion,Yorkshire and The Humber,2 cars or vans,26.92732815\nRegion,North West,No cars or vans,32.40881237\nRegion,North West,1 car or van,68.08925507\nRegion,North West,2 cars or vans,26.54675587\nRegion,North East,No cars or vans,74.42364709\nRegion,North East,1 car or van,2.091265918\nRegion,North East,2 cars or vans,26.94421516",
            "comparison_csv": null
        }
    },
    "Projects":{}
}

/*
<script>
	let chart = "area-stacked-sm";
	let charts = [
    "area-stacked",
    "area-stacked-sm",
    "bar-chart-horizontal",
    "bar-chart-horizontal-clustered",
    "bar-chart-horizontal-clustered-sm",
    "bar-chart-horizontal-grouped",
    "bar-chart-horizontal-grouped-clustered",
    "bar-chart-horizontal-sm",
    "bar-chart-horizontal-sm-colour",
    "bar-chart-horizontal-stacked",
    "bar-chart-horizontal-stacked-clustered",
    "bar-chart-horizontal-stacked-clustered-grouped",
    "bar-chart-horizontal-stacked-grouped",
    "bar-chart-horizontal-stacked-sm",
    "bar-chart-horizontal-stacked-with-tooltip",
    "bar-chart-horizontal-with-dropdown",
    "bar-chart-horizontal-with-reference-line",
    "bar-chart-horizontal-with-reference-sm",
    "bubble-chart-animated",
    "column-chart",
    "column-chart-sm",
    "column-chart-stacked",
    "column-chart-stacked-sm",
    "column-chart-stacked-with-line",
    "column-chart-stacked-with-line-sm",
    "column-chart-with-ci-sm",
    "comet-plot",
    "dot-plot",
    "dot-plot-with-ci-sm",
    "doughnut",
    "heatmap",
    "heatmap-per-column",
    "line-chart",
    "line-chart-sm",
    "line-chart-sm-colours",
    "line-chart-with-area",
    "line-chart-with-ci-sm",
    "population-pyramid-static",
    "population-pyramid-static-with-comparison",
    "population-pyramid-with-comparison-toggle",
    "population-pyramid-with-dropdown",
    "population-pyramid-with-dropdown-and-interactive-comparison",
    "range-plot",
    "ridgeline-plot",
    "scatter-plot",
    "scatter-plot-animated",
    "scatter-plot-sm",
    "slope-chart",
    "split-bar-chart"
]

let done=false

let VB =  localStorage.VB? JSON.parse(localStorage.VB):{ Templates:{}}

if(!localStorage.VB)charts.forEach(c=>{populateJSON(c); if(c==charts[charts.length-1]){console.log("VB", VB); 
	localStorage.VB=JSON.stringify(VB); done=true}})
//if(localStorage.VB){VB=localStorage.VB;console.log("VB", JSON.parse(VB)); done=true}

	
	
function populateJSON(c){

	VB.Templates[c]={};
	
    fetch(`https://cdn.statically.io/gh/ONSvisual/Charts/main/${c}/config.js`)
    .then(res=>res.text())
    .then(txt=>VB.Templates[c].config=txt)

    fetch(`https://cdn.statically.io/gh/ONSvisual/Charts/main/${c}/script.js`)
    .then(res=>res.text())
    .then(txt=>VB.Templates[c].script=txt)


    fetch(`https://cdn.statically.io/gh/ONSvisual/Charts/main/${c}/chart.css`)
    .then(res=>res.text())
    .then(txt=>VB.Templates[c].css=txt)    
   
    fetch(`https://cdn.statically.io/gh/ONSvisual/Charts/main/${c}/data.csv`)
    .then(res=>res.text())
    .then(txt=>VB.Templates[c].data=txt)    

    fetch(`https://cdn.statically.io/gh/ONSvisual/Charts/main/${c}/comparison.csv`)
    .then(res=>res.text())
    .then(txt=>txt[0]!="<"?VB.Templates[c].comparison=txt:VB.Templates[c].comparison=null)    

	VB=VB
}
	
	
	
$: localStorage.VB=JSON.stringify(VB)

</script>
<svelte:head>
<script id="config_js"></script>
</svelte:head>
<h1>Hello {name}!</h1>
<button on:click={()=>document.querySelector("#config").text=`alert('hi')`}>Say Hello!</button>
*/